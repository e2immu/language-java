/* Generated by: CongoCC Parser Generator. JavaParser.java  */
package org.parsers.java;

import java.io.IOException;
import java.io.PrintStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.charset.Charset;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.ListIterator;
import java.util.concurrent.CancellationException;
import org.parsers.java.Token.TokenType;
import static org.parsers.java.Token.TokenType.*;
import org.parsers.java.ast.ModularCompilationUnit;
import org.parsers.java.ast.ModuleDirective;
import org.parsers.java.ast.RequiresDirective;
import org.parsers.java.ast.ExportsDirective;
import org.parsers.java.ast.OpensDirective;
import org.parsers.java.ast.UsesDirective;
import org.parsers.java.ast.ProvidesDirective;
import org.parsers.java.ast.CompilationUnit;
import org.parsers.java.ast.PackageDeclaration;
import org.parsers.java.ast.ImportDeclaration;
import org.parsers.java.ast.Modifiers;
import org.parsers.java.ast.EmptyDeclaration;
import org.parsers.java.ast.ClassDeclaration;
import org.parsers.java.ast.InterfaceDeclaration;
import org.parsers.java.ast.PermitsList;
import org.parsers.java.ast.ExtendsList;
import org.parsers.java.ast.ImplementsList;
import org.parsers.java.ast.EnumDeclaration;
import org.parsers.java.ast.EnumBody;
import org.parsers.java.ast.RecordDeclaration;
import org.parsers.java.ast.RecordHeader;
import org.parsers.java.ast.RecordComponent;
import org.parsers.java.ast.RecordBody;
import org.parsers.java.ast.CompactConstructorDeclaration;
import org.parsers.java.ast.EnumConstant;
import org.parsers.java.ast.TypeParameters;
import org.parsers.java.ast.TypeParameter;
import org.parsers.java.ast.TypeBound;
import org.parsers.java.ast.ClassOrInterfaceBody;
import org.parsers.java.ast.FieldDeclaration;
import org.parsers.java.ast.VariableDeclarator;
import org.parsers.java.ast.VariableDeclaratorId;
import org.parsers.java.ast.ArrayInitializer;
import org.parsers.java.ast.MethodDeclaration;
import org.parsers.java.ast.FormalParameters;
import org.parsers.java.ast.FormalParameter;
import org.parsers.java.ast.ConstructorDeclaration;
import org.parsers.java.ast.ExplicitConstructorInvocation;
import org.parsers.java.ast.Initializer;
import org.parsers.java.ast.ReferenceType;
import org.parsers.java.ast.ObjectType;
import org.parsers.java.ast.DiamondOperator;
import org.parsers.java.ast.TypeArguments;
import org.parsers.java.ast.TypeArgument;
import org.parsers.java.ast.WildcardBounds;
import org.parsers.java.ast.PrimitiveType;
import org.parsers.java.ast.PrimitiveArrayType;
import org.parsers.java.ast.ReturnType;
import org.parsers.java.ast.Name;
import org.parsers.java.ast.ThrowsList;
import org.parsers.java.ast.Expression;
import org.parsers.java.ast.AssignmentExpression;
import org.parsers.java.ast.TernaryExpression;
import org.parsers.java.ast.ConditionalOrExpression;
import org.parsers.java.ast.ConditionalAndExpression;
import org.parsers.java.ast.InclusiveOrExpression;
import org.parsers.java.ast.ExclusiveOrExpression;
import org.parsers.java.ast.AndExpression;
import org.parsers.java.ast.EqualityExpression;
import org.parsers.java.ast.InstanceOfExpression;
import org.parsers.java.ast.RelationalExpression;
import org.parsers.java.ast.ShiftExpression;
import org.parsers.java.ast.AdditiveExpression;
import org.parsers.java.ast.MultiplicativeExpression;
import org.parsers.java.ast.UnaryExpression;
import org.parsers.java.ast.PreIncrementExpression;
import org.parsers.java.ast.PreDecrementExpression;
import org.parsers.java.ast.UnaryExpressionNotPlusMinus;
import org.parsers.java.ast.PostfixExpression;
import org.parsers.java.ast.SwitchExpression;
import org.parsers.java.ast.CastExpression;
import org.parsers.java.ast.ObjectCastExpression;
import org.parsers.java.ast.LiteralExpression;
import org.parsers.java.ast.DotThis;
import org.parsers.java.ast.DotSuper;
import org.parsers.java.ast.DotNew;
import org.parsers.java.ast.ArrayAccess;
import org.parsers.java.ast.DotName;
import org.parsers.java.ast.MethodReference;
import org.parsers.java.ast.MethodCall;
import org.parsers.java.ast.Parentheses;
import org.parsers.java.ast.ClassLiteral;
import org.parsers.java.ast.InvocationArguments;
import org.parsers.java.ast.AllocationExpression;
import org.parsers.java.ast.ArrayDimsAndInits;
import org.parsers.java.ast.Label;
import org.parsers.java.ast.LabeledStatement;
import org.parsers.java.ast.AssertStatement;
import org.parsers.java.ast.CodeBlock;
import org.parsers.java.ast.LocalVariableDeclaration;
import org.parsers.java.ast.NoVarDeclaration;
import org.parsers.java.ast.VarDeclaration;
import org.parsers.java.ast.EmptyStatement;
import org.parsers.java.ast.StatementExpression;
import org.parsers.java.ast.ExpressionStatement;
import org.parsers.java.ast.CasePattern;
import org.parsers.java.ast.RecordPattern;
import org.parsers.java.ast.WhenClause;
import org.parsers.java.ast.SwitchStatement;
import org.parsers.java.ast.ClassicCaseStatement;
import org.parsers.java.ast.NewSwitchLabel;
import org.parsers.java.ast.ClassicSwitchLabel;
import org.parsers.java.ast.NewCaseStatement;
import org.parsers.java.ast.IfStatement;
import org.parsers.java.ast.WhileStatement;
import org.parsers.java.ast.DoStatement;
import org.parsers.java.ast.BasicForStatement;
import org.parsers.java.ast.EnhancedForStatement;
import org.parsers.java.ast.BreakStatement;
import org.parsers.java.ast.YieldStatement;
import org.parsers.java.ast.ContinueStatement;
import org.parsers.java.ast.ReturnStatement;
import org.parsers.java.ast.ThrowStatement;
import org.parsers.java.ast.SynchronizedStatement;
import org.parsers.java.ast.TryStatement;
import org.parsers.java.ast.ResourcesInTryBlock;
import org.parsers.java.ast.CatchBlock;
import org.parsers.java.ast.FinallyBlock;
import org.parsers.java.ast.NormalAnnotation;
import org.parsers.java.ast.MarkerAnnotation;
import org.parsers.java.ast.SingleMemberAnnotation;
import org.parsers.java.ast.MemberValuePairs;
import org.parsers.java.ast.MemberValuePair;
import org.parsers.java.ast.MemberValue;
import org.parsers.java.ast.MemberValueArrayInitializer;
import org.parsers.java.ast.AnnotationTypeDeclaration;
import org.parsers.java.ast.AnnotationTypeBody;
import org.parsers.java.ast.AnnotationMethodDeclaration;
import org.parsers.java.ast.AnnotationTypeMemberDeclaration;
import org.parsers.java.ast.DefaultValue;
import org.parsers.java.ast.LambdaExpression;
import org.parsers.java.ast.LambdaLHS;
import org.parsers.java.ast.LambdaParameters;
import org.parsers.java.ast.LambdaParameter;


public class JavaParser {
    // Used to hold the set of modifiers that is permissible
    // at a given point in the parse. If this is null,
    // we are in some permissive mode where we accept any
    // modifiers.
    private EnumSet<TokenType> permissibleModifiers;
    static final int UNLIMITED = Integer.MAX_VALUE;
    private final Token DUMMY_START_TOKEN = new Token();
    // The last token successfully "consumed"
    Token lastConsumedToken = DUMMY_START_TOKEN;
    private TokenType nextTokenType;
    // Normally null when parsing, populated when doing lookahead
    private Token currentLookaheadToken;
    private int remainingLookahead;
    private boolean hitFailure;
    private boolean passedPredicate;
    private int passedPredicateThreshold = -1;
    private String currentlyParsedProduction;
    private String currentLookaheadProduction;
    private int lookaheadRoutineNesting;
    private boolean cancelled;

    public void cancel() {
        cancelled = true;
    }

    public boolean isCancelled() {
        return cancelled;
    }

    public boolean getLegacyGlitchyLookahead() {
        return false;
    }

    /** Generated Lexer. */
    private JavaLexer token_source;

    public void setInputSource(String inputSource) {
        token_source.setInputSource(inputSource);
    }

    String getInputSource() {
        return token_source.getInputSource();
    }

    //=================================
    // Generated constructors
    //=================================
    public JavaParser(String inputSource, CharSequence content) {
        this(new JavaLexer(inputSource, content));
    }

    public JavaParser(CharSequence content) {
        this("input", content);
    }

    /**
    * @param inputSource just the name of the input source (typically the filename) that
    * will be used in error messages and so on.
    * @param path The location (typically the filename) from which to get the input to parse
    */
    public JavaParser(String inputSource, Path path) throws IOException {
        this(inputSource, TokenSource.stringFromBytes(Files.readAllBytes(path)));
    }

    public JavaParser(String inputSource, Path path, Charset charset) throws IOException {
        this(inputSource, TokenSource.stringFromBytes(Files.readAllBytes(path), charset));
    }

    /**
    * @param path The location (typically the filename) from which to get the input to parse
    */
    public JavaParser(Path path) throws IOException {
        this(path.toString(), path);
    }

    /** Constructor with user supplied Lexer. */
    public JavaParser(JavaLexer lexer) {
        token_source = lexer;
        lastConsumedToken.setTokenSource(lexer);
    }

    /**
    * Set the starting line/column for location reporting.
    * By default, this is 1,1.
    */
    public void setStartingPos(int startingLine, int startingColumn) {
        token_source.setStartingPos(startingLine, startingColumn);
    }

    // If the next token is cached, it returns that
    // Otherwise, it goes to the token_source, i.e. the Lexer.
    private Token nextToken(final Token tok) {
        Token result = token_source.getNextToken(tok);
        while (result.isUnparsed()) {
            result = token_source.getNextToken(result);
        }
        nextTokenType = null;
        return result;
    }

    /**
    * @return the next Token off the stream. This is the same as #getToken(1)
    */
    public final Token getNextToken() {
        return getToken(1);
    }

    /**
    * @param index how many tokens to look ahead
    * @return the specific regular (i.e. parsed) Token index ahead/behind in the stream.
    * If we are in a lookahead, it looks ahead from the currentLookaheadToken
    * Otherwise, it is the lastConsumedToken. If you pass in a negative
    * number it goes backward.
    */
    public final Token getToken(final int index) {
        Token t = currentLookaheadToken == null ? lastConsumedToken : currentLookaheadToken;
        for (int i = 0; i < index; i++) {
            t = nextToken(t);
        }
        for (int i = 0; i > index; i--) {
            t = t.getPrevious();
            if (t == null) break;
        }
        return t;
    }

    private String tokenImage(int n) {
        Token t = getToken(n);
        return t == null ? null : t.toString();
    }

    private TokenType getTokenType(int n) {
        Token t = getToken(n);
        return t == null ? null : t.getType();
    }

    private boolean checkNextTokenImage(String img, String...additionalImages) {
        String nextImage = getToken(1).toString();
        if (nextImage.equals(img)) return true;
        for (String image : additionalImages) {
            if (nextImage.equals(image)) return true;
        }
        return false;
    }

    private TokenType nextTokenType() {
        if (nextTokenType == null) {
            nextTokenType = nextToken(lastConsumedToken).getType();
        }
        return nextTokenType;
    }

    boolean activateTokenTypes(TokenType...types) {
        if (token_source.activeTokenTypes == null) return false;
        boolean result = false;
        for (TokenType tt : types) {
            result |= token_source.activeTokenTypes.add(tt);
        }
        if (result) {
            token_source.reset(getToken(0));
            nextTokenType = null;
        }
        return result;
    }

    boolean deactivateTokenTypes(TokenType...types) {
        boolean result = false;
        if (token_source.activeTokenTypes == null) {
            token_source.activeTokenTypes = EnumSet.allOf(TokenType.class);
        }
        for (TokenType tt : types) {
            result |= token_source.activeTokenTypes.remove(tt);
        }
        if (result) {
            token_source.reset(getToken(0));
            nextTokenType = null;
        }
        return result;
    }

    /*
    * This method generalizes the failure of an assertion, i.e. the routine
    * works both when in lookahead and in parsing. If the current lookahead
    * token is null, then we are not in a lookahead, i.e. we are parsing, so
    * it just throws the exception. If we are in a lookahead routine, we set
    * the hitFailure flag to true, so that the lookahead routine we're in will
    * fail at the first opportunity.
    */
    private void fail(String message, Token token) {
        if (currentLookaheadToken == null) {
            if (message == null) message = "";
            throw new ParseException(message, token, parsingStack);
        }
        hitFailure = true;
    }

    private static final HashMap<TokenType[], EnumSet<TokenType>> enumSetCache = new HashMap<>();

    private static EnumSet<TokenType> tokenTypeSet(TokenType first, TokenType...rest) {
        TokenType[] key = new TokenType[1 + rest.length];
        key[0] = first;
        if (rest.length > 0) {
            System.arraycopy(rest, 0, key, 1, rest.length);
        }
        Arrays.sort(key);
        if (enumSetCache.containsKey(key)) {
            return enumSetCache.get(key);
        }
        EnumSet<TokenType> result = (rest.length == 0) ? EnumSet.of(first) : EnumSet.of(first, rest);
        enumSetCache.put(key, result);
        return result;
    }

    /**
    * Are we in the production of the given name, either scanning ahead or parsing?
    */
    private boolean isInProduction(String productionName, String...prods) {
        if (currentlyParsedProduction != null) {
            if (currentlyParsedProduction.equals(productionName)) return true;
            for (String name : prods) {
                if (currentlyParsedProduction.equals(name)) return true;
            }
        }
        if (currentLookaheadProduction != null) {
            if (currentLookaheadProduction.equals(productionName)) return true;
            for (String name : prods) {
                if (currentLookaheadProduction.equals(name)) return true;
            }
        }
        Iterator<NonTerminalCall> it = stackIteratorBackward();
        while (it.hasNext()) {
            NonTerminalCall ntc = it.next();
            if (ntc.productionName.equals(productionName)) {
                return true;
            }
            for (String name : prods) {
                if (ntc.productionName.equals(name)) {
                    return true;
                }
            }
        }
        return false;
    }

    // Java.ccc:32:1
    final public Node Root() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Root";
        // Code for BNFProduction specified at Java.ccc:32:1
        // Code for ExpansionChoice specified at Java.ccc:33:4
        if (scan$Java_ccc$33$4()) {
            // Code for NonTerminal specified at Java.ccc:33:4
            pushOntoCallStack("Root", "Java.ccc", 33, 4);
            try {
                ModularCompilationUnit();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at Java.ccc:33:27
            return peekNode();
        } else {
            // Code for NonTerminal specified at Java.ccc:35:4
            pushOntoCallStack("Root", "Java.ccc", 35, 4);
            try {
                CompilationUnit();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at Java.ccc:35:20
            return peekNode();
        }
    }

    // Java.ccc:38:1
    final public void ModularCompilationUnit() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ModularCompilationUnit";
        // Code for BNFProduction specified at Java.ccc:38:1
        ModularCompilationUnit thisProduction = null;
        if (buildTree) {
            thisProduction = new ModularCompilationUnit();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ZeroOrMore specified at Java.ccc:39:4
            while (true) {
                if (!(nextTokenType() == _IMPORT)) break;
                // Code for NonTerminal specified at Java.ccc:39:5
                pushOntoCallStack("ModularCompilationUnit", "Java.ccc", 39, 5);
                try {
                    ImportDeclaration();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrMore specified at Java.ccc:40:4
            while (true) {
                if (!(scan$Java_ccc$40$5())) break;
                // Code for NonTerminal specified at Java.ccc:40:5
                pushOntoCallStack("ModularCompilationUnit", "Java.ccc", 40, 5);
                try {
                    Annotation();
                } finally {
                    popCallStack();
                }
            }
            // Code for Assertion specified at Java.ccc:41:4
            EnumSet<TokenType> previousActives36 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged37 = false;
            somethingChanged37 = activateTokenTypes(OPEN, MODULE);
            try {
                // Code for ZeroOrOne specified at Java.ccc:45:6
                if (nextTokenType() == OPEN) {
                    // Code for Terminal specified at Java.ccc:45:7
                    consumeToken(OPEN);
                }
                // Code for Terminal specified at Java.ccc:46:6
                consumeToken(MODULE);
            } finally {
                token_source.activeTokenTypes = previousActives36;
                if (somethingChanged37) {
                    token_source.reset(lastConsumedToken);
                    nextTokenType = null;
                }
            }
            // Code for NonTerminal specified at Java.ccc:48:4
            pushOntoCallStack("ModularCompilationUnit", "Java.ccc", 48, 4);
            try {
                Name();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:49:4
            consumeToken(LBRACE);
            // Code for ZeroOrMore specified at Java.ccc:50:4
            while (true) {
                if (!(scan$Java_ccc$50$5())) break;
                // Code for NonTerminal specified at Java.ccc:50:25
                pushOntoCallStack("ModularCompilationUnit", "Java.ccc", 50, 25);
                try {
                    ModuleDirective();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:51:4
            consumeToken(RBRACE);
            // Code for Terminal specified at Java.ccc:52:4
            consumeToken(EOF);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> ModuleDirective_FIRST_SET = tokenTypeSet(EXPORTS, OPENS, PROVIDES, REQUIRES, USES);

    // Java.ccc:55:1
    final public void ModuleDirective() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ModuleDirective";
        // Code for BNFProduction specified at Java.ccc:55:1
        ModuleDirective thisProduction = null;
        if (buildTree) {
            thisProduction = new ModuleDirective();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at Java.ccc:56:4
            if (scan$Java_ccc$56$4()) {
                // Code for NonTerminal specified at Java.ccc:56:4
                pushOntoCallStack("ModuleDirective", "Java.ccc", 56, 4);
                try {
                    RequiresDirective();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$58$4()) {
                // Code for NonTerminal specified at Java.ccc:58:4
                pushOntoCallStack("ModuleDirective", "Java.ccc", 58, 4);
                try {
                    ExportsDirective();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$60$4()) {
                // Code for NonTerminal specified at Java.ccc:60:4
                pushOntoCallStack("ModuleDirective", "Java.ccc", 60, 4);
                try {
                    OpensDirective();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$62$4()) {
                // Code for NonTerminal specified at Java.ccc:62:4
                pushOntoCallStack("ModuleDirective", "Java.ccc", 62, 4);
                try {
                    UsesDirective();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$64$4()) {
                // Code for NonTerminal specified at Java.ccc:64:4
                pushOntoCallStack("ModuleDirective", "Java.ccc", 64, 4);
                try {
                    ProvidesDirective();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("ModuleDirective", "Java.ccc", 56, 4);
                throw new ParseException(getToken(1), ModuleDirective_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:67:1
    final public void RequiresDirective() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "RequiresDirective";
        // Code for BNFProduction specified at Java.ccc:67:1
        RequiresDirective thisProduction = null;
        if (buildTree) {
            thisProduction = new RequiresDirective();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            EnumSet<TokenType> previousActives10 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged11 = false;
            somethingChanged11 = activateTokenTypes(REQUIRES, TRANSITIVE);
            try {
                // Code for Terminal specified at Java.ccc:68:42
                consumeToken(REQUIRES);
                // Code for ZeroOrOne specified at Java.ccc:68:53
                // Code for ExpansionChoice specified at Java.ccc:68:54
                if (nextTokenType() == TRANSITIVE) {
                    // Code for Terminal specified at Java.ccc:68:54
                    consumeToken(TRANSITIVE);
                } else if (nextTokenType() == STATIC) {
                    // Code for Terminal specified at Java.ccc:68:67
                    consumeToken(STATIC);
                }
            } finally {
                token_source.activeTokenTypes = previousActives10;
                if (somethingChanged11) {
                    token_source.reset(lastConsumedToken);
                    nextTokenType = null;
                }
            }
            // Code for NonTerminal specified at Java.ccc:69:4
            pushOntoCallStack("RequiresDirective", "Java.ccc", 69, 4);
            try {
                Name();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:70:4
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:73:1
    final public void ExportsDirective() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ExportsDirective";
        // Code for BNFProduction specified at Java.ccc:73:1
        ExportsDirective thisProduction = null;
        if (buildTree) {
            thisProduction = new ExportsDirective();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            EnumSet<TokenType> previousActives10 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged11 = false;
            somethingChanged11 = activateTokenTypes(EXPORTS);
            try {
                // Code for Terminal specified at Java.ccc:74:29
                consumeToken(EXPORTS);
            } finally {
                token_source.activeTokenTypes = previousActives10;
                if (somethingChanged11) {
                    token_source.reset(lastConsumedToken);
                    nextTokenType = null;
                }
            }
            // Code for NonTerminal specified at Java.ccc:75:4
            pushOntoCallStack("ExportsDirective", "Java.ccc", 75, 4);
            try {
                Name();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:76:4
            if (scan$Java_ccc$77$6()) {
                EnumSet<TokenType> previousActives35 = EnumSet.copyOf(token_source.activeTokenTypes);
                boolean somethingChanged36 = false;
                somethingChanged36 = activateTokenTypes(TO);
                try {
                    // Code for Terminal specified at Java.ccc:77:26
                    consumeToken(TO);
                } finally {
                    token_source.activeTokenTypes = previousActives35;
                    if (somethingChanged36) {
                        token_source.reset(lastConsumedToken);
                        nextTokenType = null;
                    }
                }
                // Code for NonTerminal specified at Java.ccc:78:6
                pushOntoCallStack("ExportsDirective", "Java.ccc", 78, 6);
                try {
                    Name();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at Java.ccc:78:11
                while (true) {
                    if (!(nextTokenType() == COMMA)) break;
                    // Code for Terminal specified at Java.ccc:78:12
                    consumeToken(COMMA);
                    // Code for NonTerminal specified at Java.ccc:78:20
                    pushOntoCallStack("ExportsDirective", "Java.ccc", 78, 20);
                    try {
                        Name();
                    } finally {
                        popCallStack();
                    }
                }
            }
            // Code for Terminal specified at Java.ccc:80:4
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:83:1
    final public void OpensDirective() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "OpensDirective";
        // Code for BNFProduction specified at Java.ccc:83:1
        OpensDirective thisProduction = null;
        if (buildTree) {
            thisProduction = new OpensDirective();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            EnumSet<TokenType> previousActives10 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged11 = false;
            somethingChanged11 = activateTokenTypes(OPENS);
            try {
                // Code for Terminal specified at Java.ccc:84:27
                consumeToken(OPENS);
            } finally {
                token_source.activeTokenTypes = previousActives10;
                if (somethingChanged11) {
                    token_source.reset(lastConsumedToken);
                    nextTokenType = null;
                }
            }
            // Code for NonTerminal specified at Java.ccc:85:4
            pushOntoCallStack("OpensDirective", "Java.ccc", 85, 4);
            try {
                Name();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:86:4
            if (scan$Java_ccc$87$6()) {
                EnumSet<TokenType> previousActives35 = EnumSet.copyOf(token_source.activeTokenTypes);
                boolean somethingChanged36 = false;
                somethingChanged36 = activateTokenTypes(TO);
                try {
                    // Code for Terminal specified at Java.ccc:87:26
                    consumeToken(TO);
                } finally {
                    token_source.activeTokenTypes = previousActives35;
                    if (somethingChanged36) {
                        token_source.reset(lastConsumedToken);
                        nextTokenType = null;
                    }
                }
                // Code for NonTerminal specified at Java.ccc:88:6
                pushOntoCallStack("OpensDirective", "Java.ccc", 88, 6);
                try {
                    Name();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at Java.ccc:88:11
                while (true) {
                    if (!(nextTokenType() == COMMA)) break;
                    // Code for Terminal specified at Java.ccc:88:12
                    consumeToken(COMMA);
                    // Code for NonTerminal specified at Java.ccc:88:20
                    pushOntoCallStack("OpensDirective", "Java.ccc", 88, 20);
                    try {
                        Name();
                    } finally {
                        popCallStack();
                    }
                }
            }
            // Code for Terminal specified at Java.ccc:90:4
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:93:1
    final public void UsesDirective() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "UsesDirective";
        // Code for BNFProduction specified at Java.ccc:93:1
        UsesDirective thisProduction = null;
        if (buildTree) {
            thisProduction = new UsesDirective();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            EnumSet<TokenType> previousActives10 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged11 = false;
            somethingChanged11 = activateTokenTypes(USES);
            try {
                // Code for Terminal specified at Java.ccc:94:27
                consumeToken(USES);
            } finally {
                token_source.activeTokenTypes = previousActives10;
                if (somethingChanged11) {
                    token_source.reset(lastConsumedToken);
                    nextTokenType = null;
                }
            }
            // Code for NonTerminal specified at Java.ccc:95:5
            pushOntoCallStack("UsesDirective", "Java.ccc", 95, 5);
            try {
                Name();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:96:5
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:99:1
    final public void ProvidesDirective() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ProvidesDirective";
        // Code for BNFProduction specified at Java.ccc:99:1
        ProvidesDirective thisProduction = null;
        if (buildTree) {
            thisProduction = new ProvidesDirective();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            EnumSet<TokenType> previousActives10 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged11 = false;
            somethingChanged11 = activateTokenTypes(PROVIDES);
            try {
                // Code for Terminal specified at Java.ccc:100:30
                consumeToken(PROVIDES);
            } finally {
                token_source.activeTokenTypes = previousActives10;
                if (somethingChanged11) {
                    token_source.reset(lastConsumedToken);
                    nextTokenType = null;
                }
            }
            // Code for NonTerminal specified at Java.ccc:101:5
            pushOntoCallStack("ProvidesDirective", "Java.ccc", 101, 5);
            try {
                Name();
            } finally {
                popCallStack();
            }
            EnumSet<TokenType> previousActives27 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged28 = false;
            somethingChanged28 = activateTokenTypes(WITH);
            try {
                // Code for Terminal specified at Java.ccc:102:27
                consumeToken(WITH);
            } finally {
                token_source.activeTokenTypes = previousActives27;
                if (somethingChanged28) {
                    token_source.reset(lastConsumedToken);
                    nextTokenType = null;
                }
            }
            // Code for NonTerminal specified at Java.ccc:103:5
            pushOntoCallStack("ProvidesDirective", "Java.ccc", 103, 5);
            try {
                Name();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:104:5
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for Terminal specified at Java.ccc:104:6
                consumeToken(COMMA);
                // Code for NonTerminal specified at Java.ccc:104:14
                pushOntoCallStack("ProvidesDirective", "Java.ccc", 104, 14);
                try {
                    Name();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:105:5
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:108:1
    final public CompilationUnit CompilationUnit() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "CompilationUnit";
        // Code for BNFProduction specified at Java.ccc:108:1
        CompilationUnit thisProduction = null;
        if (buildTree) {
            thisProduction = new CompilationUnit();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ZeroOrOne specified at Java.ccc:109:3
            if (scan$Java_ccc$109$5()) {
                // Code for NonTerminal specified at Java.ccc:109:5
                pushOntoCallStack("CompilationUnit", "Java.ccc", 109, 5);
                try {
                    PackageDeclaration();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrMore specified at Java.ccc:110:3
            while (true) {
                if (!(nextTokenType() == _IMPORT)) break;
                // Code for NonTerminal specified at Java.ccc:110:5
                pushOntoCallStack("CompilationUnit", "Java.ccc", 110, 5);
                try {
                    ImportDeclaration();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrMore specified at Java.ccc:111:3
            while (true) {
                if (!(scan$Java_ccc$111$5())) break;
                // Code for NonTerminal specified at Java.ccc:111:5
                pushOntoCallStack("CompilationUnit", "Java.ccc", 111, 5);
                try {
                    TypeDeclaration();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Java.ccc:112:3
            if (scan$Java_ccc$114$5()) {
                // Code for Assertion specified at Java.ccc:114:5
                // Code for Terminal specified at Java.ccc:115:5
                consumeToken(EOF);
            }
            // Code for CodeBlock specified at Java.ccc:117:3
            return thisProduction;
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:129:1
    final public void PackageDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "PackageDeclaration";
        // Code for BNFProduction specified at Java.ccc:129:1
        PackageDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new PackageDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ZeroOrMore specified at Java.ccc:130:5
            while (true) {
                if (!(scan$Java_ccc$130$6())) break;
                // Code for NonTerminal specified at Java.ccc:130:6
                pushOntoCallStack("PackageDeclaration", "Java.ccc", 130, 6);
                try {
                    Annotation();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:131:5
            consumeToken(PACKAGE);
            // Code for NonTerminal specified at Java.ccc:133:5
            pushOntoCallStack("PackageDeclaration", "Java.ccc", 133, 5);
            try {
                Name();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:134:5
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:144:1
    final public void ImportDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ImportDeclaration";
        // Code for BNFProduction specified at Java.ccc:144:1
        ImportDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new ImportDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:144:21
            consumeToken(_IMPORT);
            // Code for ZeroOrOne specified at Java.ccc:144:31
            // Code for ExpansionChoice specified at Java.ccc:144:33
            if (nextTokenType() == STATIC) {
                // Code for Terminal specified at Java.ccc:144:33
                consumeToken(STATIC);
            } else if (nextTokenType() == MODULE) {
                // Code for Terminal specified at Java.ccc:144:44
                consumeToken(MODULE);
            }
            // Code for NonTerminal specified at Java.ccc:144:54
            pushOntoCallStack("ImportDeclaration", "Java.ccc", 144, 54);
            try {
                Name();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:144:59
            if (nextTokenType() == DOT) {
                // Code for Terminal specified at Java.ccc:144:61
                consumeToken(DOT);
                // Code for Terminal specified at Java.ccc:144:67
                consumeToken(STAR);
            }
            // Code for Terminal specified at Java.ccc:144:76
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:146:1
    final public void Modifiers() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Modifiers";
        // Code for BNFProduction specified at Java.ccc:146:1
        Modifiers thisProduction = null;
        if (buildTree) {
            thisProduction = new Modifiers();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ZeroOrMore specified at Java.ccc:147:2
            while (true) {
                // Code for ExpansionChoice specified at Java.ccc:148:3
                if (scan$Java_ccc$148$3()) {
                    // Code for Assertion specified at Java.ccc:148:3
                    if (nextTokenType() == PUBLIC) {
                        // Code for Terminal specified at Java.ccc:151:4
                        consumeToken(PUBLIC);
                    } else if (nextTokenType() == STATIC) {
                        // Code for Terminal specified at Java.ccc:151:13
                        consumeToken(STATIC);
                    } else if (nextTokenType() == PROTECTED) {
                        // Code for Terminal specified at Java.ccc:151:22
                        consumeToken(PROTECTED);
                    } else if (nextTokenType() == PRIVATE) {
                        // Code for Terminal specified at Java.ccc:151:34
                        consumeToken(PRIVATE);
                    } else if (nextTokenType() == FINAL) {
                        // Code for Terminal specified at Java.ccc:151:45
                        consumeToken(FINAL);
                    } else if (nextTokenType() == ABSTRACT) {
                        // Code for Terminal specified at Java.ccc:151:53
                        consumeToken(ABSTRACT);
                    } else if (nextTokenType() == SYNCHRONIZED) {
                        // Code for Terminal specified at Java.ccc:152:5
                        consumeToken(SYNCHRONIZED);
                    } else if (nextTokenType() == NATIVE) {
                        // Code for Terminal specified at Java.ccc:152:20
                        consumeToken(NATIVE);
                    } else if (nextTokenType() == TRANSIENT) {
                        // Code for Terminal specified at Java.ccc:152:29
                        consumeToken(TRANSIENT);
                    } else if (nextTokenType() == VOLATILE) {
                        // Code for Terminal specified at Java.ccc:152:41
                        consumeToken(VOLATILE);
                    } else if (nextTokenType() == STRICTFP) {
                        // Code for Terminal specified at Java.ccc:152:52
                        consumeToken(STRICTFP);
                    } else if (nextTokenType() == _DEFAULT) {
                        // Code for Terminal specified at Java.ccc:153:5
                        consumeToken(_DEFAULT);
                    } else {
                        pushOntoCallStack("Modifiers", "Java.ccc", 151, 4);
                        throw new ParseException(getToken(1), first_set$Java_ccc$151$4, parsingStack);
                    }
                    // Code for CodeBlock specified at Java.ccc:154:3
                    if (permissibleModifiers != null) {
                        TokenType tt = getTokenType(0);
                        switch(tt) {
                            case ABSTRACT : 
                            case FINAL : 
                                permissibleModifiers.remove(ABSTRACT);
                                permissibleModifiers.remove(FINAL);
                                break;
                            case PRIVATE : 
                            case PROTECTED : 
                            case PUBLIC : 
                                permissibleModifiers.remove(PRIVATE);
                                permissibleModifiers.remove(PROTECTED);
                                permissibleModifiers.remove(PUBLIC);
                                break;
                            default : 
                                permissibleModifiers.remove(lastConsumedToken.getType());
                        }
                    }
                } else if (scan$Java_ccc$176$3()) {
                    // Code for Assertion specified at Java.ccc:176:3
                    EnumSet<TokenType> previousActives135 = EnumSet.copyOf(token_source.activeTokenTypes);
                    boolean somethingChanged136 = false;
                    somethingChanged136 = activateTokenTypes(SEALED, NON_SEALED);
                    try {
                        if (nextTokenType() == SEALED) {
                            // Code for Terminal specified at Java.ccc:190:39
                            consumeToken(SEALED);
                        } else if (nextTokenType() == NON_SEALED) {
                            // Code for Terminal specified at Java.ccc:190:48
                            consumeToken(NON_SEALED);
                        } else {
                            pushOntoCallStack("Modifiers", "Java.ccc", 190, 39);
                            throw new ParseException(getToken(1), first_set$Java_ccc$190$39, parsingStack);
                        }
                    } finally {
                        token_source.activeTokenTypes = previousActives135;
                        if (somethingChanged136) {
                            token_source.reset(lastConsumedToken);
                            nextTokenType = null;
                        }
                    }
                    // Code for CodeBlock specified at Java.ccc:191:3
                    if (permissibleModifiers != null) {
                        permissibleModifiers.remove(SEALED);
                        permissibleModifiers.remove(NON_SEALED);
                    }
                } else if (scan$Java_ccc$198$3()) {
                    // Code for NonTerminal specified at Java.ccc:198:3
                    pushOntoCallStack("Modifiers", "Java.ccc", 198, 3);
                    try {
                        Annotation();
                    } finally {
                        popCallStack();
                    }
                } else {
                    break;
                }
            }
            // Code for CodeBlock specified at Java.ccc:200:2
            permissibleModifiers = null;
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:211:1
    final public void TypeDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "TypeDeclaration";
        // Code for BNFProduction specified at Java.ccc:211:1
        if (nextTokenType() == SEMICOLON) {
            // Code for NonTerminal specified at Java.ccc:214:5
            pushOntoCallStack("TypeDeclaration", "Java.ccc", 214, 5);
            try {
                EmptyDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$216$5()) {
            // Code for NonTerminal specified at Java.ccc:216:5
            pushOntoCallStack("TypeDeclaration", "Java.ccc", 216, 5);
            try {
                AnnotationTypeDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$218$5()) {
            // Code for NonTerminal specified at Java.ccc:218:5
            pushOntoCallStack("TypeDeclaration", "Java.ccc", 218, 5);
            try {
                ClassDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$220$5()) {
            // Code for NonTerminal specified at Java.ccc:220:5
            pushOntoCallStack("TypeDeclaration", "Java.ccc", 220, 5);
            try {
                InterfaceDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$222$5()) {
            // Code for NonTerminal specified at Java.ccc:222:5
            pushOntoCallStack("TypeDeclaration", "Java.ccc", 222, 5);
            try {
                EnumDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$224$5()) {
            // Code for NonTerminal specified at Java.ccc:224:5
            pushOntoCallStack("TypeDeclaration", "Java.ccc", 224, 5);
            try {
                RecordDeclaration();
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("TypeDeclaration", "Java.ccc", 214, 5);
            throw new ParseException(getToken(1), first_set$Java_ccc$214$5, parsingStack);
        }
    }

    // Java.ccc:251:1
    final public void EmptyDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "EmptyDeclaration";
        // Code for BNFProduction specified at Java.ccc:251:1
        EmptyDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new EmptyDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:251:21
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:253:1
    final public void TypeIdentifier() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "TypeIdentifier";
        // Code for BNFProduction specified at Java.ccc:253:1
        // Code for Terminal specified at Java.ccc:254:4
        consumeToken(IDENTIFIER);
        // Code for CodeBlock specified at Java.ccc:255:4
        String temp = tokenImage(0);
        // Code for Assertion specified at Java.ccc:256:4
        if (!(!temp.equals("record") && !temp.equals("var") && !temp.equals("permits") && !temp.equals("sealed") && !temp.equals("yield"))) {
            fail("Assertion at: Java.ccc:256:4 failed. " + "Illegal type name " + temp, getToken(1));
        }
    }

    // Java.ccc:265:1
    final public void ClassDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ClassDeclaration";
        // Code for BNFProduction specified at Java.ccc:265:1
        ClassDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new ClassDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for CodeBlock specified at Java.ccc:266:3
            permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE, ABSTRACT, FINAL, STATIC, STRICTFP, SEALED, NON_SEALED);
            // Code for NonTerminal specified at Java.ccc:270:3
            pushOntoCallStack("ClassDeclaration", "Java.ccc", 270, 3);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:271:3
            consumeToken(CLASS);
            // Code for NonTerminal specified at Java.ccc:272:3
            pushOntoCallStack("ClassDeclaration", "Java.ccc", 272, 3);
            try {
                TypeIdentifier();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:273:3
            if (nextTokenType() == LT) {
                // Code for NonTerminal specified at Java.ccc:273:5
                pushOntoCallStack("ClassDeclaration", "Java.ccc", 273, 5);
                try {
                    TypeParameters();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Java.ccc:274:3
            if (nextTokenType() == EXTENDS) {
                // Code for NonTerminal specified at Java.ccc:274:5
                pushOntoCallStack("ClassDeclaration", "Java.ccc", 274, 5);
                try {
                    ExtendsList();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Java.ccc:275:3
            if (nextTokenType() == IMPLEMENTS) {
                // Code for NonTerminal specified at Java.ccc:275:5
                pushOntoCallStack("ClassDeclaration", "Java.ccc", 275, 5);
                try {
                    ImplementsList();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Java.ccc:276:3
            if (scan$Java_ccc$276$5()) {
                // Code for NonTerminal specified at Java.ccc:276:5
                pushOntoCallStack("ClassDeclaration", "Java.ccc", 276, 5);
                try {
                    PermitsList();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at Java.ccc:277:3
            pushOntoCallStack("ClassDeclaration", "Java.ccc", 277, 3);
            try {
                ClassOrInterfaceBody();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:280:1
    final public void InterfaceDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "InterfaceDeclaration";
        // Code for BNFProduction specified at Java.ccc:280:1
        InterfaceDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new InterfaceDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for CodeBlock specified at Java.ccc:281:3
            permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE, ABSTRACT, STATIC, STRICTFP, SEALED, NON_SEALED);
            // Code for NonTerminal specified at Java.ccc:285:3
            pushOntoCallStack("InterfaceDeclaration", "Java.ccc", 285, 3);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:286:3
            consumeToken(INTERFACE);
            // Code for NonTerminal specified at Java.ccc:287:3
            pushOntoCallStack("InterfaceDeclaration", "Java.ccc", 287, 3);
            try {
                TypeIdentifier();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:288:3
            if (nextTokenType() == LT) {
                // Code for NonTerminal specified at Java.ccc:288:5
                pushOntoCallStack("InterfaceDeclaration", "Java.ccc", 288, 5);
                try {
                    TypeParameters();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Java.ccc:289:3
            if (nextTokenType() == EXTENDS) {
                // Code for NonTerminal specified at Java.ccc:289:5
                pushOntoCallStack("InterfaceDeclaration", "Java.ccc", 289, 5);
                try {
                    ExtendsList();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Java.ccc:290:3
            if (scan$Java_ccc$290$5()) {
                // Code for NonTerminal specified at Java.ccc:290:5
                pushOntoCallStack("InterfaceDeclaration", "Java.ccc", 290, 5);
                try {
                    PermitsList();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at Java.ccc:291:3
            pushOntoCallStack("InterfaceDeclaration", "Java.ccc", 291, 3);
            try {
                ClassOrInterfaceBody();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:294:1
    final public void PermitsList() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "PermitsList";
        // Code for BNFProduction specified at Java.ccc:294:1
        PermitsList thisProduction = null;
        if (buildTree) {
            thisProduction = new PermitsList();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            if (nextTokenType() == PERMITS) {
                // Code for Terminal specified at Java.ccc:297:7
                consumeToken(PERMITS);
            } else if (nextTokenType() == IDENTIFIER) {
                // Code for Terminal specified at Java.ccc:299:7
                consumeToken(IDENTIFIER);
                // Code for CodeBlock specified at Java.ccc:300:7
                replaceTokenType(PERMITS);
            } else {
                pushOntoCallStack("PermitsList", "Java.ccc", 297, 7);
                throw new ParseException(getToken(1), first_set$Java_ccc$297$7, parsingStack);
            }
            // Code for NonTerminal specified at Java.ccc:304:4
            pushOntoCallStack("PermitsList", "Java.ccc", 304, 4);
            try {
                ObjectType();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:305:4
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for Terminal specified at Java.ccc:305:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at Java.ccc:305:13
                pushOntoCallStack("PermitsList", "Java.ccc", 305, 13);
                try {
                    ObjectType();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:308:1
    final public void ExtendsList() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ExtendsList";
        // Code for BNFProduction specified at Java.ccc:308:1
        ExtendsList thisProduction = null;
        if (buildTree) {
            thisProduction = new ExtendsList();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:309:4
            consumeToken(EXTENDS);
            // Code for NonTerminal specified at Java.ccc:310:4
            pushOntoCallStack("ExtendsList", "Java.ccc", 310, 4);
            try {
                ObjectType();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:311:4
            while (true) {
                if (!(scan$Java_ccc$312$6())) break;
                // Code for Terminal specified at Java.ccc:313:6
                consumeToken(COMMA);
                // Code for NonTerminal specified at Java.ccc:313:14
                pushOntoCallStack("ExtendsList", "Java.ccc", 313, 14);
                try {
                    ObjectType();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:325:1
    final public void ImplementsList() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ImplementsList";
        // Code for BNFProduction specified at Java.ccc:325:1
        ImplementsList thisProduction = null;
        if (buildTree) {
            thisProduction = new ImplementsList();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:326:4
            consumeToken(IMPLEMENTS);
            // Code for NonTerminal specified at Java.ccc:326:17
            pushOntoCallStack("ImplementsList", "Java.ccc", 326, 17);
            try {
                ObjectType();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:327:4
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for Terminal specified at Java.ccc:328:6
                consumeToken(COMMA);
                // Code for NonTerminal specified at Java.ccc:328:14
                pushOntoCallStack("ImplementsList", "Java.ccc", 328, 14);
                try {
                    ObjectType();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:333:1
    final public void EnumDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "EnumDeclaration";
        // Code for BNFProduction specified at Java.ccc:333:1
        EnumDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new EnumDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for CodeBlock specified at Java.ccc:334:4
            permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE, ABSTRACT, FINAL, STATIC, STRICTFP);
            // Code for NonTerminal specified at Java.ccc:337:4
            pushOntoCallStack("EnumDeclaration", "Java.ccc", 337, 4);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:338:4
            consumeToken(ENUM);
            // Code for NonTerminal specified at Java.ccc:339:4
            pushOntoCallStack("EnumDeclaration", "Java.ccc", 339, 4);
            try {
                TypeIdentifier();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:340:4
            if (nextTokenType() == IMPLEMENTS) {
                // Code for NonTerminal specified at Java.ccc:340:5
                pushOntoCallStack("EnumDeclaration", "Java.ccc", 340, 5);
                try {
                    ImplementsList();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at Java.ccc:341:4
            pushOntoCallStack("EnumDeclaration", "Java.ccc", 341, 4);
            try {
                EnumBody();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:344:1
    final public void EnumBody() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "EnumBody";
        // Code for BNFProduction specified at Java.ccc:344:1
        EnumBody thisProduction = null;
        if (buildTree) {
            thisProduction = new EnumBody();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:345:4
            consumeToken(LBRACE);
            // Code for ZeroOrOne specified at Java.ccc:346:4
            if (nextTokenType() == AT || nextTokenType == IDENTIFIER) {
                // Code for NonTerminal specified at Java.ccc:346:6
                pushOntoCallStack("EnumBody", "Java.ccc", 346, 6);
                try {
                    EnumConstant();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at Java.ccc:346:19
                while (true) {
                    if (!(scan$Java_ccc$346$21())) break;
                    // Code for Terminal specified at Java.ccc:346:28
                    consumeToken(COMMA);
                    // Code for NonTerminal specified at Java.ccc:346:36
                    pushOntoCallStack("EnumBody", "Java.ccc", 346, 36);
                    try {
                        EnumConstant();
                    } finally {
                        popCallStack();
                    }
                }
            }
            // Code for ZeroOrOne specified at Java.ccc:347:4
            if (nextTokenType() == COMMA) {
                // Code for Terminal specified at Java.ccc:347:6
                consumeToken(COMMA);
            }
            // Code for ZeroOrOne specified at Java.ccc:348:4
            if (nextTokenType() == SEMICOLON) {
                // Code for Terminal specified at Java.ccc:348:6
                consumeToken(SEMICOLON);
                // Code for ZeroOrMore specified at Java.ccc:348:18
                while (true) {
                    if (!(first_set$Java_ccc$348$20.contains(nextTokenType()))) break;
                    // Code for NonTerminal specified at Java.ccc:348:20
                    pushOntoCallStack("EnumBody", "Java.ccc", 348, 20);
                    try {
                        ClassOrInterfaceBodyDeclaration();
                    } finally {
                        popCallStack();
                    }
                }
            }
            // Code for Terminal specified at Java.ccc:349:4
            consumeToken(RBRACE);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:352:1
    final public void RecordDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "RecordDeclaration";
        // Code for BNFProduction specified at Java.ccc:352:1
        RecordDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new RecordDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for CodeBlock specified at Java.ccc:353:3
            permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE, ABSTRACT, FINAL, STATIC, STRICTFP);
            // Code for NonTerminal specified at Java.ccc:357:3
            pushOntoCallStack("RecordDeclaration", "Java.ccc", 357, 3);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for Assertion specified at Java.ccc:358:3
            if (nextTokenType() == RECORD) {
                // Code for Terminal specified at Java.ccc:361:5
                consumeToken(RECORD);
            } else if (nextTokenType() == IDENTIFIER) {
                // Code for Terminal specified at Java.ccc:363:5
                consumeToken(IDENTIFIER);
                // Code for CodeBlock specified at Java.ccc:364:5
                replaceTokenType(RECORD);
            } else {
                pushOntoCallStack("RecordDeclaration", "Java.ccc", 361, 5);
                throw new ParseException(getToken(1), first_set$Java_ccc$361$5, parsingStack);
            }
            // Code for NonTerminal specified at Java.ccc:368:3
            pushOntoCallStack("RecordDeclaration", "Java.ccc", 368, 3);
            try {
                TypeIdentifier();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:369:3
            if (nextTokenType() == LT) {
                // Code for NonTerminal specified at Java.ccc:369:4
                pushOntoCallStack("RecordDeclaration", "Java.ccc", 369, 4);
                try {
                    TypeParameters();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at Java.ccc:370:3
            pushOntoCallStack("RecordDeclaration", "Java.ccc", 370, 3);
            try {
                RecordHeader();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:371:3
            if (nextTokenType() == IMPLEMENTS) {
                // Code for NonTerminal specified at Java.ccc:371:4
                pushOntoCallStack("RecordDeclaration", "Java.ccc", 371, 4);
                try {
                    ImplementsList();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at Java.ccc:372:3
            pushOntoCallStack("RecordDeclaration", "Java.ccc", 372, 3);
            try {
                RecordBody();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:375:1
    final public void RecordHeader() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "RecordHeader";
        // Code for BNFProduction specified at Java.ccc:375:1
        RecordHeader thisProduction = null;
        if (buildTree) {
            thisProduction = new RecordHeader();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:376:4
            consumeToken(LPAREN);
            // Code for ZeroOrOne specified at Java.ccc:377:4
            if (first_set$Java_ccc$378$6.contains(nextTokenType())) {
                // Code for NonTerminal specified at Java.ccc:378:6
                pushOntoCallStack("RecordHeader", "Java.ccc", 378, 6);
                try {
                    RecordComponent();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at Java.ccc:379:6
                boolean sawVarArgs = getTokenType(- 1) == VAR_ARGS;
                // Code for ZeroOrMore specified at Java.ccc:380:6
                while (true) {
                    if (!(nextTokenType() == COMMA)) break;
                    // Code for Assertion specified at Java.ccc:381:7
                    if (!(!sawVarArgs)) {
                        fail("Assertion at: Java.ccc:381:7 failed. " + "The varargs (...) component must be the last one specified.", getToken(1));
                    }
                    // Code for Terminal specified at Java.ccc:382:7
                    consumeToken(COMMA);
                    // Code for NonTerminal specified at Java.ccc:382:15
                    pushOntoCallStack("RecordHeader", "Java.ccc", 382, 15);
                    try {
                        RecordComponent();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at Java.ccc:383:7
                    sawVarArgs = getTokenType(- 1) == VAR_ARGS;
                }
            }
            // Code for Terminal specified at Java.ccc:386:4
            consumeToken(RPAREN);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:389:1
    final public void RecordComponent() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "RecordComponent";
        // Code for BNFProduction specified at Java.ccc:389:1
        RecordComponent thisProduction = null;
        if (buildTree) {
            thisProduction = new RecordComponent();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ZeroOrMore specified at Java.ccc:390:4
            while (true) {
                if (!(scan$Java_ccc$390$5())) break;
                // Code for NonTerminal specified at Java.ccc:390:5
                pushOntoCallStack("RecordComponent", "Java.ccc", 390, 5);
                try {
                    Annotation();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at Java.ccc:390:18
            pushOntoCallStack("RecordComponent", "Java.ccc", 390, 18);
            try {
                Type();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:390:23
            if (nextTokenType() == VAR_ARGS || nextTokenType == AT) {
                // Code for ZeroOrMore specified at Java.ccc:390:24
                while (true) {
                    if (!(scan$Java_ccc$390$25())) break;
                    // Code for NonTerminal specified at Java.ccc:390:25
                    pushOntoCallStack("RecordComponent", "Java.ccc", 390, 25);
                    try {
                        Annotation();
                    } finally {
                        popCallStack();
                    }
                }
                // Code for Terminal specified at Java.ccc:390:38
                consumeToken(VAR_ARGS);
            }
            // Code for Terminal specified at Java.ccc:390:50
            consumeToken(IDENTIFIER);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:393:1
    final public void RecordBody() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "RecordBody";
        // Code for BNFProduction specified at Java.ccc:393:1
        RecordBody thisProduction = null;
        if (buildTree) {
            thisProduction = new RecordBody();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:394:3
            consumeToken(LBRACE);
            // Code for ZeroOrMore specified at Java.ccc:395:3
            while (true) {
                // Code for ExpansionChoice specified at Java.ccc:396:4
                if (scan$Java_ccc$396$4()) {
                    // Code for NonTerminal specified at Java.ccc:396:4
                    pushOntoCallStack("RecordBody", "Java.ccc", 396, 4);
                    try {
                        CompactConstructorDeclaration();
                    } finally {
                        popCallStack();
                    }
                } else if (first_set$Java_ccc$398$4.contains(nextTokenType())) {
                    // Code for NonTerminal specified at Java.ccc:398:4
                    pushOntoCallStack("RecordBody", "Java.ccc", 398, 4);
                    try {
                        ClassOrInterfaceBodyDeclaration();
                    } finally {
                        popCallStack();
                    }
                } else {
                    break;
                }
            }
            // Code for Terminal specified at Java.ccc:400:3
            consumeToken(RBRACE);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:403:1
    final public void CompactConstructorDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "CompactConstructorDeclaration";
        // Code for BNFProduction specified at Java.ccc:403:1
        CompactConstructorDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new CompactConstructorDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for CodeBlock specified at Java.ccc:404:3
            permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE);
            // Code for NonTerminal specified at Java.ccc:405:4
            pushOntoCallStack("CompactConstructorDeclaration", "Java.ccc", 405, 4);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:406:3
            pushOntoCallStack("CompactConstructorDeclaration", "Java.ccc", 406, 3);
            try {
                TypeIdentifier();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:407:3
            consumeToken(LBRACE);
            // Code for ZeroOrMore specified at Java.ccc:408:3
            while (true) {
                if (!(scan$Java_ccc$408$4())) break;
                // Code for NonTerminal specified at Java.ccc:408:54
                pushOntoCallStack("CompactConstructorDeclaration", "Java.ccc", 408, 54);
                try {
                    BlockStatement();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Java.ccc:409:3
            if (scan$Java_ccc$409$5()) {
                // Code for NonTerminal specified at Java.ccc:409:5
                pushOntoCallStack("CompactConstructorDeclaration", "Java.ccc", 409, 5);
                try {
                    ExplicitConstructorInvocation();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrMore specified at Java.ccc:410:3
            while (true) {
                if (!(scan$Java_ccc$410$5())) break;
                // Code for NonTerminal specified at Java.ccc:410:25
                pushOntoCallStack("CompactConstructorDeclaration", "Java.ccc", 410, 25);
                try {
                    BlockStatement();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:411:3
            consumeToken(RBRACE);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:416:1
    final public void EnumConstant() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "EnumConstant";
        // Code for BNFProduction specified at Java.ccc:416:1
        EnumConstant thisProduction = null;
        if (buildTree) {
            thisProduction = new EnumConstant();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ZeroOrMore specified at Java.ccc:417:3
            while (true) {
                if (!(scan$Java_ccc$417$4())) break;
                // Code for NonTerminal specified at Java.ccc:417:4
                pushOntoCallStack("EnumConstant", "Java.ccc", 417, 4);
                try {
                    Annotation();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:417:17
            consumeToken(IDENTIFIER);
            // Code for ZeroOrOne specified at Java.ccc:417:30
            if (nextTokenType() == LPAREN) {
                // Code for NonTerminal specified at Java.ccc:417:32
                pushOntoCallStack("EnumConstant", "Java.ccc", 417, 32);
                try {
                    InvocationArguments();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Java.ccc:417:54
            if (nextTokenType() == LBRACE) {
                // Code for NonTerminal specified at Java.ccc:417:56
                pushOntoCallStack("EnumConstant", "Java.ccc", 417, 56);
                try {
                    ClassOrInterfaceBody();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:420:1
    final public void TypeParameters() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "TypeParameters";
        // Code for BNFProduction specified at Java.ccc:420:1
        TypeParameters thisProduction = null;
        if (buildTree) {
            thisProduction = new TypeParameters();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:421:4
            consumeToken(LT);
            // Code for NonTerminal specified at Java.ccc:422:4
            pushOntoCallStack("TypeParameters", "Java.ccc", 422, 4);
            try {
                TypeParameter();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:422:18
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for Terminal specified at Java.ccc:422:20
                consumeToken(COMMA);
                // Code for NonTerminal specified at Java.ccc:422:28
                pushOntoCallStack("TypeParameters", "Java.ccc", 422, 28);
                try {
                    TypeParameter();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:423:4
            consumeToken(GT);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:434:1
    final public void TypeParameter() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "TypeParameter";
        // Code for BNFProduction specified at Java.ccc:434:1
        TypeParameter thisProduction = null;
        if (buildTree) {
            thisProduction = new TypeParameter();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ZeroOrMore specified at Java.ccc:434:16
            while (true) {
                if (!(scan$Java_ccc$434$17())) break;
                // Code for NonTerminal specified at Java.ccc:434:17
                pushOntoCallStack("TypeParameter", "Java.ccc", 434, 17);
                try {
                    Annotation();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at Java.ccc:434:30
            pushOntoCallStack("TypeParameter", "Java.ccc", 434, 30);
            try {
                TypeIdentifier();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:434:50
            if (nextTokenType() == EXTENDS) {
                // Code for NonTerminal specified at Java.ccc:434:51
                pushOntoCallStack("TypeParameter", "Java.ccc", 434, 51);
                try {
                    TypeBound();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:436:1
    final public void TypeBound() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "TypeBound";
        // Code for BNFProduction specified at Java.ccc:436:1
        TypeBound thisProduction = null;
        if (buildTree) {
            thisProduction = new TypeBound();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:437:4
            consumeToken(EXTENDS);
            // Code for NonTerminal specified at Java.ccc:437:14
            pushOntoCallStack("TypeBound", "Java.ccc", 437, 14);
            try {
                ObjectType();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:437:25
            while (true) {
                if (!(nextTokenType() == BIT_AND)) break;
                // Code for Terminal specified at Java.ccc:437:27
                consumeToken(BIT_AND);
                // Code for NonTerminal specified at Java.ccc:437:37
                pushOntoCallStack("TypeBound", "Java.ccc", 437, 37);
                try {
                    ObjectType();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:440:1
    final public void ClassOrInterfaceBody() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ClassOrInterfaceBody";
        // Code for BNFProduction specified at Java.ccc:440:1
        ClassOrInterfaceBody thisProduction = null;
        if (buildTree) {
            thisProduction = new ClassOrInterfaceBody();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:440:24
            consumeToken(LBRACE);
            // Code for ZeroOrMore specified at Java.ccc:440:33
            while (true) {
                if (!(scan$Java_ccc$440$34())) break;
                // Code for NonTerminal specified at Java.ccc:440:54
                pushOntoCallStack("ClassOrInterfaceBody", "Java.ccc", 440, 54);
                try {
                    ClassOrInterfaceBodyDeclaration();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:440:90
            consumeToken(RBRACE);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:442:1
    final public void ClassOrInterfaceBodyDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ClassOrInterfaceBodyDeclaration";
        // Code for BNFProduction specified at Java.ccc:442:1
        // Code for ExpansionChoice specified at Java.ccc:443:3
        if (scan$Java_ccc$443$3()) {
            // Code for NonTerminal specified at Java.ccc:443:3
            pushOntoCallStack("ClassOrInterfaceBodyDeclaration", "Java.ccc", 443, 3);
            try {
                Initializer();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$445$3()) {
            // Code for NonTerminal specified at Java.ccc:445:3
            pushOntoCallStack("ClassOrInterfaceBodyDeclaration", "Java.ccc", 445, 3);
            try {
                TypeDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$447$3()) {
            // Code for NonTerminal specified at Java.ccc:447:3
            pushOntoCallStack("ClassOrInterfaceBodyDeclaration", "Java.ccc", 447, 3);
            try {
                ConstructorDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$449$3()) {
            // Code for NonTerminal specified at Java.ccc:449:3
            pushOntoCallStack("ClassOrInterfaceBodyDeclaration", "Java.ccc", 449, 3);
            try {
                MethodDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$451$3()) {
            // Code for NonTerminal specified at Java.ccc:451:3
            pushOntoCallStack("ClassOrInterfaceBodyDeclaration", "Java.ccc", 451, 3);
            try {
                FieldDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$453$3()) {
            // Code for Failure specified at Java.ccc:454:3
            pushOntoCallStack("ClassOrInterfaceBodyDeclaration", "Java.ccc", 454, 3);
            fail("Failure: " + "Not a valid interface body declaration.", getToken(1));
        } else {
            // Code for Failure specified at Java.ccc:456:3
            pushOntoCallStack("ClassOrInterfaceBodyDeclaration", "Java.ccc", 456, 3);
            fail("Failure: " + "Not a valid class body declaration.", getToken(1));
        }
    }

    // Java.ccc:465:1
    final public void FieldDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "FieldDeclaration";
        // Code for BNFProduction specified at Java.ccc:465:1
        FieldDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new FieldDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for CodeBlock specified at Java.ccc:466:3
            permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE, STATIC, FINAL, TRANSIENT, VOLATILE);
            // Code for NonTerminal specified at Java.ccc:469:3
            pushOntoCallStack("FieldDeclaration", "Java.ccc", 469, 3);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:470:3
            pushOntoCallStack("FieldDeclaration", "Java.ccc", 470, 3);
            try {
                Type();
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:471:3
            pushOntoCallStack("FieldDeclaration", "Java.ccc", 471, 3);
            try {
                VariableDeclarator();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:471:22
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for Terminal specified at Java.ccc:471:24
                consumeToken(COMMA);
                // Code for NonTerminal specified at Java.ccc:471:32
                pushOntoCallStack("FieldDeclaration", "Java.ccc", 471, 32);
                try {
                    VariableDeclarator();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:471:54
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:474:1
    final public void VariableDeclarator() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "VariableDeclarator";
        // Code for BNFProduction specified at Java.ccc:474:1
        VariableDeclarator thisProduction = null;
        if (buildTree) {
            thisProduction = new VariableDeclarator();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:474:23
            pushOntoCallStack("VariableDeclarator", "Java.ccc", 474, 23);
            try {
                VariableDeclaratorId();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:474:44
            if (nextTokenType() == ASSIGN) {
                // Code for Terminal specified at Java.ccc:474:46
                consumeToken(ASSIGN);
                // Code for NonTerminal specified at Java.ccc:474:55
                pushOntoCallStack("VariableDeclarator", "Java.ccc", 474, 55);
                try {
                    VariableInitializer();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> VariableDeclaratorId_FIRST_SET = tokenTypeSet(UNDERSCORE, IDENTIFIER);

    // Java.ccc:476:1
    final public void VariableDeclaratorId() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "VariableDeclaratorId";
        // Code for BNFProduction specified at Java.ccc:476:1
        VariableDeclaratorId thisProduction = null;
        if (buildTree) {
            thisProduction = new VariableDeclaratorId();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at Java.ccc:477:5
            if (nextTokenType() == IDENTIFIER) {
                // Code for Terminal specified at Java.ccc:477:5
                consumeToken(IDENTIFIER);
                // Code for ZeroOrMore specified at Java.ccc:478:5
                while (true) {
                    if (!(nextTokenType() == LBRACKET || nextTokenType == AT)) break;
                    // Code for ZeroOrMore specified at Java.ccc:478:7
                    while (true) {
                        if (!(scan$Java_ccc$478$8())) break;
                        // Code for NonTerminal specified at Java.ccc:478:8
                        pushOntoCallStack("VariableDeclaratorId", "Java.ccc", 478, 8);
                        try {
                            Annotation();
                        } finally {
                            popCallStack();
                        }
                    }
                    // Code for Terminal specified at Java.ccc:478:21
                    consumeToken(LBRACKET);
                    // Code for Terminal specified at Java.ccc:478:32
                    consumeToken(RBRACKET);
                }
            } else if (scan$Java_ccc$480$5()) {
                // Code for Terminal specified at Java.ccc:481:5
                consumeToken(UNDERSCORE);
            } else {
                pushOntoCallStack("VariableDeclaratorId", "Java.ccc", 477, 5);
                throw new ParseException(getToken(1), VariableDeclaratorId_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> VariableInitializer_FIRST_SET = VariableInitializer_FIRST_SET_init();

    private static EnumSet<TokenType> VariableInitializer_FIRST_SET_init() {
        return tokenTypeSet(UNDERSCORE, BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, LBRACE, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    // Java.ccc:484:1
    final public void VariableInitializer() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "VariableInitializer";
        // Code for BNFProduction specified at Java.ccc:484:1
        // Code for ExpansionChoice specified at Java.ccc:484:28
        if (nextTokenType() == LBRACE) {
            // Code for NonTerminal specified at Java.ccc:484:28
            pushOntoCallStack("VariableInitializer", "Java.ccc", 484, 28);
            try {
                ArrayInitializer();
            } finally {
                popCallStack();
            }
        } else if (first_set$Java_ccc$484$47.contains(nextTokenType())) {
            // Code for NonTerminal specified at Java.ccc:484:47
            pushOntoCallStack("VariableInitializer", "Java.ccc", 484, 47);
            try {
                Expression();
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("VariableInitializer", "Java.ccc", 484, 28);
            throw new ParseException(getToken(1), VariableInitializer_FIRST_SET, parsingStack);
        }
    }

    // Java.ccc:486:1
    final public void ArrayInitializer() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ArrayInitializer";
        // Code for BNFProduction specified at Java.ccc:486:1
        ArrayInitializer thisProduction = null;
        if (buildTree) {
            thisProduction = new ArrayInitializer();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:487:4
            consumeToken(LBRACE);
            // Code for ZeroOrOne specified at Java.ccc:487:13
            if (first_set$Java_ccc$487$15.contains(nextTokenType())) {
                // Code for NonTerminal specified at Java.ccc:487:15
                pushOntoCallStack("ArrayInitializer", "Java.ccc", 487, 15);
                try {
                    VariableInitializer();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at Java.ccc:487:35
                while (true) {
                    if (!(scan$Java_ccc$487$37())) break;
                    // Code for Terminal specified at Java.ccc:487:44
                    consumeToken(COMMA);
                    // Code for NonTerminal specified at Java.ccc:487:52
                    pushOntoCallStack("ArrayInitializer", "Java.ccc", 487, 52);
                    try {
                        VariableInitializer();
                    } finally {
                        popCallStack();
                    }
                }
            }
            // Code for ZeroOrOne specified at Java.ccc:487:77
            if (nextTokenType() == COMMA) {
                // Code for Terminal specified at Java.ccc:487:79
                consumeToken(COMMA);
            }
            // Code for Terminal specified at Java.ccc:487:89
            consumeToken(RBRACE);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:490:1
    final public MethodDeclaration MethodDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "MethodDeclaration";
        // Code for BNFProduction specified at Java.ccc:490:1
        MethodDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new MethodDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            if (scan$Java_ccc$492$5()) {
                // Code for CodeBlock specified at Java.ccc:494:5
                permissibleModifiers = EnumSet.of(PUBLIC, PRIVATE, ABSTRACT, STATIC, SYNCHRONIZED, NATIVE, STRICTFP, _DEFAULT);
            } else if (scan$Java_ccc$500$5()) {
                // Code for CodeBlock specified at Java.ccc:504:5
                permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE, ABSTRACT, STATIC, SYNCHRONIZED, FINAL, NATIVE, STRICTFP, _DEFAULT);
            } else {
                // Code for CodeBlock specified at Java.ccc:510:5
                permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE, ABSTRACT, STATIC, FINAL, SYNCHRONIZED, NATIVE, STRICTFP);
            }
            // Code for NonTerminal specified at Java.ccc:516:3
            pushOntoCallStack("MethodDeclaration", "Java.ccc", 516, 3);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:517:3
            if (nextTokenType() == LT) {
                // Code for NonTerminal specified at Java.ccc:517:5
                pushOntoCallStack("MethodDeclaration", "Java.ccc", 517, 5);
                try {
                    TypeParameters();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at Java.ccc:518:3
            pushOntoCallStack("MethodDeclaration", "Java.ccc", 518, 3);
            try {
                ReturnType();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:519:3
            consumeToken(IDENTIFIER);
            // Code for NonTerminal specified at Java.ccc:520:9
            pushOntoCallStack("MethodDeclaration", "Java.ccc", 520, 9);
            try {
                FormalParameters();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:520:26
            while (true) {
                if (!(nextTokenType() == LBRACKET || nextTokenType == AT)) break;
                // Code for ZeroOrMore specified at Java.ccc:520:28
                while (true) {
                    if (!(scan$Java_ccc$520$29())) break;
                    // Code for NonTerminal specified at Java.ccc:520:29
                    pushOntoCallStack("MethodDeclaration", "Java.ccc", 520, 29);
                    try {
                        Annotation();
                    } finally {
                        popCallStack();
                    }
                }
                // Code for Terminal specified at Java.ccc:520:42
                consumeToken(LBRACKET);
                // Code for Terminal specified at Java.ccc:520:52
                consumeToken(RBRACKET);
            }
            // Code for ZeroOrOne specified at Java.ccc:521:3
            if (nextTokenType() == THROWS) {
                // Code for NonTerminal specified at Java.ccc:521:5
                pushOntoCallStack("MethodDeclaration", "Java.ccc", 521, 5);
                try {
                    ThrowsList();
                } finally {
                    popCallStack();
                }
            }
            if (nextTokenType() == LBRACE) {
                // Code for NonTerminal specified at Java.ccc:522:5
                pushOntoCallStack("MethodDeclaration", "Java.ccc", 522, 5);
                try {
                    Block();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == SEMICOLON) {
                // Code for Terminal specified at Java.ccc:522:13
                consumeToken(SEMICOLON);
            } else {
                pushOntoCallStack("MethodDeclaration", "Java.ccc", 522, 5);
                throw new ParseException(getToken(1), first_set$Java_ccc$522$5, parsingStack);
            }
            // Code for CodeBlock specified at Java.ccc:523:3
            return thisProduction;
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:526:1
    final public void FormalParameters() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "FormalParameters";
        // Code for BNFProduction specified at Java.ccc:526:1
        FormalParameters thisProduction = null;
        if (buildTree) {
            thisProduction = new FormalParameters();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:527:5
            consumeToken(LPAREN);
            // Code for ZeroOrOne specified at Java.ccc:528:5
            if (scan$Java_ccc$529$9()) {
                // Code for CodeBlock specified at Java.ccc:529:9
                boolean seenVarArgs = false;
                // Code for NonTerminal specified at Java.ccc:530:9
                pushOntoCallStack("FormalParameters", "Java.ccc", 530, 9);
                try {
                    seenVarArgs = FormalParameter();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at Java.ccc:531:9
                while (true) {
                    if (!(nextTokenType() == COMMA)) break;
                    // Code for Assertion specified at Java.ccc:532:11
                    if (!(!seenVarArgs)) {
                        fail("Assertion at: Java.ccc:532:11 failed. " + "The varargs (...) parameter must be the last one specified.", getToken(1));
                    }
                    // Code for Terminal specified at Java.ccc:533:11
                    consumeToken(COMMA);
                    // Code for NonTerminal specified at Java.ccc:534:11
                    pushOntoCallStack("FormalParameters", "Java.ccc", 534, 11);
                    try {
                        seenVarArgs = FormalParameter();
                    } finally {
                        popCallStack();
                    }
                }
            }
            // Code for Terminal specified at Java.ccc:537:5
            consumeToken(RPAREN);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:540:1
    final public boolean FormalParameter() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "FormalParameter";
        // Code for BNFProduction specified at Java.ccc:540:1
        FormalParameter thisProduction = null;
        if (buildTree) {
            thisProduction = new FormalParameter();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for CodeBlock specified at Java.ccc:541:4
            permissibleModifiers = EnumSet.of(FINAL);
            // Code for NonTerminal specified at Java.ccc:542:4
            pushOntoCallStack("FormalParameter", "Java.ccc", 542, 4);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:542:14
            pushOntoCallStack("FormalParameter", "Java.ccc", 542, 14);
            try {
                Type();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at Java.ccc:543:4
            boolean hasVarArgs = false;
            // Code for ZeroOrOne specified at Java.ccc:544:4
            if (nextTokenType() == VAR_ARGS || nextTokenType == AT) {
                // Code for ZeroOrMore specified at Java.ccc:544:6
                while (true) {
                    if (!(scan$Java_ccc$544$7())) break;
                    // Code for NonTerminal specified at Java.ccc:544:7
                    pushOntoCallStack("FormalParameter", "Java.ccc", 544, 7);
                    try {
                        Annotation();
                    } finally {
                        popCallStack();
                    }
                }
                // Code for Terminal specified at Java.ccc:544:20
                consumeToken(VAR_ARGS);
                // Code for CodeBlock specified at Java.ccc:544:31
                hasVarArgs = true;
            }
            // Code for NonTerminal specified at Java.ccc:545:4
            pushOntoCallStack("FormalParameter", "Java.ccc", 545, 4);
            try {
                VariableDeclaratorId();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at Java.ccc:546:4
            return hasVarArgs;
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:551:1
    final public void ConstructorDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ConstructorDeclaration";
        // Code for BNFProduction specified at Java.ccc:551:1
        ConstructorDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new ConstructorDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for CodeBlock specified at Java.ccc:552:3
            permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE);
            // Code for NonTerminal specified at Java.ccc:553:3
            pushOntoCallStack("ConstructorDeclaration", "Java.ccc", 553, 3);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:554:3
            if (nextTokenType() == LT) {
                // Code for NonTerminal specified at Java.ccc:554:5
                pushOntoCallStack("ConstructorDeclaration", "Java.ccc", 554, 5);
                try {
                    TypeParameters();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at Java.ccc:555:3
            pushOntoCallStack("ConstructorDeclaration", "Java.ccc", 555, 3);
            try {
                TypeIdentifier();
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:555:24
            pushOntoCallStack("ConstructorDeclaration", "Java.ccc", 555, 24);
            try {
                FormalParameters();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:556:3
            if (nextTokenType() == THROWS) {
                // Code for NonTerminal specified at Java.ccc:556:5
                pushOntoCallStack("ConstructorDeclaration", "Java.ccc", 556, 5);
                try {
                    ThrowsList();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:557:3
            consumeToken(LBRACE);
            // Code for ZeroOrMore specified at Java.ccc:558:3
            while (true) {
                if (!(scan$Java_ccc$558$4())) break;
                // Code for NonTerminal specified at Java.ccc:558:54
                pushOntoCallStack("ConstructorDeclaration", "Java.ccc", 558, 54);
                try {
                    BlockStatement();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Java.ccc:559:3
            if (scan$Java_ccc$559$5()) {
                // Code for NonTerminal specified at Java.ccc:559:5
                pushOntoCallStack("ConstructorDeclaration", "Java.ccc", 559, 5);
                try {
                    ExplicitConstructorInvocation();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrMore specified at Java.ccc:560:3
            while (true) {
                if (!(scan$Java_ccc$560$5())) break;
                // Code for NonTerminal specified at Java.ccc:560:25
                pushOntoCallStack("ConstructorDeclaration", "Java.ccc", 560, 25);
                try {
                    BlockStatement();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:561:3
            consumeToken(RBRACE);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> ExplicitConstructorInvocation_FIRST_SET = tokenTypeSet(SUPER, THIS, LPAREN, LT, IDENTIFIER);

    // Java.ccc:564:1
    final public void ExplicitConstructorInvocation() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ExplicitConstructorInvocation";
        // Code for BNFProduction specified at Java.ccc:564:1
        ExplicitConstructorInvocation thisProduction = null;
        if (buildTree) {
            thisProduction = new ExplicitConstructorInvocation();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at Java.ccc:565:3
            if (scan$Java_ccc$565$3()) {
                // Code for ZeroOrOne specified at Java.ccc:565:3
                if (scan$Java_ccc$565$4()) {
                    // Code for NonTerminal specified at Java.ccc:565:4
                    pushOntoCallStack("ExplicitConstructorInvocation", "Java.ccc", 565, 4);
                    try {
                        TypeArguments();
                    } finally {
                        popCallStack();
                    }
                }
                if (nextTokenType() == THIS) {
                    // Code for Terminal specified at Java.ccc:565:20
                    consumeToken(THIS);
                } else if (nextTokenType() == SUPER) {
                    // Code for Terminal specified at Java.ccc:565:29
                    consumeToken(SUPER);
                } else {
                    pushOntoCallStack("ExplicitConstructorInvocation", "Java.ccc", 565, 20);
                    throw new ParseException(getToken(1), first_set$Java_ccc$565$20, parsingStack);
                }
                // Code for NonTerminal specified at Java.ccc:565:44
                pushOntoCallStack("ExplicitConstructorInvocation", "Java.ccc", 565, 44);
                try {
                    InvocationArguments();
                } finally {
                    popCallStack();
                }
                // Code for Terminal specified at Java.ccc:565:64
                consumeToken(SEMICOLON);
            } else if (scan$Java_ccc$569$3()) {
                if (nextTokenType() == IDENTIFIER) {
                    // Code for NonTerminal specified at Java.ccc:569:4
                    pushOntoCallStack("ExplicitConstructorInvocation", "Java.ccc", 569, 4);
                    try {
                        Name();
                    } finally {
                        popCallStack();
                    }
                    // Code for ZeroOrOne specified at Java.ccc:569:9
                    if (scan$Java_ccc$569$10()) {
                        // Code for Terminal specified at Java.ccc:569:10
                        consumeToken(DOT);
                        // Code for Terminal specified at Java.ccc:569:15
                        consumeToken(THIS);
                    }
                } else if (nextTokenType() == LPAREN) {
                    // Code for NonTerminal specified at Java.ccc:569:30
                    pushOntoCallStack("ExplicitConstructorInvocation", "Java.ccc", 569, 30);
                    try {
                        Parentheses();
                    } finally {
                        popCallStack();
                    }
                    // Code for ZeroOrOne specified at Java.ccc:569:42
                    if (scan$Java_ccc$569$43()) {
                        // Code for Terminal specified at Java.ccc:569:43
                        consumeToken(DOT);
                        // Code for NonTerminal specified at Java.ccc:569:55
                        pushOntoCallStack("ExplicitConstructorInvocation", "Java.ccc", 569, 55);
                        try {
                            Name();
                        } finally {
                            popCallStack();
                        }
                    }
                    // Code for ZeroOrOne specified at Java.ccc:569:60
                    if (scan$Java_ccc$569$61()) {
                        // Code for Terminal specified at Java.ccc:569:61
                        consumeToken(DOT);
                        // Code for Terminal specified at Java.ccc:569:66
                        consumeToken(THIS);
                    }
                } else {
                    pushOntoCallStack("ExplicitConstructorInvocation", "Java.ccc", 569, 4);
                    throw new ParseException(getToken(1), first_set$Java_ccc$569$4, parsingStack);
                }
                // Code for Terminal specified at Java.ccc:570:3
                consumeToken(DOT);
                // Code for ZeroOrOne specified at Java.ccc:570:9
                if (scan$Java_ccc$570$10()) {
                    // Code for NonTerminal specified at Java.ccc:570:10
                    pushOntoCallStack("ExplicitConstructorInvocation", "Java.ccc", 570, 10);
                    try {
                        TypeArguments();
                    } finally {
                        popCallStack();
                    }
                }
                // Code for Terminal specified at Java.ccc:570:25
                consumeToken(SUPER);
                // Code for NonTerminal specified at Java.ccc:570:39
                pushOntoCallStack("ExplicitConstructorInvocation", "Java.ccc", 570, 39);
                try {
                    InvocationArguments();
                } finally {
                    popCallStack();
                }
                // Code for Terminal specified at Java.ccc:570:59
                consumeToken(SEMICOLON);
            } else {
                pushOntoCallStack("ExplicitConstructorInvocation", "Java.ccc", 565, 3);
                throw new ParseException(getToken(1), ExplicitConstructorInvocation_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:573:1
    final public void Initializer() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Initializer";
        // Code for BNFProduction specified at Java.ccc:573:1
        Initializer thisProduction = null;
        if (buildTree) {
            thisProduction = new Initializer();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ZeroOrOne specified at Java.ccc:574:3
            if (nextTokenType() == STATIC) {
                // Code for Terminal specified at Java.ccc:574:5
                consumeToken(STATIC);
            }
            // Code for NonTerminal specified at Java.ccc:574:22
            pushOntoCallStack("Initializer", "Java.ccc", 574, 22);
            try {
                Block();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:577:1
    final public void Type() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Type";
        // Code for BNFProduction specified at Java.ccc:577:1
        if (scan$Java_ccc$579$4()) {
            // Code for NonTerminal specified at Java.ccc:580:6
            pushOntoCallStack("Type", "Java.ccc", 580, 6);
            try {
                PrimitiveType();
            } finally {
                popCallStack();
            }
        } else if (first_set$Java_ccc$582$4.contains(nextTokenType())) {
            // Code for NonTerminal specified at Java.ccc:582:4
            pushOntoCallStack("Type", "Java.ccc", 582, 4);
            try {
                ReferenceType();
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("Type", "Java.ccc", 579, 4);
            throw new ParseException(getToken(1), first_set$Java_ccc$579$4, parsingStack);
        }
    }

    private static final EnumSet<TokenType> ReferenceType_FIRST_SET = ReferenceType_FIRST_SET_init();

    private static EnumSet<TokenType> ReferenceType_FIRST_SET_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, AT, IDENTIFIER);
    }

    // Java.ccc:591:1
    final public void ReferenceType() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ReferenceType";
        // Code for BNFProduction specified at Java.ccc:591:1
        ReferenceType thisProduction = null;
        if (buildTree) {
            thisProduction = new ReferenceType();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at Java.ccc:592:4
            if (scan$Java_ccc$592$4()) {
                // Code for NonTerminal specified at Java.ccc:592:4
                pushOntoCallStack("ReferenceType", "Java.ccc", 592, 4);
                try {
                    PrimitiveArrayType();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == AT || nextTokenType == IDENTIFIER) {
                // Code for NonTerminal specified at Java.ccc:594:4
                pushOntoCallStack("ReferenceType", "Java.ccc", 594, 4);
                try {
                    ObjectType();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at Java.ccc:594:15
                while (true) {
                    if (!(scan$Java_ccc$594$16())) break;
                    // Code for ZeroOrMore specified at Java.ccc:594:16
                    while (true) {
                        if (!(scan$Java_ccc$594$17())) break;
                        // Code for NonTerminal specified at Java.ccc:594:17
                        pushOntoCallStack("ReferenceType", "Java.ccc", 594, 17);
                        try {
                            Annotation();
                        } finally {
                            popCallStack();
                        }
                    }
                    // Code for Terminal specified at Java.ccc:594:30
                    consumeToken(LBRACKET);
                    // Code for Terminal specified at Java.ccc:594:40
                    consumeToken(RBRACKET);
                }
            } else {
                pushOntoCallStack("ReferenceType", "Java.ccc", 592, 4);
                throw new ParseException(getToken(1), ReferenceType_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:597:1
    final public void ObjectType() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ObjectType";
        // Code for BNFProduction specified at Java.ccc:597:1
        ObjectType thisProduction = null;
        if (buildTree) {
            thisProduction = new ObjectType();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ZeroOrMore specified at Java.ccc:598:5
            while (true) {
                if (!(scan$Java_ccc$598$6())) break;
                // Code for NonTerminal specified at Java.ccc:598:6
                pushOntoCallStack("ObjectType", "Java.ccc", 598, 6);
                try {
                    Annotation();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at Java.ccc:599:5
            pushOntoCallStack("ObjectType", "Java.ccc", 599, 5);
            try {
                TypeIdentifier();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:599:20
            if (scan$Java_ccc$599$22()) {
                // Code for NonTerminal specified at Java.ccc:599:22
                pushOntoCallStack("ObjectType", "Java.ccc", 599, 22);
                try {
                    TypeArguments();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrMore specified at Java.ccc:600:5
            while (true) {
                if (!(scan$Java_ccc$600$7())) break;
                // Code for Terminal specified at Java.ccc:600:7
                consumeToken(DOT);
                // Code for ZeroOrMore specified at Java.ccc:600:13
                while (true) {
                    if (!(scan$Java_ccc$600$14())) break;
                    // Code for NonTerminal specified at Java.ccc:600:14
                    pushOntoCallStack("ObjectType", "Java.ccc", 600, 14);
                    try {
                        Annotation();
                    } finally {
                        popCallStack();
                    }
                }
                // Code for Terminal specified at Java.ccc:600:27
                consumeToken(IDENTIFIER);
                // Code for ZeroOrOne specified at Java.ccc:600:45
                if (scan$Java_ccc$600$47()) {
                    // Code for NonTerminal specified at Java.ccc:600:47
                    pushOntoCallStack("ObjectType", "Java.ccc", 600, 47);
                    try {
                        TypeArguments();
                    } finally {
                        popCallStack();
                    }
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:613:1
    final public void DiamondOperator() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "DiamondOperator";
        // Code for BNFProduction specified at Java.ccc:613:1
        DiamondOperator thisProduction = null;
        if (buildTree) {
            thisProduction = new DiamondOperator();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:613:20
            consumeToken(LT);
            // Code for Terminal specified at Java.ccc:613:24
            consumeToken(GT);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> PossiblyEmptyTypeArguments_FIRST_SET = tokenTypeSet(LT);

    // Java.ccc:615:1
    final public void PossiblyEmptyTypeArguments() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "PossiblyEmptyTypeArguments";
        // Code for BNFProduction specified at Java.ccc:615:1
        // Code for ExpansionChoice specified at Java.ccc:616:4
        if (scan$Java_ccc$616$4()) {
            // Code for NonTerminal specified at Java.ccc:616:4
            pushOntoCallStack("PossiblyEmptyTypeArguments", "Java.ccc", 616, 4);
            try {
                DiamondOperator();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$618$4()) {
            // Code for NonTerminal specified at Java.ccc:618:4
            pushOntoCallStack("PossiblyEmptyTypeArguments", "Java.ccc", 618, 4);
            try {
                TypeArguments();
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("PossiblyEmptyTypeArguments", "Java.ccc", 616, 4);
            throw new ParseException(getToken(1), PossiblyEmptyTypeArguments_FIRST_SET, parsingStack);
        }
    }

    // Java.ccc:621:1
    final public void TypeArguments() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "TypeArguments";
        // Code for BNFProduction specified at Java.ccc:621:1
        TypeArguments thisProduction = null;
        if (buildTree) {
            thisProduction = new TypeArguments();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:623:3
            consumeToken(LT);
            // Code for NonTerminal specified at Java.ccc:623:8
            pushOntoCallStack("TypeArguments", "Java.ccc", 623, 8);
            try {
                TypeArgument();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:623:21
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for Terminal specified at Java.ccc:623:23
                consumeToken(COMMA);
                // Code for NonTerminal specified at Java.ccc:623:31
                pushOntoCallStack("TypeArguments", "Java.ccc", 623, 31);
                try {
                    TypeArgument();
                } finally {
                    popCallStack();
                }
            }
            EnumSet<TokenType> previousActives34 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged35 = false;
            somethingChanged35 = somethingChanged35 |= deactivateTokenTypes(RSIGNEDSHIFT, RUNSIGNEDSHIFT);
            try {
                // Code for Terminal specified at Java.ccc:624:52
                consumeToken(GT);
            } finally {
                token_source.activeTokenTypes = previousActives34;
                if (somethingChanged35) {
                    token_source.reset(lastConsumedToken);
                    nextTokenType = null;
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> TypeArgument_FIRST_SET = TypeArgument_FIRST_SET_init();

    private static EnumSet<TokenType> TypeArgument_FIRST_SET_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, AT, HOOK, IDENTIFIER);
    }

    // Java.ccc:627:1
    final public void TypeArgument() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "TypeArgument";
        // Code for BNFProduction specified at Java.ccc:627:1
        TypeArgument thisProduction = null;
        if (buildTree) {
            thisProduction = new TypeArgument();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at Java.ccc:628:3
            if (scan$Java_ccc$628$3()) {
                // Code for ZeroOrMore specified at Java.ccc:628:3
                while (true) {
                    if (!(scan$Java_ccc$628$4())) break;
                    // Code for NonTerminal specified at Java.ccc:628:4
                    pushOntoCallStack("TypeArgument", "Java.ccc", 628, 4);
                    try {
                        Annotation();
                    } finally {
                        popCallStack();
                    }
                }
                // Code for Terminal specified at Java.ccc:628:17
                consumeToken(HOOK);
                // Code for ZeroOrOne specified at Java.ccc:628:29
                if (nextTokenType() == EXTENDS || nextTokenType == SUPER) {
                    // Code for NonTerminal specified at Java.ccc:628:31
                    pushOntoCallStack("TypeArgument", "Java.ccc", 628, 31);
                    try {
                        WildcardBounds();
                    } finally {
                        popCallStack();
                    }
                }
            } else if (first_set$Java_ccc$630$3.contains(nextTokenType())) {
                // Code for NonTerminal specified at Java.ccc:630:3
                pushOntoCallStack("TypeArgument", "Java.ccc", 630, 3);
                try {
                    ReferenceType();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("TypeArgument", "Java.ccc", 628, 3);
                throw new ParseException(getToken(1), TypeArgument_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:633:1
    final public void WildcardBounds() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "WildcardBounds";
        // Code for BNFProduction specified at Java.ccc:633:1
        WildcardBounds thisProduction = null;
        if (buildTree) {
            thisProduction = new WildcardBounds();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            if (nextTokenType() == EXTENDS) {
                // Code for Terminal specified at Java.ccc:633:19
                consumeToken(EXTENDS);
            } else if (nextTokenType() == SUPER) {
                // Code for Terminal specified at Java.ccc:633:31
                consumeToken(SUPER);
            } else {
                pushOntoCallStack("WildcardBounds", "Java.ccc", 633, 19);
                throw new ParseException(getToken(1), first_set$Java_ccc$633$19, parsingStack);
            }
            // Code for NonTerminal specified at Java.ccc:633:40
            pushOntoCallStack("WildcardBounds", "Java.ccc", 633, 40);
            try {
                ReferenceType();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:635:1
    final public void PrimitiveType() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "PrimitiveType";
        // Code for BNFProduction specified at Java.ccc:635:1
        PrimitiveType thisProduction = null;
        if (buildTree) {
            thisProduction = new PrimitiveType();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ZeroOrMore specified at Java.ccc:636:3
            while (true) {
                if (!(scan$Java_ccc$636$4())) break;
                // Code for NonTerminal specified at Java.ccc:636:4
                pushOntoCallStack("PrimitiveType", "Java.ccc", 636, 4);
                try {
                    Annotation();
                } finally {
                    popCallStack();
                }
            }
            if (nextTokenType() == BOOLEAN) {
                // Code for Terminal specified at Java.ccc:637:4
                consumeToken(BOOLEAN);
            } else if (nextTokenType() == CHAR) {
                // Code for Terminal specified at Java.ccc:637:16
                consumeToken(CHAR);
            } else if (nextTokenType() == BYTE) {
                // Code for Terminal specified at Java.ccc:637:25
                consumeToken(BYTE);
            } else if (nextTokenType() == SHORT) {
                // Code for Terminal specified at Java.ccc:637:34
                consumeToken(SHORT);
            } else if (nextTokenType() == INT) {
                // Code for Terminal specified at Java.ccc:637:44
                consumeToken(INT);
            } else if (nextTokenType() == LONG) {
                // Code for Terminal specified at Java.ccc:638:6
                consumeToken(LONG);
            } else if (nextTokenType() == FLOAT) {
                // Code for Terminal specified at Java.ccc:638:15
                consumeToken(FLOAT);
            } else if (nextTokenType() == DOUBLE) {
                // Code for Terminal specified at Java.ccc:638:25
                consumeToken(DOUBLE);
            } else {
                pushOntoCallStack("PrimitiveType", "Java.ccc", 637, 4);
                throw new ParseException(getToken(1), first_set$Java_ccc$637$4, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:642:1
    final public void PrimitiveArrayType() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "PrimitiveArrayType";
        // Code for BNFProduction specified at Java.ccc:642:1
        PrimitiveArrayType thisProduction = null;
        if (buildTree) {
            thisProduction = new PrimitiveArrayType();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:642:22
            pushOntoCallStack("PrimitiveArrayType", "Java.ccc", 642, 22);
            try {
                PrimitiveType();
            } finally {
                popCallStack();
            }
            // Code for OneOrMore specified at Java.ccc:642:36
            while (true) {
                // Code for ZeroOrMore specified at Java.ccc:642:37
                while (true) {
                    if (!(scan$Java_ccc$642$38())) break;
                    // Code for NonTerminal specified at Java.ccc:642:38
                    pushOntoCallStack("PrimitiveArrayType", "Java.ccc", 642, 38);
                    try {
                        Annotation();
                    } finally {
                        popCallStack();
                    }
                }
                // Code for Terminal specified at Java.ccc:642:51
                consumeToken(LBRACKET);
                // Code for Terminal specified at Java.ccc:642:67
                consumeToken(RBRACKET);
                if (!(scan$Java_ccc$642$37())) break;
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> ReturnType_FIRST_SET = ReturnType_FIRST_SET_init();

    private static EnumSet<TokenType> ReturnType_FIRST_SET_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, VOID, AT, IDENTIFIER);
    }

    // Java.ccc:644:1
    final public void ReturnType() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ReturnType";
        // Code for BNFProduction specified at Java.ccc:644:1
        ReturnType thisProduction = null;
        if (buildTree) {
            thisProduction = new ReturnType();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at Java.ccc:644:15
            if (nextTokenType() == VOID) {
                // Code for Terminal specified at Java.ccc:644:15
                consumeToken(VOID);
            } else if (scan$Java_ccc$644$24()) {
                // Code for NonTerminal specified at Java.ccc:644:24
                pushOntoCallStack("ReturnType", "Java.ccc", 644, 24);
                try {
                    Type();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("ReturnType", "Java.ccc", 644, 15);
                throw new ParseException(getToken(1), ReturnType_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:646:1
    final public void Name() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Name";
        // Code for BNFProduction specified at Java.ccc:646:1
        Name thisProduction = null;
        if (buildTree) {
            thisProduction = new Name();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:646:9
            consumeToken(IDENTIFIER);
            // Code for ZeroOrMore specified at Java.ccc:646:22
            while (true) {
                if (!(scan$Java_ccc$646$23())) break;
                // Code for Terminal specified at Java.ccc:646:23
                consumeToken(DOT);
                // Code for Terminal specified at Java.ccc:646:29
                consumeToken(IDENTIFIER);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:648:1
    final public void ThrowsList() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ThrowsList";
        // Code for BNFProduction specified at Java.ccc:648:1
        ThrowsList thisProduction = null;
        if (buildTree) {
            thisProduction = new ThrowsList();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:648:14
            consumeToken(THROWS);
            // Code for NonTerminal specified at Java.ccc:648:23
            pushOntoCallStack("ThrowsList", "Java.ccc", 648, 23);
            try {
                ExceptionType();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:648:37
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for Terminal specified at Java.ccc:648:39
                consumeToken(COMMA);
                // Code for NonTerminal specified at Java.ccc:648:47
                pushOntoCallStack("ThrowsList", "Java.ccc", 648, 47);
                try {
                    ExceptionType();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:650:1
    final public void ExceptionType() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ExceptionType";
        // Code for BNFProduction specified at Java.ccc:650:1
        ObjectType thisProduction = null;
        if (buildTree) {
            thisProduction = new ObjectType();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ZeroOrMore specified at Java.ccc:651:5
            while (true) {
                if (!(scan$Java_ccc$651$6())) break;
                // Code for NonTerminal specified at Java.ccc:651:6
                pushOntoCallStack("ExceptionType", "Java.ccc", 651, 6);
                try {
                    Annotation();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:652:5
            consumeToken(IDENTIFIER);
            // Code for ZeroOrMore specified at Java.ccc:653:5
            while (true) {
                if (!(scan$Java_ccc$654$8())) break;
                // Code for Terminal specified at Java.ccc:654:8
                consumeToken(DOT);
                // Code for Terminal specified at Java.ccc:654:14
                consumeToken(IDENTIFIER);
            }
            // Code for ZeroOrOne specified at Java.ccc:656:5
            if (scan$Java_ccc$657$7()) {
                // Code for Terminal specified at Java.ccc:657:7
                consumeToken(DOT);
                // Code for OneOrMore specified at Java.ccc:658:7
                while (true) {
                    // Code for NonTerminal specified at Java.ccc:658:8
                    pushOntoCallStack("ExceptionType", "Java.ccc", 658, 8);
                    try {
                        Annotation();
                    } finally {
                        popCallStack();
                    }
                    if (!(scan$Java_ccc$658$8())) break;
                }
                // Code for Terminal specified at Java.ccc:659:7
                consumeToken(IDENTIFIER);
            }
            // Code for ZeroOrOne specified at Java.ccc:661:5
            if (scan$Java_ccc$661$6()) {
                // Code for NonTerminal specified at Java.ccc:661:6
                pushOntoCallStack("ExceptionType", "Java.ccc", 661, 6);
                try {
                    TypeArguments();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:665:1
    final public Expression Expression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Expression";
        // Code for BNFProduction specified at Java.ccc:665:1
        // Code for NonTerminal specified at Java.ccc:666:5
        pushOntoCallStack("Expression", "Java.ccc", 666, 5);
        try {
            AssignmentExpression();
        } finally {
            popCallStack();
        }
        // Code for CodeBlock specified at Java.ccc:667:5
        return (Expression) peekNode();
    }

    // Java.ccc:722:1
    final public void AssignmentExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "AssignmentExpression";
        // Code for BNFProduction specified at Java.ccc:722:1
        AssignmentExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new AssignmentExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for CodeBlock specified at Java.ccc:723:3
            Expression lhs;
            // Code for NonTerminal specified at Java.ccc:726:3
            pushOntoCallStack("AssignmentExpression", "Java.ccc", 726, 3);
            try {
                TernaryExpression();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at Java.ccc:726:21
            lhs = (Expression) peekNode();
            // Code for ZeroOrOne specified at Java.ccc:727:3
            if ((lhs.isAssignableTo()) && scan$Java_ccc$728$5()) {
                // Code for NonTerminal specified at Java.ccc:729:8
                pushOntoCallStack("AssignmentExpression", "Java.ccc", 729, 8);
                try {
                    AssignmentOperator();
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Java.ccc:729:27
                pushOntoCallStack("AssignmentExpression", "Java.ccc", 729, 27);
                try {
                    Expression();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> AssignmentOperator_FIRST_SET = AssignmentOperator_FIRST_SET_init();

    private static EnumSet<TokenType> AssignmentOperator_FIRST_SET_init() {
        return tokenTypeSet(ASSIGN, PLUSASSIGN, MINUSASSIGN, STARASSIGN, SLASHASSIGN, ANDASSIGN, ORASSIGN, XORASSIGN, REMASSIGN, LSHIFTASSIGN, RSIGNEDSHIFTASSIGN, RUNSIGNEDSHIFTASSIGN);
    }

    // Java.ccc:733:1
    final public void AssignmentOperator() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "AssignmentOperator";
        // Code for BNFProduction specified at Java.ccc:733:1
        // Code for ExpansionChoice specified at Java.ccc:734:3
        if (nextTokenType() == ASSIGN) {
            // Code for Terminal specified at Java.ccc:734:3
            consumeToken(ASSIGN);
        } else if (nextTokenType() == STARASSIGN) {
            // Code for Terminal specified at Java.ccc:734:14
            consumeToken(STARASSIGN);
        } else if (nextTokenType() == SLASHASSIGN) {
            // Code for Terminal specified at Java.ccc:734:29
            consumeToken(SLASHASSIGN);
        } else if (nextTokenType() == REMASSIGN) {
            // Code for Terminal specified at Java.ccc:734:45
            consumeToken(REMASSIGN);
        } else if (nextTokenType() == PLUSASSIGN) {
            // Code for Terminal specified at Java.ccc:734:59
            consumeToken(PLUSASSIGN);
        } else if (nextTokenType() == MINUSASSIGN) {
            // Code for Terminal specified at Java.ccc:735:5
            consumeToken(MINUSASSIGN);
        } else if (nextTokenType() == LSHIFTASSIGN) {
            // Code for Terminal specified at Java.ccc:735:21
            consumeToken(LSHIFTASSIGN);
        } else if (nextTokenType() == RSIGNEDSHIFTASSIGN) {
            // Code for Terminal specified at Java.ccc:735:38
            consumeToken(RSIGNEDSHIFTASSIGN);
        } else if (nextTokenType() == RUNSIGNEDSHIFTASSIGN) {
            // Code for Terminal specified at Java.ccc:736:5
            consumeToken(RUNSIGNEDSHIFTASSIGN);
        } else if (nextTokenType() == ANDASSIGN) {
            // Code for Terminal specified at Java.ccc:736:30
            consumeToken(ANDASSIGN);
        } else if (nextTokenType() == XORASSIGN) {
            // Code for Terminal specified at Java.ccc:736:44
            consumeToken(XORASSIGN);
        } else if (nextTokenType() == ORASSIGN) {
            // Code for Terminal specified at Java.ccc:736:58
            consumeToken(ORASSIGN);
        } else {
            pushOntoCallStack("AssignmentOperator", "Java.ccc", 734, 3);
            throw new ParseException(getToken(1), AssignmentOperator_FIRST_SET, parsingStack);
        }
    }

    // Java.ccc:739:1
    final public void TernaryExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "TernaryExpression";
        // Code for BNFProduction specified at Java.ccc:739:1
        TernaryExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new TernaryExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:740:3
            pushOntoCallStack("TernaryExpression", "Java.ccc", 740, 3);
            try {
                ConditionalOrExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:740:27
            if (nextTokenType() == HOOK) {
                // Code for Terminal specified at Java.ccc:740:30
                consumeToken(HOOK);
                // Code for NonTerminal specified at Java.ccc:740:37
                pushOntoCallStack("TernaryExpression", "Java.ccc", 740, 37);
                try {
                    Expression();
                } finally {
                    popCallStack();
                }
                // Code for Terminal specified at Java.ccc:740:48
                consumeToken(COLON);
                // Code for NonTerminal specified at Java.ccc:740:56
                pushOntoCallStack("TernaryExpression", "Java.ccc", 740, 56);
                try {
                    Expression();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:743:1
    final public void ConditionalOrExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ConditionalOrExpression";
        // Code for BNFProduction specified at Java.ccc:743:1
        ConditionalOrExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new ConditionalOrExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:744:3
            pushOntoCallStack("ConditionalOrExpression", "Java.ccc", 744, 3);
            try {
                ConditionalAndExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:744:28
            while (true) {
                if (!(nextTokenType() == SC_OR)) break;
                // Code for Terminal specified at Java.ccc:744:30
                consumeToken(SC_OR);
                // Code for NonTerminal specified at Java.ccc:744:38
                pushOntoCallStack("ConditionalOrExpression", "Java.ccc", 744, 38);
                try {
                    ConditionalAndExpression();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:747:1
    final public void ConditionalAndExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ConditionalAndExpression";
        // Code for BNFProduction specified at Java.ccc:747:1
        ConditionalAndExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new ConditionalAndExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:748:3
            pushOntoCallStack("ConditionalAndExpression", "Java.ccc", 748, 3);
            try {
                InclusiveOrExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:748:25
            while (true) {
                if (!(nextTokenType() == SC_AND)) break;
                // Code for Terminal specified at Java.ccc:748:27
                consumeToken(SC_AND);
                // Code for NonTerminal specified at Java.ccc:748:36
                pushOntoCallStack("ConditionalAndExpression", "Java.ccc", 748, 36);
                try {
                    InclusiveOrExpression();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:751:1
    final public void InclusiveOrExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "InclusiveOrExpression";
        // Code for BNFProduction specified at Java.ccc:751:1
        InclusiveOrExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new InclusiveOrExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:752:3
            pushOntoCallStack("InclusiveOrExpression", "Java.ccc", 752, 3);
            try {
                ExclusiveOrExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:752:25
            while (true) {
                if (!(nextTokenType() == BIT_OR)) break;
                // Code for Terminal specified at Java.ccc:752:27
                consumeToken(BIT_OR);
                // Code for NonTerminal specified at Java.ccc:752:36
                pushOntoCallStack("InclusiveOrExpression", "Java.ccc", 752, 36);
                try {
                    ExclusiveOrExpression();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:755:1
    final public void ExclusiveOrExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ExclusiveOrExpression";
        // Code for BNFProduction specified at Java.ccc:755:1
        ExclusiveOrExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new ExclusiveOrExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:756:3
            pushOntoCallStack("ExclusiveOrExpression", "Java.ccc", 756, 3);
            try {
                AndExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:756:17
            while (true) {
                if (!(nextTokenType() == XOR)) break;
                // Code for Terminal specified at Java.ccc:756:19
                consumeToken(XOR);
                // Code for NonTerminal specified at Java.ccc:756:25
                pushOntoCallStack("ExclusiveOrExpression", "Java.ccc", 756, 25);
                try {
                    AndExpression();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:759:1
    final public void AndExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "AndExpression";
        // Code for BNFProduction specified at Java.ccc:759:1
        AndExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new AndExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:760:3
            pushOntoCallStack("AndExpression", "Java.ccc", 760, 3);
            try {
                EqualityExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:760:22
            while (true) {
                if (!(nextTokenType() == BIT_AND)) break;
                // Code for Terminal specified at Java.ccc:760:24
                consumeToken(BIT_AND);
                // Code for NonTerminal specified at Java.ccc:760:34
                pushOntoCallStack("AndExpression", "Java.ccc", 760, 34);
                try {
                    EqualityExpression();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:763:1
    final public void EqualityExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "EqualityExpression";
        // Code for BNFProduction specified at Java.ccc:763:1
        EqualityExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new EqualityExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:764:3
            pushOntoCallStack("EqualityExpression", "Java.ccc", 764, 3);
            try {
                InstanceOfExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:764:24
            while (true) {
                if (!(nextTokenType() == EQ || nextTokenType == NE)) break;
                if (nextTokenType() == EQ) {
                    // Code for Terminal specified at Java.ccc:764:28
                    consumeToken(EQ);
                } else if (nextTokenType() == NE) {
                    // Code for Terminal specified at Java.ccc:764:35
                    consumeToken(NE);
                } else {
                    pushOntoCallStack("EqualityExpression", "Java.ccc", 764, 28);
                    throw new ParseException(getToken(1), first_set$Java_ccc$764$28, parsingStack);
                }
                // Code for NonTerminal specified at Java.ccc:764:42
                EqualityExpression EqualityExpression1 = null;
                if (buildTree) {
                    EqualityExpression1 = new EqualityExpression();
                    openNodeScope(EqualityExpression1);
                }
                ParseException parseException46 = null;
                int callStackSize47 = parsingStack.size();
                try {
                    pushOntoCallStack("EqualityExpression", "Java.ccc", 764, 42);
                    try {
                        InstanceOfExpression();
                    } finally {
                        popCallStack();
                    }
                } catch (ParseException e) {
                    parseException46 = e;
                    throw e;
                } finally {
                    restoreCallStack(callStackSize47);
                    if (EqualityExpression1 != null) {
                        if (parseException46 == null) {
                            closeNodeScope(EqualityExpression1, 3);
                        } else {
                            clearNodeScope();
                        }
                    }
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:767:1
    final public void InstanceOfExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "InstanceOfExpression";
        // Code for BNFProduction specified at Java.ccc:767:1
        InstanceOfExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new InstanceOfExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:768:3
            pushOntoCallStack("InstanceOfExpression", "Java.ccc", 768, 3);
            try {
                RelationalExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:769:3
            if (nextTokenType() == INSTANCEOF) {
                // Code for Terminal specified at Java.ccc:770:5
                consumeToken(INSTANCEOF);
                if (scan$Java_ccc$772$7()) {
                    // Code for NonTerminal specified at Java.ccc:772:7
                    pushOntoCallStack("InstanceOfExpression", "Java.ccc", 772, 7);
                    try {
                        LocalVariableDeclaration();
                    } finally {
                        popCallStack();
                    }
                } else if (scan$Java_ccc$774$7()) {
                    // Code for NonTerminal specified at Java.ccc:774:7
                    pushOntoCallStack("InstanceOfExpression", "Java.ccc", 774, 7);
                    try {
                        RecordPattern();
                    } finally {
                        popCallStack();
                    }
                } else if (first_set$Java_ccc$776$7.contains(nextTokenType())) {
                    // Code for NonTerminal specified at Java.ccc:776:7
                    pushOntoCallStack("InstanceOfExpression", "Java.ccc", 776, 7);
                    try {
                        ReferenceType();
                    } finally {
                        popCallStack();
                    }
                } else {
                    pushOntoCallStack("InstanceOfExpression", "Java.ccc", 772, 7);
                    throw new ParseException(getToken(1), first_set$Java_ccc$772$7, parsingStack);
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:781:1
    final public void RelationalExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "RelationalExpression";
        // Code for BNFProduction specified at Java.ccc:781:1
        RelationalExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new RelationalExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:782:3
            pushOntoCallStack("RelationalExpression", "Java.ccc", 782, 3);
            try {
                ShiftExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:783:3
            if (nextTokenType() == GT || nextTokenType == LT || nextTokenType == LE || nextTokenType == GE) {
                if (nextTokenType() == LT) {
                    // Code for Terminal specified at Java.ccc:784:7
                    consumeToken(LT);
                } else if (nextTokenType() == GT) {
                    // Code for Terminal specified at Java.ccc:784:14
                    consumeToken(GT);
                } else if (nextTokenType() == LE) {
                    // Code for Terminal specified at Java.ccc:784:21
                    consumeToken(LE);
                } else if (nextTokenType() == GE) {
                    // Code for Terminal specified at Java.ccc:784:28
                    consumeToken(GE);
                } else {
                    pushOntoCallStack("RelationalExpression", "Java.ccc", 784, 7);
                    throw new ParseException(getToken(1), first_set$Java_ccc$784$7, parsingStack);
                }
                // Code for NonTerminal specified at Java.ccc:785:5
                pushOntoCallStack("RelationalExpression", "Java.ccc", 785, 5);
                try {
                    ShiftExpression();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:790:1
    final public void ShiftExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ShiftExpression";
        // Code for BNFProduction specified at Java.ccc:790:1
        ShiftExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new ShiftExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:791:4
            pushOntoCallStack("ShiftExpression", "Java.ccc", 791, 4);
            try {
                AdditiveExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:792:4
            if (scan$Java_ccc$797$6()) {
                // Code for CodeBlock specified at Java.ccc:797:41
                this.token_source.reset(lastConsumedToken);
            }
            // Code for ZeroOrMore specified at Java.ccc:801:4
            while (true) {
                if (!(nextTokenType() == LSHIFT || nextTokenType == RSIGNEDSHIFT || nextTokenType == RUNSIGNEDSHIFT)) break;
                if (nextTokenType() == LSHIFT) {
                    // Code for Terminal specified at Java.ccc:802:8
                    consumeToken(LSHIFT);
                } else if (nextTokenType() == RSIGNEDSHIFT) {
                    // Code for Terminal specified at Java.ccc:802:19
                    consumeToken(RSIGNEDSHIFT);
                } else if (nextTokenType() == RUNSIGNEDSHIFT) {
                    // Code for Terminal specified at Java.ccc:802:36
                    consumeToken(RUNSIGNEDSHIFT);
                } else {
                    pushOntoCallStack("ShiftExpression", "Java.ccc", 802, 8);
                    throw new ParseException(getToken(1), first_set$Java_ccc$802$8, parsingStack);
                }
                // Code for NonTerminal specified at Java.ccc:803:7
                ShiftExpression ShiftExpression1 = null;
                if (buildTree) {
                    ShiftExpression1 = new ShiftExpression();
                    openNodeScope(ShiftExpression1);
                }
                ParseException parseException64 = null;
                int callStackSize65 = parsingStack.size();
                try {
                    pushOntoCallStack("ShiftExpression", "Java.ccc", 803, 7);
                    try {
                        AdditiveExpression();
                    } finally {
                        popCallStack();
                    }
                } catch (ParseException e) {
                    parseException64 = e;
                    throw e;
                } finally {
                    restoreCallStack(callStackSize65);
                    if (ShiftExpression1 != null) {
                        if (parseException64 == null) {
                            closeNodeScope(ShiftExpression1, 3);
                        } else {
                            clearNodeScope();
                        }
                    }
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:807:1
    final public void AdditiveExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "AdditiveExpression";
        // Code for BNFProduction specified at Java.ccc:807:1
        AdditiveExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new AdditiveExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:808:3
            pushOntoCallStack("AdditiveExpression", "Java.ccc", 808, 3);
            try {
                MultiplicativeExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:808:28
            while (true) {
                if (!(nextTokenType() == PLUS || nextTokenType == MINUS)) break;
                if (nextTokenType() == PLUS) {
                    // Code for Terminal specified at Java.ccc:808:33
                    consumeToken(PLUS);
                } else if (nextTokenType() == MINUS) {
                    // Code for Terminal specified at Java.ccc:808:42
                    consumeToken(MINUS);
                } else {
                    pushOntoCallStack("AdditiveExpression", "Java.ccc", 808, 33);
                    throw new ParseException(getToken(1), first_set$Java_ccc$808$33, parsingStack);
                }
                // Code for NonTerminal specified at Java.ccc:808:52
                pushOntoCallStack("AdditiveExpression", "Java.ccc", 808, 52);
                try {
                    MultiplicativeExpression();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:811:1
    final public void MultiplicativeExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "MultiplicativeExpression";
        // Code for BNFProduction specified at Java.ccc:811:1
        MultiplicativeExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new MultiplicativeExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:812:3
            pushOntoCallStack("MultiplicativeExpression", "Java.ccc", 812, 3);
            try {
                UnaryExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:812:19
            while (true) {
                if (!(nextTokenType() == STAR || nextTokenType == SLASH || nextTokenType == REM)) break;
                if (nextTokenType() == STAR) {
                    // Code for Terminal specified at Java.ccc:812:24
                    consumeToken(STAR);
                } else if (nextTokenType() == SLASH) {
                    // Code for Terminal specified at Java.ccc:812:33
                    consumeToken(SLASH);
                } else if (nextTokenType() == REM) {
                    // Code for Terminal specified at Java.ccc:812:42
                    consumeToken(REM);
                } else {
                    pushOntoCallStack("MultiplicativeExpression", "Java.ccc", 812, 24);
                    throw new ParseException(getToken(1), first_set$Java_ccc$812$24, parsingStack);
                }
                // Code for NonTerminal specified at Java.ccc:812:50
                pushOntoCallStack("MultiplicativeExpression", "Java.ccc", 812, 50);
                try {
                    UnaryExpression();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> UnaryExpression_FIRST_SET = UnaryExpression_FIRST_SET_init();

    private static EnumSet<TokenType> UnaryExpression_FIRST_SET_init() {
        return tokenTypeSet(UNDERSCORE, BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    // Java.ccc:815:1
    final public void UnaryExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "UnaryExpression";
        // Code for BNFProduction specified at Java.ccc:815:1
        UnaryExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new UnaryExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at Java.ccc:816:3
            if (nextTokenType() == PLUS || nextTokenType == MINUS) {
                if (nextTokenType() == PLUS) {
                    // Code for Terminal specified at Java.ccc:816:5
                    consumeToken(PLUS);
                } else if (nextTokenType() == MINUS) {
                    // Code for Terminal specified at Java.ccc:816:14
                    consumeToken(MINUS);
                } else {
                    pushOntoCallStack("UnaryExpression", "Java.ccc", 816, 5);
                    throw new ParseException(getToken(1), first_set$Java_ccc$816$5, parsingStack);
                }
                // Code for NonTerminal specified at Java.ccc:816:24
                pushOntoCallStack("UnaryExpression", "Java.ccc", 816, 24);
                try {
                    UnaryExpression();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == INCR) {
                // Code for NonTerminal specified at Java.ccc:818:3
                pushOntoCallStack("UnaryExpression", "Java.ccc", 818, 3);
                try {
                    PreIncrementExpression();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == DECR) {
                // Code for NonTerminal specified at Java.ccc:820:3
                pushOntoCallStack("UnaryExpression", "Java.ccc", 820, 3);
                try {
                    PreDecrementExpression();
                } finally {
                    popCallStack();
                }
            } else if (first_set$Java_ccc$822$3.contains(nextTokenType())) {
                // Code for NonTerminal specified at Java.ccc:822:3
                pushOntoCallStack("UnaryExpression", "Java.ccc", 822, 3);
                try {
                    UnaryExpressionNotPlusMinus();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("UnaryExpression", "Java.ccc", 816, 3);
                throw new ParseException(getToken(1), UnaryExpression_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:825:1
    final public void PreIncrementExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "PreIncrementExpression";
        // Code for BNFProduction specified at Java.ccc:825:1
        PreIncrementExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new PreIncrementExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:826:3
            consumeToken(INCR);
            // Code for NonTerminal specified at Java.ccc:826:10
            pushOntoCallStack("PreIncrementExpression", "Java.ccc", 826, 10);
            try {
                UnaryExpression();
            } finally {
                popCallStack();
            }
            // Code for Assertion specified at Java.ccc:827:3
            if (!(((Expression) peekNode()).isAssignableTo())) {
                fail("Assertion at: Java.ccc:827:3 failed. " + "Expression after ++ is not an assignable variable.", getToken(1));
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:831:1
    final public void PreDecrementExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "PreDecrementExpression";
        // Code for BNFProduction specified at Java.ccc:831:1
        PreDecrementExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new PreDecrementExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:832:3
            consumeToken(DECR);
            // Code for NonTerminal specified at Java.ccc:832:10
            pushOntoCallStack("PreDecrementExpression", "Java.ccc", 832, 10);
            try {
                UnaryExpression();
            } finally {
                popCallStack();
            }
            // Code for Assertion specified at Java.ccc:833:3
            if (!(((Expression) peekNode()).isAssignableTo())) {
                fail("Assertion at: Java.ccc:833:3 failed. " + "expression after -- is not an assignable variable", getToken(1));
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> UnaryExpressionNotPlusMinus_FIRST_SET = UnaryExpressionNotPlusMinus_FIRST_SET_init();

    private static EnumSet<TokenType> UnaryExpressionNotPlusMinus_FIRST_SET_init() {
        return tokenTypeSet(UNDERSCORE, BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, AT, BANG, TILDE, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    // Java.ccc:837:1
    final public void UnaryExpressionNotPlusMinus() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "UnaryExpressionNotPlusMinus";
        // Code for BNFProduction specified at Java.ccc:837:1
        UnaryExpressionNotPlusMinus thisProduction = null;
        if (buildTree) {
            thisProduction = new UnaryExpressionNotPlusMinus();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at Java.ccc:838:3
            if (nextTokenType() == BANG || nextTokenType == TILDE) {
                if (nextTokenType() == TILDE) {
                    // Code for Terminal specified at Java.ccc:838:5
                    consumeToken(TILDE);
                } else if (nextTokenType() == BANG) {
                    // Code for Terminal specified at Java.ccc:838:15
                    consumeToken(BANG);
                } else {
                    pushOntoCallStack("UnaryExpressionNotPlusMinus", "Java.ccc", 838, 5);
                    throw new ParseException(getToken(1), first_set$Java_ccc$838$5, parsingStack);
                }
                // Code for NonTerminal specified at Java.ccc:838:24
                pushOntoCallStack("UnaryExpressionNotPlusMinus", "Java.ccc", 838, 24);
                try {
                    UnaryExpression();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$840$3()) {
                // Code for NonTerminal specified at Java.ccc:840:3
                pushOntoCallStack("UnaryExpressionNotPlusMinus", "Java.ccc", 840, 3);
                try {
                    LambdaExpression();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == SWITCH) {
                // Code for NonTerminal specified at Java.ccc:842:3
                pushOntoCallStack("UnaryExpressionNotPlusMinus", "Java.ccc", 842, 3);
                try {
                    SwitchExpression();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$844$3()) {
                // Code for NonTerminal specified at Java.ccc:844:3
                pushOntoCallStack("UnaryExpressionNotPlusMinus", "Java.ccc", 844, 3);
                try {
                    PrimitiveCastExpression();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$846$3()) {
                // Code for NonTerminal specified at Java.ccc:846:3
                pushOntoCallStack("UnaryExpressionNotPlusMinus", "Java.ccc", 846, 3);
                try {
                    ObjectCastExpression();
                } finally {
                    popCallStack();
                }
            } else if (first_set$Java_ccc$848$3.contains(nextTokenType())) {
                // Code for NonTerminal specified at Java.ccc:848:3
                pushOntoCallStack("UnaryExpressionNotPlusMinus", "Java.ccc", 848, 3);
                try {
                    PostfixExpression();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("UnaryExpressionNotPlusMinus", "Java.ccc", 838, 3);
                throw new ParseException(getToken(1), UnaryExpressionNotPlusMinus_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:851:1
    final public void PostfixExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "PostfixExpression";
        // Code for BNFProduction specified at Java.ccc:851:1
        PostfixExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new PostfixExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:852:3
            pushOntoCallStack("PostfixExpression", "Java.ccc", 852, 3);
            try {
                PrimaryExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:853:3
            if ((((Expression) peekNode()).isAssignableTo()) && scan$Java_ccc$854$5()) {
                if (nextTokenType() == INCR) {
                    // Code for Terminal specified at Java.ccc:856:6
                    consumeToken(INCR);
                } else if (nextTokenType() == DECR) {
                    // Code for Terminal specified at Java.ccc:856:15
                    consumeToken(DECR);
                } else {
                    pushOntoCallStack("PostfixExpression", "Java.ccc", 856, 6);
                    throw new ParseException(getToken(1), first_set$Java_ccc$856$6, parsingStack);
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:860:1
    final public void SwitchExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "SwitchExpression";
        // Code for BNFProduction specified at Java.ccc:860:1
        SwitchExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new SwitchExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:861:4
            pushOntoCallStack("SwitchExpression", "Java.ccc", 861, 4);
            try {
                SwitchStatement();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:864:1
    final public void PrimitiveCastExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "PrimitiveCastExpression";
        // Code for BNFProduction specified at Java.ccc:864:1
        CastExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new CastExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:865:4
            consumeToken(LPAREN);
            // Code for NonTerminal specified at Java.ccc:865:13
            pushOntoCallStack("PrimitiveCastExpression", "Java.ccc", 865, 13);
            try {
                PrimitiveType();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:865:27
            consumeToken(RPAREN);
            // Code for NonTerminal specified at Java.ccc:865:41
            pushOntoCallStack("PrimitiveCastExpression", "Java.ccc", 865, 41);
            try {
                UnaryExpression();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:868:1
    final public void ObjectCastExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ObjectCastExpression";
        // Code for BNFProduction specified at Java.ccc:868:1
        ObjectCastExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new ObjectCastExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:869:4
            consumeToken(LPAREN);
            // Code for NonTerminal specified at Java.ccc:869:13
            pushOntoCallStack("ObjectCastExpression", "Java.ccc", 869, 13);
            try {
                ReferenceType();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:869:27
            while (true) {
                if (!(nextTokenType() == BIT_AND)) break;
                // Code for Terminal specified at Java.ccc:869:28
                consumeToken(BIT_AND);
                // Code for NonTerminal specified at Java.ccc:869:38
                pushOntoCallStack("ObjectCastExpression", "Java.ccc", 869, 38);
                try {
                    ObjectType();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:869:51
            consumeToken(RPAREN);
            // Code for NonTerminal specified at Java.ccc:869:66
            pushOntoCallStack("ObjectCastExpression", "Java.ccc", 869, 66);
            try {
                UnaryExpressionNotPlusMinus();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:872:1
    final public void PrimaryExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "PrimaryExpression";
        // Code for BNFProduction specified at Java.ccc:872:1
        if (first_set$Java_ccc$874$3.contains(nextTokenType())) {
            // Code for NonTerminal specified at Java.ccc:874:3
            pushOntoCallStack("PrimaryExpression", "Java.ccc", 874, 3);
            try {
                LiteralExpression();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == THIS) {
            // Code for Terminal specified at Java.ccc:876:3
            LiteralExpression PrimaryExpression1 = null;
            if (buildTree) {
                PrimaryExpression1 = new LiteralExpression();
                openNodeScope(PrimaryExpression1);
            }
            ParseException parseException30 = null;
            int callStackSize31 = parsingStack.size();
            try {
                consumeToken(THIS);
            } catch (ParseException e) {
                parseException30 = e;
                throw e;
            } finally {
                restoreCallStack(callStackSize31);
                if (PrimaryExpression1 != null) {
                    if (parseException30 == null) {
                        closeNodeScope(PrimaryExpression1, true);
                    } else {
                        clearNodeScope();
                    }
                }
            }
        } else if (nextTokenType() == SUPER) {
            // Code for Terminal specified at Java.ccc:878:3
            LiteralExpression PrimaryExpression2 = null;
            if (buildTree) {
                PrimaryExpression2 = new LiteralExpression();
                openNodeScope(PrimaryExpression2);
            }
            ParseException parseException38 = null;
            int callStackSize39 = parsingStack.size();
            try {
                consumeToken(SUPER);
            } catch (ParseException e) {
                parseException38 = e;
                throw e;
            } finally {
                restoreCallStack(callStackSize39);
                if (PrimaryExpression2 != null) {
                    if (parseException38 == null) {
                        closeNodeScope(PrimaryExpression2, true);
                    } else {
                        clearNodeScope();
                    }
                }
            }
        } else if (nextTokenType() == LPAREN) {
            // Code for NonTerminal specified at Java.ccc:880:3
            pushOntoCallStack("PrimaryExpression", "Java.ccc", 880, 3);
            try {
                Parentheses();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == NEW) {
            // Code for NonTerminal specified at Java.ccc:882:3
            pushOntoCallStack("PrimaryExpression", "Java.ccc", 882, 3);
            try {
                AllocationExpression();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$884$3()) {
            // Code for NonTerminal specified at Java.ccc:884:3
            pushOntoCallStack("PrimaryExpression", "Java.ccc", 884, 3);
            try {
                ClassLiteral();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$886$3()) {
            // Code for NonTerminal specified at Java.ccc:886:3
            pushOntoCallStack("PrimaryExpression", "Java.ccc", 886, 3);
            try {
                MethodReference();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == IDENTIFIER) {
            // Code for NonTerminal specified at Java.ccc:888:3
            pushOntoCallStack("PrimaryExpression", "Java.ccc", 888, 3);
            try {
                Name();
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("PrimaryExpression", "Java.ccc", 874, 3);
            throw new ParseException(getToken(1), first_set$Java_ccc$874$3$, parsingStack);
        }
        // Code for ZeroOrMore specified at Java.ccc:890:2
        while (true) {
            // Code for ExpansionChoice specified at Java.ccc:891:3
            if (scan$Java_ccc$891$3()) {
                DotThis PrimaryExpression3 = null;
                if (buildTree) {
                    PrimaryExpression3 = new DotThis();
                    openNodeScope(PrimaryExpression3);
                }
                ParseException parseException94 = null;
                int callStackSize95 = parsingStack.size();
                try {
                    // Code for Terminal specified at Java.ccc:891:4
                    consumeToken(DOT);
                    // Code for Terminal specified at Java.ccc:891:10
                    consumeToken(THIS);
                } catch (ParseException e) {
                    parseException94 = e;
                    throw e;
                } finally {
                    restoreCallStack(callStackSize95);
                    if (PrimaryExpression3 != null) {
                        if (parseException94 == null) {
                            closeNodeScope(PrimaryExpression3, nodeArity() + 1);
                        } else {
                            clearNodeScope();
                        }
                    }
                }
            } else if (scan$Java_ccc$893$3()) {
                DotSuper PrimaryExpression4 = null;
                if (buildTree) {
                    PrimaryExpression4 = new DotSuper();
                    openNodeScope(PrimaryExpression4);
                }
                ParseException parseException113 = null;
                int callStackSize114 = parsingStack.size();
                try {
                    // Code for Terminal specified at Java.ccc:893:4
                    consumeToken(DOT);
                    // Code for Terminal specified at Java.ccc:893:10
                    consumeToken(SUPER);
                } catch (ParseException e) {
                    parseException113 = e;
                    throw e;
                } finally {
                    restoreCallStack(callStackSize114);
                    if (PrimaryExpression4 != null) {
                        if (parseException113 == null) {
                            closeNodeScope(PrimaryExpression4, nodeArity() + 1);
                        } else {
                            clearNodeScope();
                        }
                    }
                }
            } else if (scan$Java_ccc$895$3()) {
                DotNew PrimaryExpression5 = null;
                if (buildTree) {
                    PrimaryExpression5 = new DotNew();
                    openNodeScope(PrimaryExpression5);
                }
                ParseException parseException132 = null;
                int callStackSize133 = parsingStack.size();
                try {
                    // Code for Terminal specified at Java.ccc:895:4
                    consumeToken(DOT);
                    // Code for NonTerminal specified at Java.ccc:895:16
                    pushOntoCallStack("PrimaryExpression", "Java.ccc", 895, 16);
                    try {
                        AllocationExpression();
                    } finally {
                        popCallStack();
                    }
                } catch (ParseException e) {
                    parseException132 = e;
                    throw e;
                } finally {
                    restoreCallStack(callStackSize133);
                    if (PrimaryExpression5 != null) {
                        if (parseException132 == null) {
                            closeNodeScope(PrimaryExpression5, nodeArity() + 1);
                        } else {
                            clearNodeScope();
                        }
                    }
                }
            } else if (nextTokenType() == LBRACKET) {
                ArrayAccess PrimaryExpression6 = null;
                if (buildTree) {
                    PrimaryExpression6 = new ArrayAccess();
                    openNodeScope(PrimaryExpression6);
                }
                ParseException parseException151 = null;
                int callStackSize152 = parsingStack.size();
                try {
                    // Code for Terminal specified at Java.ccc:897:4
                    consumeToken(LBRACKET);
                    // Code for NonTerminal specified at Java.ccc:897:15
                    pushOntoCallStack("PrimaryExpression", "Java.ccc", 897, 15);
                    try {
                        Expression();
                    } finally {
                        popCallStack();
                    }
                    // Code for Terminal specified at Java.ccc:897:26
                    consumeToken(RBRACKET);
                } catch (ParseException e) {
                    parseException151 = e;
                    throw e;
                } finally {
                    restoreCallStack(callStackSize152);
                    if (PrimaryExpression6 != null) {
                        if (parseException151 == null) {
                            closeNodeScope(PrimaryExpression6, nodeArity() + 1);
                        } else {
                            clearNodeScope();
                        }
                    }
                }
            } else if (nextTokenType() == DOT) {
                DotName PrimaryExpression7 = null;
                if (buildTree) {
                    PrimaryExpression7 = new DotName();
                    openNodeScope(PrimaryExpression7);
                }
                ParseException parseException174 = null;
                int callStackSize175 = parsingStack.size();
                try {
                    // Code for Terminal specified at Java.ccc:899:4
                    consumeToken(DOT);
                    // Code for ZeroOrOne specified at Java.ccc:899:10
                    if (scan$Java_ccc$899$11()) {
                        // Code for NonTerminal specified at Java.ccc:899:11
                        pushOntoCallStack("PrimaryExpression", "Java.ccc", 899, 11);
                        try {
                            TypeArguments();
                        } finally {
                            popCallStack();
                        }
                    }
                    // Code for Terminal specified at Java.ccc:899:26
                    consumeToken(IDENTIFIER);
                } catch (ParseException e) {
                    parseException174 = e;
                    throw e;
                } finally {
                    restoreCallStack(callStackSize175);
                    if (PrimaryExpression7 != null) {
                        if (parseException174 == null) {
                            closeNodeScope(PrimaryExpression7, nodeArity() + 1);
                        } else {
                            clearNodeScope();
                        }
                    }
                }
            } else if (nextTokenType() == DOUBLE_COLON) {
                MethodReference PrimaryExpression8 = null;
                if (buildTree) {
                    PrimaryExpression8 = new MethodReference();
                    openNodeScope(PrimaryExpression8);
                }
                ParseException parseException205 = null;
                int callStackSize206 = parsingStack.size();
                try {
                    // Code for Terminal specified at Java.ccc:901:4
                    consumeToken(DOUBLE_COLON);
                    // Code for ZeroOrOne specified at Java.ccc:901:19
                    if (scan$Java_ccc$901$20()) {
                        // Code for NonTerminal specified at Java.ccc:901:20
                        pushOntoCallStack("PrimaryExpression", "Java.ccc", 901, 20);
                        try {
                            TypeArguments();
                        } finally {
                            popCallStack();
                        }
                    }
                    if (nextTokenType() == IDENTIFIER) {
                        // Code for Terminal specified at Java.ccc:901:36
                        consumeToken(IDENTIFIER);
                    } else if (nextTokenType() == NEW) {
                        // Code for Terminal specified at Java.ccc:901:49
                        consumeToken(NEW);
                    } else {
                        pushOntoCallStack("PrimaryExpression", "Java.ccc", 901, 36);
                        throw new ParseException(getToken(1), first_set$Java_ccc$901$36, parsingStack);
                    }
                } catch (ParseException e) {
                    parseException205 = e;
                    throw e;
                } finally {
                    restoreCallStack(callStackSize206);
                    if (PrimaryExpression8 != null) {
                        if (parseException205 == null) {
                            closeNodeScope(PrimaryExpression8, nodeArity() + 1);
                        } else {
                            clearNodeScope();
                        }
                    }
                }
            } else if (scan$Java_ccc$909$3()) {
                // Code for Assertion specified at Java.ccc:909:3
                // Code for NonTerminal specified at Java.ccc:910:3
                MethodCall PrimaryExpression9 = null;
                if (buildTree) {
                    PrimaryExpression9 = new MethodCall();
                    openNodeScope(PrimaryExpression9);
                }
                ParseException parseException257 = null;
                int callStackSize258 = parsingStack.size();
                try {
                    pushOntoCallStack("PrimaryExpression", "Java.ccc", 910, 3);
                    try {
                        InvocationArguments();
                    } finally {
                        popCallStack();
                    }
                } catch (ParseException e) {
                    parseException257 = e;
                    throw e;
                } finally {
                    restoreCallStack(callStackSize258);
                    if (PrimaryExpression9 != null) {
                        if (parseException257 == null) {
                            closeNodeScope(PrimaryExpression9, nodeArity() + 1);
                        } else {
                            clearNodeScope();
                        }
                    }
                }
            } else {
                break;
            }
        }
        // Code for Assertion specified at Java.ccc:912:2
        if (!(getTokenType(0) != SUPER)) {
            fail("Assertion at: Java.ccc:912:2 failed. " + "Not a valid expression here " + getToken(0).getLocation(), getToken(1));
        }
    }

    // Java.ccc:915:1
    final public void LiteralExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "LiteralExpression";
        // Code for BNFProduction specified at Java.ccc:915:1
        LiteralExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new LiteralExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:915:22
            pushOntoCallStack("LiteralExpression", "Java.ccc", 915, 22);
            try {
                Literal();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:917:1
    final public void Parentheses() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Parentheses";
        // Code for BNFProduction specified at Java.ccc:917:1
        Parentheses thisProduction = null;
        if (buildTree) {
            thisProduction = new Parentheses();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:918:5
            consumeToken(LPAREN);
            // Code for NonTerminal specified at Java.ccc:919:5
            pushOntoCallStack("Parentheses", "Java.ccc", 919, 5);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at Java.ccc:919:16
            thisProduction.setNestedExpression((Expression) peekNode());
            // Code for Terminal specified at Java.ccc:920:5
            consumeToken(RPAREN);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:928:1
    final public void ClassLiteral() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ClassLiteral";
        // Code for BNFProduction specified at Java.ccc:928:1
        ClassLiteral thisProduction = null;
        if (buildTree) {
            thisProduction = new ClassLiteral();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            if (nextTokenType() == VOID) {
                // Code for Terminal specified at Java.ccc:928:17
                consumeToken(VOID);
            } else if (scan$Java_ccc$928$26()) {
                // Code for NonTerminal specified at Java.ccc:928:26
                pushOntoCallStack("ClassLiteral", "Java.ccc", 928, 26);
                try {
                    Type();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("ClassLiteral", "Java.ccc", 928, 17);
                throw new ParseException(getToken(1), first_set$Java_ccc$928$17, parsingStack);
            }
            // Code for Terminal specified at Java.ccc:928:32
            consumeToken(DOT);
            // Code for Terminal specified at Java.ccc:928:38
            consumeToken(CLASS);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:930:1
    final public void MethodReference() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "MethodReference";
        // Code for BNFProduction specified at Java.ccc:930:1
        MethodReference thisProduction = null;
        if (buildTree) {
            thisProduction = new MethodReference();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            if (scan$Java_ccc$931$6()) {
                // Code for NonTerminal specified at Java.ccc:931:6
                pushOntoCallStack("MethodReference", "Java.ccc", 931, 6);
                try {
                    Type();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == SUPER) {
                // Code for Terminal specified at Java.ccc:931:13
                consumeToken(SUPER);
            } else {
                pushOntoCallStack("MethodReference", "Java.ccc", 931, 6);
                throw new ParseException(getToken(1), first_set$Java_ccc$931$6, parsingStack);
            }
            // Code for Terminal specified at Java.ccc:932:6
            consumeToken(DOUBLE_COLON);
            // Code for ZeroOrOne specified at Java.ccc:933:6
            if (scan$Java_ccc$933$7()) {
                // Code for NonTerminal specified at Java.ccc:933:7
                pushOntoCallStack("MethodReference", "Java.ccc", 933, 7);
                try {
                    TypeArguments();
                } finally {
                    popCallStack();
                }
            }
            if (nextTokenType() == IDENTIFIER) {
                // Code for Terminal specified at Java.ccc:934:7
                consumeToken(IDENTIFIER);
            } else if (nextTokenType() == NEW) {
                // Code for Terminal specified at Java.ccc:934:20
                consumeToken(NEW);
            } else {
                pushOntoCallStack("MethodReference", "Java.ccc", 934, 7);
                throw new ParseException(getToken(1), first_set$Java_ccc$934$7, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> Literal_FIRST_SET = Literal_FIRST_SET_init();

    private static EnumSet<TokenType> Literal_FIRST_SET_init() {
        return tokenTypeSet(FALSE, NULL, TRUE, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL);
    }

    // Java.ccc:937:1
    final public void Literal() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Literal";
        // Code for BNFProduction specified at Java.ccc:937:1
        // Code for ExpansionChoice specified at Java.ccc:938:3
        if (nextTokenType() == INTEGER_LITERAL) {
            // Code for Terminal specified at Java.ccc:938:3
            consumeToken(INTEGER_LITERAL);
        } else if (nextTokenType() == LONG_LITERAL) {
            // Code for Terminal specified at Java.ccc:940:3
            consumeToken(LONG_LITERAL);
        } else if (nextTokenType() == FLOATING_POINT_LITERAL) {
            // Code for Terminal specified at Java.ccc:942:3
            consumeToken(FLOATING_POINT_LITERAL);
        } else if (nextTokenType() == CHARACTER_LITERAL) {
            // Code for Terminal specified at Java.ccc:944:3
            consumeToken(CHARACTER_LITERAL);
        } else if (nextTokenType() == STRING_LITERAL) {
            // Code for Terminal specified at Java.ccc:946:3
            consumeToken(STRING_LITERAL);
        } else if (nextTokenType() == TEXT_BLOCK_LITERAL) {
            // Code for Terminal specified at Java.ccc:948:3
            consumeToken(TEXT_BLOCK_LITERAL);
        } else if (nextTokenType() == TRUE) {
            // Code for Terminal specified at Java.ccc:950:3
            consumeToken(TRUE);
        } else if (nextTokenType() == FALSE) {
            // Code for Terminal specified at Java.ccc:952:3
            consumeToken(FALSE);
        } else if (nextTokenType() == NULL) {
            // Code for Terminal specified at Java.ccc:954:3
            consumeToken(NULL);
        } else {
            pushOntoCallStack("Literal", "Java.ccc", 938, 3);
            throw new ParseException(getToken(1), Literal_FIRST_SET, parsingStack);
        }
    }

    // Java.ccc:957:1
    final public void InvocationArguments() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "InvocationArguments";
        // Code for BNFProduction specified at Java.ccc:957:1
        InvocationArguments thisProduction = null;
        if (buildTree) {
            thisProduction = new InvocationArguments();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:958:5
            consumeToken(LPAREN);
            // Code for ZeroOrOne specified at Java.ccc:959:5
            if (first_set$Java_ccc$959$7.contains(nextTokenType())) {
                // Code for NonTerminal specified at Java.ccc:959:7
                pushOntoCallStack("InvocationArguments", "Java.ccc", 959, 7);
                try {
                    Expression();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at Java.ccc:959:18
                while (true) {
                    if (!(nextTokenType() == COMMA)) break;
                    // Code for Terminal specified at Java.ccc:959:19
                    consumeToken(COMMA);
                    // Code for NonTerminal specified at Java.ccc:959:27
                    pushOntoCallStack("InvocationArguments", "Java.ccc", 959, 27);
                    try {
                        Expression();
                    } finally {
                        popCallStack();
                    }
                }
            }
            // Code for Terminal specified at Java.ccc:960:5
            consumeToken(RPAREN);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> AllocationExpression_FIRST_SET = tokenTypeSet(NEW);

    // Java.ccc:963:1
    final public void AllocationExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "AllocationExpression";
        // Code for BNFProduction specified at Java.ccc:963:1
        AllocationExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new AllocationExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at Java.ccc:964:3
            if (scan$Java_ccc$964$3()) {
                // Code for Terminal specified at Java.ccc:964:3
                consumeToken(NEW);
                // Code for NonTerminal specified at Java.ccc:964:9
                pushOntoCallStack("AllocationExpression", "Java.ccc", 964, 9);
                try {
                    PrimitiveType();
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Java.ccc:964:28
                pushOntoCallStack("AllocationExpression", "Java.ccc", 964, 28);
                try {
                    ArrayDimsAndInits();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == NEW) {
                // Code for Terminal specified at Java.ccc:966:3
                consumeToken(NEW);
                // Code for ZeroOrOne specified at Java.ccc:966:9
                if (scan$Java_ccc$966$10()) {
                    // Code for NonTerminal specified at Java.ccc:966:10
                    pushOntoCallStack("AllocationExpression", "Java.ccc", 966, 10);
                    try {
                        TypeArguments();
                    } finally {
                        popCallStack();
                    }
                }
                // Code for NonTerminal specified at Java.ccc:966:25
                pushOntoCallStack("AllocationExpression", "Java.ccc", 966, 25);
                try {
                    ObjectType();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrOne specified at Java.ccc:966:36
                if (nextTokenType() == LT) {
                    // Code for NonTerminal specified at Java.ccc:966:38
                    pushOntoCallStack("AllocationExpression", "Java.ccc", 966, 38);
                    try {
                        PossiblyEmptyTypeArguments();
                    } finally {
                        popCallStack();
                    }
                }
                if (nextTokenType() == LBRACKET || nextTokenType == AT) {
                    // Code for NonTerminal specified at Java.ccc:968:7
                    pushOntoCallStack("AllocationExpression", "Java.ccc", 968, 7);
                    try {
                        ArrayDimsAndInits();
                    } finally {
                        popCallStack();
                    }
                } else if (nextTokenType() == LPAREN) {
                    // Code for NonTerminal specified at Java.ccc:970:7
                    pushOntoCallStack("AllocationExpression", "Java.ccc", 970, 7);
                    try {
                        InvocationArguments();
                    } finally {
                        popCallStack();
                    }
                    // Code for ZeroOrOne specified at Java.ccc:970:27
                    if (nextTokenType() == LBRACE) {
                        // Code for NonTerminal specified at Java.ccc:970:29
                        pushOntoCallStack("AllocationExpression", "Java.ccc", 970, 29);
                        try {
                            ClassOrInterfaceBody();
                        } finally {
                            popCallStack();
                        }
                    }
                } else {
                    pushOntoCallStack("AllocationExpression", "Java.ccc", 968, 7);
                    throw new ParseException(getToken(1), first_set$Java_ccc$968$7, parsingStack);
                }
            } else {
                pushOntoCallStack("AllocationExpression", "Java.ccc", 964, 3);
                throw new ParseException(getToken(1), AllocationExpression_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> ArrayDimsAndInits_FIRST_SET = tokenTypeSet(LBRACKET, AT);

    // Java.ccc:974:1
    final public void ArrayDimsAndInits() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ArrayDimsAndInits";
        // Code for BNFProduction specified at Java.ccc:974:1
        ArrayDimsAndInits thisProduction = null;
        if (buildTree) {
            thisProduction = new ArrayDimsAndInits();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at Java.ccc:975:3
            if (scan$Java_ccc$975$3()) {
                // Code for OneOrMore specified at Java.ccc:976:3
                while (true) {
                    // Code for Terminal specified at Java.ccc:977:5
                    consumeToken(LBRACKET);
                    // Code for NonTerminal specified at Java.ccc:977:22
                    pushOntoCallStack("ArrayDimsAndInits", "Java.ccc", 977, 22);
                    try {
                        Expression();
                    } finally {
                        popCallStack();
                    }
                    // Code for Terminal specified at Java.ccc:977:33
                    consumeToken(RBRACKET);
                    if (!(scan$Java_ccc$977$5())) break;
                }
                // Code for ZeroOrMore specified at Java.ccc:979:3
                while (true) {
                    if (!(scan$Java_ccc$980$5())) break;
                    // Code for ZeroOrMore specified at Java.ccc:980:5
                    while (true) {
                        if (!(scan$Java_ccc$980$6())) break;
                        // Code for NonTerminal specified at Java.ccc:980:6
                        pushOntoCallStack("ArrayDimsAndInits", "Java.ccc", 980, 6);
                        try {
                            Annotation();
                        } finally {
                            popCallStack();
                        }
                    }
                    // Code for Terminal specified at Java.ccc:980:19
                    consumeToken(LBRACKET);
                    // Code for Terminal specified at Java.ccc:980:29
                    consumeToken(RBRACKET);
                }
            } else if (nextTokenType() == LBRACKET || nextTokenType == AT) {
                // Code for OneOrMore specified at Java.ccc:983:3
                while (true) {
                    // Code for ZeroOrMore specified at Java.ccc:984:5
                    while (true) {
                        if (!(scan$Java_ccc$984$6())) break;
                        // Code for NonTerminal specified at Java.ccc:984:6
                        pushOntoCallStack("ArrayDimsAndInits", "Java.ccc", 984, 6);
                        try {
                            Annotation();
                        } finally {
                            popCallStack();
                        }
                    }
                    // Code for Terminal specified at Java.ccc:984:19
                    consumeToken(LBRACKET);
                    // Code for Terminal specified at Java.ccc:984:29
                    consumeToken(RBRACKET);
                    if (!(nextTokenType() == LBRACKET || nextTokenType == AT)) break;
                }
                // Code for NonTerminal specified at Java.ccc:986:3
                pushOntoCallStack("ArrayDimsAndInits", "Java.ccc", 986, 3);
                try {
                    ArrayInitializer();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("ArrayDimsAndInits", "Java.ccc", 975, 3);
                throw new ParseException(getToken(1), ArrayDimsAndInits_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:989:1
    final public void Label() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Label";
        // Code for BNFProduction specified at Java.ccc:989:1
        Label thisProduction = null;
        if (buildTree) {
            thisProduction = new Label();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:989:9
            consumeToken(IDENTIFIER);
            // Code for Terminal specified at Java.ccc:989:21
            consumeToken(COLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:991:1
    final public void LabeledStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "LabeledStatement";
        // Code for BNFProduction specified at Java.ccc:991:1
        LabeledStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new LabeledStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:991:20
            pushOntoCallStack("LabeledStatement", "Java.ccc", 991, 20);
            try {
                Label();
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:991:31
            pushOntoCallStack("LabeledStatement", "Java.ccc", 991, 31);
            try {
                Statement();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> Statement_FIRST_SET = Statement_FIRST_SET_init();

    private static EnumSet<TokenType> Statement_FIRST_SET_init() {
        return tokenTypeSet(_ASSERT, BOOLEAN, BREAK, BYTE, CHAR, CONTINUE, DO, DOUBLE, FALSE, FLOAT, FOR, IF, INT, LONG, NEW, NULL, RETURN, SHORT, SUPER, SWITCH, SYNCHRONIZED, THIS, THROW, TRUE, TRY, VOID, WHILE, YIELD, LPAREN, LBRACE, SEMICOLON, AT, INCR, DECR, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    // Java.ccc:993:1
    final public void Statement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Statement";
        // Code for BNFProduction specified at Java.ccc:993:1
        // Code for ExpansionChoice specified at Java.ccc:994:3
        if (scan$Java_ccc$994$3()) {
            // Code for NonTerminal specified at Java.ccc:994:3
            pushOntoCallStack("Statement", "Java.ccc", 994, 3);
            try {
                LabeledStatement();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == _ASSERT) {
            // Code for NonTerminal specified at Java.ccc:996:3
            pushOntoCallStack("Statement", "Java.ccc", 996, 3);
            try {
                AssertStatement();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == LBRACE) {
            // Code for NonTerminal specified at Java.ccc:998:3
            pushOntoCallStack("Statement", "Java.ccc", 998, 3);
            try {
                Block();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$1000$3()) {
            // Code for NonTerminal specified at Java.ccc:1000:3
            pushOntoCallStack("Statement", "Java.ccc", 1000, 3);
            try {
                YieldStatement();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == SEMICOLON) {
            // Code for NonTerminal specified at Java.ccc:1002:3
            pushOntoCallStack("Statement", "Java.ccc", 1002, 3);
            try {
                EmptyStatement();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == SWITCH) {
            // Code for NonTerminal specified at Java.ccc:1004:3
            pushOntoCallStack("Statement", "Java.ccc", 1004, 3);
            try {
                SwitchStatement();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == IF) {
            // Code for NonTerminal specified at Java.ccc:1006:3
            pushOntoCallStack("Statement", "Java.ccc", 1006, 3);
            try {
                IfStatement();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == WHILE) {
            // Code for NonTerminal specified at Java.ccc:1008:3
            pushOntoCallStack("Statement", "Java.ccc", 1008, 3);
            try {
                WhileStatement();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == DO) {
            // Code for NonTerminal specified at Java.ccc:1010:3
            pushOntoCallStack("Statement", "Java.ccc", 1010, 3);
            try {
                DoStatement();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == FOR) {
            // Code for NonTerminal specified at Java.ccc:1012:3
            pushOntoCallStack("Statement", "Java.ccc", 1012, 3);
            try {
                ForStatement();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == BREAK) {
            // Code for NonTerminal specified at Java.ccc:1014:3
            pushOntoCallStack("Statement", "Java.ccc", 1014, 3);
            try {
                BreakStatement();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == CONTINUE) {
            // Code for NonTerminal specified at Java.ccc:1016:3
            pushOntoCallStack("Statement", "Java.ccc", 1016, 3);
            try {
                ContinueStatement();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == RETURN) {
            // Code for NonTerminal specified at Java.ccc:1018:3
            pushOntoCallStack("Statement", "Java.ccc", 1018, 3);
            try {
                ReturnStatement();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == THROW) {
            // Code for NonTerminal specified at Java.ccc:1020:3
            pushOntoCallStack("Statement", "Java.ccc", 1020, 3);
            try {
                ThrowStatement();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == SYNCHRONIZED) {
            // Code for NonTerminal specified at Java.ccc:1022:3
            pushOntoCallStack("Statement", "Java.ccc", 1022, 3);
            try {
                SynchronizedStatement();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == TRY) {
            // Code for NonTerminal specified at Java.ccc:1024:3
            pushOntoCallStack("Statement", "Java.ccc", 1024, 3);
            try {
                TryStatement();
            } finally {
                popCallStack();
            }
        } else if (first_set$Java_ccc$1026$3.contains(nextTokenType())) {
            // Code for NonTerminal specified at Java.ccc:1026:3
            pushOntoCallStack("Statement", "Java.ccc", 1026, 3);
            try {
                ExpressionStatement();
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("Statement", "Java.ccc", 994, 3);
            throw new ParseException(getToken(1), Statement_FIRST_SET, parsingStack);
        }
    }

    // Java.ccc:1052:1
    final public void AssertStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "AssertStatement";
        // Code for BNFProduction specified at Java.ccc:1052:1
        AssertStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new AssertStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1052:19
            consumeToken(_ASSERT);
            // Code for NonTerminal specified at Java.ccc:1052:29
            pushOntoCallStack("AssertStatement", "Java.ccc", 1052, 29);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:1052:40
            if (nextTokenType() == COLON) {
                // Code for Terminal specified at Java.ccc:1052:42
                consumeToken(COLON);
                // Code for NonTerminal specified at Java.ccc:1052:50
                pushOntoCallStack("AssertStatement", "Java.ccc", 1052, 50);
                try {
                    Expression();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:1052:63
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1054:1
    final public void Block() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Block";
        // Code for BNFProduction specified at Java.ccc:1054:1
        CodeBlock thisProduction = null;
        if (buildTree) {
            thisProduction = new CodeBlock();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1054:20
            consumeToken(LBRACE);
            // Code for ZeroOrMore specified at Java.ccc:1054:29
            while (true) {
                if (!(scan$Java_ccc$1054$30())) break;
                // Code for NonTerminal specified at Java.ccc:1054:50
                pushOntoCallStack("Block", "Java.ccc", 1054, 50);
                try {
                    BlockStatement();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:1054:68
            consumeToken(RBRACE);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1056:1
    final public void BlockStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "BlockStatement";
        // Code for BNFProduction specified at Java.ccc:1056:1
        // Code for Assertion specified at Java.ccc:1057:2
        if (assert$Java_ccc$1057$11()) {
            fail("Assertion at: Java.ccc:1057:2 failed. " + "Cannot declare anything to be public, private, protected, or static  in a local context", getToken(1));
        }
        if (scan$Java_ccc$1059$3()) {
            // Code for NonTerminal specified at Java.ccc:1059:3
            pushOntoCallStack("BlockStatement", "Java.ccc", 1059, 3);
            try {
                RecordDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$1061$3()) {
            // Code for NonTerminal specified at Java.ccc:1061:3
            pushOntoCallStack("BlockStatement", "Java.ccc", 1061, 3);
            try {
                ClassDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$1063$3()) {
            // Code for NonTerminal specified at Java.ccc:1063:3
            pushOntoCallStack("BlockStatement", "Java.ccc", 1063, 3);
            try {
                InterfaceDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$1065$3()) {
            // Code for NonTerminal specified at Java.ccc:1065:3
            pushOntoCallStack("BlockStatement", "Java.ccc", 1065, 3);
            try {
                EnumDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$1067$3()) {
            // Code for NonTerminal specified at Java.ccc:1067:3
            pushOntoCallStack("BlockStatement", "Java.ccc", 1067, 3);
            try {
                LocalVariableDeclaration();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at Java.ccc:1067:28
            Node varDecl = peekNode();
            // Code for Terminal specified at Java.ccc:1068:3
            consumeToken(SEMICOLON);
            // Code for CodeBlock specified at Java.ccc:1068:15
            varDecl.add(popNode());
        } else if (first_set$Java_ccc$1070$3.contains(nextTokenType())) {
            // Code for NonTerminal specified at Java.ccc:1070:3
            pushOntoCallStack("BlockStatement", "Java.ccc", 1070, 3);
            try {
                Statement();
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("BlockStatement", "Java.ccc", 1059, 3);
            throw new ParseException(getToken(1), first_set$Java_ccc$1059$3, parsingStack);
        }
    }

    // Java.ccc:1074:1
    final public void LocalVariableDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "LocalVariableDeclaration";
        // Code for BNFProduction specified at Java.ccc:1074:1
        if (scan$Java_ccc$1078$6()) {
            // Code for NonTerminal specified at Java.ccc:1078:6
            pushOntoCallStack("LocalVariableDeclaration", "Java.ccc", 1078, 6);
            try {
                NoVarDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$1080$6()) {
            // Code for NonTerminal specified at Java.ccc:1080:6
            pushOntoCallStack("LocalVariableDeclaration", "Java.ccc", 1080, 6);
            try {
                VarDeclaration();
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("LocalVariableDeclaration", "Java.ccc", 1078, 6);
            throw new ParseException(getToken(1), first_set$Java_ccc$1078$6, parsingStack);
        }
    }

    // Java.ccc:1097:1
    final public void NoVarDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "NoVarDeclaration";
        // Code for BNFProduction specified at Java.ccc:1097:1
        NoVarDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new NoVarDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for CodeBlock specified at Java.ccc:1098:4
            permissibleModifiers = EnumSet.of(FINAL);
            // Code for NonTerminal specified at Java.ccc:1099:4
            pushOntoCallStack("NoVarDeclaration", "Java.ccc", 1099, 4);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for Assertion specified at Java.ccc:1100:4
            // Code for NonTerminal specified at Java.ccc:1102:4
            pushOntoCallStack("NoVarDeclaration", "Java.ccc", 1102, 4);
            try {
                Type();
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1102:9
            pushOntoCallStack("NoVarDeclaration", "Java.ccc", 1102, 9);
            try {
                VariableDeclarator();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:1102:28
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for Terminal specified at Java.ccc:1102:30
                consumeToken(COMMA);
                // Code for NonTerminal specified at Java.ccc:1102:38
                pushOntoCallStack("NoVarDeclaration", "Java.ccc", 1102, 38);
                try {
                    VariableDeclarator();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1105:1
    final public void VarDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "VarDeclaration";
        // Code for BNFProduction specified at Java.ccc:1105:1
        VarDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new VarDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for CodeBlock specified at Java.ccc:1106:3
            permissibleModifiers = EnumSet.of(FINAL);
            // Code for NonTerminal specified at Java.ccc:1107:3
            pushOntoCallStack("VarDeclaration", "Java.ccc", 1107, 3);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for Assertion specified at Java.ccc:1108:3
            if (!(checkNextTokenImage("var"))) {
                fail("Assertion at: Java.ccc:1108:3 failed. ", getToken(1));
            }
            if (nextTokenType() == VAR) {
                // Code for Terminal specified at Java.ccc:1110:5
                consumeToken(VAR);
            } else if (nextTokenType() == IDENTIFIER) {
                // Code for Terminal specified at Java.ccc:1112:5
                consumeToken(IDENTIFIER);
                // Code for CodeBlock specified at Java.ccc:1113:5
                replaceTokenType(VAR);
            } else {
                pushOntoCallStack("VarDeclaration", "Java.ccc", 1110, 5);
                throw new ParseException(getToken(1), first_set$Java_ccc$1110$5, parsingStack);
            }
            // Code for NonTerminal specified at Java.ccc:1117:3
            pushOntoCallStack("VarDeclaration", "Java.ccc", 1117, 3);
            try {
                VariableDeclarator();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1120:1
    final public void EmptyStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "EmptyStatement";
        // Code for BNFProduction specified at Java.ccc:1120:1
        EmptyStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new EmptyStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1120:19
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> StatementExpression_FIRST_SET = StatementExpression_FIRST_SET_init();

    private static EnumSet<TokenType> StatementExpression_FIRST_SET_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, THIS, TRUE, VOID, LPAREN, AT, INCR, DECR, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    // Java.ccc:1122:1
    final public void StatementExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "StatementExpression";
        // Code for BNFProduction specified at Java.ccc:1122:1
        StatementExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new StatementExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at Java.ccc:1123:3
            if (nextTokenType() == INCR) {
                // Code for NonTerminal specified at Java.ccc:1123:3
                pushOntoCallStack("StatementExpression", "Java.ccc", 1123, 3);
                try {
                    PreIncrementExpression();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == DECR) {
                // Code for NonTerminal specified at Java.ccc:1125:3
                pushOntoCallStack("StatementExpression", "Java.ccc", 1125, 3);
                try {
                    PreDecrementExpression();
                } finally {
                    popCallStack();
                }
            } else if (first_set$Java_ccc$1127$3.contains(nextTokenType())) {
                // Code for NonTerminal specified at Java.ccc:1127:3
                pushOntoCallStack("StatementExpression", "Java.ccc", 1127, 3);
                try {
                    PrimaryExpression();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at Java.ccc:1128:3
                Expression lhs = (Expression) peekNode();
                if ((lhs.isAssignableTo()) && scan$Java_ccc$1130$7()) {
                    if (nextTokenType() == INCR || nextTokenType == DECR) {
                        PostfixExpression StatementExpression1 = null;
                        if (buildTree) {
                            StatementExpression1 = new PostfixExpression();
                            openNodeScope(StatementExpression1);
                        }
                        ParseException parseException59 = null;
                        int callStackSize60 = parsingStack.size();
                        try {
                            if (nextTokenType() == INCR) {
                                // Code for Terminal specified at Java.ccc:1133:12
                                consumeToken(INCR);
                            } else if (nextTokenType() == DECR) {
                                // Code for Terminal specified at Java.ccc:1133:21
                                consumeToken(DECR);
                            } else {
                                pushOntoCallStack("StatementExpression", "Java.ccc", 1133, 12);
                                throw new ParseException(getToken(1), first_set$Java_ccc$1133$12, parsingStack);
                            }
                        } catch (ParseException e) {
                            parseException59 = e;
                            throw e;
                        } finally {
                            restoreCallStack(callStackSize60);
                            if (StatementExpression1 != null) {
                                if (parseException59 == null) {
                                    closeNodeScope(StatementExpression1, 2);
                                } else {
                                    clearNodeScope();
                                }
                            }
                        }
                    } else if (first_set$Java_ccc$1135$11.contains(nextTokenType())) {
                        // Code for NonTerminal specified at Java.ccc:1135:11
                        pushOntoCallStack("StatementExpression", "Java.ccc", 1135, 11);
                        try {
                            AssignmentOperator();
                        } finally {
                            popCallStack();
                        }
                        // Code for NonTerminal specified at Java.ccc:1135:30
                        AssignmentExpression StatementExpression2 = null;
                        if (buildTree) {
                            StatementExpression2 = new AssignmentExpression();
                            openNodeScope(StatementExpression2);
                        }
                        ParseException parseException90 = null;
                        int callStackSize91 = parsingStack.size();
                        try {
                            pushOntoCallStack("StatementExpression", "Java.ccc", 1135, 30);
                            try {
                                Expression();
                            } finally {
                                popCallStack();
                            }
                        } catch (ParseException e) {
                            parseException90 = e;
                            throw e;
                        } finally {
                            restoreCallStack(callStackSize91);
                            if (StatementExpression2 != null) {
                                if (parseException90 == null) {
                                    closeNodeScope(StatementExpression2, 3);
                                } else {
                                    clearNodeScope();
                                }
                            }
                        }
                    } else {
                        pushOntoCallStack("StatementExpression", "Java.ccc", 1133, 11);
                        throw new ParseException(getToken(1), first_set$Java_ccc$1133$11, parsingStack);
                    }
                } else {
                    // Code for Assertion specified at Java.ccc:1138:7
                    if (!(lhs instanceof MethodCall || lhs instanceof AllocationExpression || lhs instanceof ExplicitConstructorInvocation)) {
                        fail("Assertion at: Java.ccc:1138:7 failed. " + "Not a valid statement.", getToken(1));
                    }
                }
            } else {
                pushOntoCallStack("StatementExpression", "Java.ccc", 1123, 3);
                throw new ParseException(getToken(1), StatementExpression_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1145:1
    final public void ExpressionStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ExpressionStatement";
        // Code for BNFProduction specified at Java.ccc:1145:1
        ExpressionStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new ExpressionStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:1145:23
            pushOntoCallStack("ExpressionStatement", "Java.ccc", 1145, 23);
            try {
                StatementExpression();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1145:43
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> CasePattern_FIRST_SET = CasePattern_FIRST_SET_init();

    private static EnumSet<TokenType> CasePattern_FIRST_SET_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, _DEFAULT, DOUBLE, FINAL, FLOAT, INT, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VAR, VOLATILE, SEALED, NON_SEALED, AT, IDENTIFIER);
    }

    // Java.ccc:1147:1
    final public void CasePattern() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "CasePattern";
        // Code for BNFProduction specified at Java.ccc:1147:1
        CasePattern thisProduction = null;
        if (buildTree) {
            thisProduction = new CasePattern();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at Java.ccc:1148:5
            if (scan$Java_ccc$1148$5()) {
                // Code for NonTerminal specified at Java.ccc:1148:5
                pushOntoCallStack("CasePattern", "Java.ccc", 1148, 5);
                try {
                    RecordPattern();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$1150$5()) {
                // Code for NonTerminal specified at Java.ccc:1150:5
                pushOntoCallStack("CasePattern", "Java.ccc", 1150, 5);
                try {
                    TypePattern();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("CasePattern", "Java.ccc", 1148, 5);
                throw new ParseException(getToken(1), CasePattern_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1153:1
    final public void RecordPattern() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "RecordPattern";
        // Code for BNFProduction specified at Java.ccc:1153:1
        RecordPattern thisProduction = null;
        if (buildTree) {
            thisProduction = new RecordPattern();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:1154:5
            pushOntoCallStack("RecordPattern", "Java.ccc", 1154, 5);
            try {
                ReferenceType();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1155:5
            consumeToken(LPAREN);
            // Code for ZeroOrOne specified at Java.ccc:1156:5
            if (scan$Java_ccc$1157$7()) {
                if (nextTokenType() == UNDERSCORE) {
                    // Code for Terminal specified at Java.ccc:1159:9
                    consumeToken(UNDERSCORE);
                } else if (first_set$Java_ccc$1161$9.contains(nextTokenType())) {
                    // Code for NonTerminal specified at Java.ccc:1161:9
                    pushOntoCallStack("RecordPattern", "Java.ccc", 1161, 9);
                    try {
                        CasePattern();
                    } finally {
                        popCallStack();
                    }
                    // Code for ZeroOrMore specified at Java.ccc:1162:9
                    while (true) {
                        if (!(nextTokenType() == COMMA)) break;
                        // Code for Terminal specified at Java.ccc:1163:11
                        consumeToken(COMMA);
                        if (nextTokenType() == UNDERSCORE) {
                            // Code for Terminal specified at Java.ccc:1164:12
                            consumeToken(UNDERSCORE);
                        } else if (first_set$Java_ccc$1164$25.contains(nextTokenType())) {
                            // Code for NonTerminal specified at Java.ccc:1164:25
                            pushOntoCallStack("RecordPattern", "Java.ccc", 1164, 25);
                            try {
                                CasePattern();
                            } finally {
                                popCallStack();
                            }
                        } else {
                            pushOntoCallStack("RecordPattern", "Java.ccc", 1164, 12);
                            throw new ParseException(getToken(1), first_set$Java_ccc$1164$12, parsingStack);
                        }
                    }
                } else {
                    pushOntoCallStack("RecordPattern", "Java.ccc", 1159, 9);
                    throw new ParseException(getToken(1), first_set$Java_ccc$1159$9, parsingStack);
                }
            }
            // Code for Terminal specified at Java.ccc:1168:5
            consumeToken(RPAREN);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1172:1
    final public void TypePattern() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "TypePattern";
        // Code for BNFProduction specified at Java.ccc:1172:1
        LocalVariableDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new LocalVariableDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            if (scan$Java_ccc$1175$5()) {
                // Code for CodeBlock specified at Java.ccc:1175:5
                permissibleModifiers = EnumSet.of(FINAL);
                // Code for NonTerminal specified at Java.ccc:1176:5
                pushOntoCallStack("TypePattern", "Java.ccc", 1176, 5);
                try {
                    Modifiers();
                } finally {
                    popCallStack();
                }
                if (scan$Java_ccc$1178$6()) {
                    // Code for NonTerminal specified at Java.ccc:1178:6
                    pushOntoCallStack("TypePattern", "Java.ccc", 1178, 6);
                    try {
                        Type();
                    } finally {
                        popCallStack();
                    }
                } else if (scan$Java_ccc$1178$13()) {
                    EnumSet<TokenType> previousActives46 = EnumSet.copyOf(token_source.activeTokenTypes);
                    boolean somethingChanged47 = false;
                    somethingChanged47 = activateTokenTypes(VAR);
                    try {
                        // Code for Terminal specified at Java.ccc:1178:33
                        consumeToken(VAR);
                    } finally {
                        token_source.activeTokenTypes = previousActives46;
                        if (somethingChanged47) {
                            token_source.reset(lastConsumedToken);
                            nextTokenType = null;
                        }
                    }
                } else {
                    pushOntoCallStack("TypePattern", "Java.ccc", 1178, 6);
                    throw new ParseException(getToken(1), first_set$Java_ccc$1178$6, parsingStack);
                }
                if (nextTokenType() == IDENTIFIER) {
                    // Code for Terminal specified at Java.ccc:1179:6
                    consumeToken(IDENTIFIER);
                } else if (nextTokenType() == UNDERSCORE) {
                    // Code for Terminal specified at Java.ccc:1179:19
                    consumeToken(UNDERSCORE);
                } else {
                    pushOntoCallStack("TypePattern", "Java.ccc", 1179, 6);
                    throw new ParseException(getToken(1), first_set$Java_ccc$1179$6, parsingStack);
                }
            } else if (scan$Java_ccc$1181$5()) {
                // Code for NonTerminal specified at Java.ccc:1181:5
                pushOntoCallStack("TypePattern", "Java.ccc", 1181, 5);
                try {
                    VarDeclaration();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("TypePattern", "Java.ccc", 1175, 5);
                throw new ParseException(getToken(1), first_set$Java_ccc$1175$5, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1185:1
    final public void WhenClause() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "WhenClause";
        // Code for BNFProduction specified at Java.ccc:1185:1
        WhenClause thisProduction = null;
        if (buildTree) {
            thisProduction = new WhenClause();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            if (nextTokenType() == WHEN) {
                // Code for Terminal specified at Java.ccc:1189:7
                consumeToken(WHEN);
            } else if (nextTokenType() == IDENTIFIER) {
                // Code for Terminal specified at Java.ccc:1191:7
                consumeToken(IDENTIFIER);
                // Code for CodeBlock specified at Java.ccc:1192:7
                replaceTokenType(WHEN);
            } else {
                pushOntoCallStack("WhenClause", "Java.ccc", 1189, 7);
                throw new ParseException(getToken(1), first_set$Java_ccc$1189$7, parsingStack);
            }
            // Code for NonTerminal specified at Java.ccc:1196:4
            pushOntoCallStack("WhenClause", "Java.ccc", 1196, 4);
            try {
                Expression();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1199:1
    final public void SwitchStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "SwitchStatement";
        // Code for BNFProduction specified at Java.ccc:1199:1
        SwitchStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new SwitchStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1200:3
            consumeToken(SWITCH);
            // Code for Terminal specified at Java.ccc:1200:12
            consumeToken(LPAREN);
            // Code for NonTerminal specified at Java.ccc:1200:21
            pushOntoCallStack("SwitchStatement", "Java.ccc", 1200, 21);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1200:32
            consumeToken(RPAREN);
            // Code for Terminal specified at Java.ccc:1201:3
            consumeToken(LBRACE);
            // Code for ZeroOrOne specified at Java.ccc:1202:3
            // Code for ExpansionChoice specified at Java.ccc:1203:5
            if (scan$Java_ccc$1203$5()) {
                // Code for OneOrMore specified at Java.ccc:1204:5
                while (true) {
                    // Code for NonTerminal specified at Java.ccc:1204:6
                    pushOntoCallStack("SwitchStatement", "Java.ccc", 1204, 6);
                    try {
                        NewCaseStatement();
                    } finally {
                        popCallStack();
                    }
                    if (!(nextTokenType() == CASE || nextTokenType == _DEFAULT)) break;
                }
            } else if (scan$Java_ccc$1206$5()) {
                // Code for OneOrMore specified at Java.ccc:1207:5
                while (true) {
                    // Code for NonTerminal specified at Java.ccc:1207:6
                    pushOntoCallStack("SwitchStatement", "Java.ccc", 1207, 6);
                    try {
                        ClassicCaseStatement();
                    } finally {
                        popCallStack();
                    }
                    if (!(nextTokenType() == CASE || nextTokenType == _DEFAULT)) break;
                }
            }
            // Code for Terminal specified at Java.ccc:1209:3
            consumeToken(RBRACE);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1227:1
    final public void ClassicCaseStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ClassicCaseStatement";
        // Code for BNFProduction specified at Java.ccc:1227:1
        ClassicCaseStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new ClassicCaseStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:1228:3
            pushOntoCallStack("ClassicCaseStatement", "Java.ccc", 1228, 3);
            try {
                ClassicSwitchLabel();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:1229:3
            while (true) {
                if (!(scan$Java_ccc$1229$4())) break;
                // Code for NonTerminal specified at Java.ccc:1229:42
                pushOntoCallStack("ClassicCaseStatement", "Java.ccc", 1229, 42);
                try {
                    BlockStatement();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1232:1
    final public void NewSwitchLabel() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "NewSwitchLabel";
        // Code for BNFProduction specified at Java.ccc:1232:1
        NewSwitchLabel thisProduction = null;
        if (buildTree) {
            thisProduction = new NewSwitchLabel();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:1233:3
            pushOntoCallStack("NewSwitchLabel", "Java.ccc", 1233, 3);
            try {
                CaseOrDefault();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1234:3
            consumeToken(LAMBDA);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1237:1
    final public void ClassicSwitchLabel() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ClassicSwitchLabel";
        // Code for BNFProduction specified at Java.ccc:1237:1
        ClassicSwitchLabel thisProduction = null;
        if (buildTree) {
            thisProduction = new ClassicSwitchLabel();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:1238:3
            pushOntoCallStack("ClassicSwitchLabel", "Java.ccc", 1238, 3);
            try {
                CaseOrDefault();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1239:3
            consumeToken(COLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> CaseOrDefault_FIRST_SET = tokenTypeSet(CASE, _DEFAULT);

    // Java.ccc:1243:1
    final public void CaseOrDefault() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "CaseOrDefault";
        // Code for BNFProduction specified at Java.ccc:1243:1
        // Code for ExpansionChoice specified at Java.ccc:1244:4
        if (scan$Java_ccc$1244$4()) {
            // Code for Terminal specified at Java.ccc:1244:4
            consumeToken(CASE);
            // Code for Terminal specified at Java.ccc:1244:11
            consumeToken(NULL);
            // Code for ZeroOrOne specified at Java.ccc:1244:23
            if (nextTokenType() == COMMA) {
                // Code for Terminal specified at Java.ccc:1244:24
                consumeToken(COMMA);
                // Code for Terminal specified at Java.ccc:1244:31
                consumeToken(_DEFAULT);
            }
        } else if (scan$Java_ccc$1246$4()) {
            // Code for Terminal specified at Java.ccc:1246:4
            consumeToken(CASE);
            // Code for NonTerminal specified at Java.ccc:1246:11
            pushOntoCallStack("CaseOrDefault", "Java.ccc", 1246, 11);
            try {
                CasePattern();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:1246:28
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for Terminal specified at Java.ccc:1246:29
                consumeToken(COMMA);
                // Code for NonTerminal specified at Java.ccc:1246:37
                pushOntoCallStack("CaseOrDefault", "Java.ccc", 1246, 37);
                try {
                    CasePattern();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Java.ccc:1246:51
            if (scan$Java_ccc$1246$52()) {
                // Code for NonTerminal specified at Java.ccc:1246:52
                pushOntoCallStack("CaseOrDefault", "Java.ccc", 1246, 52);
                try {
                    WhenClause();
                } finally {
                    popCallStack();
                }
            }
        } else if (nextTokenType() == CASE) {
            // Code for Terminal specified at Java.ccc:1248:4
            consumeToken(CASE);
            // Code for NonTerminal specified at Java.ccc:1248:11
            pushOntoCallStack("CaseOrDefault", "Java.ccc", 1248, 11);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:1248:22
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for Terminal specified at Java.ccc:1248:23
                consumeToken(COMMA);
                // Code for NonTerminal specified at Java.ccc:1248:31
                pushOntoCallStack("CaseOrDefault", "Java.ccc", 1248, 31);
                try {
                    Expression();
                } finally {
                    popCallStack();
                }
            }
        } else if (nextTokenType() == _DEFAULT) {
            // Code for Terminal specified at Java.ccc:1250:4
            consumeToken(_DEFAULT);
        } else {
            pushOntoCallStack("CaseOrDefault", "Java.ccc", 1244, 4);
            throw new ParseException(getToken(1), CaseOrDefault_FIRST_SET, parsingStack);
        }
    }

    // Java.ccc:1253:1
    final public void NewCaseStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "NewCaseStatement";
        // Code for BNFProduction specified at Java.ccc:1253:1
        NewCaseStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new NewCaseStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:1254:4
            pushOntoCallStack("NewCaseStatement", "Java.ccc", 1254, 4);
            try {
                NewSwitchLabel();
            } finally {
                popCallStack();
            }
            if (nextTokenType() == LBRACE) {
                // Code for NonTerminal specified at Java.ccc:1256:6
                pushOntoCallStack("NewCaseStatement", "Java.ccc", 1256, 6);
                try {
                    Block();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == THROW) {
                // Code for NonTerminal specified at Java.ccc:1258:6
                pushOntoCallStack("NewCaseStatement", "Java.ccc", 1258, 6);
                try {
                    ThrowStatement();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$1260$6()) {
                // Code for NonTerminal specified at Java.ccc:1261:9
                pushOntoCallStack("NewCaseStatement", "Java.ccc", 1261, 9);
                try {
                    Expression();
                } finally {
                    popCallStack();
                }
                // Code for Terminal specified at Java.ccc:1261:20
                consumeToken(SEMICOLON);
            } else if (scan$Java_ccc$1263$6()) {
                // Code for NonTerminal specified at Java.ccc:1264:6
                pushOntoCallStack("NewCaseStatement", "Java.ccc", 1264, 6);
                try {
                    BlockStatement();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("NewCaseStatement", "Java.ccc", 1256, 6);
                throw new ParseException(getToken(1), first_set$Java_ccc$1256$6, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1268:1
    final public void IfStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "IfStatement";
        // Code for BNFProduction specified at Java.ccc:1268:1
        IfStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new IfStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1269:3
            consumeToken(IF);
            // Code for Terminal specified at Java.ccc:1269:8
            consumeToken(LPAREN);
            // Code for NonTerminal specified at Java.ccc:1269:17
            pushOntoCallStack("IfStatement", "Java.ccc", 1269, 17);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1269:28
            consumeToken(RPAREN);
            // Code for NonTerminal specified at Java.ccc:1269:37
            pushOntoCallStack("IfStatement", "Java.ccc", 1269, 37);
            try {
                Statement();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:1269:47
            if (nextTokenType() == ELSE) {
                // Code for Terminal specified at Java.ccc:1269:48
                consumeToken(ELSE);
                // Code for NonTerminal specified at Java.ccc:1269:55
                pushOntoCallStack("IfStatement", "Java.ccc", 1269, 55);
                try {
                    Statement();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1282:1
    final public void WhileStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "WhileStatement";
        // Code for BNFProduction specified at Java.ccc:1282:1
        WhileStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new WhileStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1283:3
            consumeToken(WHILE);
            // Code for Terminal specified at Java.ccc:1283:11
            consumeToken(LPAREN);
            // Code for NonTerminal specified at Java.ccc:1283:20
            pushOntoCallStack("WhileStatement", "Java.ccc", 1283, 20);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1283:31
            consumeToken(RPAREN);
            // Code for NonTerminal specified at Java.ccc:1283:40
            pushOntoCallStack("WhileStatement", "Java.ccc", 1283, 40);
            try {
                Statement();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1286:1
    final public void DoStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "DoStatement";
        // Code for BNFProduction specified at Java.ccc:1286:1
        DoStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new DoStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1287:3
            consumeToken(DO);
            // Code for NonTerminal specified at Java.ccc:1287:8
            pushOntoCallStack("DoStatement", "Java.ccc", 1287, 8);
            try {
                Statement();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1287:18
            consumeToken(WHILE);
            // Code for Terminal specified at Java.ccc:1287:26
            consumeToken(LPAREN);
            // Code for NonTerminal specified at Java.ccc:1287:35
            pushOntoCallStack("DoStatement", "Java.ccc", 1287, 35);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1287:46
            consumeToken(RPAREN);
            // Code for Terminal specified at Java.ccc:1287:55
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> ForStatement_FIRST_SET = tokenTypeSet(FOR);

    // Java.ccc:1290:1
    final public void ForStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ForStatement";
        // Code for BNFProduction specified at Java.ccc:1290:1
        // Code for ExpansionChoice specified at Java.ccc:1291:4
        if (scan$Java_ccc$1291$4()) {
            // Code for NonTerminal specified at Java.ccc:1291:4
            pushOntoCallStack("ForStatement", "Java.ccc", 1291, 4);
            try {
                BasicForStatement();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$1293$4()) {
            // Code for NonTerminal specified at Java.ccc:1293:4
            pushOntoCallStack("ForStatement", "Java.ccc", 1293, 4);
            try {
                EnhancedForStatement();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == FOR) {
            // Code for Terminal specified at Java.ccc:1295:4
            consumeToken(FOR);
            // Code for Failure specified at Java.ccc:1295:10
            pushOntoCallStack("ForStatement", "Java.ccc", 1295, 10);
            fail("Failure", getToken(1));
        } else {
            pushOntoCallStack("ForStatement", "Java.ccc", 1291, 4);
            throw new ParseException(getToken(1), ForStatement_FIRST_SET, parsingStack);
        }
    }

    // Java.ccc:1298:1
    final public void BasicForStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "BasicForStatement";
        // Code for BNFProduction specified at Java.ccc:1298:1
        BasicForStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new BasicForStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1299:4
            consumeToken(FOR);
            // Code for Terminal specified at Java.ccc:1299:10
            consumeToken(LPAREN);
            // Code for ZeroOrOne specified at Java.ccc:1299:19
            if (scan$Java_ccc$1299$20()) {
                // Code for NonTerminal specified at Java.ccc:1299:20
                pushOntoCallStack("BasicForStatement", "Java.ccc", 1299, 20);
                try {
                    ForInit();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:1299:29
            consumeToken(SEMICOLON);
            // Code for ZeroOrOne specified at Java.ccc:1299:46
            if (first_set$Java_ccc$1299$47.contains(nextTokenType())) {
                // Code for NonTerminal specified at Java.ccc:1299:47
                pushOntoCallStack("BasicForStatement", "Java.ccc", 1299, 47);
                try {
                    Expression();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:1299:59
            consumeToken(SEMICOLON);
            // Code for ZeroOrOne specified at Java.ccc:1299:71
            if (first_set$Java_ccc$1299$72.contains(nextTokenType())) {
                // Code for NonTerminal specified at Java.ccc:1299:72
                pushOntoCallStack("BasicForStatement", "Java.ccc", 1299, 72);
                try {
                    StatementExpressionList();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:1299:97
            consumeToken(RPAREN);
            // Code for NonTerminal specified at Java.ccc:1299:106
            pushOntoCallStack("BasicForStatement", "Java.ccc", 1299, 106);
            try {
                Statement();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1302:1
    final public void EnhancedForStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "EnhancedForStatement";
        // Code for BNFProduction specified at Java.ccc:1302:1
        EnhancedForStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new EnhancedForStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1303:4
            consumeToken(FOR);
            // Code for Terminal specified at Java.ccc:1303:10
            consumeToken(LPAREN);
            // Code for NonTerminal specified at Java.ccc:1303:19
            pushOntoCallStack("EnhancedForStatement", "Java.ccc", 1303, 19);
            try {
                LocalVariableDeclaration();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1303:44
            consumeToken(COLON);
            // Code for NonTerminal specified at Java.ccc:1303:57
            pushOntoCallStack("EnhancedForStatement", "Java.ccc", 1303, 57);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1303:68
            consumeToken(RPAREN);
            // Code for NonTerminal specified at Java.ccc:1303:77
            pushOntoCallStack("EnhancedForStatement", "Java.ccc", 1303, 77);
            try {
                Statement();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> ForInit_FIRST_SET = ForInit_FIRST_SET_init();

    private static EnumSet<TokenType> ForInit_FIRST_SET_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, _DEFAULT, DOUBLE, FALSE, FINAL, FLOAT, INT, LONG, NATIVE, NEW, NULL, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SUPER, SYNCHRONIZED, THIS, TRANSIENT, TRUE, VAR, VOID, VOLATILE, SEALED, NON_SEALED, LPAREN, AT, INCR, DECR, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    // Java.ccc:1306:1
    final public void ForInit() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ForInit";
        // Code for BNFProduction specified at Java.ccc:1306:1
        // Code for ExpansionChoice specified at Java.ccc:1307:3
        if (scan$Java_ccc$1307$3()) {
            // Code for NonTerminal specified at Java.ccc:1307:3
            pushOntoCallStack("ForInit", "Java.ccc", 1307, 3);
            try {
                LocalVariableDeclaration();
            } finally {
                popCallStack();
            }
        } else if (first_set$Java_ccc$1309$3.contains(nextTokenType())) {
            // Code for NonTerminal specified at Java.ccc:1309:3
            pushOntoCallStack("ForInit", "Java.ccc", 1309, 3);
            try {
                StatementExpressionList();
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("ForInit", "Java.ccc", 1307, 3);
            throw new ParseException(getToken(1), ForInit_FIRST_SET, parsingStack);
        }
    }

    // Java.ccc:1312:1
    final public void StatementExpressionList() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "StatementExpressionList";
        // Code for BNFProduction specified at Java.ccc:1312:1
        // Code for NonTerminal specified at Java.ccc:1313:3
        pushOntoCallStack("StatementExpressionList", "Java.ccc", 1313, 3);
        try {
            StatementExpression();
        } finally {
            popCallStack();
        }
        // Code for ZeroOrMore specified at Java.ccc:1313:23
        while (true) {
            if (!(nextTokenType() == COMMA)) break;
            // Code for Terminal specified at Java.ccc:1313:25
            consumeToken(COMMA);
            // Code for NonTerminal specified at Java.ccc:1313:33
            pushOntoCallStack("StatementExpressionList", "Java.ccc", 1313, 33);
            try {
                StatementExpression();
            } finally {
                popCallStack();
            }
        }
    }

    // Java.ccc:1316:1
    final public void BreakStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "BreakStatement";
        // Code for BNFProduction specified at Java.ccc:1316:1
        BreakStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new BreakStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1317:3
            consumeToken(BREAK);
            // Code for ZeroOrOne specified at Java.ccc:1317:11
            if (nextTokenType() == IDENTIFIER) {
                // Code for Terminal specified at Java.ccc:1317:13
                consumeToken(IDENTIFIER);
            }
            // Code for Terminal specified at Java.ccc:1317:28
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1320:1
    final public void YieldStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "YieldStatement";
        // Code for BNFProduction specified at Java.ccc:1320:1
        YieldStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new YieldStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Assertion specified at Java.ccc:1322:4
            // Code for Assertion specified at Java.ccc:1323:4
            if (nextTokenType() == YIELD) {
                // Code for Terminal specified at Java.ccc:1325:7
                consumeToken(YIELD);
            } else if (nextTokenType() == IDENTIFIER) {
                // Code for Terminal specified at Java.ccc:1327:7
                consumeToken(IDENTIFIER);
                // Code for CodeBlock specified at Java.ccc:1328:7
                replaceTokenType(YIELD);
            } else {
                pushOntoCallStack("YieldStatement", "Java.ccc", 1325, 7);
                throw new ParseException(getToken(1), first_set$Java_ccc$1325$7, parsingStack);
            }
            // Code for NonTerminal specified at Java.ccc:1332:4
            pushOntoCallStack("YieldStatement", "Java.ccc", 1332, 4);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1333:4
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1336:1
    final public void ContinueStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ContinueStatement";
        // Code for BNFProduction specified at Java.ccc:1336:1
        ContinueStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new ContinueStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1336:21
            consumeToken(CONTINUE);
            // Code for ZeroOrOne specified at Java.ccc:1336:32
            if (nextTokenType() == IDENTIFIER) {
                // Code for Terminal specified at Java.ccc:1336:34
                consumeToken(IDENTIFIER);
            }
            // Code for Terminal specified at Java.ccc:1336:49
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1338:1
    final public void ReturnStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ReturnStatement";
        // Code for BNFProduction specified at Java.ccc:1338:1
        ReturnStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new ReturnStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1338:19
            consumeToken(RETURN);
            // Code for ZeroOrOne specified at Java.ccc:1338:28
            if (first_set$Java_ccc$1338$29.contains(nextTokenType())) {
                // Code for NonTerminal specified at Java.ccc:1338:29
                pushOntoCallStack("ReturnStatement", "Java.ccc", 1338, 29);
                try {
                    Expression();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:1338:42
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1340:1
    final public void ThrowStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ThrowStatement";
        // Code for BNFProduction specified at Java.ccc:1340:1
        ThrowStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new ThrowStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1340:18
            consumeToken(THROW);
            // Code for NonTerminal specified at Java.ccc:1340:26
            pushOntoCallStack("ThrowStatement", "Java.ccc", 1340, 26);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1340:37
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1342:1
    final public void SynchronizedStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "SynchronizedStatement";
        // Code for BNFProduction specified at Java.ccc:1342:1
        SynchronizedStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new SynchronizedStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1342:25
            consumeToken(SYNCHRONIZED);
            // Code for Terminal specified at Java.ccc:1342:40
            consumeToken(LPAREN);
            // Code for NonTerminal specified at Java.ccc:1342:49
            pushOntoCallStack("SynchronizedStatement", "Java.ccc", 1342, 49);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1342:60
            consumeToken(RPAREN);
            // Code for NonTerminal specified at Java.ccc:1342:69
            pushOntoCallStack("SynchronizedStatement", "Java.ccc", 1342, 69);
            try {
                Block();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1344:1
    final public void TryStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "TryStatement";
        // Code for BNFProduction specified at Java.ccc:1344:1
        TryStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new TryStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for CodeBlock specified at Java.ccc:1345:3
            boolean isTryWithResources = false, seenCatch = false, seenFinally = false;
            // Code for Terminal specified at Java.ccc:1350:3
            consumeToken(TRY);
            // Code for ZeroOrOne specified at Java.ccc:1351:3
            if (nextTokenType() == LPAREN) {
                // Code for NonTerminal specified at Java.ccc:1351:4
                pushOntoCallStack("TryStatement", "Java.ccc", 1351, 4);
                try {
                    ResourcesInTryBlock();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at Java.ccc:1351:24
                isTryWithResources = true;
            }
            // Code for NonTerminal specified at Java.ccc:1352:3
            pushOntoCallStack("TryStatement", "Java.ccc", 1352, 3);
            try {
                Block();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:1353:3
            while (true) {
                if (!(nextTokenType() == CATCH)) break;
                // Code for NonTerminal specified at Java.ccc:1353:4
                pushOntoCallStack("TryStatement", "Java.ccc", 1353, 4);
                try {
                    CatchBlock();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at Java.ccc:1353:15
                seenCatch = true;
            }
            // Code for ZeroOrOne specified at Java.ccc:1354:3
            if (nextTokenType() == FINALLY) {
                // Code for NonTerminal specified at Java.ccc:1354:4
                pushOntoCallStack("TryStatement", "Java.ccc", 1354, 4);
                try {
                    FinallyBlock();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at Java.ccc:1354:16
                seenFinally = true;
            }
            // Code for Assertion specified at Java.ccc:1355:3
            if (!(seenCatch || seenFinally || isTryWithResources)) {
                fail("Assertion at: Java.ccc:1355:3 failed. " + "A try-catch must have at least one catch or finally block if it is not a try-with-resources.", getToken(1));
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1359:1
    final public void ResourcesInTryBlock() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ResourcesInTryBlock";
        // Code for BNFProduction specified at Java.ccc:1359:1
        ResourcesInTryBlock thisProduction = null;
        if (buildTree) {
            thisProduction = new ResourcesInTryBlock();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1360:5
            consumeToken(LPAREN);
            // Code for OneOrMore specified at Java.ccc:1361:5
            while (true) {
                // Code for Assertion specified at Java.ccc:1365:8
                // Code for Assertion specified at Java.ccc:1366:8
                if (scan$Java_ccc$1369$10()) {
                    // Code for NonTerminal specified at Java.ccc:1369:10
                    pushOntoCallStack("ResourcesInTryBlock", "Java.ccc", 1369, 10);
                    try {
                        LocalVariableDeclaration();
                    } finally {
                        popCallStack();
                    }
                } else if (nextTokenType() == IDENTIFIER) {
                    // Code for NonTerminal specified at Java.ccc:1371:10
                    pushOntoCallStack("ResourcesInTryBlock", "Java.ccc", 1371, 10);
                    try {
                        Name();
                    } finally {
                        popCallStack();
                    }
                } else if (first_set$Java_ccc$1373$10.contains(nextTokenType())) {
                    // Code for NonTerminal specified at Java.ccc:1373:10
                    pushOntoCallStack("ResourcesInTryBlock", "Java.ccc", 1373, 10);
                    try {
                        PrimaryExpression();
                    } finally {
                        popCallStack();
                    }
                    // Code for Assertion specified at Java.ccc:1374:10
                    if (!(peekNode() instanceof DotName)) {
                        fail("Assertion at: Java.ccc:1374:10 failed. " + "Resource should be a field access here.", getToken(1));
                    }
                } else {
                    pushOntoCallStack("ResourcesInTryBlock", "Java.ccc", 1369, 10);
                    throw new ParseException(getToken(1), first_set$Java_ccc$1369$10, parsingStack);
                }
                // Code for ZeroOrOne specified at Java.ccc:1376:8
                if (nextTokenType() == SEMICOLON) {
                    // Code for Terminal specified at Java.ccc:1376:9
                    consumeToken(SEMICOLON);
                }
                if (!(scan$Java_ccc$1365$8())) break;
            }
            // Code for Terminal specified at Java.ccc:1378:5
            consumeToken(RPAREN);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1381:1
    final public void CatchBlock() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "CatchBlock";
        // Code for BNFProduction specified at Java.ccc:1381:1
        CatchBlock thisProduction = null;
        if (buildTree) {
            thisProduction = new CatchBlock();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1382:5
            consumeToken(CATCH);
            // Code for Terminal specified at Java.ccc:1383:5
            consumeToken(LPAREN);
            // Code for ZeroOrOne specified at Java.ccc:1384:5
            if (nextTokenType() == FINAL) {
                // Code for Terminal specified at Java.ccc:1384:6
                consumeToken(FINAL);
            }
            // Code for NonTerminal specified at Java.ccc:1385:5
            pushOntoCallStack("CatchBlock", "Java.ccc", 1385, 5);
            try {
                ObjectType();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:1385:16
            while (true) {
                if (!(nextTokenType() == BIT_OR)) break;
                // Code for Terminal specified at Java.ccc:1385:17
                consumeToken(BIT_OR);
                // Code for NonTerminal specified at Java.ccc:1385:27
                pushOntoCallStack("CatchBlock", "Java.ccc", 1385, 27);
                try {
                    ObjectType();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at Java.ccc:1385:42
            pushOntoCallStack("CatchBlock", "Java.ccc", 1385, 42);
            try {
                VariableDeclaratorId();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1386:5
            consumeToken(RPAREN);
            // Code for NonTerminal specified at Java.ccc:1387:5
            pushOntoCallStack("CatchBlock", "Java.ccc", 1387, 5);
            try {
                Block();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1397:1
    final public void FinallyBlock() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "FinallyBlock";
        // Code for BNFProduction specified at Java.ccc:1397:1
        FinallyBlock thisProduction = null;
        if (buildTree) {
            thisProduction = new FinallyBlock();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1397:16
            consumeToken(FINALLY);
            // Code for NonTerminal specified at Java.ccc:1397:26
            pushOntoCallStack("FinallyBlock", "Java.ccc", 1397, 26);
            try {
                Block();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1406:1
    final public void Annotation() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Annotation";
        // Code for BNFProduction specified at Java.ccc:1406:1
        if (scan$Java_ccc$1409$4()) {
            // Code for NonTerminal specified at Java.ccc:1409:4
            pushOntoCallStack("Annotation", "Java.ccc", 1409, 4);
            try {
                NormalAnnotation();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$1411$4()) {
            // Code for NonTerminal specified at Java.ccc:1411:4
            pushOntoCallStack("Annotation", "Java.ccc", 1411, 4);
            try {
                SingleMemberAnnotation();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == AT) {
            // Code for NonTerminal specified at Java.ccc:1413:4
            pushOntoCallStack("Annotation", "Java.ccc", 1413, 4);
            try {
                MarkerAnnotation();
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("Annotation", "Java.ccc", 1409, 4);
            throw new ParseException(getToken(1), first_set$Java_ccc$1409$4, parsingStack);
        }
    }

    // Java.ccc:1417:1
    final public void NormalAnnotation() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "NormalAnnotation";
        // Code for BNFProduction specified at Java.ccc:1417:1
        NormalAnnotation thisProduction = null;
        if (buildTree) {
            thisProduction = new NormalAnnotation();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1417:20
            consumeToken(AT);
            // Code for NonTerminal specified at Java.ccc:1417:25
            pushOntoCallStack("NormalAnnotation", "Java.ccc", 1417, 25);
            try {
                Name();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1417:30
            consumeToken(LPAREN);
            // Code for ZeroOrOne specified at Java.ccc:1417:45
            if (nextTokenType() == IDENTIFIER) {
                // Code for NonTerminal specified at Java.ccc:1417:47
                pushOntoCallStack("NormalAnnotation", "Java.ccc", 1417, 47);
                try {
                    MemberValuePairs();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:1417:66
            consumeToken(RPAREN);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1419:1
    final public void MarkerAnnotation() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "MarkerAnnotation";
        // Code for BNFProduction specified at Java.ccc:1419:1
        MarkerAnnotation thisProduction = null;
        if (buildTree) {
            thisProduction = new MarkerAnnotation();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1419:20
            consumeToken(AT);
            // Code for NonTerminal specified at Java.ccc:1419:25
            pushOntoCallStack("MarkerAnnotation", "Java.ccc", 1419, 25);
            try {
                Name();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1421:1
    final public void SingleMemberAnnotation() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "SingleMemberAnnotation";
        // Code for BNFProduction specified at Java.ccc:1421:1
        SingleMemberAnnotation thisProduction = null;
        if (buildTree) {
            thisProduction = new SingleMemberAnnotation();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1421:26
            consumeToken(AT);
            // Code for NonTerminal specified at Java.ccc:1421:31
            pushOntoCallStack("SingleMemberAnnotation", "Java.ccc", 1421, 31);
            try {
                Name();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1421:36
            consumeToken(LPAREN);
            // Code for NonTerminal specified at Java.ccc:1421:50
            pushOntoCallStack("SingleMemberAnnotation", "Java.ccc", 1421, 50);
            try {
                MemberValue();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1421:62
            consumeToken(RPAREN);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1432:1
    final public void MemberValuePairs() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "MemberValuePairs";
        // Code for BNFProduction specified at Java.ccc:1432:1
        MemberValuePairs thisProduction = null;
        if (buildTree) {
            thisProduction = new MemberValuePairs();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:1433:4
            pushOntoCallStack("MemberValuePairs", "Java.ccc", 1433, 4);
            try {
                MemberValuePair();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:1433:20
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for Terminal specified at Java.ccc:1433:22
                consumeToken(COMMA);
                // Code for NonTerminal specified at Java.ccc:1433:30
                pushOntoCallStack("MemberValuePairs", "Java.ccc", 1433, 30);
                try {
                    MemberValuePair();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1436:1
    final public void MemberValuePair() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "MemberValuePair";
        // Code for BNFProduction specified at Java.ccc:1436:1
        MemberValuePair thisProduction = null;
        if (buildTree) {
            thisProduction = new MemberValuePair();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1436:20
            consumeToken(IDENTIFIER);
            // Code for Terminal specified at Java.ccc:1436:33
            consumeToken(ASSIGN);
            // Code for NonTerminal specified at Java.ccc:1436:42
            pushOntoCallStack("MemberValuePair", "Java.ccc", 1436, 42);
            try {
                MemberValue();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> MemberValue_FIRST_SET = MemberValue_FIRST_SET_init();

    private static EnumSet<TokenType> MemberValue_FIRST_SET_init() {
        return tokenTypeSet(UNDERSCORE, BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, LBRACE, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    // Java.ccc:1438:1
    final public void MemberValue() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "MemberValue";
        // Code for BNFProduction specified at Java.ccc:1438:1
        MemberValue thisProduction = null;
        if (buildTree) {
            thisProduction = new MemberValue();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at Java.ccc:1439:4
            if (scan$Java_ccc$1439$4()) {
                // Code for NonTerminal specified at Java.ccc:1439:4
                pushOntoCallStack("MemberValue", "Java.ccc", 1439, 4);
                try {
                    Annotation();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == LBRACE) {
                // Code for NonTerminal specified at Java.ccc:1441:4
                pushOntoCallStack("MemberValue", "Java.ccc", 1441, 4);
                try {
                    MemberValueArrayInitializer();
                } finally {
                    popCallStack();
                }
            } else if (first_set$Java_ccc$1443$4.contains(nextTokenType())) {
                // Code for NonTerminal specified at Java.ccc:1443:4
                pushOntoCallStack("MemberValue", "Java.ccc", 1443, 4);
                try {
                    TernaryExpression();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("MemberValue", "Java.ccc", 1439, 4);
                throw new ParseException(getToken(1), MemberValue_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1446:1
    final public void MemberValueArrayInitializer() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "MemberValueArrayInitializer";
        // Code for BNFProduction specified at Java.ccc:1446:1
        MemberValueArrayInitializer thisProduction = null;
        if (buildTree) {
            thisProduction = new MemberValueArrayInitializer();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1447:3
            consumeToken(LBRACE);
            // Code for ZeroOrOne specified at Java.ccc:1448:3
            if (first_set$Java_ccc$1449$6.contains(nextTokenType())) {
                // Code for NonTerminal specified at Java.ccc:1449:6
                pushOntoCallStack("MemberValueArrayInitializer", "Java.ccc", 1449, 6);
                try {
                    MemberValue();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at Java.ccc:1449:18
                while (true) {
                    if (!(scan$Java_ccc$1449$20())) break;
                    // Code for Terminal specified at Java.ccc:1449:20
                    consumeToken(COMMA);
                    // Code for NonTerminal specified at Java.ccc:1449:34
                    pushOntoCallStack("MemberValueArrayInitializer", "Java.ccc", 1449, 34);
                    try {
                        MemberValue();
                    } finally {
                        popCallStack();
                    }
                }
                // Code for ZeroOrOne specified at Java.ccc:1449:49
                if (nextTokenType() == COMMA) {
                    // Code for Terminal specified at Java.ccc:1449:50
                    consumeToken(COMMA);
                }
            }
            // Code for Terminal specified at Java.ccc:1451:3
            consumeToken(RBRACE);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1455:1
    final public void AnnotationTypeDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "AnnotationTypeDeclaration";
        // Code for BNFProduction specified at Java.ccc:1455:1
        AnnotationTypeDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new AnnotationTypeDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for CodeBlock specified at Java.ccc:1456:3
            permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE, ABSTRACT, STATIC, STRICTFP);
            // Code for NonTerminal specified at Java.ccc:1459:3
            pushOntoCallStack("AnnotationTypeDeclaration", "Java.ccc", 1459, 3);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1460:3
            consumeToken(AT);
            // Code for Terminal specified at Java.ccc:1460:8
            consumeToken(INTERFACE);
            // Code for NonTerminal specified at Java.ccc:1460:25
            pushOntoCallStack("AnnotationTypeDeclaration", "Java.ccc", 1460, 25);
            try {
                TypeIdentifier();
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1460:40
            pushOntoCallStack("AnnotationTypeDeclaration", "Java.ccc", 1460, 40);
            try {
                AnnotationTypeBody();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1463:1
    final public void AnnotationTypeBody() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "AnnotationTypeBody";
        // Code for BNFProduction specified at Java.ccc:1463:1
        AnnotationTypeBody thisProduction = null;
        if (buildTree) {
            thisProduction = new AnnotationTypeBody();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1464:3
            consumeToken(LBRACE);
            // Code for ZeroOrMore specified at Java.ccc:1464:12
            while (true) {
                if (!(first_set$Java_ccc$1464$14.contains(nextTokenType()))) break;
                // Code for NonTerminal specified at Java.ccc:1464:14
                pushOntoCallStack("AnnotationTypeBody", "Java.ccc", 1464, 14);
                try {
                    AnnotationTypeMemberDeclaration();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:1464:49
            consumeToken(RBRACE);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1467:1
    final public void AnnotationMethodDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "AnnotationMethodDeclaration";
        // Code for BNFProduction specified at Java.ccc:1467:1
        AnnotationMethodDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new AnnotationMethodDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for CodeBlock specified at Java.ccc:1468:4
            permissibleModifiers = EnumSet.of(PUBLIC, ABSTRACT);
            // Code for NonTerminal specified at Java.ccc:1469:4
            pushOntoCallStack("AnnotationMethodDeclaration", "Java.ccc", 1469, 4);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1470:4
            pushOntoCallStack("AnnotationMethodDeclaration", "Java.ccc", 1470, 4);
            try {
                Type();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1470:9
            consumeToken(IDENTIFIER);
            // Code for Terminal specified at Java.ccc:1470:22
            consumeToken(LPAREN);
            // Code for Terminal specified at Java.ccc:1470:36
            consumeToken(RPAREN);
            // Code for ZeroOrOne specified at Java.ccc:1470:45
            if (nextTokenType() == _DEFAULT) {
                // Code for NonTerminal specified at Java.ccc:1470:47
                pushOntoCallStack("AnnotationMethodDeclaration", "Java.ccc", 1470, 47);
                try {
                    DefaultValue();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:1470:62
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> AnnotationTypeMemberDeclaration_FIRST_SET = AnnotationTypeMemberDeclaration_FIRST_SET_init();

    private static EnumSet<TokenType> AnnotationTypeMemberDeclaration_FIRST_SET_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, CLASS, _DEFAULT, DOUBLE, ENUM, FINAL, FLOAT, INT, INTERFACE, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VOLATILE, SEALED, NON_SEALED, SEMICOLON, AT, IDENTIFIER);
    }

    // Java.ccc:1473:1
    final public void AnnotationTypeMemberDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "AnnotationTypeMemberDeclaration";
        // Code for BNFProduction specified at Java.ccc:1473:1
        AnnotationTypeMemberDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new AnnotationTypeMemberDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at Java.ccc:1474:3
            if (nextTokenType() == SEMICOLON) {
                // Code for NonTerminal specified at Java.ccc:1474:3
                pushOntoCallStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1474, 3);
                try {
                    EmptyDeclaration();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$1476$3()) {
                // Code for NonTerminal specified at Java.ccc:1476:3
                pushOntoCallStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1476, 3);
                try {
                    AnnotationTypeDeclaration();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$1478$3()) {
                // Code for NonTerminal specified at Java.ccc:1478:3
                pushOntoCallStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1478, 3);
                try {
                    ClassDeclaration();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$1480$3()) {
                // Code for NonTerminal specified at Java.ccc:1480:3
                pushOntoCallStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1480, 3);
                try {
                    InterfaceDeclaration();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$1482$3()) {
                // Code for NonTerminal specified at Java.ccc:1482:3
                pushOntoCallStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1482, 3);
                try {
                    EnumDeclaration();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$1484$3()) {
                // Code for NonTerminal specified at Java.ccc:1484:3
                pushOntoCallStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1484, 3);
                try {
                    AnnotationMethodDeclaration();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$1486$3()) {
                // Code for NonTerminal specified at Java.ccc:1486:3
                pushOntoCallStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1486, 3);
                try {
                    FieldDeclaration();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1474, 3);
                throw new ParseException(getToken(1), AnnotationTypeMemberDeclaration_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1489:1
    final public void DefaultValue() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "DefaultValue";
        // Code for BNFProduction specified at Java.ccc:1489:1
        DefaultValue thisProduction = null;
        if (buildTree) {
            thisProduction = new DefaultValue();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1489:16
            consumeToken(_DEFAULT);
            // Code for NonTerminal specified at Java.ccc:1489:27
            pushOntoCallStack("DefaultValue", "Java.ccc", 1489, 27);
            try {
                MemberValue();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1491:1
    final public void LambdaExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "LambdaExpression";
        // Code for BNFProduction specified at Java.ccc:1491:1
        LambdaExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new LambdaExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Assertion specified at Java.ccc:1492:3
            // Code for NonTerminal specified at Java.ccc:1493:3
            pushOntoCallStack("LambdaExpression", "Java.ccc", 1493, 3);
            try {
                LambdaLHS();
            } finally {
                popCallStack();
            }
            if (nextTokenType() == LBRACE) {
                // Code for NonTerminal specified at Java.ccc:1493:19
                pushOntoCallStack("LambdaExpression", "Java.ccc", 1493, 19);
                try {
                    Block();
                } finally {
                    popCallStack();
                }
            } else if (first_set$Java_ccc$1493$27.contains(nextTokenType())) {
                // Code for NonTerminal specified at Java.ccc:1493:27
                pushOntoCallStack("LambdaExpression", "Java.ccc", 1493, 27);
                try {
                    Expression();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("LambdaExpression", "Java.ccc", 1493, 19);
                throw new ParseException(getToken(1), first_set$Java_ccc$1493$19, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1496:1
    final public void LambdaLHS() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "LambdaLHS";
        // Code for BNFProduction specified at Java.ccc:1496:1
        LambdaLHS thisProduction = null;
        if (buildTree) {
            thisProduction = new LambdaLHS();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            if (nextTokenType() == IDENTIFIER) {
                // Code for Terminal specified at Java.ccc:1496:14
                consumeToken(IDENTIFIER);
            } else if (nextTokenType() == UNDERSCORE) {
                // Code for Terminal specified at Java.ccc:1496:29
                consumeToken(UNDERSCORE);
            } else if (scan$Java_ccc$1496$44()) {
                // Code for NonTerminal specified at Java.ccc:1496:44
                pushOntoCallStack("LambdaLHS", "Java.ccc", 1496, 44);
                try {
                    SimpleLambdaLHS();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == LPAREN) {
                // Code for NonTerminal specified at Java.ccc:1496:62
                pushOntoCallStack("LambdaLHS", "Java.ccc", 1496, 62);
                try {
                    LambdaParameters();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("LambdaLHS", "Java.ccc", 1496, 14);
                throw new ParseException(getToken(1), first_set$Java_ccc$1496$14, parsingStack);
            }
            // Code for Terminal specified at Java.ccc:1496:80
            consumeToken(LAMBDA);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1498:1
    final public void SimpleLambdaLHS() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "SimpleLambdaLHS";
        // Code for BNFProduction specified at Java.ccc:1498:1
        // Code for Terminal specified at Java.ccc:1500:4
        consumeToken(LPAREN);
        if (nextTokenType() == IDENTIFIER) {
            // Code for Terminal specified at Java.ccc:1500:14
            consumeToken(IDENTIFIER);
        } else if (nextTokenType() == UNDERSCORE) {
            // Code for Terminal specified at Java.ccc:1500:27
            consumeToken(UNDERSCORE);
        } else {
            pushOntoCallStack("SimpleLambdaLHS", "Java.ccc", 1500, 14);
            throw new ParseException(getToken(1), first_set$Java_ccc$1500$14, parsingStack);
        }
        // Code for ZeroOrMore specified at Java.ccc:1501:4
        while (true) {
            if (!(nextTokenType() == COMMA)) break;
            // Code for Terminal specified at Java.ccc:1501:5
            consumeToken(COMMA);
            if (nextTokenType() == IDENTIFIER) {
                // Code for Terminal specified at Java.ccc:1501:14
                consumeToken(IDENTIFIER);
            } else if (nextTokenType() == UNDERSCORE) {
                // Code for Terminal specified at Java.ccc:1501:27
                consumeToken(UNDERSCORE);
            } else {
                pushOntoCallStack("SimpleLambdaLHS", "Java.ccc", 1501, 14);
                throw new ParseException(getToken(1), first_set$Java_ccc$1501$14, parsingStack);
            }
        }
        // Code for Terminal specified at Java.ccc:1502:4
        consumeToken(RPAREN);
    }

    // Java.ccc:1505:1
    final public void LambdaParameters() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "LambdaParameters";
        // Code for BNFProduction specified at Java.ccc:1505:1
        LambdaParameters thisProduction = null;
        if (buildTree) {
            thisProduction = new LambdaParameters();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1506:5
            consumeToken(LPAREN);
            // Code for ZeroOrOne specified at Java.ccc:1507:5
            if (scan$Java_ccc$1508$7()) {
                // Code for CodeBlock specified at Java.ccc:1508:7
                boolean seenVarArgs = false;
                // Code for NonTerminal specified at Java.ccc:1509:7
                pushOntoCallStack("LambdaParameters", "Java.ccc", 1509, 7);
                try {
                    LambdaParameter();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at Java.ccc:1510:7
                seenVarArgs = getTokenType(- 1) == VAR_ARGS;
                // Code for ZeroOrMore specified at Java.ccc:1511:7
                while (true) {
                    if (!(nextTokenType() == COMMA)) break;
                    // Code for Assertion specified at Java.ccc:1512:9
                    if (!(!seenVarArgs)) {
                        fail("Assertion at: Java.ccc:1512:9 failed. " + "The vars (...) parameter must be the last one specified.", getToken(1));
                    }
                    // Code for Terminal specified at Java.ccc:1513:9
                    consumeToken(COMMA);
                    // Code for NonTerminal specified at Java.ccc:1513:17
                    pushOntoCallStack("LambdaParameters", "Java.ccc", 1513, 17);
                    try {
                        LambdaParameter();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at Java.ccc:1514:9
                    seenVarArgs = getTokenType(- 1) == VAR_ARGS;
                }
            }
            // Code for Terminal specified at Java.ccc:1517:5
            consumeToken(RPAREN);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1520:1
    final public void LambdaParameter() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "LambdaParameter";
        // Code for BNFProduction specified at Java.ccc:1520:1
        LambdaParameter thisProduction = null;
        if (buildTree) {
            thisProduction = new LambdaParameter();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for CodeBlock specified at Java.ccc:1521:5
            permissibleModifiers = EnumSet.of(FINAL);
            // Code for NonTerminal specified at Java.ccc:1522:5
            pushOntoCallStack("LambdaParameter", "Java.ccc", 1522, 5);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            if (scan$Java_ccc$1524$7()) {
                // Code for NonTerminal specified at Java.ccc:1524:7
                pushOntoCallStack("LambdaParameter", "Java.ccc", 1524, 7);
                try {
                    Type();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at Java.ccc:1524:12
                while (true) {
                    if (!(scan$Java_ccc$1524$13())) break;
                    // Code for NonTerminal specified at Java.ccc:1524:13
                    pushOntoCallStack("LambdaParameter", "Java.ccc", 1524, 13);
                    try {
                        Annotation();
                    } finally {
                        popCallStack();
                    }
                }
                // Code for Terminal specified at Java.ccc:1524:26
                consumeToken(VAR_ARGS);
                // Code for Terminal specified at Java.ccc:1524:42
                consumeToken(IDENTIFIER);
            } else if (first_set$Java_ccc$1526$7.contains(nextTokenType())) {
                if (scan$Java_ccc$1527$9()) {
                    // Code for Assertion specified at Java.ccc:1527:9
                    if (nextTokenType() == VAR) {
                        // Code for Terminal specified at Java.ccc:1529:11
                        consumeToken(VAR);
                    } else if (nextTokenType() == IDENTIFIER) {
                        // Code for Terminal specified at Java.ccc:1531:11
                        consumeToken(IDENTIFIER);
                        // Code for CodeBlock specified at Java.ccc:1532:11
                        replaceTokenType(VAR);
                    } else {
                        pushOntoCallStack("LambdaParameter", "Java.ccc", 1529, 11);
                        throw new ParseException(getToken(1), first_set$Java_ccc$1529$11, parsingStack);
                    }
                } else if (scan$Java_ccc$1537$9()) {
                    // Code for NonTerminal specified at Java.ccc:1537:9
                    pushOntoCallStack("LambdaParameter", "Java.ccc", 1537, 9);
                    try {
                        Type();
                    } finally {
                        popCallStack();
                    }
                } else {
                    pushOntoCallStack("LambdaParameter", "Java.ccc", 1527, 9);
                    throw new ParseException(getToken(1), first_set$Java_ccc$1527$9, parsingStack);
                }
                if (nextTokenType() == IDENTIFIER) {
                    // Code for Terminal specified at Java.ccc:1540:9
                    consumeToken(IDENTIFIER);
                    // Code for ZeroOrMore specified at Java.ccc:1540:21
                    while (true) {
                        if (!(nextTokenType() == LBRACKET || nextTokenType == AT)) break;
                        // Code for ZeroOrMore specified at Java.ccc:1540:22
                        while (true) {
                            if (!(scan$Java_ccc$1540$23())) break;
                            // Code for NonTerminal specified at Java.ccc:1540:23
                            pushOntoCallStack("LambdaParameter", "Java.ccc", 1540, 23);
                            try {
                                Annotation();
                            } finally {
                                popCallStack();
                            }
                        }
                        // Code for Terminal specified at Java.ccc:1540:36
                        consumeToken(LBRACKET);
                        // Code for Terminal specified at Java.ccc:1540:46
                        consumeToken(RBRACKET);
                    }
                } else if (nextTokenType() == UNDERSCORE) {
                    // Code for Terminal specified at Java.ccc:1542:9
                    consumeToken(UNDERSCORE);
                } else {
                    pushOntoCallStack("LambdaParameter", "Java.ccc", 1540, 9);
                    throw new ParseException(getToken(1), first_set$Java_ccc$1540$9, parsingStack);
                }
            } else {
                pushOntoCallStack("LambdaParameter", "Java.ccc", 1524, 7);
                throw new ParseException(getToken(1), first_set$Java_ccc$1524$7, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$151$4 = first_set$Java_ccc$151$4_init();

    private static EnumSet<TokenType> first_set$Java_ccc$151$4_init() {
        return tokenTypeSet(ABSTRACT, _DEFAULT, FINAL, NATIVE, PRIVATE, PROTECTED, PUBLIC, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VOLATILE);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$190$39 = tokenTypeSet(SEALED, NON_SEALED);
    private static final EnumSet<TokenType> first_set$Java_ccc$214$5 = first_set$Java_ccc$214$5_init();

    private static EnumSet<TokenType> first_set$Java_ccc$214$5_init() {
        return tokenTypeSet(ABSTRACT, CLASS, _DEFAULT, ENUM, FINAL, INTERFACE, NATIVE, PRIVATE, PROTECTED, PUBLIC, RECORD, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VOLATILE, SEALED, NON_SEALED, SEMICOLON, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$297$7 = tokenTypeSet(PERMITS, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$348$20 = first_set$Java_ccc$348$20_init();

    private static EnumSet<TokenType> first_set$Java_ccc$348$20_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, CLASS, _DEFAULT, DOUBLE, ENUM, FINAL, FLOAT, INT, INTERFACE, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VOID, VOLATILE, SEALED, NON_SEALED, LBRACE, SEMICOLON, AT, LT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$361$5 = tokenTypeSet(RECORD, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$378$6 = first_set$Java_ccc$378$6_init();

    private static EnumSet<TokenType> first_set$Java_ccc$378$6_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$398$4 = first_set$Java_ccc$398$4_init();

    private static EnumSet<TokenType> first_set$Java_ccc$398$4_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, CLASS, _DEFAULT, DOUBLE, ENUM, FINAL, FLOAT, INT, INTERFACE, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VOID, VOLATILE, SEALED, NON_SEALED, LBRACE, SEMICOLON, AT, LT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$484$47 = first_set$Java_ccc$484$47_init();

    private static EnumSet<TokenType> first_set$Java_ccc$484$47_init() {
        return tokenTypeSet(UNDERSCORE, BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$487$15 = first_set$Java_ccc$487$15_init();

    private static EnumSet<TokenType> first_set$Java_ccc$487$15_init() {
        return tokenTypeSet(UNDERSCORE, BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, LBRACE, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$522$5 = tokenTypeSet(LBRACE, SEMICOLON);
    private static final EnumSet<TokenType> first_set$Java_ccc$565$20 = tokenTypeSet(SUPER, THIS);
    private static final EnumSet<TokenType> first_set$Java_ccc$569$4 = tokenTypeSet(LPAREN, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$579$4 = first_set$Java_ccc$579$4_init();

    private static EnumSet<TokenType> first_set$Java_ccc$579$4_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$582$4 = first_set$Java_ccc$582$4_init();

    private static EnumSet<TokenType> first_set$Java_ccc$582$4_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$630$3 = first_set$Java_ccc$630$3_init();

    private static EnumSet<TokenType> first_set$Java_ccc$630$3_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$633$19 = tokenTypeSet(EXTENDS, SUPER);
    private static final EnumSet<TokenType> first_set$Java_ccc$637$4 = first_set$Java_ccc$637$4_init();

    private static EnumSet<TokenType> first_set$Java_ccc$637$4_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$729$8 = first_set$Java_ccc$729$8_init();

    private static EnumSet<TokenType> first_set$Java_ccc$729$8_init() {
        return tokenTypeSet(ASSIGN, PLUSASSIGN, MINUSASSIGN, STARASSIGN, SLASHASSIGN, ANDASSIGN, ORASSIGN, XORASSIGN, REMASSIGN, LSHIFTASSIGN, RSIGNEDSHIFTASSIGN, RUNSIGNEDSHIFTASSIGN);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$764$28 = tokenTypeSet(EQ, NE);
    private static final EnumSet<TokenType> first_set$Java_ccc$772$7 = first_set$Java_ccc$772$7_init();

    private static EnumSet<TokenType> first_set$Java_ccc$772$7_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, _DEFAULT, DOUBLE, FINAL, FLOAT, INT, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VAR, VOLATILE, SEALED, NON_SEALED, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$776$7 = first_set$Java_ccc$776$7_init();

    private static EnumSet<TokenType> first_set$Java_ccc$776$7_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$784$7 = tokenTypeSet(GT, LT, LE, GE);
    private static final EnumSet<TokenType> first_set$Java_ccc$802$8 = tokenTypeSet(LSHIFT, RSIGNEDSHIFT, RUNSIGNEDSHIFT);
    private static final EnumSet<TokenType> first_set$Java_ccc$808$33 = tokenTypeSet(PLUS, MINUS);
    private static final EnumSet<TokenType> first_set$Java_ccc$812$24 = tokenTypeSet(STAR, SLASH, REM);
    private static final EnumSet<TokenType> first_set$Java_ccc$816$5 = tokenTypeSet(PLUS, MINUS);
    private static final EnumSet<TokenType> first_set$Java_ccc$822$3 = first_set$Java_ccc$822$3_init();

    private static EnumSet<TokenType> first_set$Java_ccc$822$3_init() {
        return tokenTypeSet(UNDERSCORE, BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, AT, BANG, TILDE, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$838$5 = tokenTypeSet(BANG, TILDE);
    private static final EnumSet<TokenType> first_set$Java_ccc$848$3 = first_set$Java_ccc$848$3_init();

    private static EnumSet<TokenType> first_set$Java_ccc$848$3_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, THIS, TRUE, VOID, LPAREN, AT, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$856$6 = tokenTypeSet(INCR, DECR);
    private static final EnumSet<TokenType> first_set$Java_ccc$874$3$ = first_set$Java_ccc$874$3$_init();

    private static EnumSet<TokenType> first_set$Java_ccc$874$3$_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, THIS, TRUE, VOID, LPAREN, AT, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$874$3 = first_set$Java_ccc$874$3_init();

    private static EnumSet<TokenType> first_set$Java_ccc$874$3_init() {
        return tokenTypeSet(FALSE, NULL, TRUE, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$901$36 = tokenTypeSet(NEW, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$928$17 = first_set$Java_ccc$928$17_init();

    private static EnumSet<TokenType> first_set$Java_ccc$928$17_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, VOID, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$931$6 = first_set$Java_ccc$931$6_init();

    private static EnumSet<TokenType> first_set$Java_ccc$931$6_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, SUPER, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$934$7 = tokenTypeSet(NEW, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$959$7 = first_set$Java_ccc$959$7_init();

    private static EnumSet<TokenType> first_set$Java_ccc$959$7_init() {
        return tokenTypeSet(UNDERSCORE, BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$968$7 = tokenTypeSet(LPAREN, LBRACKET, AT);
    private static final EnumSet<TokenType> first_set$Java_ccc$1026$3 = first_set$Java_ccc$1026$3_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1026$3_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, THIS, TRUE, VOID, LPAREN, AT, INCR, DECR, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1059$3 = first_set$Java_ccc$1059$3_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1059$3_init() {
        return tokenTypeSet(ABSTRACT, _ASSERT, BOOLEAN, BREAK, BYTE, CHAR, CLASS, CONTINUE, _DEFAULT, DO, DOUBLE, ENUM, FALSE, FINAL, FLOAT, FOR, IF, INT, INTERFACE, LONG, NATIVE, NEW, NULL, PRIVATE, PROTECTED, PUBLIC, RETURN, RECORD, SHORT, STATIC, STRICTFP, SUPER, SWITCH, SYNCHRONIZED, THIS, THROW, TRANSIENT, TRUE, TRY, VAR, VOID, VOLATILE, WHILE, YIELD, SEALED, NON_SEALED, LPAREN, LBRACE, SEMICOLON, AT, INCR, DECR, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1070$3 = first_set$Java_ccc$1070$3_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1070$3_init() {
        return tokenTypeSet(_ASSERT, BOOLEAN, BREAK, BYTE, CHAR, CONTINUE, DO, DOUBLE, FALSE, FLOAT, FOR, IF, INT, LONG, NEW, NULL, RETURN, SHORT, SUPER, SWITCH, SYNCHRONIZED, THIS, THROW, TRUE, TRY, VOID, WHILE, YIELD, LPAREN, LBRACE, SEMICOLON, AT, INCR, DECR, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1078$6 = first_set$Java_ccc$1078$6_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1078$6_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, _DEFAULT, DOUBLE, FINAL, FLOAT, INT, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VAR, VOLATILE, SEALED, NON_SEALED, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1110$5 = tokenTypeSet(VAR, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$1127$3 = first_set$Java_ccc$1127$3_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1127$3_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, THIS, TRUE, VOID, LPAREN, AT, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1133$11 = first_set$Java_ccc$1133$11_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1133$11_init() {
        return tokenTypeSet(ASSIGN, INCR, DECR, PLUSASSIGN, MINUSASSIGN, STARASSIGN, SLASHASSIGN, ANDASSIGN, ORASSIGN, XORASSIGN, REMASSIGN, LSHIFTASSIGN, RSIGNEDSHIFTASSIGN, RUNSIGNEDSHIFTASSIGN);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1133$12 = tokenTypeSet(INCR, DECR);
    private static final EnumSet<TokenType> first_set$Java_ccc$1135$11 = first_set$Java_ccc$1135$11_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1135$11_init() {
        return tokenTypeSet(ASSIGN, PLUSASSIGN, MINUSASSIGN, STARASSIGN, SLASHASSIGN, ANDASSIGN, ORASSIGN, XORASSIGN, REMASSIGN, LSHIFTASSIGN, RSIGNEDSHIFTASSIGN, RUNSIGNEDSHIFTASSIGN);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1135$11$ = first_set$Java_ccc$1135$11$_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1135$11$_init() {
        return tokenTypeSet(ASSIGN, PLUSASSIGN, MINUSASSIGN, STARASSIGN, SLASHASSIGN, ANDASSIGN, ORASSIGN, XORASSIGN, REMASSIGN, LSHIFTASSIGN, RSIGNEDSHIFTASSIGN, RUNSIGNEDSHIFTASSIGN);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1159$9 = first_set$Java_ccc$1159$9_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1159$9_init() {
        return tokenTypeSet(UNDERSCORE, ABSTRACT, BOOLEAN, BYTE, CHAR, _DEFAULT, DOUBLE, FINAL, FLOAT, INT, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VAR, VOLATILE, SEALED, NON_SEALED, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1161$9 = first_set$Java_ccc$1161$9_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1161$9_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, _DEFAULT, DOUBLE, FINAL, FLOAT, INT, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VAR, VOLATILE, SEALED, NON_SEALED, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1164$12 = first_set$Java_ccc$1164$12_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1164$12_init() {
        return tokenTypeSet(UNDERSCORE, ABSTRACT, BOOLEAN, BYTE, CHAR, _DEFAULT, DOUBLE, FINAL, FLOAT, INT, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VAR, VOLATILE, SEALED, NON_SEALED, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1164$25 = first_set$Java_ccc$1164$25_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1164$25_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, _DEFAULT, DOUBLE, FINAL, FLOAT, INT, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VAR, VOLATILE, SEALED, NON_SEALED, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1175$5 = first_set$Java_ccc$1175$5_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1175$5_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, _DEFAULT, DOUBLE, FINAL, FLOAT, INT, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VAR, VOLATILE, SEALED, NON_SEALED, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1178$6 = first_set$Java_ccc$1178$6_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1178$6_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, VAR, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1179$6 = tokenTypeSet(UNDERSCORE, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$1189$7 = tokenTypeSet(WHEN, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$1256$6 = first_set$Java_ccc$1256$6_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1256$6_init() {
        return tokenTypeSet(UNDERSCORE, ABSTRACT, _ASSERT, BOOLEAN, BREAK, BYTE, CHAR, CLASS, CONTINUE, _DEFAULT, DO, DOUBLE, ENUM, FALSE, FINAL, FLOAT, FOR, IF, INT, INTERFACE, LONG, NATIVE, NEW, NULL, PRIVATE, PROTECTED, PUBLIC, RETURN, RECORD, SHORT, STATIC, STRICTFP, SUPER, SWITCH, SYNCHRONIZED, THIS, THROW, TRANSIENT, TRUE, TRY, VAR, VOID, VOLATILE, WHILE, YIELD, SEALED, NON_SEALED, LPAREN, LBRACE, SEMICOLON, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1299$47 = first_set$Java_ccc$1299$47_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1299$47_init() {
        return tokenTypeSet(UNDERSCORE, BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1299$72 = first_set$Java_ccc$1299$72_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1299$72_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, THIS, TRUE, VOID, LPAREN, AT, INCR, DECR, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1309$3 = first_set$Java_ccc$1309$3_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1309$3_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, THIS, TRUE, VOID, LPAREN, AT, INCR, DECR, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1325$7 = tokenTypeSet(YIELD, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$1338$29 = first_set$Java_ccc$1338$29_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1338$29_init() {
        return tokenTypeSet(UNDERSCORE, BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1369$10 = first_set$Java_ccc$1369$10_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1369$10_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, _DEFAULT, DOUBLE, FALSE, FINAL, FLOAT, INT, LONG, NATIVE, NEW, NULL, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SUPER, SYNCHRONIZED, THIS, TRANSIENT, TRUE, VAR, VOID, VOLATILE, SEALED, NON_SEALED, LPAREN, AT, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1373$10 = first_set$Java_ccc$1373$10_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1373$10_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, THIS, TRUE, VOID, LPAREN, AT, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1409$4 = tokenTypeSet(AT);
    private static final EnumSet<TokenType> first_set$Java_ccc$1443$4 = first_set$Java_ccc$1443$4_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1443$4_init() {
        return tokenTypeSet(UNDERSCORE, BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1449$6 = first_set$Java_ccc$1449$6_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1449$6_init() {
        return tokenTypeSet(UNDERSCORE, BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, LBRACE, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1464$14 = first_set$Java_ccc$1464$14_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1464$14_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, CLASS, _DEFAULT, DOUBLE, ENUM, FINAL, FLOAT, INT, INTERFACE, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VOLATILE, SEALED, NON_SEALED, SEMICOLON, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1493$19 = first_set$Java_ccc$1493$19_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1493$19_init() {
        return tokenTypeSet(UNDERSCORE, BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, LBRACE, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1493$27 = first_set$Java_ccc$1493$27_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1493$27_init() {
        return tokenTypeSet(UNDERSCORE, BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1496$14 = tokenTypeSet(UNDERSCORE, LPAREN, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$1500$14 = tokenTypeSet(UNDERSCORE, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$1501$14 = tokenTypeSet(UNDERSCORE, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$1524$7 = first_set$Java_ccc$1524$7_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1524$7_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, VAR, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1526$7 = first_set$Java_ccc$1526$7_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1526$7_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, VAR, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1527$9 = first_set$Java_ccc$1527$9_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1527$9_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, VAR, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1529$11 = tokenTypeSet(VAR, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$1540$9 = tokenTypeSet(UNDERSCORE, IDENTIFIER);

    private boolean scanToken(TokenType expectedType, TokenType...additionalTypes) {
        Token peekedToken = nextToken(currentLookaheadToken);
        TokenType type = peekedToken.getType();
        if (type != expectedType) {
            boolean matched = false;
            for (TokenType tt : additionalTypes) {
                if (type == tt) {
                    matched = true;
                    break;
                }
            }
            if (!matched) return false;
        }
        --remainingLookahead;
        currentLookaheadToken = peekedToken;
        return true;
    }

    private boolean scanToken(EnumSet<TokenType> types) {
        Token peekedToken = nextToken(currentLookaheadToken);
        TokenType type = peekedToken.getType();
        if (!types.contains(type)) return false;
        --remainingLookahead;
        currentLookaheadToken = peekedToken;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:39:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$39$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:39:5
            // NonTerminal ImportDeclaration at Java.ccc:39:5
            pushOntoLookaheadStack("ModularCompilationUnit", "Java.ccc", 39, 5);
            currentLookaheadProduction = "ImportDeclaration";
            try {
                if (!check$ImportDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:40:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$40$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:40:5
            // NonTerminal Annotation at Java.ccc:40:5
            pushOntoLookaheadStack("ModularCompilationUnit", "Java.ccc", 40, 5);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:50:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$50$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$50$11(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:50:25
            // NonTerminal ModuleDirective at Java.ccc:50:25
            pushOntoLookaheadStack("ModularCompilationUnit", "Java.ccc", 50, 25);
            currentLookaheadProduction = "ModuleDirective";
            try {
                if (!check$ModuleDirective(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:56:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$56$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:56:4
            // NonTerminal RequiresDirective at Java.ccc:56:4
            pushOntoLookaheadStack("ModuleDirective", "Java.ccc", 56, 4);
            currentLookaheadProduction = "RequiresDirective";
            try {
                if (!check$RequiresDirective(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:58:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$58$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:58:4
            // NonTerminal ExportsDirective at Java.ccc:58:4
            pushOntoLookaheadStack("ModuleDirective", "Java.ccc", 58, 4);
            currentLookaheadProduction = "ExportsDirective";
            try {
                if (!check$ExportsDirective(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:60:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$60$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:60:4
            // NonTerminal OpensDirective at Java.ccc:60:4
            pushOntoLookaheadStack("ModuleDirective", "Java.ccc", 60, 4);
            currentLookaheadProduction = "OpensDirective";
            try {
                if (!check$OpensDirective(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:62:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$62$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:62:4
            // NonTerminal UsesDirective at Java.ccc:62:4
            pushOntoLookaheadStack("ModuleDirective", "Java.ccc", 62, 4);
            currentLookaheadProduction = "UsesDirective";
            try {
                if (!check$UsesDirective(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:64:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$64$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:64:4
            // NonTerminal ProvidesDirective at Java.ccc:64:4
            pushOntoLookaheadStack("ModuleDirective", "Java.ccc", 64, 4);
            currentLookaheadProduction = "ProvidesDirective";
            try {
                if (!check$ProvidesDirective(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:77:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$77$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:77:6
            EnumSet<TokenType> previousActives3 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged4 = false;
            somethingChanged4 = activateTokenTypes(TO);
            try {
                if (!scanToken(TO)) return false;
            } finally {
                token_source.activeTokenTypes = previousActives3;
                if (somethingChanged4) {
                    token_source.reset(currentLookaheadToken);
                    nextTokenType = null;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:78:6
            // NonTerminal Name at Java.ccc:78:6
            pushOntoLookaheadStack("ExportsDirective", "Java.ccc", 78, 6);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:78:11
            boolean passedPredicate8 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token9 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$78$12(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token9;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate8;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:78:12
    // BuildScanRoutine macro
    private boolean check$Java_ccc$78$12(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:78:12
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:78:20
            // NonTerminal Name at Java.ccc:78:20
            pushOntoLookaheadStack("ExportsDirective", "Java.ccc", 78, 20);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:87:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$87$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:87:6
            EnumSet<TokenType> previousActives3 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged4 = false;
            somethingChanged4 = activateTokenTypes(TO);
            try {
                if (!scanToken(TO)) return false;
            } finally {
                token_source.activeTokenTypes = previousActives3;
                if (somethingChanged4) {
                    token_source.reset(currentLookaheadToken);
                    nextTokenType = null;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:88:6
            // NonTerminal Name at Java.ccc:88:6
            pushOntoLookaheadStack("OpensDirective", "Java.ccc", 88, 6);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:88:11
            boolean passedPredicate8 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token9 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$88$12(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token9;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate8;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:88:12
    // BuildScanRoutine macro
    private boolean check$Java_ccc$88$12(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:88:12
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:88:20
            // NonTerminal Name at Java.ccc:88:20
            pushOntoLookaheadStack("OpensDirective", "Java.ccc", 88, 20);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:104:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$104$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:104:6
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:104:14
            // NonTerminal Name at Java.ccc:104:14
            pushOntoLookaheadStack("ProvidesDirective", "Java.ccc", 104, 14);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:130:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$130$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:130:6
            // NonTerminal Annotation at Java.ccc:130:6
            pushOntoLookaheadStack("PackageDeclaration", "Java.ccc", 130, 6);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:144:61
    // BuildScanRoutine macro
    private boolean check$Java_ccc$144$61(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:144:61
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:144:67
            if (!scanToken(STAR)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:148:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$148$3$(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:148:3
            Token token2 = currentLookaheadToken;
            int remainingLookahead2 = remainingLookahead;
            boolean hitFailure2 = hitFailure;
            boolean passedPredicate2 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$148$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$176$3(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$198$3(false)) {
                            currentLookaheadToken = token2;
                            remainingLookahead = remainingLookahead2;
                            hitFailure = hitFailure2;
                            return false;
                        }
                    }
                }
            } finally {
                passedPredicate = passedPredicate2;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:148:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$148$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:148:3
            if (!(isParserTolerant() || permissibleModifiers == null || permissibleModifiers.contains(getTokenType(1)))) {
                hitFailure = true;
                return false;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:151:4
            if (!scanToken(first_set$Java_ccc$151$4)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:154:3
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:176:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$176$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:176:3
            if (!(permissibleModifiers == null || permissibleModifiers.contains(SEALED) && (checkNextTokenImage("sealed", "non-sealed") || checkNextTokenImage("non") && "-".equals(tokenImage(2)) && "sealed".equals(tokenImage(3)) && getToken(3).getBeginOffset() == getToken(1).getEndOffset() + 1))) {
                hitFailure = true;
                return false;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:190:3
            EnumSet<TokenType> previousActives4 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged5 = false;
            somethingChanged5 = activateTokenTypes(SEALED, NON_SEALED);
            try {
                if (hitFailure) return false;
                if (remainingLookahead <= 0) return true;
                // Lookahead Code for ExpansionChoice specified at Java.ccc:190:39
                if (!scanToken(SEALED, NON_SEALED)) return false;
            } finally {
                token_source.activeTokenTypes = previousActives4;
                if (somethingChanged5) {
                    token_source.reset(currentLookaheadToken);
                    nextTokenType = null;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:191:3
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:198:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$198$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:198:3
            // NonTerminal Annotation at Java.ccc:198:3
            pushOntoLookaheadStack("Modifiers", "Java.ccc", 198, 3);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:216:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$216$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:216:5
            // NonTerminal AnnotationTypeDeclaration at Java.ccc:216:5
            pushOntoLookaheadStack("TypeDeclaration", "Java.ccc", 216, 5);
            currentLookaheadProduction = "AnnotationTypeDeclaration";
            try {
                if (!check$AnnotationTypeDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:218:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$218$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:218:5
            // NonTerminal ClassDeclaration at Java.ccc:218:5
            pushOntoLookaheadStack("TypeDeclaration", "Java.ccc", 218, 5);
            currentLookaheadProduction = "ClassDeclaration";
            try {
                if (!check$ClassDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:220:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$220$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:220:5
            // NonTerminal InterfaceDeclaration at Java.ccc:220:5
            pushOntoLookaheadStack("TypeDeclaration", "Java.ccc", 220, 5);
            currentLookaheadProduction = "InterfaceDeclaration";
            try {
                if (!check$InterfaceDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:222:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$222$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:222:5
            // NonTerminal EnumDeclaration at Java.ccc:222:5
            pushOntoLookaheadStack("TypeDeclaration", "Java.ccc", 222, 5);
            currentLookaheadProduction = "EnumDeclaration";
            try {
                if (!check$EnumDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:224:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$224$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:224:5
            // NonTerminal RecordDeclaration at Java.ccc:224:5
            pushOntoLookaheadStack("TypeDeclaration", "Java.ccc", 224, 5);
            currentLookaheadProduction = "RecordDeclaration";
            try {
                if (!check$RecordDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:232:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$232$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:232:4
            // NonTerminal Modifiers at Java.ccc:232:4
            pushOntoLookaheadStack("TypeDeclarationLA", "Java.ccc", 232, 4);
            currentLookaheadProduction = "Modifiers";
            try {
                if (!check$Modifiers(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:234:6
            Token token5 = currentLookaheadToken;
            int remainingLookahead5 = remainingLookahead;
            boolean hitFailure5 = hitFailure;
            boolean passedPredicate5 = passedPredicate;
            try {
                passedPredicate = false;
                if (!scanToken(CLASS)) {
                    currentLookaheadToken = token5;
                    remainingLookahead = remainingLookahead5;
                    hitFailure = hitFailure5;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!scanToken(INTERFACE)) {
                        currentLookaheadToken = token5;
                        remainingLookahead = remainingLookahead5;
                        hitFailure = hitFailure5;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!scanToken(ENUM)) {
                            currentLookaheadToken = token5;
                            remainingLookahead = remainingLookahead5;
                            hitFailure = hitFailure5;
                            if (passedPredicate) return false;
                            passedPredicate = false;
                            if (!check$Java_ccc$237$8(false)) {
                                currentLookaheadToken = token5;
                                remainingLookahead = remainingLookahead5;
                                hitFailure = hitFailure5;
                                if (passedPredicate) return false;
                                passedPredicate = false;
                                if (!check$Java_ccc$238$8(false)) {
                                    currentLookaheadToken = token5;
                                    remainingLookahead = remainingLookahead5;
                                    hitFailure = hitFailure5;
                                    return false;
                                }
                            }
                        }
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:237:8
    // BuildScanRoutine macro
    private boolean check$Java_ccc$237$8(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:237:8
            if (!scanToken(AT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:237:13
            if (!scanToken(INTERFACE)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:238:8
    // BuildScanRoutine macro
    private boolean check$Java_ccc$238$8(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:238:8
            if (!scanToken(IDENTIFIER)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:239:8
            if (!(currentLookaheadToken.toString().equals("record"))) {
                hitFailure = true;
                return false;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:240:8
            if (!scanToken(IDENTIFIER)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:273:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$273$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:273:5
            // NonTerminal TypeParameters at Java.ccc:273:5
            pushOntoLookaheadStack("ClassDeclaration", "Java.ccc", 273, 5);
            currentLookaheadProduction = "TypeParameters";
            try {
                if (!check$TypeParameters(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:274:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$274$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:274:5
            // NonTerminal ExtendsList at Java.ccc:274:5
            pushOntoLookaheadStack("ClassDeclaration", "Java.ccc", 274, 5);
            currentLookaheadProduction = "ExtendsList";
            try {
                if (!check$ExtendsList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:275:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$275$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:275:5
            // NonTerminal ImplementsList at Java.ccc:275:5
            pushOntoLookaheadStack("ClassDeclaration", "Java.ccc", 275, 5);
            currentLookaheadProduction = "ImplementsList";
            try {
                if (!check$ImplementsList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:276:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$276$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 0;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (!(checkNextTokenImage("permits"))) return false;
            passedPredicate = true;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:276:5
            // NonTerminal PermitsList at Java.ccc:276:5
            pushOntoLookaheadStack("ClassDeclaration", "Java.ccc", 276, 5);
            currentLookaheadProduction = "PermitsList";
            try {
                if (!check$PermitsList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:288:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$288$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:288:5
            // NonTerminal TypeParameters at Java.ccc:288:5
            pushOntoLookaheadStack("InterfaceDeclaration", "Java.ccc", 288, 5);
            currentLookaheadProduction = "TypeParameters";
            try {
                if (!check$TypeParameters(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:289:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$289$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:289:5
            // NonTerminal ExtendsList at Java.ccc:289:5
            pushOntoLookaheadStack("InterfaceDeclaration", "Java.ccc", 289, 5);
            currentLookaheadProduction = "ExtendsList";
            try {
                if (!check$ExtendsList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:290:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$290$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 0;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (!(checkNextTokenImage("permits"))) return false;
            passedPredicate = true;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:290:5
            // NonTerminal PermitsList at Java.ccc:290:5
            pushOntoLookaheadStack("InterfaceDeclaration", "Java.ccc", 290, 5);
            currentLookaheadProduction = "PermitsList";
            try {
                if (!check$PermitsList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:305:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$305$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:305:5
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:305:13
            // NonTerminal ObjectType at Java.ccc:305:13
            pushOntoLookaheadStack("PermitsList", "Java.ccc", 305, 13);
            currentLookaheadProduction = "ObjectType";
            try {
                if (!check$ObjectType(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:312:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$312$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (!backscan$Java_ccc$312$11()) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:313:6
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:313:14
            // NonTerminal ObjectType at Java.ccc:313:14
            pushOntoLookaheadStack("ExtendsList", "Java.ccc", 313, 14);
            currentLookaheadProduction = "ObjectType";
            try {
                if (!check$ObjectType(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:328:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$328$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:328:6
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:328:14
            // NonTerminal ObjectType at Java.ccc:328:14
            pushOntoLookaheadStack("ImplementsList", "Java.ccc", 328, 14);
            currentLookaheadProduction = "ObjectType";
            try {
                if (!check$ObjectType(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:340:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$340$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:340:5
            // NonTerminal ImplementsList at Java.ccc:340:5
            pushOntoLookaheadStack("EnumDeclaration", "Java.ccc", 340, 5);
            currentLookaheadProduction = "ImplementsList";
            try {
                if (!check$ImplementsList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:346:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$346$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:346:6
            // NonTerminal EnumConstant at Java.ccc:346:6
            pushOntoLookaheadStack("EnumBody", "Java.ccc", 346, 6);
            currentLookaheadProduction = "EnumConstant";
            try {
                if (!check$EnumConstant(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:346:19
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$346$21(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:346:21
    // BuildScanRoutine macro
    private boolean check$Java_ccc$346$21(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:346:28
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:346:36
            // NonTerminal EnumConstant at Java.ccc:346:36
            pushOntoLookaheadStack("EnumBody", "Java.ccc", 346, 36);
            currentLookaheadProduction = "EnumConstant";
            try {
                if (!check$EnumConstant(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:348:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$348$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:348:6
            if (!scanToken(SEMICOLON)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:348:18
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$348$20(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:348:20
    // BuildScanRoutine macro
    private boolean check$Java_ccc$348$20(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:348:20
            // NonTerminal ClassOrInterfaceBodyDeclaration at Java.ccc:348:20
            pushOntoLookaheadStack("EnumBody", "Java.ccc", 348, 20);
            currentLookaheadProduction = "ClassOrInterfaceBodyDeclaration";
            try {
                if (!check$ClassOrInterfaceBodyDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:369:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$369$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:369:4
            // NonTerminal TypeParameters at Java.ccc:369:4
            pushOntoLookaheadStack("RecordDeclaration", "Java.ccc", 369, 4);
            currentLookaheadProduction = "TypeParameters";
            try {
                if (!check$TypeParameters(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:371:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$371$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:371:4
            // NonTerminal ImplementsList at Java.ccc:371:4
            pushOntoLookaheadStack("RecordDeclaration", "Java.ccc", 371, 4);
            currentLookaheadProduction = "ImplementsList";
            try {
                if (!check$ImplementsList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:378:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$378$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:378:6
            // NonTerminal RecordComponent at Java.ccc:378:6
            pushOntoLookaheadStack("RecordHeader", "Java.ccc", 378, 6);
            currentLookaheadProduction = "RecordComponent";
            try {
                if (!check$RecordComponent(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:379:6
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:380:6
            boolean passedPredicate5 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token6 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$381$7(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token6;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:381:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$381$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:381:7
            // No code generated since this assertion does not apply in lookahead
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:382:7
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:382:15
            // NonTerminal RecordComponent at Java.ccc:382:15
            pushOntoLookaheadStack("RecordHeader", "Java.ccc", 382, 15);
            currentLookaheadProduction = "RecordComponent";
            try {
                if (!check$RecordComponent(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:383:7
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:390:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$390$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:390:5
            // NonTerminal Annotation at Java.ccc:390:5
            pushOntoLookaheadStack("RecordComponent", "Java.ccc", 390, 5);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:390:24
    // BuildScanRoutine macro
    private boolean check$Java_ccc$390$24(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:390:24
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$390$25(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:390:38
            if (!scanToken(VAR_ARGS)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:390:25
    // BuildScanRoutine macro
    private boolean check$Java_ccc$390$25(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:390:25
            // NonTerminal Annotation at Java.ccc:390:25
            pushOntoLookaheadStack("RecordComponent", "Java.ccc", 390, 25);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:396:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$396$4$(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:396:4
            Token token2 = currentLookaheadToken;
            int remainingLookahead2 = remainingLookahead;
            boolean hitFailure2 = hitFailure;
            boolean passedPredicate2 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$396$4(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$398$4(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate2;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:396:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$396$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:396:4
            // NonTerminal CompactConstructorDeclaration at Java.ccc:396:4
            pushOntoLookaheadStack("RecordBody", "Java.ccc", 396, 4);
            currentLookaheadProduction = "CompactConstructorDeclaration";
            try {
                if (!check$CompactConstructorDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:398:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$398$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:398:4
            // NonTerminal ClassOrInterfaceBodyDeclaration at Java.ccc:398:4
            pushOntoLookaheadStack("RecordBody", "Java.ccc", 398, 4);
            currentLookaheadProduction = "ClassOrInterfaceBodyDeclaration";
            try {
                if (!check$ClassOrInterfaceBodyDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:408:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$408$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$408$10(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:408:54
            // NonTerminal BlockStatement at Java.ccc:408:54
            pushOntoLookaheadStack("CompactConstructorDeclaration", "Java.ccc", 408, 54);
            currentLookaheadProduction = "BlockStatement";
            try {
                if (!check$BlockStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:408:20
    // BuildScanRoutine macro
    private boolean check$Java_ccc$408$20(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:408:20
            // NonTerminal ExplicitConstructorInvocation at Java.ccc:408:20
            pushOntoLookaheadStack("CompactConstructorDeclaration", "Java.ccc", 408, 20);
            currentLookaheadProduction = "ExplicitConstructorInvocation";
            try {
                if (!check$ExplicitConstructorInvocation(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:409:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$409$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:409:5
            // NonTerminal ExplicitConstructorInvocation at Java.ccc:409:5
            pushOntoLookaheadStack("CompactConstructorDeclaration", "Java.ccc", 409, 5);
            currentLookaheadProduction = "ExplicitConstructorInvocation";
            try {
                if (!check$ExplicitConstructorInvocation(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:410:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$410$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$410$11(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:410:25
            // NonTerminal BlockStatement at Java.ccc:410:25
            pushOntoLookaheadStack("CompactConstructorDeclaration", "Java.ccc", 410, 25);
            currentLookaheadProduction = "BlockStatement";
            try {
                if (!check$BlockStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:417:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$417$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:417:4
            // NonTerminal Annotation at Java.ccc:417:4
            pushOntoLookaheadStack("EnumConstant", "Java.ccc", 417, 4);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:417:32
    // BuildScanRoutine macro
    private boolean check$Java_ccc$417$32(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:417:32
            // NonTerminal InvocationArguments at Java.ccc:417:32
            pushOntoLookaheadStack("EnumConstant", "Java.ccc", 417, 32);
            currentLookaheadProduction = "InvocationArguments";
            try {
                if (!check$InvocationArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:417:56
    // BuildScanRoutine macro
    private boolean check$Java_ccc$417$56(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:417:56
            // NonTerminal ClassOrInterfaceBody at Java.ccc:417:56
            pushOntoLookaheadStack("EnumConstant", "Java.ccc", 417, 56);
            currentLookaheadProduction = "ClassOrInterfaceBody";
            try {
                if (!check$ClassOrInterfaceBody(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:422:20
    // BuildScanRoutine macro
    private boolean check$Java_ccc$422$20(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:422:20
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:422:28
            // NonTerminal TypeParameter at Java.ccc:422:28
            pushOntoLookaheadStack("TypeParameters", "Java.ccc", 422, 28);
            currentLookaheadProduction = "TypeParameter";
            try {
                if (!check$TypeParameter(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:434:17
    // BuildScanRoutine macro
    private boolean check$Java_ccc$434$17(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:434:17
            // NonTerminal Annotation at Java.ccc:434:17
            pushOntoLookaheadStack("TypeParameter", "Java.ccc", 434, 17);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:434:51
    // BuildScanRoutine macro
    private boolean check$Java_ccc$434$51(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:434:51
            // NonTerminal TypeBound at Java.ccc:434:51
            pushOntoLookaheadStack("TypeParameter", "Java.ccc", 434, 51);
            currentLookaheadProduction = "TypeBound";
            try {
                if (!check$TypeBound(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:437:27
    // BuildScanRoutine macro
    private boolean check$Java_ccc$437$27(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:437:27
            if (!scanToken(BIT_AND)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:437:37
            // NonTerminal ObjectType at Java.ccc:437:37
            pushOntoLookaheadStack("TypeBound", "Java.ccc", 437, 37);
            currentLookaheadProduction = "ObjectType";
            try {
                if (!check$ObjectType(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:440:34
    // BuildScanRoutine macro
    private boolean check$Java_ccc$440$34(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$440$40(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:440:54
            // NonTerminal ClassOrInterfaceBodyDeclaration at Java.ccc:440:54
            pushOntoLookaheadStack("ClassOrInterfaceBody", "Java.ccc", 440, 54);
            currentLookaheadProduction = "ClassOrInterfaceBodyDeclaration";
            try {
                if (!check$ClassOrInterfaceBodyDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:443:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$443$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:443:3
            // NonTerminal Initializer at Java.ccc:443:3
            pushOntoLookaheadStack("ClassOrInterfaceBodyDeclaration", "Java.ccc", 443, 3);
            currentLookaheadProduction = "Initializer";
            try {
                if (!check$Initializer(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:445:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$445$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$212$8(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:445:3
            // NonTerminal TypeDeclaration at Java.ccc:445:3
            pushOntoLookaheadStack("ClassOrInterfaceBodyDeclaration", "Java.ccc", 445, 3);
            currentLookaheadProduction = "TypeDeclaration";
            try {
                if (!check$TypeDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:447:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$447$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:447:3
            // NonTerminal ConstructorDeclaration at Java.ccc:447:3
            pushOntoLookaheadStack("ClassOrInterfaceBodyDeclaration", "Java.ccc", 447, 3);
            currentLookaheadProduction = "ConstructorDeclaration";
            try {
                if (!check$ConstructorDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:449:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$449$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:449:3
            // NonTerminal MethodDeclaration at Java.ccc:449:3
            pushOntoLookaheadStack("ClassOrInterfaceBodyDeclaration", "Java.ccc", 449, 3);
            currentLookaheadProduction = "MethodDeclaration";
            try {
                if (!check$MethodDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:451:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$451$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:451:3
            // NonTerminal FieldDeclaration at Java.ccc:451:3
            pushOntoLookaheadStack("ClassOrInterfaceBodyDeclaration", "Java.ccc", 451, 3);
            currentLookaheadProduction = "FieldDeclaration";
            try {
                if (!check$FieldDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:453:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$453$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 0;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (!backscan$Java_ccc$453$8()) return false;
            passedPredicate = true;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Failure specified at Java.ccc:454:3
            if (true) {
                hitFailure = true;
                return false;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:456:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$456$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 0;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            passedPredicate = true;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Failure specified at Java.ccc:456:3
            if (true) {
                hitFailure = true;
                return false;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:471:24
    // BuildScanRoutine macro
    private boolean check$Java_ccc$471$24(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:471:24
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:471:32
            // NonTerminal VariableDeclarator at Java.ccc:471:32
            pushOntoLookaheadStack("FieldDeclaration", "Java.ccc", 471, 32);
            currentLookaheadProduction = "VariableDeclarator";
            try {
                if (!check$VariableDeclarator(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:474:46
    // BuildScanRoutine macro
    private boolean check$Java_ccc$474$46(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:474:46
            if (!scanToken(ASSIGN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:474:55
            // NonTerminal VariableInitializer at Java.ccc:474:55
            pushOntoLookaheadStack("VariableDeclarator", "Java.ccc", 474, 55);
            currentLookaheadProduction = "VariableInitializer";
            try {
                if (!check$VariableInitializer(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:477:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$477$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:477:5
            if (!scanToken(IDENTIFIER)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:478:5
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$478$7(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:478:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$478$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:478:7
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$478$8(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:478:21
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:478:32
            if (!scanToken(RBRACKET)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:478:8
    // BuildScanRoutine macro
    private boolean check$Java_ccc$478$8(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:478:8
            // NonTerminal Annotation at Java.ccc:478:8
            pushOntoLookaheadStack("VariableDeclaratorId", "Java.ccc", 478, 8);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:480:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$480$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (backscan$Java_ccc$480$10()) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:481:5
            if (!scanToken(UNDERSCORE)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:484:28
    // BuildScanRoutine macro
    private boolean check$Java_ccc$484$28(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:484:28
            // NonTerminal ArrayInitializer at Java.ccc:484:28
            pushOntoLookaheadStack("VariableInitializer", "Java.ccc", 484, 28);
            currentLookaheadProduction = "ArrayInitializer";
            try {
                if (!check$ArrayInitializer(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:484:47
    // BuildScanRoutine macro
    private boolean check$Java_ccc$484$47(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:484:47
            // NonTerminal Expression at Java.ccc:484:47
            pushOntoLookaheadStack("VariableInitializer", "Java.ccc", 484, 47);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:487:15
    // BuildScanRoutine macro
    private boolean check$Java_ccc$487$15(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:487:15
            // NonTerminal VariableInitializer at Java.ccc:487:15
            pushOntoLookaheadStack("ArrayInitializer", "Java.ccc", 487, 15);
            currentLookaheadProduction = "VariableInitializer";
            try {
                if (!check$VariableInitializer(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:487:35
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$487$37(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:487:37
    // BuildScanRoutine macro
    private boolean check$Java_ccc$487$37(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:487:44
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:487:52
            // NonTerminal VariableInitializer at Java.ccc:487:52
            pushOntoLookaheadStack("ArrayInitializer", "Java.ccc", 487, 52);
            currentLookaheadProduction = "VariableInitializer";
            try {
                if (!check$VariableInitializer(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:492:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$492$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 0;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (!backscan$Java_ccc$492$10()) return false;
            passedPredicate = true;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:494:5
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:500:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$500$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 0;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (backscan$Java_ccc$500$10()) return false;
            passedPredicate = true;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:504:5
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:510:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$510$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 0;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            passedPredicate = true;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:510:5
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:517:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$517$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:517:5
            // NonTerminal TypeParameters at Java.ccc:517:5
            pushOntoLookaheadStack("MethodDeclaration", "Java.ccc", 517, 5);
            currentLookaheadProduction = "TypeParameters";
            try {
                if (!check$TypeParameters(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:520:28
    // BuildScanRoutine macro
    private boolean check$Java_ccc$520$28(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:520:28
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$520$29(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:520:42
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:520:52
            if (!scanToken(RBRACKET)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:520:29
    // BuildScanRoutine macro
    private boolean check$Java_ccc$520$29(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:520:29
            // NonTerminal Annotation at Java.ccc:520:29
            pushOntoLookaheadStack("MethodDeclaration", "Java.ccc", 520, 29);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:521:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$521$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:521:5
            // NonTerminal ThrowsList at Java.ccc:521:5
            pushOntoLookaheadStack("MethodDeclaration", "Java.ccc", 521, 5);
            currentLookaheadProduction = "ThrowsList";
            try {
                if (!check$ThrowsList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:522:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$522$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:522:5
            // NonTerminal Block at Java.ccc:522:5
            pushOntoLookaheadStack("MethodDeclaration", "Java.ccc", 522, 5);
            currentLookaheadProduction = "Block";
            try {
                if (!check$Block(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:529:9
    // BuildScanRoutine macro
    private boolean check$Java_ccc$529$9(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:529:9
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:530:9
            // NonTerminal FormalParameter at Java.ccc:530:9
            pushOntoLookaheadStack("FormalParameters", "Java.ccc", 530, 9);
            currentLookaheadProduction = "FormalParameter";
            try {
                if (!check$FormalParameter(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:531:9
            boolean passedPredicate5 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token6 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$532$11(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token6;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:532:11
    // BuildScanRoutine macro
    private boolean check$Java_ccc$532$11(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:532:11
            // No code generated since this assertion does not apply in lookahead
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:533:11
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:534:11
            // NonTerminal FormalParameter at Java.ccc:534:11
            pushOntoLookaheadStack("FormalParameters", "Java.ccc", 534, 11);
            currentLookaheadProduction = "FormalParameter";
            try {
                if (!check$FormalParameter(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:544:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$544$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:544:6
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$544$7(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:544:20
            if (!scanToken(VAR_ARGS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:544:31
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:544:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$544$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:544:7
            // NonTerminal Annotation at Java.ccc:544:7
            pushOntoLookaheadStack("FormalParameter", "Java.ccc", 544, 7);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:554:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$554$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:554:5
            // NonTerminal TypeParameters at Java.ccc:554:5
            pushOntoLookaheadStack("ConstructorDeclaration", "Java.ccc", 554, 5);
            currentLookaheadProduction = "TypeParameters";
            try {
                if (!check$TypeParameters(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:556:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$556$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:556:5
            // NonTerminal ThrowsList at Java.ccc:556:5
            pushOntoLookaheadStack("ConstructorDeclaration", "Java.ccc", 556, 5);
            currentLookaheadProduction = "ThrowsList";
            try {
                if (!check$ThrowsList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:558:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$558$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$558$10(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:558:54
            // NonTerminal BlockStatement at Java.ccc:558:54
            pushOntoLookaheadStack("ConstructorDeclaration", "Java.ccc", 558, 54);
            currentLookaheadProduction = "BlockStatement";
            try {
                if (!check$BlockStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:558:20
    // BuildScanRoutine macro
    private boolean check$Java_ccc$558$20(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:558:20
            // NonTerminal ExplicitConstructorInvocation at Java.ccc:558:20
            pushOntoLookaheadStack("ConstructorDeclaration", "Java.ccc", 558, 20);
            currentLookaheadProduction = "ExplicitConstructorInvocation";
            try {
                if (!check$ExplicitConstructorInvocation(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:559:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$559$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:559:5
            // NonTerminal ExplicitConstructorInvocation at Java.ccc:559:5
            pushOntoLookaheadStack("ConstructorDeclaration", "Java.ccc", 559, 5);
            currentLookaheadProduction = "ExplicitConstructorInvocation";
            try {
                if (!check$ExplicitConstructorInvocation(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:560:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$560$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$560$11(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:560:25
            // NonTerminal BlockStatement at Java.ccc:560:25
            pushOntoLookaheadStack("ConstructorDeclaration", "Java.ccc", 560, 25);
            currentLookaheadProduction = "BlockStatement";
            try {
                if (!check$BlockStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:565:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$565$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:565:3
            Token token3 = currentLookaheadToken;
            boolean passedPredicate3 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$565$4(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token3;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:565:20
            if (!scanToken(SUPER, THIS)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:565:44
            // NonTerminal InvocationArguments at Java.ccc:565:44
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "Java.ccc", 565, 44);
            currentLookaheadProduction = "InvocationArguments";
            try {
                if (!check$InvocationArguments(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:565:64
            if (!scanToken(SEMICOLON)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:565:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$565$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:565:4
            // NonTerminal TypeArguments at Java.ccc:565:4
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "Java.ccc", 565, 4);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:569:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$569$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:569:4
            Token token4 = currentLookaheadToken;
            int remainingLookahead4 = remainingLookahead;
            boolean hitFailure4 = hitFailure;
            boolean passedPredicate4 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$569$4(false)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$569$30(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:570:3
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:570:9
            Token token7 = currentLookaheadToken;
            boolean passedPredicate7 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$570$10(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token7;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate7;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:570:25
            if (!scanToken(SUPER)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:570:39
            // NonTerminal InvocationArguments at Java.ccc:570:39
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "Java.ccc", 570, 39);
            currentLookaheadProduction = "InvocationArguments";
            try {
                if (!check$InvocationArguments(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:570:59
            if (!scanToken(SEMICOLON)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:569:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$569$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:569:4
            // NonTerminal Name at Java.ccc:569:4
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "Java.ccc", 569, 4);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:569:9
            Token token4 = currentLookaheadToken;
            boolean passedPredicate4 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$569$10(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token4;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:569:10
    // BuildScanRoutine macro
    private boolean check$Java_ccc$569$10(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:569:10
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:569:15
            if (!scanToken(THIS)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:569:30
    // BuildScanRoutine macro
    private boolean check$Java_ccc$569$30(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:569:30
            // NonTerminal Parentheses at Java.ccc:569:30
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "Java.ccc", 569, 30);
            currentLookaheadProduction = "Parentheses";
            try {
                if (!check$Parentheses(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:569:42
            Token token4 = currentLookaheadToken;
            boolean passedPredicate4 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$569$43(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token4;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:569:60
            Token token6 = currentLookaheadToken;
            boolean passedPredicate6 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$569$61(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token6;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate6;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:569:43
    // BuildScanRoutine macro
    private boolean check$Java_ccc$569$43(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:569:43
            if (!scanToken(DOT)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:569:55
            // NonTerminal Name at Java.ccc:569:55
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "Java.ccc", 569, 55);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:569:61
    // BuildScanRoutine macro
    private boolean check$Java_ccc$569$61(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:569:61
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:569:66
            if (!scanToken(THIS)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:570:10
    // BuildScanRoutine macro
    private boolean check$Java_ccc$570$10(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:570:10
            // NonTerminal TypeArguments at Java.ccc:570:10
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "Java.ccc", 570, 10);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:579:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$579$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (!(getTokenType(2) != LBRACKET)) return false;
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:580:6
            // NonTerminal PrimitiveType at Java.ccc:580:6
            pushOntoLookaheadStack("Type", "Java.ccc", 580, 6);
            currentLookaheadProduction = "PrimitiveType";
            try {
                if (!check$PrimitiveType(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:582:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$582$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:582:4
            // NonTerminal ReferenceType at Java.ccc:582:4
            pushOntoLookaheadStack("Type", "Java.ccc", 582, 4);
            currentLookaheadProduction = "ReferenceType";
            try {
                if (!check$ReferenceType(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:592:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$592$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:592:4
            // NonTerminal PrimitiveArrayType at Java.ccc:592:4
            pushOntoLookaheadStack("ReferenceType", "Java.ccc", 592, 4);
            currentLookaheadProduction = "PrimitiveArrayType";
            try {
                if (!check$PrimitiveArrayType(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:594:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$594$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:594:4
            // NonTerminal ObjectType at Java.ccc:594:4
            pushOntoLookaheadStack("ReferenceType", "Java.ccc", 594, 4);
            currentLookaheadProduction = "ObjectType";
            try {
                if (!check$ObjectType(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:594:15
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$594$16(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:594:16
    // BuildScanRoutine macro
    private boolean check$Java_ccc$594$16(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:594:16
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$594$17(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:594:30
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:594:40
            if (!scanToken(RBRACKET)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:594:17
    // BuildScanRoutine macro
    private boolean check$Java_ccc$594$17(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:594:17
            // NonTerminal Annotation at Java.ccc:594:17
            pushOntoLookaheadStack("ReferenceType", "Java.ccc", 594, 17);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:598:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$598$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:598:6
            // NonTerminal Annotation at Java.ccc:598:6
            pushOntoLookaheadStack("ObjectType", "Java.ccc", 598, 6);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:599:22
    // BuildScanRoutine macro
    private boolean check$Java_ccc$599$22(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:599:22
            // NonTerminal TypeArguments at Java.ccc:599:22
            pushOntoLookaheadStack("ObjectType", "Java.ccc", 599, 22);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:600:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$600$7(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:600:7
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:600:13
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$600$14(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:600:27
            if (!scanToken(IDENTIFIER)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:600:45
            Token token8 = currentLookaheadToken;
            boolean passedPredicate8 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$600$47(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token8;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate8;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:600:14
    // BuildScanRoutine macro
    private boolean check$Java_ccc$600$14(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:600:14
            // NonTerminal Annotation at Java.ccc:600:14
            pushOntoLookaheadStack("ObjectType", "Java.ccc", 600, 14);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:600:47
    // BuildScanRoutine macro
    private boolean check$Java_ccc$600$47(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:600:47
            // NonTerminal TypeArguments at Java.ccc:600:47
            pushOntoLookaheadStack("ObjectType", "Java.ccc", 600, 47);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:616:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$616$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:616:4
            // NonTerminal DiamondOperator at Java.ccc:616:4
            pushOntoLookaheadStack("PossiblyEmptyTypeArguments", "Java.ccc", 616, 4);
            currentLookaheadProduction = "DiamondOperator";
            try {
                if (!check$DiamondOperator(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:618:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$618$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:618:4
            // NonTerminal TypeArguments at Java.ccc:618:4
            pushOntoLookaheadStack("PossiblyEmptyTypeArguments", "Java.ccc", 618, 4);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:623:23
    // BuildScanRoutine macro
    private boolean check$Java_ccc$623$23(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:623:23
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:623:31
            // NonTerminal TypeArgument at Java.ccc:623:31
            pushOntoLookaheadStack("TypeArguments", "Java.ccc", 623, 31);
            currentLookaheadProduction = "TypeArgument";
            try {
                if (!check$TypeArgument(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:628:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$628$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:628:3
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$628$4(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:628:17
            if (!scanToken(HOOK)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:628:29
            Token token7 = currentLookaheadToken;
            boolean passedPredicate7 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$628$31(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token7;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate7;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:628:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$628$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:628:4
            // NonTerminal Annotation at Java.ccc:628:4
            pushOntoLookaheadStack("TypeArgument", "Java.ccc", 628, 4);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:628:31
    // BuildScanRoutine macro
    private boolean check$Java_ccc$628$31(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:628:31
            // NonTerminal WildcardBounds at Java.ccc:628:31
            pushOntoLookaheadStack("TypeArgument", "Java.ccc", 628, 31);
            currentLookaheadProduction = "WildcardBounds";
            try {
                if (!check$WildcardBounds(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:630:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$630$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:630:3
            // NonTerminal ReferenceType at Java.ccc:630:3
            pushOntoLookaheadStack("TypeArgument", "Java.ccc", 630, 3);
            currentLookaheadProduction = "ReferenceType";
            try {
                if (!check$ReferenceType(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:636:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$636$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:636:4
            // NonTerminal Annotation at Java.ccc:636:4
            pushOntoLookaheadStack("PrimitiveType", "Java.ccc", 636, 4);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:642:37
    // BuildScanRoutine macro
    private boolean check$Java_ccc$642$37(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:642:37
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$642$38(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:642:51
            if (!scanToken(LBRACKET)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:642:67
            if (!scanToken(RBRACKET)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:642:38
    // BuildScanRoutine macro
    private boolean check$Java_ccc$642$38(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:642:38
            // NonTerminal Annotation at Java.ccc:642:38
            pushOntoLookaheadStack("PrimitiveArrayType", "Java.ccc", 642, 38);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:644:24
    // BuildScanRoutine macro
    private boolean check$Java_ccc$644$24(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:644:24
            // NonTerminal Type at Java.ccc:644:24
            pushOntoLookaheadStack("ReturnType", "Java.ccc", 644, 24);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:646:23
    // BuildScanRoutine macro
    private boolean check$Java_ccc$646$23(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:646:23
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:646:29
            if (!scanToken(IDENTIFIER)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:648:39
    // BuildScanRoutine macro
    private boolean check$Java_ccc$648$39(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:648:39
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:648:47
            // NonTerminal ExceptionType at Java.ccc:648:47
            pushOntoLookaheadStack("ThrowsList", "Java.ccc", 648, 47);
            currentLookaheadProduction = "ExceptionType";
            try {
                if (!check$ExceptionType(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:651:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$651$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:651:6
            // NonTerminal Annotation at Java.ccc:651:6
            pushOntoLookaheadStack("ExceptionType", "Java.ccc", 651, 6);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:654:8
    // BuildScanRoutine macro
    private boolean check$Java_ccc$654$8(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:654:8
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:654:14
            if (!scanToken(IDENTIFIER)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:657:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$657$7(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:657:7
            if (!scanToken(DOT)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for OneOrMore specified at Java.ccc:658:7
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:658:8
            // NonTerminal Annotation at Java.ccc:658:8
            pushOntoLookaheadStack("ExceptionType", "Java.ccc", 658, 8);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            boolean passedPredicate6 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token7 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$658$8(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token7;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate6;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:659:7
            if (!scanToken(IDENTIFIER)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:658:8
    // BuildScanRoutine macro
    private boolean check$Java_ccc$658$8(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:658:8
            // NonTerminal Annotation at Java.ccc:658:8
            pushOntoLookaheadStack("ExceptionType", "Java.ccc", 658, 8);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:661:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$661$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:661:6
            // NonTerminal TypeArguments at Java.ccc:661:6
            pushOntoLookaheadStack("ExceptionType", "Java.ccc", 661, 6);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:728:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$728$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:729:8
            if (!scanToken(first_set$Java_ccc$729$8)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:729:27
            // NonTerminal Expression at Java.ccc:729:27
            pushOntoLookaheadStack("AssignmentExpression", "Java.ccc", 729, 27);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:740:30
    // BuildScanRoutine macro
    private boolean check$Java_ccc$740$30(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:740:30
            if (!scanToken(HOOK)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:740:37
            // NonTerminal Expression at Java.ccc:740:37
            pushOntoLookaheadStack("TernaryExpression", "Java.ccc", 740, 37);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:740:48
            if (!scanToken(COLON)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:740:56
            // NonTerminal Expression at Java.ccc:740:56
            pushOntoLookaheadStack("TernaryExpression", "Java.ccc", 740, 56);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:744:30
    // BuildScanRoutine macro
    private boolean check$Java_ccc$744$30(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:744:30
            if (!scanToken(SC_OR)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:744:38
            // NonTerminal ConditionalAndExpression at Java.ccc:744:38
            pushOntoLookaheadStack("ConditionalOrExpression", "Java.ccc", 744, 38);
            currentLookaheadProduction = "ConditionalAndExpression";
            try {
                if (!check$ConditionalAndExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:748:27
    // BuildScanRoutine macro
    private boolean check$Java_ccc$748$27(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:748:27
            if (!scanToken(SC_AND)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:748:36
            // NonTerminal InclusiveOrExpression at Java.ccc:748:36
            pushOntoLookaheadStack("ConditionalAndExpression", "Java.ccc", 748, 36);
            currentLookaheadProduction = "InclusiveOrExpression";
            try {
                if (!check$InclusiveOrExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:752:27
    // BuildScanRoutine macro
    private boolean check$Java_ccc$752$27(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:752:27
            if (!scanToken(BIT_OR)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:752:36
            // NonTerminal ExclusiveOrExpression at Java.ccc:752:36
            pushOntoLookaheadStack("InclusiveOrExpression", "Java.ccc", 752, 36);
            currentLookaheadProduction = "ExclusiveOrExpression";
            try {
                if (!check$ExclusiveOrExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:756:19
    // BuildScanRoutine macro
    private boolean check$Java_ccc$756$19(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:756:19
            if (!scanToken(XOR)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:756:25
            // NonTerminal AndExpression at Java.ccc:756:25
            pushOntoLookaheadStack("ExclusiveOrExpression", "Java.ccc", 756, 25);
            currentLookaheadProduction = "AndExpression";
            try {
                if (!check$AndExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:760:24
    // BuildScanRoutine macro
    private boolean check$Java_ccc$760$24(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:760:24
            if (!scanToken(BIT_AND)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:760:34
            // NonTerminal EqualityExpression at Java.ccc:760:34
            pushOntoLookaheadStack("AndExpression", "Java.ccc", 760, 34);
            currentLookaheadProduction = "EqualityExpression";
            try {
                if (!check$EqualityExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:764:26
    // BuildScanRoutine macro
    private boolean check$Java_ccc$764$26(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:764:28
            if (!scanToken(EQ, NE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:764:42
            // NonTerminal InstanceOfExpression at Java.ccc:764:42
            pushOntoLookaheadStack("EqualityExpression", "Java.ccc", 764, 42);
            currentLookaheadProduction = "InstanceOfExpression";
            try {
                if (!check$InstanceOfExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:770:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$770$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:770:5
            if (!scanToken(INSTANCEOF)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:771:5
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:772:7
            Token token5 = currentLookaheadToken;
            int remainingLookahead5 = remainingLookahead;
            boolean hitFailure5 = hitFailure;
            boolean passedPredicate5 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$772$7(false)) {
                    currentLookaheadToken = token5;
                    remainingLookahead = remainingLookahead5;
                    hitFailure = hitFailure5;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$774$7(false)) {
                        currentLookaheadToken = token5;
                        remainingLookahead = remainingLookahead5;
                        hitFailure = hitFailure5;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$776$7(false)) {
                            currentLookaheadToken = token5;
                            remainingLookahead = remainingLookahead5;
                            hitFailure = hitFailure5;
                            return false;
                        }
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:772:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$772$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1075$9(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:772:7
            // NonTerminal LocalVariableDeclaration at Java.ccc:772:7
            pushOntoLookaheadStack("InstanceOfExpression", "Java.ccc", 772, 7);
            currentLookaheadProduction = "LocalVariableDeclaration";
            try {
                if (!check$LocalVariableDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:774:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$774$7(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:774:7
            // NonTerminal RecordPattern at Java.ccc:774:7
            pushOntoLookaheadStack("InstanceOfExpression", "Java.ccc", 774, 7);
            currentLookaheadProduction = "RecordPattern";
            try {
                if (!check$RecordPattern(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:776:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$776$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:776:7
            // NonTerminal ReferenceType at Java.ccc:776:7
            pushOntoLookaheadStack("InstanceOfExpression", "Java.ccc", 776, 7);
            currentLookaheadProduction = "ReferenceType";
            try {
                if (!check$ReferenceType(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:784:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$784$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:784:7
            if (!scanToken(GT, LT, LE, GE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:785:5
            // NonTerminal ShiftExpression at Java.ccc:785:5
            pushOntoLookaheadStack("RelationalExpression", "Java.ccc", 785, 5);
            currentLookaheadProduction = "ShiftExpression";
            try {
                if (!check$ShiftExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:797:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$797$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$797$11(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:797:41
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:802:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$802$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:802:8
            if (!scanToken(LSHIFT, RSIGNEDSHIFT, RUNSIGNEDSHIFT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:803:7
            // NonTerminal AdditiveExpression at Java.ccc:803:7
            pushOntoLookaheadStack("ShiftExpression", "Java.ccc", 803, 7);
            currentLookaheadProduction = "AdditiveExpression";
            try {
                if (!check$AdditiveExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:808:31
    // BuildScanRoutine macro
    private boolean check$Java_ccc$808$31(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:808:33
            if (!scanToken(PLUS, MINUS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:808:52
            // NonTerminal MultiplicativeExpression at Java.ccc:808:52
            pushOntoLookaheadStack("AdditiveExpression", "Java.ccc", 808, 52);
            currentLookaheadProduction = "MultiplicativeExpression";
            try {
                if (!check$MultiplicativeExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:812:22
    // BuildScanRoutine macro
    private boolean check$Java_ccc$812$22(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:812:24
            if (!scanToken(STAR, SLASH, REM)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:812:50
            // NonTerminal UnaryExpression at Java.ccc:812:50
            pushOntoLookaheadStack("MultiplicativeExpression", "Java.ccc", 812, 50);
            currentLookaheadProduction = "UnaryExpression";
            try {
                if (!check$UnaryExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:816:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$816$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:816:5
            if (!scanToken(PLUS, MINUS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:816:24
            // NonTerminal UnaryExpression at Java.ccc:816:24
            pushOntoLookaheadStack("UnaryExpression", "Java.ccc", 816, 24);
            currentLookaheadProduction = "UnaryExpression";
            try {
                if (!check$UnaryExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:818:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$818$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:818:3
            // NonTerminal PreIncrementExpression at Java.ccc:818:3
            pushOntoLookaheadStack("UnaryExpression", "Java.ccc", 818, 3);
            currentLookaheadProduction = "PreIncrementExpression";
            try {
                if (!check$PreIncrementExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:820:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$820$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:820:3
            // NonTerminal PreDecrementExpression at Java.ccc:820:3
            pushOntoLookaheadStack("UnaryExpression", "Java.ccc", 820, 3);
            currentLookaheadProduction = "PreDecrementExpression";
            try {
                if (!check$PreDecrementExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:822:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$822$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:822:3
            // NonTerminal UnaryExpressionNotPlusMinus at Java.ccc:822:3
            pushOntoLookaheadStack("UnaryExpression", "Java.ccc", 822, 3);
            currentLookaheadProduction = "UnaryExpressionNotPlusMinus";
            try {
                if (!check$UnaryExpressionNotPlusMinus(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:838:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$838$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:838:5
            if (!scanToken(BANG, TILDE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:838:24
            // NonTerminal UnaryExpression at Java.ccc:838:24
            pushOntoLookaheadStack("UnaryExpressionNotPlusMinus", "Java.ccc", 838, 24);
            currentLookaheadProduction = "UnaryExpression";
            try {
                if (!check$UnaryExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:840:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$840$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:840:3
            // NonTerminal LambdaExpression at Java.ccc:840:3
            pushOntoLookaheadStack("UnaryExpressionNotPlusMinus", "Java.ccc", 840, 3);
            currentLookaheadProduction = "LambdaExpression";
            try {
                if (!check$LambdaExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:842:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$842$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:842:3
            // NonTerminal SwitchExpression at Java.ccc:842:3
            pushOntoLookaheadStack("UnaryExpressionNotPlusMinus", "Java.ccc", 842, 3);
            currentLookaheadProduction = "SwitchExpression";
            try {
                if (!check$SwitchExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:844:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$844$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:844:3
            // NonTerminal PrimitiveCastExpression at Java.ccc:844:3
            pushOntoLookaheadStack("UnaryExpressionNotPlusMinus", "Java.ccc", 844, 3);
            currentLookaheadProduction = "PrimitiveCastExpression";
            try {
                if (!check$PrimitiveCastExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:846:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$846$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:846:3
            // NonTerminal ObjectCastExpression at Java.ccc:846:3
            pushOntoLookaheadStack("UnaryExpressionNotPlusMinus", "Java.ccc", 846, 3);
            currentLookaheadProduction = "ObjectCastExpression";
            try {
                if (!check$ObjectCastExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:848:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$848$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:848:3
            // NonTerminal PostfixExpression at Java.ccc:848:3
            pushOntoLookaheadStack("UnaryExpressionNotPlusMinus", "Java.ccc", 848, 3);
            currentLookaheadProduction = "PostfixExpression";
            try {
                if (!check$PostfixExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:854:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$854$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:856:6
            if (!scanToken(INCR, DECR)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:869:28
    // BuildScanRoutine macro
    private boolean check$Java_ccc$869$28(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:869:28
            if (!scanToken(BIT_AND)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:869:38
            // NonTerminal ObjectType at Java.ccc:869:38
            pushOntoLookaheadStack("ObjectCastExpression", "Java.ccc", 869, 38);
            currentLookaheadProduction = "ObjectType";
            try {
                if (!check$ObjectType(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:880:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$880$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:880:3
            // NonTerminal Parentheses at Java.ccc:880:3
            pushOntoLookaheadStack("PrimaryExpression", "Java.ccc", 880, 3);
            currentLookaheadProduction = "Parentheses";
            try {
                if (!check$Parentheses(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:882:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$882$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:882:3
            // NonTerminal AllocationExpression at Java.ccc:882:3
            pushOntoLookaheadStack("PrimaryExpression", "Java.ccc", 882, 3);
            currentLookaheadProduction = "AllocationExpression";
            try {
                if (!check$AllocationExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:884:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$884$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:884:3
            // NonTerminal ClassLiteral at Java.ccc:884:3
            pushOntoLookaheadStack("PrimaryExpression", "Java.ccc", 884, 3);
            currentLookaheadProduction = "ClassLiteral";
            try {
                if (!check$ClassLiteral(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:886:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$886$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:886:3
            // NonTerminal MethodReference at Java.ccc:886:3
            pushOntoLookaheadStack("PrimaryExpression", "Java.ccc", 886, 3);
            currentLookaheadProduction = "MethodReference";
            try {
                if (!check$MethodReference(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:888:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$888$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:888:3
            // NonTerminal Name at Java.ccc:888:3
            pushOntoLookaheadStack("PrimaryExpression", "Java.ccc", 888, 3);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:891:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$891$3$(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:891:3
            Token token2 = currentLookaheadToken;
            int remainingLookahead2 = remainingLookahead;
            boolean hitFailure2 = hitFailure;
            boolean passedPredicate2 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$891$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$893$3(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$895$3(false)) {
                            currentLookaheadToken = token2;
                            remainingLookahead = remainingLookahead2;
                            hitFailure = hitFailure2;
                            if (passedPredicate) return false;
                            passedPredicate = false;
                            if (!check$Java_ccc$897$3(false)) {
                                currentLookaheadToken = token2;
                                remainingLookahead = remainingLookahead2;
                                hitFailure = hitFailure2;
                                if (passedPredicate) return false;
                                passedPredicate = false;
                                if (!check$Java_ccc$899$3(false)) {
                                    currentLookaheadToken = token2;
                                    remainingLookahead = remainingLookahead2;
                                    hitFailure = hitFailure2;
                                    if (passedPredicate) return false;
                                    passedPredicate = false;
                                    if (!check$Java_ccc$901$3(false)) {
                                        currentLookaheadToken = token2;
                                        remainingLookahead = remainingLookahead2;
                                        hitFailure = hitFailure2;
                                        if (passedPredicate) return false;
                                        passedPredicate = false;
                                        if (!check$Java_ccc$909$3(false)) {
                                            currentLookaheadToken = token2;
                                            remainingLookahead = remainingLookahead2;
                                            hitFailure = hitFailure2;
                                            return false;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } finally {
                passedPredicate = passedPredicate2;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:891:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$891$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:891:4
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:891:10
            if (!scanToken(THIS)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:893:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$893$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:893:4
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:893:10
            if (!scanToken(SUPER)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:895:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$895$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:895:4
            if (!scanToken(DOT)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:895:16
            // NonTerminal AllocationExpression at Java.ccc:895:16
            pushOntoLookaheadStack("PrimaryExpression", "Java.ccc", 895, 16);
            currentLookaheadProduction = "AllocationExpression";
            try {
                if (!check$AllocationExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:897:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$897$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:897:4
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:897:15
            // NonTerminal Expression at Java.ccc:897:15
            pushOntoLookaheadStack("PrimaryExpression", "Java.ccc", 897, 15);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:897:26
            if (!scanToken(RBRACKET)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:899:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$899$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:899:4
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:899:10
            Token token6 = currentLookaheadToken;
            boolean passedPredicate6 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$899$11(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token6;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate6;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:899:26
            if (!scanToken(IDENTIFIER)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:899:11
    // BuildScanRoutine macro
    private boolean check$Java_ccc$899$11(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:899:11
            // NonTerminal TypeArguments at Java.ccc:899:11
            pushOntoLookaheadStack("PrimaryExpression", "Java.ccc", 899, 11);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:901:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$901$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:901:4
            if (!scanToken(DOUBLE_COLON)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:901:19
            Token token6 = currentLookaheadToken;
            boolean passedPredicate6 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$901$20(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token6;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate6;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:901:36
            if (!scanToken(NEW, IDENTIFIER)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:901:20
    // BuildScanRoutine macro
    private boolean check$Java_ccc$901$20(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:901:20
            // NonTerminal TypeArguments at Java.ccc:901:20
            pushOntoLookaheadStack("PrimaryExpression", "Java.ccc", 901, 20);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:909:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$909$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:909:3
            if (!(getTokenType(0) == IDENTIFIER)) {
                hitFailure = true;
                return false;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:910:3
            // NonTerminal InvocationArguments at Java.ccc:910:3
            pushOntoLookaheadStack("PrimaryExpression", "Java.ccc", 910, 3);
            currentLookaheadProduction = "InvocationArguments";
            try {
                if (!check$InvocationArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:928:26
    // BuildScanRoutine macro
    private boolean check$Java_ccc$928$26(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:928:26
            // NonTerminal Type at Java.ccc:928:26
            pushOntoLookaheadStack("ClassLiteral", "Java.ccc", 928, 26);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:931:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$931$6(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:931:6
            // NonTerminal Type at Java.ccc:931:6
            pushOntoLookaheadStack("MethodReference", "Java.ccc", 931, 6);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:933:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$933$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:933:7
            // NonTerminal TypeArguments at Java.ccc:933:7
            pushOntoLookaheadStack("MethodReference", "Java.ccc", 933, 7);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:959:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$959$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:959:7
            // NonTerminal Expression at Java.ccc:959:7
            pushOntoLookaheadStack("InvocationArguments", "Java.ccc", 959, 7);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:959:18
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$959$19(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:959:19
    // BuildScanRoutine macro
    private boolean check$Java_ccc$959$19(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:959:19
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:959:27
            // NonTerminal Expression at Java.ccc:959:27
            pushOntoLookaheadStack("InvocationArguments", "Java.ccc", 959, 27);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:964:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$964$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:964:3
            if (!scanToken(NEW)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:964:9
            // NonTerminal PrimitiveType at Java.ccc:964:9
            pushOntoLookaheadStack("AllocationExpression", "Java.ccc", 964, 9);
            currentLookaheadProduction = "PrimitiveType";
            try {
                if (!check$PrimitiveType(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:964:28
            // NonTerminal ArrayDimsAndInits at Java.ccc:964:28
            pushOntoLookaheadStack("AllocationExpression", "Java.ccc", 964, 28);
            currentLookaheadProduction = "ArrayDimsAndInits";
            try {
                if (!check$ArrayDimsAndInits(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:966:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$966$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:966:3
            if (!scanToken(NEW)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:966:9
            Token token4 = currentLookaheadToken;
            boolean passedPredicate4 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$966$10(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token4;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:966:25
            // NonTerminal ObjectType at Java.ccc:966:25
            pushOntoLookaheadStack("AllocationExpression", "Java.ccc", 966, 25);
            currentLookaheadProduction = "ObjectType";
            try {
                if (!check$ObjectType(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:966:36
            Token token7 = currentLookaheadToken;
            boolean passedPredicate7 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$966$38(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token7;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate7;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:968:7
            Token token10 = currentLookaheadToken;
            int remainingLookahead10 = remainingLookahead;
            boolean hitFailure10 = hitFailure;
            boolean passedPredicate10 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$968$7(false)) {
                    currentLookaheadToken = token10;
                    remainingLookahead = remainingLookahead10;
                    hitFailure = hitFailure10;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$970$7(false)) {
                        currentLookaheadToken = token10;
                        remainingLookahead = remainingLookahead10;
                        hitFailure = hitFailure10;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate10;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:966:10
    // BuildScanRoutine macro
    private boolean check$Java_ccc$966$10(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:966:10
            // NonTerminal TypeArguments at Java.ccc:966:10
            pushOntoLookaheadStack("AllocationExpression", "Java.ccc", 966, 10);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:966:38
    // BuildScanRoutine macro
    private boolean check$Java_ccc$966$38(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:966:38
            // NonTerminal PossiblyEmptyTypeArguments at Java.ccc:966:38
            pushOntoLookaheadStack("AllocationExpression", "Java.ccc", 966, 38);
            currentLookaheadProduction = "PossiblyEmptyTypeArguments";
            try {
                if (!check$PossiblyEmptyTypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:968:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$968$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:968:7
            // NonTerminal ArrayDimsAndInits at Java.ccc:968:7
            pushOntoLookaheadStack("AllocationExpression", "Java.ccc", 968, 7);
            currentLookaheadProduction = "ArrayDimsAndInits";
            try {
                if (!check$ArrayDimsAndInits(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:970:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$970$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:970:7
            // NonTerminal InvocationArguments at Java.ccc:970:7
            pushOntoLookaheadStack("AllocationExpression", "Java.ccc", 970, 7);
            currentLookaheadProduction = "InvocationArguments";
            try {
                if (!check$InvocationArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:970:27
            Token token4 = currentLookaheadToken;
            boolean passedPredicate4 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$970$29(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token4;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:970:29
    // BuildScanRoutine macro
    private boolean check$Java_ccc$970$29(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:970:29
            // NonTerminal ClassOrInterfaceBody at Java.ccc:970:29
            pushOntoLookaheadStack("AllocationExpression", "Java.ccc", 970, 29);
            currentLookaheadProduction = "ClassOrInterfaceBody";
            try {
                if (!check$ClassOrInterfaceBody(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:975:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$975$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for OneOrMore specified at Java.ccc:976:3
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:977:5
            if (!scanToken(LBRACKET)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:977:22
            // NonTerminal Expression at Java.ccc:977:22
            pushOntoLookaheadStack("ArrayDimsAndInits", "Java.ccc", 977, 22);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:977:33
            if (!scanToken(RBRACKET)) return false;
            boolean passedPredicate7 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token8 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$977$5(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token8;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate7;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:979:3
            boolean passedPredicate10 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token11 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$980$5(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token11;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate10;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:977:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$977$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:977:5
            if (!scanToken(LBRACKET)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:977:22
            // NonTerminal Expression at Java.ccc:977:22
            pushOntoLookaheadStack("ArrayDimsAndInits", "Java.ccc", 977, 22);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:977:33
            if (!scanToken(RBRACKET)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:980:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$980$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:980:5
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$980$6(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:980:19
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:980:29
            if (!scanToken(RBRACKET)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:980:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$980$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:980:6
            // NonTerminal Annotation at Java.ccc:980:6
            pushOntoLookaheadStack("ArrayDimsAndInits", "Java.ccc", 980, 6);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:983:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$983$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for OneOrMore specified at Java.ccc:983:3
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:984:5
            boolean passedPredicate5 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token6 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$984$6(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token6;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:984:19
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:984:29
            if (!scanToken(RBRACKET)) return false;
            boolean passedPredicate9 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token10 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$984$5(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token10;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate9;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:986:3
            // NonTerminal ArrayInitializer at Java.ccc:986:3
            pushOntoLookaheadStack("ArrayDimsAndInits", "Java.ccc", 986, 3);
            currentLookaheadProduction = "ArrayInitializer";
            try {
                if (!check$ArrayInitializer(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:984:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$984$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:984:5
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$984$6(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:984:19
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:984:29
            if (!scanToken(RBRACKET)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:984:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$984$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:984:6
            // NonTerminal Annotation at Java.ccc:984:6
            pushOntoLookaheadStack("ArrayDimsAndInits", "Java.ccc", 984, 6);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:994:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$994$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:994:3
            // NonTerminal LabeledStatement at Java.ccc:994:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 994, 3);
            currentLookaheadProduction = "LabeledStatement";
            try {
                if (!check$LabeledStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:996:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$996$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:996:3
            // NonTerminal AssertStatement at Java.ccc:996:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 996, 3);
            currentLookaheadProduction = "AssertStatement";
            try {
                if (!check$AssertStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:998:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$998$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:998:3
            // NonTerminal Block at Java.ccc:998:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 998, 3);
            currentLookaheadProduction = "Block";
            try {
                if (!check$Block(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1000:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1000$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 3;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1000:3
            // NonTerminal YieldStatement at Java.ccc:1000:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 1000, 3);
            currentLookaheadProduction = "YieldStatement";
            try {
                if (!check$YieldStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1004:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1004$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1004:3
            // NonTerminal SwitchStatement at Java.ccc:1004:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 1004, 3);
            currentLookaheadProduction = "SwitchStatement";
            try {
                if (!check$SwitchStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1006:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1006$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1006:3
            // NonTerminal IfStatement at Java.ccc:1006:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 1006, 3);
            currentLookaheadProduction = "IfStatement";
            try {
                if (!check$IfStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1008:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1008$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1008:3
            // NonTerminal WhileStatement at Java.ccc:1008:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 1008, 3);
            currentLookaheadProduction = "WhileStatement";
            try {
                if (!check$WhileStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1010:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1010$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1010:3
            // NonTerminal DoStatement at Java.ccc:1010:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 1010, 3);
            currentLookaheadProduction = "DoStatement";
            try {
                if (!check$DoStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1012:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1012$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1012:3
            // NonTerminal ForStatement at Java.ccc:1012:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 1012, 3);
            currentLookaheadProduction = "ForStatement";
            try {
                if (!check$ForStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1014:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1014$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1014:3
            // NonTerminal BreakStatement at Java.ccc:1014:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 1014, 3);
            currentLookaheadProduction = "BreakStatement";
            try {
                if (!check$BreakStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1016:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1016$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1016:3
            // NonTerminal ContinueStatement at Java.ccc:1016:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 1016, 3);
            currentLookaheadProduction = "ContinueStatement";
            try {
                if (!check$ContinueStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1018:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1018$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1018:3
            // NonTerminal ReturnStatement at Java.ccc:1018:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 1018, 3);
            currentLookaheadProduction = "ReturnStatement";
            try {
                if (!check$ReturnStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1020:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1020$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1020:3
            // NonTerminal ThrowStatement at Java.ccc:1020:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 1020, 3);
            currentLookaheadProduction = "ThrowStatement";
            try {
                if (!check$ThrowStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1022:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1022$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1022:3
            // NonTerminal SynchronizedStatement at Java.ccc:1022:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 1022, 3);
            currentLookaheadProduction = "SynchronizedStatement";
            try {
                if (!check$SynchronizedStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1024:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1024$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1024:3
            // NonTerminal TryStatement at Java.ccc:1024:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 1024, 3);
            currentLookaheadProduction = "TryStatement";
            try {
                if (!check$TryStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1026:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1026$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1026:3
            // NonTerminal ExpressionStatement at Java.ccc:1026:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 1026, 3);
            currentLookaheadProduction = "ExpressionStatement";
            try {
                if (!check$ExpressionStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1052:42
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1052$42(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1052:42
            if (!scanToken(COLON)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1052:50
            // NonTerminal Expression at Java.ccc:1052:50
            pushOntoLookaheadStack("AssertStatement", "Java.ccc", 1052, 50);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1054:30
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1054$30(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$1054$36(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1054:50
            // NonTerminal BlockStatement at Java.ccc:1054:50
            pushOntoLookaheadStack("Block", "Java.ccc", 1054, 50);
            currentLookaheadProduction = "BlockStatement";
            try {
                if (!check$BlockStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1057:12
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1057$12(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1057:12
            Token token2 = currentLookaheadToken;
            int remainingLookahead2 = remainingLookahead;
            boolean hitFailure2 = hitFailure;
            boolean passedPredicate2 = passedPredicate;
            try {
                passedPredicate = false;
                if (!scanToken(FINAL)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1057$20(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate2;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1057:20
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1057$20(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1057:20
            // NonTerminal Annotation at Java.ccc:1057:20
            pushOntoLookaheadStack("BlockStatement", "Java.ccc", 1057, 20);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1059:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1059$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1059:3
            // NonTerminal RecordDeclaration at Java.ccc:1059:3
            pushOntoLookaheadStack("BlockStatement", "Java.ccc", 1059, 3);
            currentLookaheadProduction = "RecordDeclaration";
            try {
                if (!check$RecordDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1061:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1061$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1061:3
            // NonTerminal ClassDeclaration at Java.ccc:1061:3
            pushOntoLookaheadStack("BlockStatement", "Java.ccc", 1061, 3);
            currentLookaheadProduction = "ClassDeclaration";
            try {
                if (!check$ClassDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1063:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1063$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1063:3
            // NonTerminal InterfaceDeclaration at Java.ccc:1063:3
            pushOntoLookaheadStack("BlockStatement", "Java.ccc", 1063, 3);
            currentLookaheadProduction = "InterfaceDeclaration";
            try {
                if (!check$InterfaceDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1065:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1065$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1065:3
            // NonTerminal EnumDeclaration at Java.ccc:1065:3
            pushOntoLookaheadStack("BlockStatement", "Java.ccc", 1065, 3);
            currentLookaheadProduction = "EnumDeclaration";
            try {
                if (!check$EnumDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1067:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1067$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1075$9(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1067:3
            // NonTerminal LocalVariableDeclaration at Java.ccc:1067:3
            pushOntoLookaheadStack("BlockStatement", "Java.ccc", 1067, 3);
            currentLookaheadProduction = "LocalVariableDeclaration";
            try {
                if (!check$LocalVariableDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:1067:28
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1068:3
            if (!scanToken(SEMICOLON)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:1068:15
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1070:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1070$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1070:3
            // NonTerminal Statement at Java.ccc:1070:3
            pushOntoLookaheadStack("BlockStatement", "Java.ccc", 1070, 3);
            currentLookaheadProduction = "Statement";
            try {
                if (!check$Statement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1078:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1078$6(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1078:6
            // NonTerminal NoVarDeclaration at Java.ccc:1078:6
            pushOntoLookaheadStack("LocalVariableDeclaration", "Java.ccc", 1078, 6);
            currentLookaheadProduction = "NoVarDeclaration";
            try {
                if (!check$NoVarDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1080:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1080$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1080:6
            // NonTerminal VarDeclaration at Java.ccc:1080:6
            pushOntoLookaheadStack("LocalVariableDeclaration", "Java.ccc", 1080, 6);
            currentLookaheadProduction = "VarDeclaration";
            try {
                if (!check$VarDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1087:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1087$6(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1087:6
            // NonTerminal Type at Java.ccc:1087:6
            pushOntoLookaheadStack("LocalVariableDeclarationLA", "Java.ccc", 1087, 6);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1091:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1091$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1091:6
            if (!scanToken(IDENTIFIER)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:1092:6
            if (!(currentLookaheadToken.toString().equals("var"))) {
                hitFailure = true;
                return false;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1102:30
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1102$30(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1102:30
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1102:38
            // NonTerminal VariableDeclarator at Java.ccc:1102:38
            pushOntoLookaheadStack("NoVarDeclaration", "Java.ccc", 1102, 38);
            currentLookaheadProduction = "VariableDeclarator";
            try {
                if (!check$VariableDeclarator(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1123:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1123$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1123:3
            // NonTerminal PreIncrementExpression at Java.ccc:1123:3
            pushOntoLookaheadStack("StatementExpression", "Java.ccc", 1123, 3);
            currentLookaheadProduction = "PreIncrementExpression";
            try {
                if (!check$PreIncrementExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1125:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1125$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1125:3
            // NonTerminal PreDecrementExpression at Java.ccc:1125:3
            pushOntoLookaheadStack("StatementExpression", "Java.ccc", 1125, 3);
            currentLookaheadProduction = "PreDecrementExpression";
            try {
                if (!check$PreDecrementExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1127:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1127$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1127:3
            // NonTerminal PrimaryExpression at Java.ccc:1127:3
            pushOntoLookaheadStack("StatementExpression", "Java.ccc", 1127, 3);
            currentLookaheadProduction = "PrimaryExpression";
            try {
                if (!check$PrimaryExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:1128:3
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1130:7
            Token token6 = currentLookaheadToken;
            int remainingLookahead6 = remainingLookahead;
            boolean hitFailure6 = hitFailure;
            boolean passedPredicate6 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$1130$7(false)) {
                    currentLookaheadToken = token6;
                    remainingLookahead = remainingLookahead6;
                    hitFailure = hitFailure6;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1138$7(false)) {
                        currentLookaheadToken = token6;
                        remainingLookahead = remainingLookahead6;
                        hitFailure = hitFailure6;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate6;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1130:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1130$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1133:11
            Token token4 = currentLookaheadToken;
            int remainingLookahead4 = remainingLookahead;
            boolean hitFailure4 = hitFailure;
            boolean passedPredicate4 = passedPredicate;
            try {
                passedPredicate = false;
                if (!scanToken(INCR, DECR)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1135$11(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1135:11
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1135$11(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1135:11
            if (!scanToken(first_set$Java_ccc$1135$11$)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1135:30
            // NonTerminal Expression at Java.ccc:1135:30
            pushOntoLookaheadStack("StatementExpression", "Java.ccc", 1135, 30);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1138:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1138$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 0;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            passedPredicate = true;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:1138:7
            // No code generated since this assertion does not apply in lookahead
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1148:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1148$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1148:5
            // NonTerminal RecordPattern at Java.ccc:1148:5
            pushOntoLookaheadStack("CasePattern", "Java.ccc", 1148, 5);
            currentLookaheadProduction = "RecordPattern";
            try {
                if (!check$RecordPattern(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1150:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1150$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1173$8(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1150:5
            // NonTerminal TypePattern at Java.ccc:1150:5
            pushOntoLookaheadStack("CasePattern", "Java.ccc", 1150, 5);
            currentLookaheadProduction = "TypePattern";
            try {
                if (!check$TypePattern(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1157:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1157$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$1157$13(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1159:9
            Token token4 = currentLookaheadToken;
            int remainingLookahead4 = remainingLookahead;
            boolean hitFailure4 = hitFailure;
            boolean passedPredicate4 = passedPredicate;
            try {
                passedPredicate = false;
                if (!scanToken(UNDERSCORE)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1161$9(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1161:9
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1161$9(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1161:9
            // NonTerminal CasePattern at Java.ccc:1161:9
            pushOntoLookaheadStack("RecordPattern", "Java.ccc", 1161, 9);
            currentLookaheadProduction = "CasePattern";
            try {
                if (!check$CasePattern(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:1162:9
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1163$11(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1163:11
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1163$11(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1163:11
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1164:12
            Token token5 = currentLookaheadToken;
            int remainingLookahead5 = remainingLookahead;
            boolean hitFailure5 = hitFailure;
            boolean passedPredicate5 = passedPredicate;
            try {
                passedPredicate = false;
                if (!scanToken(UNDERSCORE)) {
                    currentLookaheadToken = token5;
                    remainingLookahead = remainingLookahead5;
                    hitFailure = hitFailure5;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1164$25(false)) {
                        currentLookaheadToken = token5;
                        remainingLookahead = remainingLookahead5;
                        hitFailure = hitFailure5;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1164:25
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1164$25(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1164:25
            // NonTerminal CasePattern at Java.ccc:1164:25
            pushOntoLookaheadStack("RecordPattern", "Java.ccc", 1164, 25);
            currentLookaheadProduction = "CasePattern";
            try {
                if (!check$CasePattern(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1175:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1175$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:1175:5
            permissibleModifiers = EnumSet.of(FINAL);
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1176:5
            // NonTerminal Modifiers at Java.ccc:1176:5
            pushOntoLookaheadStack("TypePattern", "Java.ccc", 1176, 5);
            currentLookaheadProduction = "Modifiers";
            try {
                if (!check$Modifiers(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:1178:5
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1178:6
            Token token6 = currentLookaheadToken;
            int remainingLookahead6 = remainingLookahead;
            boolean hitFailure6 = hitFailure;
            boolean passedPredicate6 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$1178$6(false)) {
                    currentLookaheadToken = token6;
                    remainingLookahead = remainingLookahead6;
                    hitFailure = hitFailure6;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1178$13(false)) {
                        currentLookaheadToken = token6;
                        remainingLookahead = remainingLookahead6;
                        hitFailure = hitFailure6;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate6;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1179:6
            if (!scanToken(UNDERSCORE, IDENTIFIER)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1178:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1178$6(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1178:6
            // NonTerminal Type at Java.ccc:1178:6
            pushOntoLookaheadStack("TypePattern", "Java.ccc", 1178, 6);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1178:13
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1178$13(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:1178:13
            EnumSet<TokenType> previousActives3 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged4 = false;
            somethingChanged4 = activateTokenTypes(VAR);
            try {
                if (!scanToken(VAR)) return false;
            } finally {
                token_source.activeTokenTypes = previousActives3;
                if (somethingChanged4) {
                    token_source.reset(currentLookaheadToken);
                    nextTokenType = null;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1181:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1181$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1181:5
            // NonTerminal VarDeclaration at Java.ccc:1181:5
            pushOntoLookaheadStack("TypePattern", "Java.ccc", 1181, 5);
            currentLookaheadProduction = "VarDeclaration";
            try {
                if (!check$VarDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1203:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1203$5$(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1203:5
            Token token2 = currentLookaheadToken;
            int remainingLookahead2 = remainingLookahead;
            boolean hitFailure2 = hitFailure;
            boolean passedPredicate2 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$1203$5(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1206$5(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate2;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1203:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1203$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1203$10(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for OneOrMore specified at Java.ccc:1204:5
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1204:6
            // NonTerminal NewCaseStatement at Java.ccc:1204:6
            pushOntoLookaheadStack("SwitchStatement", "Java.ccc", 1204, 6);
            currentLookaheadProduction = "NewCaseStatement";
            try {
                if (!check$NewCaseStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
            boolean passedPredicate5 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token6 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1204$6(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token6;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1204:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1204$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1204:6
            // NonTerminal NewCaseStatement at Java.ccc:1204:6
            pushOntoLookaheadStack("SwitchStatement", "Java.ccc", 1204, 6);
            currentLookaheadProduction = "NewCaseStatement";
            try {
                if (!check$NewCaseStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1206:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1206$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1206$10(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for OneOrMore specified at Java.ccc:1207:5
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1207:6
            // NonTerminal ClassicCaseStatement at Java.ccc:1207:6
            pushOntoLookaheadStack("SwitchStatement", "Java.ccc", 1207, 6);
            currentLookaheadProduction = "ClassicCaseStatement";
            try {
                if (!check$ClassicCaseStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
            boolean passedPredicate5 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token6 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1207$6(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token6;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1207:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1207$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1207:6
            // NonTerminal ClassicCaseStatement at Java.ccc:1207:6
            pushOntoLookaheadStack("SwitchStatement", "Java.ccc", 1207, 6);
            currentLookaheadProduction = "ClassicCaseStatement";
            try {
                if (!check$ClassicCaseStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1229:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1229$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$1229$10(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1229:42
            // NonTerminal BlockStatement at Java.ccc:1229:42
            pushOntoLookaheadStack("ClassicCaseStatement", "Java.ccc", 1229, 42);
            currentLookaheadProduction = "BlockStatement";
            try {
                if (!check$BlockStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1244:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1244$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1244:4
            if (!scanToken(CASE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1244:11
            if (!scanToken(NULL)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:1244:23
            Token token5 = currentLookaheadToken;
            boolean passedPredicate5 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$1244$24(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1244:24
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1244$24(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1244:24
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1244:31
            if (!scanToken(_DEFAULT)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1246:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1246$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1246:4
            if (!scanToken(CASE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1246:11
            // NonTerminal CasePattern at Java.ccc:1246:11
            pushOntoLookaheadStack("CaseOrDefault", "Java.ccc", 1246, 11);
            currentLookaheadProduction = "CasePattern";
            try {
                if (!check$CasePattern(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:1246:28
            boolean passedPredicate5 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token6 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1246$29(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token6;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:1246:51
            Token token8 = currentLookaheadToken;
            boolean passedPredicate8 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$1246$52(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token8;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate8;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1246:29
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1246$29(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1246:29
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1246:37
            // NonTerminal CasePattern at Java.ccc:1246:37
            pushOntoLookaheadStack("CaseOrDefault", "Java.ccc", 1246, 37);
            currentLookaheadProduction = "CasePattern";
            try {
                if (!check$CasePattern(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1246:52
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1246$52(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 0;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (!(checkNextTokenImage("when"))) return false;
            passedPredicate = true;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1246:52
            // NonTerminal WhenClause at Java.ccc:1246:52
            pushOntoLookaheadStack("CaseOrDefault", "Java.ccc", 1246, 52);
            currentLookaheadProduction = "WhenClause";
            try {
                if (!check$WhenClause(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1248:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1248$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1248:4
            if (!scanToken(CASE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1248:11
            // NonTerminal Expression at Java.ccc:1248:11
            pushOntoLookaheadStack("CaseOrDefault", "Java.ccc", 1248, 11);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:1248:22
            boolean passedPredicate5 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token6 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1248$23(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token6;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1248:23
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1248$23(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1248:23
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1248:31
            // NonTerminal Expression at Java.ccc:1248:31
            pushOntoLookaheadStack("CaseOrDefault", "Java.ccc", 1248, 31);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1256:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1256$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1256:6
            // NonTerminal Block at Java.ccc:1256:6
            pushOntoLookaheadStack("NewCaseStatement", "Java.ccc", 1256, 6);
            currentLookaheadProduction = "Block";
            try {
                if (!check$Block(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1258:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1258$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1258:6
            // NonTerminal ThrowStatement at Java.ccc:1258:6
            pushOntoLookaheadStack("NewCaseStatement", "Java.ccc", 1258, 6);
            currentLookaheadProduction = "ThrowStatement";
            try {
                if (!check$ThrowStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1260:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1260$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 0;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (!backscan$Java_ccc$1260$13()) return false;
            passedPredicate = true;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1261:9
            // NonTerminal Expression at Java.ccc:1261:9
            pushOntoLookaheadStack("NewCaseStatement", "Java.ccc", 1261, 9);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1261:20
            if (!scanToken(SEMICOLON)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1263:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1263$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$1263$12(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1264:6
            // NonTerminal BlockStatement at Java.ccc:1264:6
            pushOntoLookaheadStack("NewCaseStatement", "Java.ccc", 1264, 6);
            currentLookaheadProduction = "BlockStatement";
            try {
                if (!check$BlockStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1269:48
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1269$48(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1269:48
            if (!scanToken(ELSE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1269:55
            // NonTerminal Statement at Java.ccc:1269:55
            pushOntoLookaheadStack("IfStatement", "Java.ccc", 1269, 55);
            currentLookaheadProduction = "Statement";
            try {
                if (!check$Statement(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1291:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1291$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1291:4
            // NonTerminal BasicForStatement at Java.ccc:1291:4
            pushOntoLookaheadStack("ForStatement", "Java.ccc", 1291, 4);
            currentLookaheadProduction = "BasicForStatement";
            try {
                if (!check$BasicForStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1293:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1293$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1293:4
            // NonTerminal EnhancedForStatement at Java.ccc:1293:4
            pushOntoLookaheadStack("ForStatement", "Java.ccc", 1293, 4);
            currentLookaheadProduction = "EnhancedForStatement";
            try {
                if (!check$EnhancedForStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1299:20
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1299$20(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1299:20
            // NonTerminal ForInit at Java.ccc:1299:20
            pushOntoLookaheadStack("BasicForStatement", "Java.ccc", 1299, 20);
            currentLookaheadProduction = "ForInit";
            try {
                if (!check$ForInit(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1299:47
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1299$47(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1299:47
            // NonTerminal Expression at Java.ccc:1299:47
            pushOntoLookaheadStack("BasicForStatement", "Java.ccc", 1299, 47);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1299:72
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1299$72(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1299:72
            // NonTerminal StatementExpressionList at Java.ccc:1299:72
            pushOntoLookaheadStack("BasicForStatement", "Java.ccc", 1299, 72);
            currentLookaheadProduction = "StatementExpressionList";
            try {
                if (!check$StatementExpressionList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1307:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1307$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1075$9(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1307:3
            // NonTerminal LocalVariableDeclaration at Java.ccc:1307:3
            pushOntoLookaheadStack("ForInit", "Java.ccc", 1307, 3);
            currentLookaheadProduction = "LocalVariableDeclaration";
            try {
                if (!check$LocalVariableDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1309:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1309$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1309:3
            // NonTerminal StatementExpressionList at Java.ccc:1309:3
            pushOntoLookaheadStack("ForInit", "Java.ccc", 1309, 3);
            currentLookaheadProduction = "StatementExpressionList";
            try {
                if (!check$StatementExpressionList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1313:25
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1313$25(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1313:25
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1313:33
            // NonTerminal StatementExpression at Java.ccc:1313:33
            pushOntoLookaheadStack("StatementExpressionList", "Java.ccc", 1313, 33);
            currentLookaheadProduction = "StatementExpression";
            try {
                if (!check$StatementExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1338:29
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1338$29(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1338:29
            // NonTerminal Expression at Java.ccc:1338:29
            pushOntoLookaheadStack("ReturnStatement", "Java.ccc", 1338, 29);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1351:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1351$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1351:4
            // NonTerminal ResourcesInTryBlock at Java.ccc:1351:4
            pushOntoLookaheadStack("TryStatement", "Java.ccc", 1351, 4);
            currentLookaheadProduction = "ResourcesInTryBlock";
            try {
                if (!check$ResourcesInTryBlock(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:1351:24
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1353:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1353$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1353:4
            // NonTerminal CatchBlock at Java.ccc:1353:4
            pushOntoLookaheadStack("TryStatement", "Java.ccc", 1353, 4);
            currentLookaheadProduction = "CatchBlock";
            try {
                if (!check$CatchBlock(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:1353:15
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1354:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1354$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1354:4
            // NonTerminal FinallyBlock at Java.ccc:1354:4
            pushOntoLookaheadStack("TryStatement", "Java.ccc", 1354, 4);
            currentLookaheadProduction = "FinallyBlock";
            try {
                if (!check$FinallyBlock(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:1354:16
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1365:8
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1365$8(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:1365:8
            if (!(getTokenType(0) == SEMICOLON)) {
                hitFailure = true;
                return false;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:1366:8
            if (!(getTokenType(1) != RPAREN)) {
                hitFailure = true;
                return false;
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:1368:8
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1369:10
            Token token6 = currentLookaheadToken;
            int remainingLookahead6 = remainingLookahead;
            boolean hitFailure6 = hitFailure;
            boolean passedPredicate6 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$1369$10(false)) {
                    currentLookaheadToken = token6;
                    remainingLookahead = remainingLookahead6;
                    hitFailure = hitFailure6;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1371$10(false)) {
                        currentLookaheadToken = token6;
                        remainingLookahead = remainingLookahead6;
                        hitFailure = hitFailure6;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$1373$10(false)) {
                            currentLookaheadToken = token6;
                            remainingLookahead = remainingLookahead6;
                            hitFailure = hitFailure6;
                            return false;
                        }
                    }
                }
            } finally {
                passedPredicate = passedPredicate6;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:1376:8
            Token token8 = currentLookaheadToken;
            boolean passedPredicate8 = passedPredicate;
            passedPredicate = false;
            try {
                if (!scanToken(SEMICOLON)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token8;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate8;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1369:10
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1369$10(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1075$9(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1369:10
            // NonTerminal LocalVariableDeclaration at Java.ccc:1369:10
            pushOntoLookaheadStack("ResourcesInTryBlock", "Java.ccc", 1369, 10);
            currentLookaheadProduction = "LocalVariableDeclaration";
            try {
                if (!check$LocalVariableDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1371:10
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1371$10(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1371:10
            // NonTerminal Name at Java.ccc:1371:10
            pushOntoLookaheadStack("ResourcesInTryBlock", "Java.ccc", 1371, 10);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1373:10
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1373$10(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1373:10
            // NonTerminal PrimaryExpression at Java.ccc:1373:10
            pushOntoLookaheadStack("ResourcesInTryBlock", "Java.ccc", 1373, 10);
            currentLookaheadProduction = "PrimaryExpression";
            try {
                if (!check$PrimaryExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:1374:10
            // No code generated since this assertion does not apply in lookahead
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1385:17
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1385$17(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1385:17
            if (!scanToken(BIT_OR)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1385:27
            // NonTerminal ObjectType at Java.ccc:1385:27
            pushOntoLookaheadStack("CatchBlock", "Java.ccc", 1385, 27);
            currentLookaheadProduction = "ObjectType";
            try {
                if (!check$ObjectType(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1409:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1409$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1409:4
            // NonTerminal NormalAnnotation at Java.ccc:1409:4
            pushOntoLookaheadStack("Annotation", "Java.ccc", 1409, 4);
            currentLookaheadProduction = "NormalAnnotation";
            try {
                if (!check$NormalAnnotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1411:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1411$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1411:4
            // NonTerminal SingleMemberAnnotation at Java.ccc:1411:4
            pushOntoLookaheadStack("Annotation", "Java.ccc", 1411, 4);
            currentLookaheadProduction = "SingleMemberAnnotation";
            try {
                if (!check$SingleMemberAnnotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1413:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1413$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1413:4
            // NonTerminal MarkerAnnotation at Java.ccc:1413:4
            pushOntoLookaheadStack("Annotation", "Java.ccc", 1413, 4);
            currentLookaheadProduction = "MarkerAnnotation";
            try {
                if (!check$MarkerAnnotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1417:47
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1417$47(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1417:47
            // NonTerminal MemberValuePairs at Java.ccc:1417:47
            pushOntoLookaheadStack("NormalAnnotation", "Java.ccc", 1417, 47);
            currentLookaheadProduction = "MemberValuePairs";
            try {
                if (!check$MemberValuePairs(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1433:22
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1433$22(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1433:22
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1433:30
            // NonTerminal MemberValuePair at Java.ccc:1433:30
            pushOntoLookaheadStack("MemberValuePairs", "Java.ccc", 1433, 30);
            currentLookaheadProduction = "MemberValuePair";
            try {
                if (!check$MemberValuePair(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1439:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1439$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1439:4
            // NonTerminal Annotation at Java.ccc:1439:4
            pushOntoLookaheadStack("MemberValue", "Java.ccc", 1439, 4);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1441:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1441$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1441:4
            // NonTerminal MemberValueArrayInitializer at Java.ccc:1441:4
            pushOntoLookaheadStack("MemberValue", "Java.ccc", 1441, 4);
            currentLookaheadProduction = "MemberValueArrayInitializer";
            try {
                if (!check$MemberValueArrayInitializer(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1443:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1443$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1443:4
            // NonTerminal TernaryExpression at Java.ccc:1443:4
            pushOntoLookaheadStack("MemberValue", "Java.ccc", 1443, 4);
            currentLookaheadProduction = "TernaryExpression";
            try {
                if (!check$TernaryExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1449:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1449$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1449:6
            // NonTerminal MemberValue at Java.ccc:1449:6
            pushOntoLookaheadStack("MemberValueArrayInitializer", "Java.ccc", 1449, 6);
            currentLookaheadProduction = "MemberValue";
            try {
                if (!check$MemberValue(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:1449:18
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1449$20(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:1449:49
            Token token7 = currentLookaheadToken;
            boolean passedPredicate7 = passedPredicate;
            passedPredicate = false;
            try {
                if (!scanToken(COMMA)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token7;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate7;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1449:20
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1449$20(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1449:20
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1449:34
            // NonTerminal MemberValue at Java.ccc:1449:34
            pushOntoLookaheadStack("MemberValueArrayInitializer", "Java.ccc", 1449, 34);
            currentLookaheadProduction = "MemberValue";
            try {
                if (!check$MemberValue(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1464:14
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1464$14(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1464:14
            // NonTerminal AnnotationTypeMemberDeclaration at Java.ccc:1464:14
            pushOntoLookaheadStack("AnnotationTypeBody", "Java.ccc", 1464, 14);
            currentLookaheadProduction = "AnnotationTypeMemberDeclaration";
            try {
                if (!check$AnnotationTypeMemberDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1470:47
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1470$47(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1470:47
            // NonTerminal DefaultValue at Java.ccc:1470:47
            pushOntoLookaheadStack("AnnotationMethodDeclaration", "Java.ccc", 1470, 47);
            currentLookaheadProduction = "DefaultValue";
            try {
                if (!check$DefaultValue(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1476:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1476$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1476:3
            // NonTerminal AnnotationTypeDeclaration at Java.ccc:1476:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1476, 3);
            currentLookaheadProduction = "AnnotationTypeDeclaration";
            try {
                if (!check$AnnotationTypeDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1478:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1478$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1478:3
            // NonTerminal ClassDeclaration at Java.ccc:1478:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1478, 3);
            currentLookaheadProduction = "ClassDeclaration";
            try {
                if (!check$ClassDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1480:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1480$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1480:3
            // NonTerminal InterfaceDeclaration at Java.ccc:1480:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1480, 3);
            currentLookaheadProduction = "InterfaceDeclaration";
            try {
                if (!check$InterfaceDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1482:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1482$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1482:3
            // NonTerminal EnumDeclaration at Java.ccc:1482:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1482, 3);
            currentLookaheadProduction = "EnumDeclaration";
            try {
                if (!check$EnumDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1484:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1484$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1484:3
            // NonTerminal AnnotationMethodDeclaration at Java.ccc:1484:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1484, 3);
            currentLookaheadProduction = "AnnotationMethodDeclaration";
            try {
                if (!check$AnnotationMethodDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1486:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1486$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1486:3
            // NonTerminal FieldDeclaration at Java.ccc:1486:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1486, 3);
            currentLookaheadProduction = "FieldDeclaration";
            try {
                if (!check$FieldDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1493:19
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1493$19(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1493:19
            // NonTerminal Block at Java.ccc:1493:19
            pushOntoLookaheadStack("LambdaExpression", "Java.ccc", 1493, 19);
            currentLookaheadProduction = "Block";
            try {
                if (!check$Block(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1493:27
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1493$27(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1493:27
            // NonTerminal Expression at Java.ccc:1493:27
            pushOntoLookaheadStack("LambdaExpression", "Java.ccc", 1493, 27);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1496:44
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1496$44(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 3;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1496:44
            // NonTerminal SimpleLambdaLHS at Java.ccc:1496:44
            pushOntoLookaheadStack("LambdaLHS", "Java.ccc", 1496, 44);
            currentLookaheadProduction = "SimpleLambdaLHS";
            try {
                if (!check$SimpleLambdaLHS(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1496:62
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1496$62(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1496:62
            // NonTerminal LambdaParameters at Java.ccc:1496:62
            pushOntoLookaheadStack("LambdaLHS", "Java.ccc", 1496, 62);
            currentLookaheadProduction = "LambdaParameters";
            try {
                if (!check$LambdaParameters(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1501:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1501$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1501:5
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1501:14
            if (!scanToken(UNDERSCORE, IDENTIFIER)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1508:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1508$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:1508:7
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1509:7
            // NonTerminal LambdaParameter at Java.ccc:1509:7
            pushOntoLookaheadStack("LambdaParameters", "Java.ccc", 1509, 7);
            currentLookaheadProduction = "LambdaParameter";
            try {
                if (!check$LambdaParameter(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:1510:7
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:1511:7
            boolean passedPredicate6 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token7 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1512$9(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token7;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate6;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1512:9
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1512$9(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:1512:9
            // No code generated since this assertion does not apply in lookahead
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1513:9
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1513:17
            // NonTerminal LambdaParameter at Java.ccc:1513:17
            pushOntoLookaheadStack("LambdaParameters", "Java.ccc", 1513, 17);
            currentLookaheadProduction = "LambdaParameter";
            try {
                if (!check$LambdaParameter(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:1514:9
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1524:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1524$7(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1524:7
            // NonTerminal Type at Java.ccc:1524:7
            pushOntoLookaheadStack("LambdaParameter", "Java.ccc", 1524, 7);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:1524:12
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1524$13(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1524:26
            if (!scanToken(VAR_ARGS)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1524:42
            if (!scanToken(IDENTIFIER)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1524:13
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1524$13(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1524:13
            // NonTerminal Annotation at Java.ccc:1524:13
            pushOntoLookaheadStack("LambdaParameter", "Java.ccc", 1524, 13);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1526:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1526$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1527:9
            Token token4 = currentLookaheadToken;
            int remainingLookahead4 = remainingLookahead;
            boolean hitFailure4 = hitFailure;
            boolean passedPredicate4 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$1527$9(false)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1537$9(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1540:9
            Token token7 = currentLookaheadToken;
            int remainingLookahead7 = remainingLookahead;
            boolean hitFailure7 = hitFailure;
            boolean passedPredicate7 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$1540$9(false)) {
                    currentLookaheadToken = token7;
                    remainingLookahead = remainingLookahead7;
                    hitFailure = hitFailure7;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!scanToken(UNDERSCORE)) {
                        currentLookaheadToken = token7;
                        remainingLookahead = remainingLookahead7;
                        hitFailure = hitFailure7;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate7;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1527:9
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1527$9(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:1527:9
            if (!(checkNextTokenImage("var"))) {
                hitFailure = true;
                return false;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1529:11
            if (!scanToken(VAR, IDENTIFIER)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1537:9
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1537$9(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1537:9
            // NonTerminal Type at Java.ccc:1537:9
            pushOntoLookaheadStack("LambdaParameter", "Java.ccc", 1537, 9);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1540:9
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1540$9(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1540:9
            if (!scanToken(IDENTIFIER)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:1540:21
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1540$22(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1540:22
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1540$22(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:1540:22
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1540$23(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1540:36
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1540:46
            if (!scanToken(RBRACKET)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1540:23
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1540$23(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1540:23
            // NonTerminal Annotation at Java.ccc:1540:23
            pushOntoLookaheadStack("LambdaParameter", "Java.ccc", 1540, 23);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for assertion at:
    // Java.ccc:1057:2
    // BuildAssertionRoutine macro
    private boolean assert$Java_ccc$1057$11() {
        final boolean scanToEnd = true;
        int remainingLookahead4 = remainingLookahead;
        remainingLookahead = UNLIMITED;
        Token currentLookahead3 = currentLookaheadToken;
        boolean prevHitFailure = hitFailure;
        if (currentLookaheadToken == null) {
            currentLookaheadToken = lastConsumedToken;
        }
        try {
            lookaheadRoutineNesting++;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:1057:11
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1057$12(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1057:34
            if (!scanToken(PRIVATE, PROTECTED, PUBLIC, STATIC)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = currentLookahead3;
            remainingLookahead = remainingLookahead4;
            hitFailure = prevHitFailure;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:33:4
    private boolean scan$Java_ccc$33$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:33:4
            // NonTerminal ModularCompilationUnit at Java.ccc:33:4
            pushOntoLookaheadStack("Root", "Java.ccc", 33, 4);
            currentLookaheadProduction = "ModularCompilationUnit";
            try {
                if (!check$ModularCompilationUnit(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:33:27
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:40:5
    private boolean scan$Java_ccc$40$5() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:40:5
            // NonTerminal Annotation at Java.ccc:40:5
            pushOntoLookaheadStack("ModularCompilationUnit", "Java.ccc", 40, 5);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:50:5
    private boolean scan$Java_ccc$50$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$50$11(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:56:4
    private boolean scan$Java_ccc$56$4() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:56:4
            // NonTerminal RequiresDirective at Java.ccc:56:4
            pushOntoLookaheadStack("ModuleDirective", "Java.ccc", 56, 4);
            currentLookaheadProduction = "RequiresDirective";
            try {
                if (!check$RequiresDirective(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:58:4
    private boolean scan$Java_ccc$58$4() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:58:4
            // NonTerminal ExportsDirective at Java.ccc:58:4
            pushOntoLookaheadStack("ModuleDirective", "Java.ccc", 58, 4);
            currentLookaheadProduction = "ExportsDirective";
            try {
                if (!check$ExportsDirective(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:60:4
    private boolean scan$Java_ccc$60$4() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:60:4
            // NonTerminal OpensDirective at Java.ccc:60:4
            pushOntoLookaheadStack("ModuleDirective", "Java.ccc", 60, 4);
            currentLookaheadProduction = "OpensDirective";
            try {
                if (!check$OpensDirective(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:62:4
    private boolean scan$Java_ccc$62$4() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:62:4
            // NonTerminal UsesDirective at Java.ccc:62:4
            pushOntoLookaheadStack("ModuleDirective", "Java.ccc", 62, 4);
            currentLookaheadProduction = "UsesDirective";
            try {
                if (!check$UsesDirective(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:64:4
    private boolean scan$Java_ccc$64$4() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:64:4
            // NonTerminal ProvidesDirective at Java.ccc:64:4
            pushOntoLookaheadStack("ModuleDirective", "Java.ccc", 64, 4);
            currentLookaheadProduction = "ProvidesDirective";
            try {
                if (!check$ProvidesDirective(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:77:6
    private boolean scan$Java_ccc$77$6() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:77:6
            EnumSet<TokenType> previousActives3 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged4 = false;
            somethingChanged4 = activateTokenTypes(TO);
            try {
                if (!scanToken(TO)) return false;
            } finally {
                token_source.activeTokenTypes = previousActives3;
                if (somethingChanged4) {
                    token_source.reset(currentLookaheadToken);
                    nextTokenType = null;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:78:6
            // NonTerminal Name at Java.ccc:78:6
            pushOntoLookaheadStack("ExportsDirective", "Java.ccc", 78, 6);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:78:11
            boolean passedPredicate8 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token9 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$78$12(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token9;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate8;
            }
            hitFailure = false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:87:6
    private boolean scan$Java_ccc$87$6() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:87:6
            EnumSet<TokenType> previousActives3 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged4 = false;
            somethingChanged4 = activateTokenTypes(TO);
            try {
                if (!scanToken(TO)) return false;
            } finally {
                token_source.activeTokenTypes = previousActives3;
                if (somethingChanged4) {
                    token_source.reset(currentLookaheadToken);
                    nextTokenType = null;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:88:6
            // NonTerminal Name at Java.ccc:88:6
            pushOntoLookaheadStack("OpensDirective", "Java.ccc", 88, 6);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:88:11
            boolean passedPredicate8 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token9 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$88$12(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token9;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate8;
            }
            hitFailure = false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:109:5
    private boolean scan$Java_ccc$109$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:109:5
            // NonTerminal PackageDeclaration at Java.ccc:109:5
            pushOntoLookaheadStack("CompilationUnit", "Java.ccc", 109, 5);
            currentLookaheadProduction = "PackageDeclaration";
            try {
                if (!check$PackageDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:111:5
    private boolean scan$Java_ccc$111$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$212$8(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:114:5
    private boolean scan$Java_ccc$114$5() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:114:5
            if (!(getTokenType(1) != RBRACE)) {
                hitFailure = true;
                return false;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:115:5
            if (!scanToken(EOF)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:130:6
    private boolean scan$Java_ccc$130$6() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:130:6
            // NonTerminal Annotation at Java.ccc:130:6
            pushOntoLookaheadStack("PackageDeclaration", "Java.ccc", 130, 6);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:148:3
    private boolean scan$Java_ccc$148$3() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:148:3
            if (!(isParserTolerant() || permissibleModifiers == null || permissibleModifiers.contains(getTokenType(1)))) {
                hitFailure = true;
                return false;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:151:4
            if (!scanToken(first_set$Java_ccc$151$4)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:154:3
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:176:3
    private boolean scan$Java_ccc$176$3() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:176:3
            if (!(permissibleModifiers == null || permissibleModifiers.contains(SEALED) && (checkNextTokenImage("sealed", "non-sealed") || checkNextTokenImage("non") && "-".equals(tokenImage(2)) && "sealed".equals(tokenImage(3)) && getToken(3).getBeginOffset() == getToken(1).getEndOffset() + 1))) {
                hitFailure = true;
                return false;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:190:3
            EnumSet<TokenType> previousActives4 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged5 = false;
            somethingChanged5 = activateTokenTypes(SEALED, NON_SEALED);
            try {
                if (hitFailure) return false;
                if (remainingLookahead <= 0) return true;
                // Lookahead Code for ExpansionChoice specified at Java.ccc:190:39
                if (!scanToken(SEALED, NON_SEALED)) return false;
            } finally {
                token_source.activeTokenTypes = previousActives4;
                if (somethingChanged5) {
                    token_source.reset(currentLookaheadToken);
                    nextTokenType = null;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:191:3
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:198:3
    private boolean scan$Java_ccc$198$3() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:198:3
            // NonTerminal Annotation at Java.ccc:198:3
            pushOntoLookaheadStack("Modifiers", "Java.ccc", 198, 3);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:216:5
    private boolean scan$Java_ccc$216$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:216:5
            // NonTerminal AnnotationTypeDeclaration at Java.ccc:216:5
            pushOntoLookaheadStack("TypeDeclaration", "Java.ccc", 216, 5);
            currentLookaheadProduction = "AnnotationTypeDeclaration";
            try {
                if (!check$AnnotationTypeDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:218:5
    private boolean scan$Java_ccc$218$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:218:5
            // NonTerminal ClassDeclaration at Java.ccc:218:5
            pushOntoLookaheadStack("TypeDeclaration", "Java.ccc", 218, 5);
            currentLookaheadProduction = "ClassDeclaration";
            try {
                if (!check$ClassDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:220:5
    private boolean scan$Java_ccc$220$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:220:5
            // NonTerminal InterfaceDeclaration at Java.ccc:220:5
            pushOntoLookaheadStack("TypeDeclaration", "Java.ccc", 220, 5);
            currentLookaheadProduction = "InterfaceDeclaration";
            try {
                if (!check$InterfaceDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:222:5
    private boolean scan$Java_ccc$222$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:222:5
            // NonTerminal EnumDeclaration at Java.ccc:222:5
            pushOntoLookaheadStack("TypeDeclaration", "Java.ccc", 222, 5);
            currentLookaheadProduction = "EnumDeclaration";
            try {
                if (!check$EnumDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:224:5
    private boolean scan$Java_ccc$224$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:224:5
            // NonTerminal RecordDeclaration at Java.ccc:224:5
            pushOntoLookaheadStack("TypeDeclaration", "Java.ccc", 224, 5);
            currentLookaheadProduction = "RecordDeclaration";
            try {
                if (!check$RecordDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:276:5
    private boolean scan$Java_ccc$276$5() {
        remainingLookahead = 0;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (!(checkNextTokenImage("permits"))) return false;
            passedPredicate = true;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:290:5
    private boolean scan$Java_ccc$290$5() {
        remainingLookahead = 0;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (!(checkNextTokenImage("permits"))) return false;
            passedPredicate = true;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:312:6
    private boolean scan$Java_ccc$312$6() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (!backscan$Java_ccc$312$11()) return false;
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:313:6
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:313:14
            // NonTerminal ObjectType at Java.ccc:313:14
            pushOntoLookaheadStack("ExtendsList", "Java.ccc", 313, 14);
            currentLookaheadProduction = "ObjectType";
            try {
                if (!check$ObjectType(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:346:21
    private boolean scan$Java_ccc$346$21() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:346:28
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:346:36
            // NonTerminal EnumConstant at Java.ccc:346:36
            pushOntoLookaheadStack("EnumBody", "Java.ccc", 346, 36);
            currentLookaheadProduction = "EnumConstant";
            try {
                if (!check$EnumConstant(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:390:5
    private boolean scan$Java_ccc$390$5() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:390:5
            // NonTerminal Annotation at Java.ccc:390:5
            pushOntoLookaheadStack("RecordComponent", "Java.ccc", 390, 5);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:390:25
    private boolean scan$Java_ccc$390$25() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:390:25
            // NonTerminal Annotation at Java.ccc:390:25
            pushOntoLookaheadStack("RecordComponent", "Java.ccc", 390, 25);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:396:4
    private boolean scan$Java_ccc$396$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:396:4
            // NonTerminal CompactConstructorDeclaration at Java.ccc:396:4
            pushOntoLookaheadStack("RecordBody", "Java.ccc", 396, 4);
            currentLookaheadProduction = "CompactConstructorDeclaration";
            try {
                if (!check$CompactConstructorDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:408:4
    private boolean scan$Java_ccc$408$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$408$10(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:409:5
    private boolean scan$Java_ccc$409$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:409:5
            // NonTerminal ExplicitConstructorInvocation at Java.ccc:409:5
            pushOntoLookaheadStack("CompactConstructorDeclaration", "Java.ccc", 409, 5);
            currentLookaheadProduction = "ExplicitConstructorInvocation";
            try {
                if (!check$ExplicitConstructorInvocation(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:410:5
    private boolean scan$Java_ccc$410$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$410$11(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:417:4
    private boolean scan$Java_ccc$417$4() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:417:4
            // NonTerminal Annotation at Java.ccc:417:4
            pushOntoLookaheadStack("EnumConstant", "Java.ccc", 417, 4);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:434:17
    private boolean scan$Java_ccc$434$17() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:434:17
            // NonTerminal Annotation at Java.ccc:434:17
            pushOntoLookaheadStack("TypeParameter", "Java.ccc", 434, 17);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:440:34
    private boolean scan$Java_ccc$440$34() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$440$40(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:443:3
    private boolean scan$Java_ccc$443$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:443:3
            // NonTerminal Initializer at Java.ccc:443:3
            pushOntoLookaheadStack("ClassOrInterfaceBodyDeclaration", "Java.ccc", 443, 3);
            currentLookaheadProduction = "Initializer";
            try {
                if (!check$Initializer(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:445:3
    private boolean scan$Java_ccc$445$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$212$8(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:447:3
    private boolean scan$Java_ccc$447$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:447:3
            // NonTerminal ConstructorDeclaration at Java.ccc:447:3
            pushOntoLookaheadStack("ClassOrInterfaceBodyDeclaration", "Java.ccc", 447, 3);
            currentLookaheadProduction = "ConstructorDeclaration";
            try {
                if (!check$ConstructorDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:449:3
    private boolean scan$Java_ccc$449$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:449:3
            // NonTerminal MethodDeclaration at Java.ccc:449:3
            pushOntoLookaheadStack("ClassOrInterfaceBodyDeclaration", "Java.ccc", 449, 3);
            currentLookaheadProduction = "MethodDeclaration";
            try {
                if (!check$MethodDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:451:3
    private boolean scan$Java_ccc$451$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:451:3
            // NonTerminal FieldDeclaration at Java.ccc:451:3
            pushOntoLookaheadStack("ClassOrInterfaceBodyDeclaration", "Java.ccc", 451, 3);
            currentLookaheadProduction = "FieldDeclaration";
            try {
                if (!check$FieldDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:453:3
    private boolean scan$Java_ccc$453$3() {
        remainingLookahead = 0;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (!backscan$Java_ccc$453$8()) return false;
            passedPredicate = true;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:478:8
    private boolean scan$Java_ccc$478$8() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:478:8
            // NonTerminal Annotation at Java.ccc:478:8
            pushOntoLookaheadStack("VariableDeclaratorId", "Java.ccc", 478, 8);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:480:5
    private boolean scan$Java_ccc$480$5() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (backscan$Java_ccc$480$10()) return false;
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:481:5
            if (!scanToken(UNDERSCORE)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:487:37
    private boolean scan$Java_ccc$487$37() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:487:44
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:487:52
            // NonTerminal VariableInitializer at Java.ccc:487:52
            pushOntoLookaheadStack("ArrayInitializer", "Java.ccc", 487, 52);
            currentLookaheadProduction = "VariableInitializer";
            try {
                if (!check$VariableInitializer(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:492:5
    private boolean scan$Java_ccc$492$5() {
        remainingLookahead = 0;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (!backscan$Java_ccc$492$10()) return false;
            passedPredicate = true;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:500:5
    private boolean scan$Java_ccc$500$5() {
        remainingLookahead = 0;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (backscan$Java_ccc$500$10()) return false;
            passedPredicate = true;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:520:29
    private boolean scan$Java_ccc$520$29() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:520:29
            // NonTerminal Annotation at Java.ccc:520:29
            pushOntoLookaheadStack("MethodDeclaration", "Java.ccc", 520, 29);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:529:9
    private boolean scan$Java_ccc$529$9() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:529:9
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:530:9
            // NonTerminal FormalParameter at Java.ccc:530:9
            pushOntoLookaheadStack("FormalParameters", "Java.ccc", 530, 9);
            currentLookaheadProduction = "FormalParameter";
            try {
                if (!check$FormalParameter(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:531:9
            boolean passedPredicate5 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token6 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$532$11(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token6;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
            hitFailure = false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:544:7
    private boolean scan$Java_ccc$544$7() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:544:7
            // NonTerminal Annotation at Java.ccc:544:7
            pushOntoLookaheadStack("FormalParameter", "Java.ccc", 544, 7);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:558:4
    private boolean scan$Java_ccc$558$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$558$10(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:559:5
    private boolean scan$Java_ccc$559$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:559:5
            // NonTerminal ExplicitConstructorInvocation at Java.ccc:559:5
            pushOntoLookaheadStack("ConstructorDeclaration", "Java.ccc", 559, 5);
            currentLookaheadProduction = "ExplicitConstructorInvocation";
            try {
                if (!check$ExplicitConstructorInvocation(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:560:5
    private boolean scan$Java_ccc$560$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$560$11(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:565:3
    private boolean scan$Java_ccc$565$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:565:3
            Token token3 = currentLookaheadToken;
            boolean passedPredicate3 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$565$4(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token3;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:565:20
            if (!scanToken(SUPER, THIS)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:565:44
            // NonTerminal InvocationArguments at Java.ccc:565:44
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "Java.ccc", 565, 44);
            currentLookaheadProduction = "InvocationArguments";
            try {
                if (!check$InvocationArguments(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:565:64
            if (!scanToken(SEMICOLON)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:565:4
    private boolean scan$Java_ccc$565$4() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:565:4
            // NonTerminal TypeArguments at Java.ccc:565:4
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "Java.ccc", 565, 4);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:569:3
    private boolean scan$Java_ccc$569$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:569:4
            Token token4 = currentLookaheadToken;
            int remainingLookahead4 = remainingLookahead;
            boolean hitFailure4 = hitFailure;
            boolean passedPredicate4 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$569$4(false)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$569$30(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:570:3
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:570:9
            Token token7 = currentLookaheadToken;
            boolean passedPredicate7 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$570$10(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token7;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate7;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:570:25
            if (!scanToken(SUPER)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:570:39
            // NonTerminal InvocationArguments at Java.ccc:570:39
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "Java.ccc", 570, 39);
            currentLookaheadProduction = "InvocationArguments";
            try {
                if (!check$InvocationArguments(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:570:59
            if (!scanToken(SEMICOLON)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:569:10
    private boolean scan$Java_ccc$569$10() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:569:10
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:569:15
            if (!scanToken(THIS)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:569:43
    private boolean scan$Java_ccc$569$43() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:569:43
            if (!scanToken(DOT)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:569:55
            // NonTerminal Name at Java.ccc:569:55
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "Java.ccc", 569, 55);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:569:61
    private boolean scan$Java_ccc$569$61() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:569:61
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:569:66
            if (!scanToken(THIS)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:570:10
    private boolean scan$Java_ccc$570$10() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:570:10
            // NonTerminal TypeArguments at Java.ccc:570:10
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "Java.ccc", 570, 10);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:579:4
    private boolean scan$Java_ccc$579$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (!(getTokenType(2) != LBRACKET)) return false;
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:580:6
            // NonTerminal PrimitiveType at Java.ccc:580:6
            pushOntoLookaheadStack("Type", "Java.ccc", 580, 6);
            currentLookaheadProduction = "PrimitiveType";
            try {
                if (!check$PrimitiveType(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:592:4
    private boolean scan$Java_ccc$592$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:592:4
            // NonTerminal PrimitiveArrayType at Java.ccc:592:4
            pushOntoLookaheadStack("ReferenceType", "Java.ccc", 592, 4);
            currentLookaheadProduction = "PrimitiveArrayType";
            try {
                if (!check$PrimitiveArrayType(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:594:16
    private boolean scan$Java_ccc$594$16() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:594:16
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$594$17(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:594:30
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:594:40
            if (!scanToken(RBRACKET)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:594:17
    private boolean scan$Java_ccc$594$17() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:594:17
            // NonTerminal Annotation at Java.ccc:594:17
            pushOntoLookaheadStack("ReferenceType", "Java.ccc", 594, 17);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:598:6
    private boolean scan$Java_ccc$598$6() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:598:6
            // NonTerminal Annotation at Java.ccc:598:6
            pushOntoLookaheadStack("ObjectType", "Java.ccc", 598, 6);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:599:22
    private boolean scan$Java_ccc$599$22() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:599:22
            // NonTerminal TypeArguments at Java.ccc:599:22
            pushOntoLookaheadStack("ObjectType", "Java.ccc", 599, 22);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:600:7
    private boolean scan$Java_ccc$600$7() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:600:7
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:600:13
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$600$14(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:600:27
            if (!scanToken(IDENTIFIER)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:600:45
            Token token8 = currentLookaheadToken;
            boolean passedPredicate8 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$600$47(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token8;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate8;
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:600:14
    private boolean scan$Java_ccc$600$14() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:600:14
            // NonTerminal Annotation at Java.ccc:600:14
            pushOntoLookaheadStack("ObjectType", "Java.ccc", 600, 14);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:600:47
    private boolean scan$Java_ccc$600$47() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:600:47
            // NonTerminal TypeArguments at Java.ccc:600:47
            pushOntoLookaheadStack("ObjectType", "Java.ccc", 600, 47);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:616:4
    private boolean scan$Java_ccc$616$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:616:4
            // NonTerminal DiamondOperator at Java.ccc:616:4
            pushOntoLookaheadStack("PossiblyEmptyTypeArguments", "Java.ccc", 616, 4);
            currentLookaheadProduction = "DiamondOperator";
            try {
                if (!check$DiamondOperator(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:618:4
    private boolean scan$Java_ccc$618$4() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:618:4
            // NonTerminal TypeArguments at Java.ccc:618:4
            pushOntoLookaheadStack("PossiblyEmptyTypeArguments", "Java.ccc", 618, 4);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:628:3
    private boolean scan$Java_ccc$628$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:628:3
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$628$4(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:628:17
            if (!scanToken(HOOK)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:628:29
            Token token7 = currentLookaheadToken;
            boolean passedPredicate7 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$628$31(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token7;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate7;
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:628:4
    private boolean scan$Java_ccc$628$4() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:628:4
            // NonTerminal Annotation at Java.ccc:628:4
            pushOntoLookaheadStack("TypeArgument", "Java.ccc", 628, 4);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:636:4
    private boolean scan$Java_ccc$636$4() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:636:4
            // NonTerminal Annotation at Java.ccc:636:4
            pushOntoLookaheadStack("PrimitiveType", "Java.ccc", 636, 4);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:642:37
    private boolean scan$Java_ccc$642$37() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:642:37
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$642$38(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:642:51
            if (!scanToken(LBRACKET)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:642:67
            if (!scanToken(RBRACKET)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:642:38
    private boolean scan$Java_ccc$642$38() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:642:38
            // NonTerminal Annotation at Java.ccc:642:38
            pushOntoLookaheadStack("PrimitiveArrayType", "Java.ccc", 642, 38);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:644:24
    private boolean scan$Java_ccc$644$24() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:644:24
            // NonTerminal Type at Java.ccc:644:24
            pushOntoLookaheadStack("ReturnType", "Java.ccc", 644, 24);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:646:23
    private boolean scan$Java_ccc$646$23() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:646:23
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:646:29
            if (!scanToken(IDENTIFIER)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:651:6
    private boolean scan$Java_ccc$651$6() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:651:6
            // NonTerminal Annotation at Java.ccc:651:6
            pushOntoLookaheadStack("ExceptionType", "Java.ccc", 651, 6);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:654:8
    private boolean scan$Java_ccc$654$8() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:654:8
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:654:14
            if (!scanToken(IDENTIFIER)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:657:7
    private boolean scan$Java_ccc$657$7() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:657:7
            if (!scanToken(DOT)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for OneOrMore specified at Java.ccc:658:7
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:658:8
            // NonTerminal Annotation at Java.ccc:658:8
            pushOntoLookaheadStack("ExceptionType", "Java.ccc", 658, 8);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            boolean passedPredicate6 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token7 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$658$8(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token7;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate6;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:659:7
            if (!scanToken(IDENTIFIER)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:658:8
    private boolean scan$Java_ccc$658$8() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:658:8
            // NonTerminal Annotation at Java.ccc:658:8
            pushOntoLookaheadStack("ExceptionType", "Java.ccc", 658, 8);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:661:6
    private boolean scan$Java_ccc$661$6() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:661:6
            // NonTerminal TypeArguments at Java.ccc:661:6
            pushOntoLookaheadStack("ExceptionType", "Java.ccc", 661, 6);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:728:5
    private boolean scan$Java_ccc$728$5() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:729:8
            if (!scanToken(first_set$Java_ccc$729$8)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:729:27
            // NonTerminal Expression at Java.ccc:729:27
            pushOntoLookaheadStack("AssignmentExpression", "Java.ccc", 729, 27);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:772:7
    private boolean scan$Java_ccc$772$7() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1075$9(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:774:7
    private boolean scan$Java_ccc$774$7() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:774:7
            // NonTerminal RecordPattern at Java.ccc:774:7
            pushOntoLookaheadStack("InstanceOfExpression", "Java.ccc", 774, 7);
            currentLookaheadProduction = "RecordPattern";
            try {
                if (!check$RecordPattern(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:797:6
    private boolean scan$Java_ccc$797$6() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$797$11(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:840:3
    private boolean scan$Java_ccc$840$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:840:3
            // NonTerminal LambdaExpression at Java.ccc:840:3
            pushOntoLookaheadStack("UnaryExpressionNotPlusMinus", "Java.ccc", 840, 3);
            currentLookaheadProduction = "LambdaExpression";
            try {
                if (!check$LambdaExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:844:3
    private boolean scan$Java_ccc$844$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:844:3
            // NonTerminal PrimitiveCastExpression at Java.ccc:844:3
            pushOntoLookaheadStack("UnaryExpressionNotPlusMinus", "Java.ccc", 844, 3);
            currentLookaheadProduction = "PrimitiveCastExpression";
            try {
                if (!check$PrimitiveCastExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:846:3
    private boolean scan$Java_ccc$846$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:846:3
            // NonTerminal ObjectCastExpression at Java.ccc:846:3
            pushOntoLookaheadStack("UnaryExpressionNotPlusMinus", "Java.ccc", 846, 3);
            currentLookaheadProduction = "ObjectCastExpression";
            try {
                if (!check$ObjectCastExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:854:5
    private boolean scan$Java_ccc$854$5() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:856:6
            if (!scanToken(INCR, DECR)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:884:3
    private boolean scan$Java_ccc$884$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:884:3
            // NonTerminal ClassLiteral at Java.ccc:884:3
            pushOntoLookaheadStack("PrimaryExpression", "Java.ccc", 884, 3);
            currentLookaheadProduction = "ClassLiteral";
            try {
                if (!check$ClassLiteral(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:886:3
    private boolean scan$Java_ccc$886$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:886:3
            // NonTerminal MethodReference at Java.ccc:886:3
            pushOntoLookaheadStack("PrimaryExpression", "Java.ccc", 886, 3);
            currentLookaheadProduction = "MethodReference";
            try {
                if (!check$MethodReference(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:891:3
    private boolean scan$Java_ccc$891$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:891:4
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:891:10
            if (!scanToken(THIS)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:893:3
    private boolean scan$Java_ccc$893$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:893:4
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:893:10
            if (!scanToken(SUPER)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:895:3
    private boolean scan$Java_ccc$895$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:895:4
            if (!scanToken(DOT)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:895:16
            // NonTerminal AllocationExpression at Java.ccc:895:16
            pushOntoLookaheadStack("PrimaryExpression", "Java.ccc", 895, 16);
            currentLookaheadProduction = "AllocationExpression";
            try {
                if (!check$AllocationExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:899:11
    private boolean scan$Java_ccc$899$11() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:899:11
            // NonTerminal TypeArguments at Java.ccc:899:11
            pushOntoLookaheadStack("PrimaryExpression", "Java.ccc", 899, 11);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:901:20
    private boolean scan$Java_ccc$901$20() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:901:20
            // NonTerminal TypeArguments at Java.ccc:901:20
            pushOntoLookaheadStack("PrimaryExpression", "Java.ccc", 901, 20);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:909:3
    private boolean scan$Java_ccc$909$3() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:909:3
            if (!(getTokenType(0) == IDENTIFIER)) {
                hitFailure = true;
                return false;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:910:3
            // NonTerminal InvocationArguments at Java.ccc:910:3
            pushOntoLookaheadStack("PrimaryExpression", "Java.ccc", 910, 3);
            currentLookaheadProduction = "InvocationArguments";
            try {
                if (!check$InvocationArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:928:26
    private boolean scan$Java_ccc$928$26() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:928:26
            // NonTerminal Type at Java.ccc:928:26
            pushOntoLookaheadStack("ClassLiteral", "Java.ccc", 928, 26);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:931:6
    private boolean scan$Java_ccc$931$6() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:931:6
            // NonTerminal Type at Java.ccc:931:6
            pushOntoLookaheadStack("MethodReference", "Java.ccc", 931, 6);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:933:7
    private boolean scan$Java_ccc$933$7() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:933:7
            // NonTerminal TypeArguments at Java.ccc:933:7
            pushOntoLookaheadStack("MethodReference", "Java.ccc", 933, 7);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:964:3
    private boolean scan$Java_ccc$964$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:964:3
            if (!scanToken(NEW)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:964:9
            // NonTerminal PrimitiveType at Java.ccc:964:9
            pushOntoLookaheadStack("AllocationExpression", "Java.ccc", 964, 9);
            currentLookaheadProduction = "PrimitiveType";
            try {
                if (!check$PrimitiveType(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:964:28
            // NonTerminal ArrayDimsAndInits at Java.ccc:964:28
            pushOntoLookaheadStack("AllocationExpression", "Java.ccc", 964, 28);
            currentLookaheadProduction = "ArrayDimsAndInits";
            try {
                if (!check$ArrayDimsAndInits(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:966:10
    private boolean scan$Java_ccc$966$10() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:966:10
            // NonTerminal TypeArguments at Java.ccc:966:10
            pushOntoLookaheadStack("AllocationExpression", "Java.ccc", 966, 10);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:975:3
    private boolean scan$Java_ccc$975$3() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for OneOrMore specified at Java.ccc:976:3
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:977:5
            if (!scanToken(LBRACKET)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:977:22
            // NonTerminal Expression at Java.ccc:977:22
            pushOntoLookaheadStack("ArrayDimsAndInits", "Java.ccc", 977, 22);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:977:33
            if (!scanToken(RBRACKET)) return false;
            boolean passedPredicate7 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token8 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$977$5(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token8;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate7;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:979:3
            boolean passedPredicate10 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token11 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$980$5(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token11;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate10;
            }
            hitFailure = false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:977:5
    private boolean scan$Java_ccc$977$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:977:5
            if (!scanToken(LBRACKET)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:977:22
            // NonTerminal Expression at Java.ccc:977:22
            pushOntoLookaheadStack("ArrayDimsAndInits", "Java.ccc", 977, 22);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:977:33
            if (!scanToken(RBRACKET)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:980:5
    private boolean scan$Java_ccc$980$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:980:5
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$980$6(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:980:19
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:980:29
            if (!scanToken(RBRACKET)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:980:6
    private boolean scan$Java_ccc$980$6() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:980:6
            // NonTerminal Annotation at Java.ccc:980:6
            pushOntoLookaheadStack("ArrayDimsAndInits", "Java.ccc", 980, 6);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:984:6
    private boolean scan$Java_ccc$984$6() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:984:6
            // NonTerminal Annotation at Java.ccc:984:6
            pushOntoLookaheadStack("ArrayDimsAndInits", "Java.ccc", 984, 6);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:994:3
    private boolean scan$Java_ccc$994$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:994:3
            // NonTerminal LabeledStatement at Java.ccc:994:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 994, 3);
            currentLookaheadProduction = "LabeledStatement";
            try {
                if (!check$LabeledStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1000:3
    private boolean scan$Java_ccc$1000$3() {
        remainingLookahead = 3;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1000:3
            // NonTerminal YieldStatement at Java.ccc:1000:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 1000, 3);
            currentLookaheadProduction = "YieldStatement";
            try {
                if (!check$YieldStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1054:30
    private boolean scan$Java_ccc$1054$30() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$1054$36(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1059:3
    private boolean scan$Java_ccc$1059$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1059:3
            // NonTerminal RecordDeclaration at Java.ccc:1059:3
            pushOntoLookaheadStack("BlockStatement", "Java.ccc", 1059, 3);
            currentLookaheadProduction = "RecordDeclaration";
            try {
                if (!check$RecordDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1061:3
    private boolean scan$Java_ccc$1061$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1061:3
            // NonTerminal ClassDeclaration at Java.ccc:1061:3
            pushOntoLookaheadStack("BlockStatement", "Java.ccc", 1061, 3);
            currentLookaheadProduction = "ClassDeclaration";
            try {
                if (!check$ClassDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1063:3
    private boolean scan$Java_ccc$1063$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1063:3
            // NonTerminal InterfaceDeclaration at Java.ccc:1063:3
            pushOntoLookaheadStack("BlockStatement", "Java.ccc", 1063, 3);
            currentLookaheadProduction = "InterfaceDeclaration";
            try {
                if (!check$InterfaceDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1065:3
    private boolean scan$Java_ccc$1065$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1065:3
            // NonTerminal EnumDeclaration at Java.ccc:1065:3
            pushOntoLookaheadStack("BlockStatement", "Java.ccc", 1065, 3);
            currentLookaheadProduction = "EnumDeclaration";
            try {
                if (!check$EnumDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1067:3
    private boolean scan$Java_ccc$1067$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1075$9(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1078:6
    private boolean scan$Java_ccc$1078$6() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1078:6
            // NonTerminal NoVarDeclaration at Java.ccc:1078:6
            pushOntoLookaheadStack("LocalVariableDeclaration", "Java.ccc", 1078, 6);
            currentLookaheadProduction = "NoVarDeclaration";
            try {
                if (!check$NoVarDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1080:6
    private boolean scan$Java_ccc$1080$6() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1080:6
            // NonTerminal VarDeclaration at Java.ccc:1080:6
            pushOntoLookaheadStack("LocalVariableDeclaration", "Java.ccc", 1080, 6);
            currentLookaheadProduction = "VarDeclaration";
            try {
                if (!check$VarDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1130:7
    private boolean scan$Java_ccc$1130$7() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1133:11
            Token token4 = currentLookaheadToken;
            int remainingLookahead4 = remainingLookahead;
            boolean hitFailure4 = hitFailure;
            boolean passedPredicate4 = passedPredicate;
            try {
                passedPredicate = false;
                if (!scanToken(INCR, DECR)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1135$11(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1148:5
    private boolean scan$Java_ccc$1148$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1148:5
            // NonTerminal RecordPattern at Java.ccc:1148:5
            pushOntoLookaheadStack("CasePattern", "Java.ccc", 1148, 5);
            currentLookaheadProduction = "RecordPattern";
            try {
                if (!check$RecordPattern(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1150:5
    private boolean scan$Java_ccc$1150$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1173$8(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1157:7
    private boolean scan$Java_ccc$1157$7() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$1157$13(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1175:5
    private boolean scan$Java_ccc$1175$5() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:1175:5
            permissibleModifiers = EnumSet.of(FINAL);
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1176:5
            // NonTerminal Modifiers at Java.ccc:1176:5
            pushOntoLookaheadStack("TypePattern", "Java.ccc", 1176, 5);
            currentLookaheadProduction = "Modifiers";
            try {
                if (!check$Modifiers(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:1178:5
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1178:6
            Token token6 = currentLookaheadToken;
            int remainingLookahead6 = remainingLookahead;
            boolean hitFailure6 = hitFailure;
            boolean passedPredicate6 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$1178$6(false)) {
                    currentLookaheadToken = token6;
                    remainingLookahead = remainingLookahead6;
                    hitFailure = hitFailure6;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1178$13(false)) {
                        currentLookaheadToken = token6;
                        remainingLookahead = remainingLookahead6;
                        hitFailure = hitFailure6;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate6;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1179:6
            if (!scanToken(UNDERSCORE, IDENTIFIER)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1178:6
    private boolean scan$Java_ccc$1178$6() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1178:6
            // NonTerminal Type at Java.ccc:1178:6
            pushOntoLookaheadStack("TypePattern", "Java.ccc", 1178, 6);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1178:13
    private boolean scan$Java_ccc$1178$13() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:1178:13
            EnumSet<TokenType> previousActives3 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged4 = false;
            somethingChanged4 = activateTokenTypes(VAR);
            try {
                if (!scanToken(VAR)) return false;
            } finally {
                token_source.activeTokenTypes = previousActives3;
                if (somethingChanged4) {
                    token_source.reset(currentLookaheadToken);
                    nextTokenType = null;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1181:5
    private boolean scan$Java_ccc$1181$5() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1181:5
            // NonTerminal VarDeclaration at Java.ccc:1181:5
            pushOntoLookaheadStack("TypePattern", "Java.ccc", 1181, 5);
            currentLookaheadProduction = "VarDeclaration";
            try {
                if (!check$VarDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1203:5
    private boolean scan$Java_ccc$1203$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1203$10(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1206:5
    private boolean scan$Java_ccc$1206$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1206$10(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1229:4
    private boolean scan$Java_ccc$1229$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$1229$10(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1244:4
    private boolean scan$Java_ccc$1244$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1244:4
            if (!scanToken(CASE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1244:11
            if (!scanToken(NULL)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:1244:23
            Token token5 = currentLookaheadToken;
            boolean passedPredicate5 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$1244$24(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1246:4
    private boolean scan$Java_ccc$1246$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1246:4
            if (!scanToken(CASE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1246:11
            // NonTerminal CasePattern at Java.ccc:1246:11
            pushOntoLookaheadStack("CaseOrDefault", "Java.ccc", 1246, 11);
            currentLookaheadProduction = "CasePattern";
            try {
                if (!check$CasePattern(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:1246:28
            boolean passedPredicate5 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token6 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1246$29(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token6;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:1246:51
            Token token8 = currentLookaheadToken;
            boolean passedPredicate8 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$1246$52(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token8;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate8;
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1246:52
    private boolean scan$Java_ccc$1246$52() {
        remainingLookahead = 0;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (!(checkNextTokenImage("when"))) return false;
            passedPredicate = true;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1260:6
    private boolean scan$Java_ccc$1260$6() {
        remainingLookahead = 0;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (!backscan$Java_ccc$1260$13()) return false;
            passedPredicate = true;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1263:6
    private boolean scan$Java_ccc$1263$6() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$1263$12(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1291:4
    private boolean scan$Java_ccc$1291$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1291:4
            // NonTerminal BasicForStatement at Java.ccc:1291:4
            pushOntoLookaheadStack("ForStatement", "Java.ccc", 1291, 4);
            currentLookaheadProduction = "BasicForStatement";
            try {
                if (!check$BasicForStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1293:4
    private boolean scan$Java_ccc$1293$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1293:4
            // NonTerminal EnhancedForStatement at Java.ccc:1293:4
            pushOntoLookaheadStack("ForStatement", "Java.ccc", 1293, 4);
            currentLookaheadProduction = "EnhancedForStatement";
            try {
                if (!check$EnhancedForStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1299:20
    private boolean scan$Java_ccc$1299$20() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1299:20
            // NonTerminal ForInit at Java.ccc:1299:20
            pushOntoLookaheadStack("BasicForStatement", "Java.ccc", 1299, 20);
            currentLookaheadProduction = "ForInit";
            try {
                if (!check$ForInit(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1307:3
    private boolean scan$Java_ccc$1307$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1075$9(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1365:8
    private boolean scan$Java_ccc$1365$8() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:1365:8
            if (!(getTokenType(0) == SEMICOLON)) {
                hitFailure = true;
                return false;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:1366:8
            if (!(getTokenType(1) != RPAREN)) {
                hitFailure = true;
                return false;
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:1368:8
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1369:10
            Token token6 = currentLookaheadToken;
            int remainingLookahead6 = remainingLookahead;
            boolean hitFailure6 = hitFailure;
            boolean passedPredicate6 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$1369$10(false)) {
                    currentLookaheadToken = token6;
                    remainingLookahead = remainingLookahead6;
                    hitFailure = hitFailure6;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1371$10(false)) {
                        currentLookaheadToken = token6;
                        remainingLookahead = remainingLookahead6;
                        hitFailure = hitFailure6;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$1373$10(false)) {
                            currentLookaheadToken = token6;
                            remainingLookahead = remainingLookahead6;
                            hitFailure = hitFailure6;
                            return false;
                        }
                    }
                }
            } finally {
                passedPredicate = passedPredicate6;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:1376:8
            Token token8 = currentLookaheadToken;
            boolean passedPredicate8 = passedPredicate;
            passedPredicate = false;
            try {
                if (!scanToken(SEMICOLON)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token8;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate8;
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1369:10
    private boolean scan$Java_ccc$1369$10() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1075$9(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1409:4
    private boolean scan$Java_ccc$1409$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1409:4
            // NonTerminal NormalAnnotation at Java.ccc:1409:4
            pushOntoLookaheadStack("Annotation", "Java.ccc", 1409, 4);
            currentLookaheadProduction = "NormalAnnotation";
            try {
                if (!check$NormalAnnotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1411:4
    private boolean scan$Java_ccc$1411$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1411:4
            // NonTerminal SingleMemberAnnotation at Java.ccc:1411:4
            pushOntoLookaheadStack("Annotation", "Java.ccc", 1411, 4);
            currentLookaheadProduction = "SingleMemberAnnotation";
            try {
                if (!check$SingleMemberAnnotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1439:4
    private boolean scan$Java_ccc$1439$4() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1439:4
            // NonTerminal Annotation at Java.ccc:1439:4
            pushOntoLookaheadStack("MemberValue", "Java.ccc", 1439, 4);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1449:20
    private boolean scan$Java_ccc$1449$20() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1449:20
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1449:34
            // NonTerminal MemberValue at Java.ccc:1449:34
            pushOntoLookaheadStack("MemberValueArrayInitializer", "Java.ccc", 1449, 34);
            currentLookaheadProduction = "MemberValue";
            try {
                if (!check$MemberValue(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1476:3
    private boolean scan$Java_ccc$1476$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1476:3
            // NonTerminal AnnotationTypeDeclaration at Java.ccc:1476:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1476, 3);
            currentLookaheadProduction = "AnnotationTypeDeclaration";
            try {
                if (!check$AnnotationTypeDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1478:3
    private boolean scan$Java_ccc$1478$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1478:3
            // NonTerminal ClassDeclaration at Java.ccc:1478:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1478, 3);
            currentLookaheadProduction = "ClassDeclaration";
            try {
                if (!check$ClassDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1480:3
    private boolean scan$Java_ccc$1480$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1480:3
            // NonTerminal InterfaceDeclaration at Java.ccc:1480:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1480, 3);
            currentLookaheadProduction = "InterfaceDeclaration";
            try {
                if (!check$InterfaceDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1482:3
    private boolean scan$Java_ccc$1482$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1482:3
            // NonTerminal EnumDeclaration at Java.ccc:1482:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1482, 3);
            currentLookaheadProduction = "EnumDeclaration";
            try {
                if (!check$EnumDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1484:3
    private boolean scan$Java_ccc$1484$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1484:3
            // NonTerminal AnnotationMethodDeclaration at Java.ccc:1484:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1484, 3);
            currentLookaheadProduction = "AnnotationMethodDeclaration";
            try {
                if (!check$AnnotationMethodDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1486:3
    private boolean scan$Java_ccc$1486$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1486:3
            // NonTerminal FieldDeclaration at Java.ccc:1486:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1486, 3);
            currentLookaheadProduction = "FieldDeclaration";
            try {
                if (!check$FieldDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1496:44
    private boolean scan$Java_ccc$1496$44() {
        remainingLookahead = 3;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1496:44
            // NonTerminal SimpleLambdaLHS at Java.ccc:1496:44
            pushOntoLookaheadStack("LambdaLHS", "Java.ccc", 1496, 44);
            currentLookaheadProduction = "SimpleLambdaLHS";
            try {
                if (!check$SimpleLambdaLHS(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1508:7
    private boolean scan$Java_ccc$1508$7() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:1508:7
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1509:7
            // NonTerminal LambdaParameter at Java.ccc:1509:7
            pushOntoLookaheadStack("LambdaParameters", "Java.ccc", 1509, 7);
            currentLookaheadProduction = "LambdaParameter";
            try {
                if (!check$LambdaParameter(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:1510:7
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:1511:7
            boolean passedPredicate6 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token7 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1512$9(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token7;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate6;
            }
            hitFailure = false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1524:7
    private boolean scan$Java_ccc$1524$7() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1524:7
            // NonTerminal Type at Java.ccc:1524:7
            pushOntoLookaheadStack("LambdaParameter", "Java.ccc", 1524, 7);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:1524:12
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1524$13(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1524:26
            if (!scanToken(VAR_ARGS)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1524:42
            if (!scanToken(IDENTIFIER)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1524:13
    private boolean scan$Java_ccc$1524$13() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1524:13
            // NonTerminal Annotation at Java.ccc:1524:13
            pushOntoLookaheadStack("LambdaParameter", "Java.ccc", 1524, 13);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1527:9
    private boolean scan$Java_ccc$1527$9() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:1527:9
            if (!(checkNextTokenImage("var"))) {
                hitFailure = true;
                return false;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1529:11
            if (!scanToken(VAR, IDENTIFIER)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1537:9
    private boolean scan$Java_ccc$1537$9() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1537:9
            // NonTerminal Type at Java.ccc:1537:9
            pushOntoLookaheadStack("LambdaParameter", "Java.ccc", 1537, 9);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at Java.ccc:1540:23
    private boolean scan$Java_ccc$1540$23() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1540:23
            // NonTerminal Annotation at Java.ccc:1540:23
            pushOntoLookaheadStack("LambdaParameter", "Java.ccc", 1540, 23);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // lookahead routine for lookahead at:
    // Java.ccc:50:5
    private boolean check$Java_ccc$50$11(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (!scanToken(RBRACE)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // Java.ccc:212:3
    private boolean check$Java_ccc$212$8(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:212:8
            // NonTerminal TypeDeclarationLA at Java.ccc:212:8
            pushOntoLookaheadStack("TypeDeclaration", "Java.ccc", 212, 8);
            currentLookaheadProduction = "TypeDeclarationLA";
            try {
                if (!check$TypeDeclarationLA(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // Java.ccc:408:4
    private boolean check$Java_ccc$408$10(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:408:11
            Token token4 = currentLookaheadToken;
            int remainingLookahead4 = remainingLookahead;
            boolean hitFailure4 = hitFailure;
            boolean passedPredicate4 = passedPredicate;
            try {
                passedPredicate = false;
                if (!scanToken(RBRACE)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$408$20(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // Java.ccc:410:5
    private boolean check$Java_ccc$410$11(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (!scanToken(RBRACE)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // Java.ccc:440:34
    private boolean check$Java_ccc$440$40(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (!scanToken(RBRACE)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // Java.ccc:558:4
    private boolean check$Java_ccc$558$10(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:558:11
            Token token4 = currentLookaheadToken;
            int remainingLookahead4 = remainingLookahead;
            boolean hitFailure4 = hitFailure;
            boolean passedPredicate4 = passedPredicate;
            try {
                passedPredicate = false;
                if (!scanToken(RBRACE)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$558$20(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // Java.ccc:560:5
    private boolean check$Java_ccc$560$11(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (!scanToken(RBRACE)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // Java.ccc:797:6
    private boolean check$Java_ccc$797$11(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:797:11
            if (!scanToken(GT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:797:17
            if (!scanToken(GT, RSIGNEDSHIFT)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // Java.ccc:1054:30
    private boolean check$Java_ccc$1054$36(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (!scanToken(RBRACE)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // Java.ccc:1075:4
    private boolean check$Java_ccc$1075$9(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1075:9
            // NonTerminal LocalVariableDeclarationLA at Java.ccc:1075:9
            pushOntoLookaheadStack("LocalVariableDeclaration", "Java.ccc", 1075, 9);
            currentLookaheadProduction = "LocalVariableDeclarationLA";
            try {
                if (!check$LocalVariableDeclarationLA(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // Java.ccc:1157:7
    private boolean check$Java_ccc$1157$13(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (!scanToken(RPAREN)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // Java.ccc:1173:3
    private boolean check$Java_ccc$1173$8(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1173:8
            // NonTerminal LocalVariableDeclarationLA at Java.ccc:1173:8
            pushOntoLookaheadStack("TypePattern", "Java.ccc", 1173, 8);
            currentLookaheadProduction = "LocalVariableDeclarationLA";
            try {
                if (!check$LocalVariableDeclarationLA(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // Java.ccc:1203:5
    private boolean check$Java_ccc$1203$10(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1203:10
            // NonTerminal NewSwitchLabel at Java.ccc:1203:10
            pushOntoLookaheadStack("SwitchStatement", "Java.ccc", 1203, 10);
            currentLookaheadProduction = "NewSwitchLabel";
            try {
                if (!check$NewSwitchLabel(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // Java.ccc:1206:5
    private boolean check$Java_ccc$1206$10(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1206:10
            // NonTerminal ClassicSwitchLabel at Java.ccc:1206:10
            pushOntoLookaheadStack("SwitchStatement", "Java.ccc", 1206, 10);
            currentLookaheadProduction = "ClassicSwitchLabel";
            try {
                if (!check$ClassicSwitchLabel(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // Java.ccc:1229:4
    private boolean check$Java_ccc$1229$10(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (!scanToken(CASE, _DEFAULT, RBRACE)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // Java.ccc:1263:6
    private boolean check$Java_ccc$1263$12(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (!scanToken(RBRACE)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    private boolean backscan$Java_ccc$312$11() {
        ListIterator<NonTerminalCall> stackIterator = stackIteratorBackward();
        NonTerminalCall ntc = null;
        if (!stackIterator.hasNext()) return false;
        ntc = stackIterator.next();
        if (ntc.productionName != "InterfaceDeclaration") return false;
        return true;
    }

    private boolean backscan$Java_ccc$453$8() {
        ListIterator<NonTerminalCall> stackIterator = stackIteratorBackward();
        NonTerminalCall ntc = null;
        if (!stackIterator.hasNext()) {
            return false;
        }
        stackIterator.next();
        if (!stackIterator.hasNext()) return false;
        ntc = stackIterator.next();
        if (ntc.productionName != "InterfaceDeclaration") return false;
        return true;
    }

    private boolean backscan$Java_ccc$480$10() {
        ListIterator<NonTerminalCall> stackIterator = stackIteratorBackward();
        NonTerminalCall ntc = null;
        if (!stackIterator.hasNext()) {
            return false;
        }
        stackIterator.next();
        if (!stackIterator.hasNext()) return false;
        ntc = stackIterator.next();
        if (ntc.productionName != "FieldDeclaration") return false;
        return true;
    }

    private boolean backscan$Java_ccc$492$10() {
        ListIterator<NonTerminalCall> stackIterator = stackIteratorBackward();
        NonTerminalCall ntc = null;
        if (!stackIterator.hasNext()) {
            return false;
        }
        stackIterator.next();
        if (!stackIterator.hasNext()) {
            return false;
        }
        stackIterator.next();
        if (!stackIterator.hasNext()) return false;
        ntc = stackIterator.next();
        if (ntc.productionName != "InterfaceDeclaration") return false;
        return true;
    }

    private boolean backscan$Java_ccc$500$10() {
        ListIterator<NonTerminalCall> stackIterator = stackIteratorBackward();
        NonTerminalCall ntc = null;
        while (stackIterator.hasNext()) {
            ntc = stackIterator.next();
            if (ntc.productionName == "TypeDeclaration") {
                stackIterator.previous();
                break;
            }
            if (!stackIterator.hasNext()) return false;
        }
        if (!stackIterator.hasNext()) return false;
        ntc = stackIterator.next();
        if (ntc.productionName != "TypeDeclaration") return false;
        return true;
    }

    private boolean backscan$Java_ccc$1260$13() {
        ListIterator<NonTerminalCall> stackIterator = stackIteratorBackward();
        NonTerminalCall ntc = null;
        if (!stackIterator.hasNext()) return false;
        ntc = stackIterator.next();
        if (ntc.productionName != "SwitchStatement") return false;
        if (!stackIterator.hasNext()) return false;
        ntc = stackIterator.next();
        if (ntc.productionName != "SwitchExpression") return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ModularCompilationUnit(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:39:4
        boolean passedPredicate3 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token4 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$39$5(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token4;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate3;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:40:4
        boolean passedPredicate6 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token7 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$40$5(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token7;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Assertion specified at Java.ccc:41:4
        if (!(checkNextTokenImage("open", "module"))) {
            hitFailure = true;
            return false;
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:43:4
        EnumSet<TokenType> previousActives10 = EnumSet.copyOf(token_source.activeTokenTypes);
        boolean somethingChanged11 = false;
        somethingChanged11 = activateTokenTypes(OPEN, MODULE);
        try {
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:45:6
            Token token14 = currentLookaheadToken;
            boolean passedPredicate14 = passedPredicate;
            passedPredicate = false;
            try {
                if (!scanToken(OPEN)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token14;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate14;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:46:6
            if (!scanToken(MODULE)) return false;
        } finally {
            token_source.activeTokenTypes = previousActives10;
            if (somethingChanged11) {
                token_source.reset(currentLookaheadToken);
                nextTokenType = null;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:48:4
        // NonTerminal Name at Java.ccc:48:4
        pushOntoLookaheadStack("ModularCompilationUnit", "Java.ccc", 48, 4);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:49:4
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:50:4
        boolean passedPredicate19 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token20 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$50$5(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token20;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate19;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:51:4
        if (!scanToken(RBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:52:4
        if (!scanToken(EOF)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ModuleDirective(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:56:4
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$56$4(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$58$4(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$60$4(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$62$4(false)) {
                            currentLookaheadToken = token2;
                            remainingLookahead = remainingLookahead2;
                            hitFailure = hitFailure2;
                            if (passedPredicate) return false;
                            passedPredicate = false;
                            if (!check$Java_ccc$64$4(false)) {
                                currentLookaheadToken = token2;
                                remainingLookahead = remainingLookahead2;
                                hitFailure = hitFailure2;
                                return false;
                            }
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$RequiresDirective(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:68:4
        EnumSet<TokenType> previousActives3 = EnumSet.copyOf(token_source.activeTokenTypes);
        boolean somethingChanged4 = false;
        somethingChanged4 = activateTokenTypes(REQUIRES, TRANSITIVE);
        try {
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:68:42
            if (!scanToken(REQUIRES)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:68:53
            Token token8 = currentLookaheadToken;
            boolean passedPredicate8 = passedPredicate;
            passedPredicate = false;
            try {
                if (!scanToken(STATIC, TRANSITIVE)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token8;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate8;
            }
        } finally {
            token_source.activeTokenTypes = previousActives3;
            if (somethingChanged4) {
                token_source.reset(currentLookaheadToken);
                nextTokenType = null;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:69:4
        // NonTerminal Name at Java.ccc:69:4
        pushOntoLookaheadStack("RequiresDirective", "Java.ccc", 69, 4);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:70:4
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ExportsDirective(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:74:4
        EnumSet<TokenType> previousActives3 = EnumSet.copyOf(token_source.activeTokenTypes);
        boolean somethingChanged4 = false;
        somethingChanged4 = activateTokenTypes(EXPORTS);
        try {
            if (!scanToken(EXPORTS)) return false;
        } finally {
            token_source.activeTokenTypes = previousActives3;
            if (somethingChanged4) {
                token_source.reset(currentLookaheadToken);
                nextTokenType = null;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:75:4
        // NonTerminal Name at Java.ccc:75:4
        pushOntoLookaheadStack("ExportsDirective", "Java.ccc", 75, 4);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:76:4
        Token token8 = currentLookaheadToken;
        boolean passedPredicate8 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$77$6(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token8;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate8;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:80:4
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$OpensDirective(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:84:4
        EnumSet<TokenType> previousActives3 = EnumSet.copyOf(token_source.activeTokenTypes);
        boolean somethingChanged4 = false;
        somethingChanged4 = activateTokenTypes(OPENS);
        try {
            if (!scanToken(OPENS)) return false;
        } finally {
            token_source.activeTokenTypes = previousActives3;
            if (somethingChanged4) {
                token_source.reset(currentLookaheadToken);
                nextTokenType = null;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:85:4
        // NonTerminal Name at Java.ccc:85:4
        pushOntoLookaheadStack("OpensDirective", "Java.ccc", 85, 4);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:86:4
        Token token8 = currentLookaheadToken;
        boolean passedPredicate8 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$87$6(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token8;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate8;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:90:4
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$UsesDirective(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:94:5
        EnumSet<TokenType> previousActives3 = EnumSet.copyOf(token_source.activeTokenTypes);
        boolean somethingChanged4 = false;
        somethingChanged4 = activateTokenTypes(USES);
        try {
            if (!scanToken(USES)) return false;
        } finally {
            token_source.activeTokenTypes = previousActives3;
            if (somethingChanged4) {
                token_source.reset(currentLookaheadToken);
                nextTokenType = null;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:95:5
        // NonTerminal Name at Java.ccc:95:5
        pushOntoLookaheadStack("UsesDirective", "Java.ccc", 95, 5);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:96:5
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ProvidesDirective(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:100:5
        EnumSet<TokenType> previousActives3 = EnumSet.copyOf(token_source.activeTokenTypes);
        boolean somethingChanged4 = false;
        somethingChanged4 = activateTokenTypes(PROVIDES);
        try {
            if (!scanToken(PROVIDES)) return false;
        } finally {
            token_source.activeTokenTypes = previousActives3;
            if (somethingChanged4) {
                token_source.reset(currentLookaheadToken);
                nextTokenType = null;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:101:5
        // NonTerminal Name at Java.ccc:101:5
        pushOntoLookaheadStack("ProvidesDirective", "Java.ccc", 101, 5);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:102:5
        EnumSet<TokenType> previousActives8 = EnumSet.copyOf(token_source.activeTokenTypes);
        boolean somethingChanged9 = false;
        somethingChanged9 = activateTokenTypes(WITH);
        try {
            if (!scanToken(WITH)) return false;
        } finally {
            token_source.activeTokenTypes = previousActives8;
            if (somethingChanged9) {
                token_source.reset(currentLookaheadToken);
                nextTokenType = null;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:103:5
        // NonTerminal Name at Java.ccc:103:5
        pushOntoLookaheadStack("ProvidesDirective", "Java.ccc", 103, 5);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:104:5
        boolean passedPredicate13 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token14 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$104$6(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token14;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate13;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:105:5
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$PackageDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:130:5
        boolean passedPredicate3 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token4 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$130$6(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token4;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate3;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:131:5
        if (!scanToken(PACKAGE)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:133:5
        // NonTerminal Name at Java.ccc:133:5
        pushOntoLookaheadStack("PackageDeclaration", "Java.ccc", 133, 5);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:134:5
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ImportDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:144:21
        if (!scanToken(_IMPORT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:144:31
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!scanToken(STATIC, MODULE)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:144:54
        // NonTerminal Name at Java.ccc:144:54
        pushOntoLookaheadStack("ImportDeclaration", "Java.ccc", 144, 54);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:144:59
        Token token7 = currentLookaheadToken;
        boolean passedPredicate7 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$144$61(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token7;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:144:76
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$Modifiers(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:147:2
        boolean passedPredicate3 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token4 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$148$3$(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token4;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate3;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:200:2
        permissibleModifiers = null;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$TypeDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:213:3
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:214:5
        Token token4 = currentLookaheadToken;
        int remainingLookahead4 = remainingLookahead;
        boolean hitFailure4 = hitFailure;
        boolean passedPredicate4 = passedPredicate;
        try {
            passedPredicate = false;
            if (!scanToken(SEMICOLON)) {
                currentLookaheadToken = token4;
                remainingLookahead = remainingLookahead4;
                hitFailure = hitFailure4;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$216$5(false)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$218$5(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$220$5(false)) {
                            currentLookaheadToken = token4;
                            remainingLookahead = remainingLookahead4;
                            hitFailure = hitFailure4;
                            if (passedPredicate) return false;
                            passedPredicate = false;
                            if (!check$Java_ccc$222$5(false)) {
                                currentLookaheadToken = token4;
                                remainingLookahead = remainingLookahead4;
                                hitFailure = hitFailure4;
                                if (passedPredicate) return false;
                                passedPredicate = false;
                                if (!check$Java_ccc$224$5(false)) {
                                    currentLookaheadToken = token4;
                                    remainingLookahead = remainingLookahead4;
                                    hitFailure = hitFailure4;
                                    return false;
                                }
                            }
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$TypeDeclarationLA(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:230:4
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!scanToken(SEMICOLON)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$232$4(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$TypeIdentifier(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:254:4
        if (!scanToken(IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:255:4
        String temp = tokenImage(0);
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Assertion specified at Java.ccc:256:4
        if (!(!temp.equals("record") && !temp.equals("var") && !temp.equals("permits") && !temp.equals("sealed") && !temp.equals("yield"))) {
            hitFailure = true;
            return false;
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ClassDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:266:3
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:270:3
        // NonTerminal Modifiers at Java.ccc:270:3
        pushOntoLookaheadStack("ClassDeclaration", "Java.ccc", 270, 3);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:271:3
        if (!scanToken(CLASS)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:272:3
        // NonTerminal TypeIdentifier at Java.ccc:272:3
        pushOntoLookaheadStack("ClassDeclaration", "Java.ccc", 272, 3);
        currentLookaheadProduction = "TypeIdentifier";
        try {
            if (!check$TypeIdentifier(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:273:3
        Token token7 = currentLookaheadToken;
        boolean passedPredicate7 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$273$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token7;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:274:3
        Token token9 = currentLookaheadToken;
        boolean passedPredicate9 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$274$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token9;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate9;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:275:3
        Token token11 = currentLookaheadToken;
        boolean passedPredicate11 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$275$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token11;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate11;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:276:3
        Token token13 = currentLookaheadToken;
        boolean passedPredicate13 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$276$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token13;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate13;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:277:3
        // NonTerminal ClassOrInterfaceBody at Java.ccc:277:3
        pushOntoLookaheadStack("ClassDeclaration", "Java.ccc", 277, 3);
        currentLookaheadProduction = "ClassOrInterfaceBody";
        try {
            if (!check$ClassOrInterfaceBody(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$InterfaceDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:281:3
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:285:3
        // NonTerminal Modifiers at Java.ccc:285:3
        pushOntoLookaheadStack("InterfaceDeclaration", "Java.ccc", 285, 3);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:286:3
        if (!scanToken(INTERFACE)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:287:3
        // NonTerminal TypeIdentifier at Java.ccc:287:3
        pushOntoLookaheadStack("InterfaceDeclaration", "Java.ccc", 287, 3);
        currentLookaheadProduction = "TypeIdentifier";
        try {
            if (!check$TypeIdentifier(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:288:3
        Token token7 = currentLookaheadToken;
        boolean passedPredicate7 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$288$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token7;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:289:3
        Token token9 = currentLookaheadToken;
        boolean passedPredicate9 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$289$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token9;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate9;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:290:3
        Token token11 = currentLookaheadToken;
        boolean passedPredicate11 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$290$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token11;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate11;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:291:3
        // NonTerminal ClassOrInterfaceBody at Java.ccc:291:3
        pushOntoLookaheadStack("InterfaceDeclaration", "Java.ccc", 291, 3);
        currentLookaheadProduction = "ClassOrInterfaceBody";
        try {
            if (!check$ClassOrInterfaceBody(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$PermitsList(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:297:7
        if (!scanToken(PERMITS, IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:304:4
        // NonTerminal ObjectType at Java.ccc:304:4
        pushOntoLookaheadStack("PermitsList", "Java.ccc", 304, 4);
        currentLookaheadProduction = "ObjectType";
        try {
            if (!check$ObjectType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:305:4
        boolean passedPredicate6 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token7 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$305$5(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token7;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ExtendsList(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:309:4
        if (!scanToken(EXTENDS)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:310:4
        // NonTerminal ObjectType at Java.ccc:310:4
        pushOntoLookaheadStack("ExtendsList", "Java.ccc", 310, 4);
        currentLookaheadProduction = "ObjectType";
        try {
            if (!check$ObjectType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:311:4
        boolean passedPredicate5 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token6 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$312$6(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token6;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ImplementsList(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:326:4
        if (!scanToken(IMPLEMENTS)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:326:17
        // NonTerminal ObjectType at Java.ccc:326:17
        pushOntoLookaheadStack("ImplementsList", "Java.ccc", 326, 17);
        currentLookaheadProduction = "ObjectType";
        try {
            if (!check$ObjectType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:327:4
        boolean passedPredicate5 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token6 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$328$6(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token6;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$EnumDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:334:4
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:337:4
        // NonTerminal Modifiers at Java.ccc:337:4
        pushOntoLookaheadStack("EnumDeclaration", "Java.ccc", 337, 4);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:338:4
        if (!scanToken(ENUM)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:339:4
        // NonTerminal TypeIdentifier at Java.ccc:339:4
        pushOntoLookaheadStack("EnumDeclaration", "Java.ccc", 339, 4);
        currentLookaheadProduction = "TypeIdentifier";
        try {
            if (!check$TypeIdentifier(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:340:4
        Token token7 = currentLookaheadToken;
        boolean passedPredicate7 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$340$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token7;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:341:4
        // NonTerminal EnumBody at Java.ccc:341:4
        pushOntoLookaheadStack("EnumDeclaration", "Java.ccc", 341, 4);
        currentLookaheadProduction = "EnumBody";
        try {
            if (!check$EnumBody(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$EnumBody(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:345:4
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:346:4
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$346$6(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:347:4
        Token token6 = currentLookaheadToken;
        boolean passedPredicate6 = passedPredicate;
        passedPredicate = false;
        try {
            if (!scanToken(COMMA)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token6;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:348:4
        Token token8 = currentLookaheadToken;
        boolean passedPredicate8 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$348$6(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token8;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate8;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:349:4
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$RecordDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:353:3
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:357:3
        // NonTerminal Modifiers at Java.ccc:357:3
        pushOntoLookaheadStack("RecordDeclaration", "Java.ccc", 357, 3);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Assertion specified at Java.ccc:358:3
        if (!(checkNextTokenImage("record") && getTokenType(2) == IDENTIFIER)) {
            hitFailure = true;
            return false;
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:361:5
        if (!scanToken(RECORD, IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:368:3
        // NonTerminal TypeIdentifier at Java.ccc:368:3
        pushOntoLookaheadStack("RecordDeclaration", "Java.ccc", 368, 3);
        currentLookaheadProduction = "TypeIdentifier";
        try {
            if (!check$TypeIdentifier(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:369:3
        Token token9 = currentLookaheadToken;
        boolean passedPredicate9 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$369$4(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token9;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate9;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:370:3
        // NonTerminal RecordHeader at Java.ccc:370:3
        pushOntoLookaheadStack("RecordDeclaration", "Java.ccc", 370, 3);
        currentLookaheadProduction = "RecordHeader";
        try {
            if (!check$RecordHeader(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:371:3
        Token token12 = currentLookaheadToken;
        boolean passedPredicate12 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$371$4(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token12;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate12;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:372:3
        // NonTerminal RecordBody at Java.ccc:372:3
        pushOntoLookaheadStack("RecordDeclaration", "Java.ccc", 372, 3);
        currentLookaheadProduction = "RecordBody";
        try {
            if (!check$RecordBody(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$RecordHeader(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:376:4
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:377:4
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$378$6(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:386:4
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$RecordComponent(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:390:4
        boolean passedPredicate3 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token4 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$390$5(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token4;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate3;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:390:18
        // NonTerminal Type at Java.ccc:390:18
        pushOntoLookaheadStack("RecordComponent", "Java.ccc", 390, 18);
        currentLookaheadProduction = "Type";
        try {
            if (!check$Type(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:390:23
        Token token7 = currentLookaheadToken;
        boolean passedPredicate7 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$390$24(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token7;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:390:50
        if (!scanToken(IDENTIFIER)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$RecordBody(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:394:3
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:395:3
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$396$4$(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:400:3
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$CompactConstructorDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:404:3
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:405:3
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:405:4
        // NonTerminal Modifiers at Java.ccc:405:4
        pushOntoLookaheadStack("CompactConstructorDeclaration", "Java.ccc", 405, 4);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:406:3
        // NonTerminal TypeIdentifier at Java.ccc:406:3
        pushOntoLookaheadStack("CompactConstructorDeclaration", "Java.ccc", 406, 3);
        currentLookaheadProduction = "TypeIdentifier";
        try {
            if (!check$TypeIdentifier(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:407:3
        if (!scanToken(LBRACE)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:408:3
        boolean passedPredicate9 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token10 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$408$4(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token10;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate9;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:409:3
        Token token12 = currentLookaheadToken;
        boolean passedPredicate12 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$409$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token12;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate12;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:410:3
        boolean passedPredicate14 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token15 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$410$5(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token15;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate14;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:411:3
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$EnumConstant(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:417:3
        boolean passedPredicate3 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token4 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$417$4(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token4;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate3;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:417:17
        if (!scanToken(IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:417:30
        Token token7 = currentLookaheadToken;
        boolean passedPredicate7 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$417$32(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token7;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:417:54
        Token token9 = currentLookaheadToken;
        boolean passedPredicate9 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$417$56(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token9;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate9;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$TypeParameters(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:421:4
        if (!scanToken(LT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:422:4
        // NonTerminal TypeParameter at Java.ccc:422:4
        pushOntoLookaheadStack("TypeParameters", "Java.ccc", 422, 4);
        currentLookaheadProduction = "TypeParameter";
        try {
            if (!check$TypeParameter(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:422:18
        boolean passedPredicate5 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token6 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$422$20(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token6;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:423:4
        if (!scanToken(GT)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$TypeParameter(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:434:16
        boolean passedPredicate3 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token4 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$434$17(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token4;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate3;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:434:30
        // NonTerminal TypeIdentifier at Java.ccc:434:30
        pushOntoLookaheadStack("TypeParameter", "Java.ccc", 434, 30);
        currentLookaheadProduction = "TypeIdentifier";
        try {
            if (!check$TypeIdentifier(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:434:50
        Token token7 = currentLookaheadToken;
        boolean passedPredicate7 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$434$51(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token7;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$TypeBound(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:437:4
        if (!scanToken(EXTENDS)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:437:14
        // NonTerminal ObjectType at Java.ccc:437:14
        pushOntoLookaheadStack("TypeBound", "Java.ccc", 437, 14);
        currentLookaheadProduction = "ObjectType";
        try {
            if (!check$ObjectType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:437:25
        boolean passedPredicate5 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token6 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$437$27(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token6;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ClassOrInterfaceBody(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:440:24
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:440:33
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$440$34(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:440:90
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ClassOrInterfaceBodyDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:443:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$443$3(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$445$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$447$3(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$449$3(false)) {
                            currentLookaheadToken = token2;
                            remainingLookahead = remainingLookahead2;
                            hitFailure = hitFailure2;
                            if (passedPredicate) return false;
                            passedPredicate = false;
                            if (!check$Java_ccc$451$3(false)) {
                                currentLookaheadToken = token2;
                                remainingLookahead = remainingLookahead2;
                                hitFailure = hitFailure2;
                                if (passedPredicate) return false;
                                passedPredicate = false;
                                if (!check$Java_ccc$453$3(false)) {
                                    currentLookaheadToken = token2;
                                    remainingLookahead = remainingLookahead2;
                                    hitFailure = hitFailure2;
                                    if (passedPredicate) return false;
                                    passedPredicate = false;
                                    if (!check$Java_ccc$456$3(false)) {
                                        currentLookaheadToken = token2;
                                        remainingLookahead = remainingLookahead2;
                                        hitFailure = hitFailure2;
                                        return false;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$FieldDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:466:3
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:469:3
        // NonTerminal Modifiers at Java.ccc:469:3
        pushOntoLookaheadStack("FieldDeclaration", "Java.ccc", 469, 3);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:470:3
        // NonTerminal Type at Java.ccc:470:3
        pushOntoLookaheadStack("FieldDeclaration", "Java.ccc", 470, 3);
        currentLookaheadProduction = "Type";
        try {
            if (!check$Type(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 1;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead - 1;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:471:3
        // NonTerminal VariableDeclarator at Java.ccc:471:3
        pushOntoLookaheadStack("FieldDeclaration", "Java.ccc", 471, 3);
        currentLookaheadProduction = "VariableDeclarator";
        try {
            if (!check$VariableDeclarator(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:471:22
        boolean passedPredicate7 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token8 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$471$24(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token8;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:471:54
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$VariableDeclarator(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:474:23
        // NonTerminal VariableDeclaratorId at Java.ccc:474:23
        pushOntoLookaheadStack("VariableDeclarator", "Java.ccc", 474, 23);
        currentLookaheadProduction = "VariableDeclaratorId";
        try {
            if (!check$VariableDeclaratorId(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:474:44
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$474$46(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$VariableDeclaratorId(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:477:5
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$477$5(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$480$5(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$VariableInitializer(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:484:28
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$484$28(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$484$47(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ArrayInitializer(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:487:4
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:487:13
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$487$15(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:487:77
        Token token6 = currentLookaheadToken;
        boolean passedPredicate6 = passedPredicate;
        passedPredicate = false;
        try {
            if (!scanToken(COMMA)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token6;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:487:89
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$MethodDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:492:5
        Token token4 = currentLookaheadToken;
        int remainingLookahead4 = remainingLookahead;
        boolean hitFailure4 = hitFailure;
        boolean passedPredicate4 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$492$5(false)) {
                currentLookaheadToken = token4;
                remainingLookahead = remainingLookahead4;
                hitFailure = hitFailure4;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$500$5(false)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$510$5(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        return false;
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:516:3
        // NonTerminal Modifiers at Java.ccc:516:3
        pushOntoLookaheadStack("MethodDeclaration", "Java.ccc", 516, 3);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:517:3
        Token token7 = currentLookaheadToken;
        boolean passedPredicate7 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$517$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token7;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:518:3
        // NonTerminal ReturnType at Java.ccc:518:3
        pushOntoLookaheadStack("MethodDeclaration", "Java.ccc", 518, 3);
        currentLookaheadProduction = "ReturnType";
        try {
            if (!check$ReturnType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:519:3
        if (!scanToken(IDENTIFIER)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 1;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead - 1;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:520:9
        // NonTerminal FormalParameters at Java.ccc:520:9
        pushOntoLookaheadStack("MethodDeclaration", "Java.ccc", 520, 9);
        currentLookaheadProduction = "FormalParameters";
        try {
            if (!check$FormalParameters(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:520:26
        boolean passedPredicate12 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token13 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$520$28(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token13;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate12;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:521:3
        Token token15 = currentLookaheadToken;
        boolean passedPredicate15 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$521$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token15;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate15;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:522:5
        Token token18 = currentLookaheadToken;
        int remainingLookahead18 = remainingLookahead;
        boolean hitFailure18 = hitFailure;
        boolean passedPredicate18 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$522$5(false)) {
                currentLookaheadToken = token18;
                remainingLookahead = remainingLookahead18;
                hitFailure = hitFailure18;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!scanToken(SEMICOLON)) {
                    currentLookaheadToken = token18;
                    remainingLookahead = remainingLookahead18;
                    hitFailure = hitFailure18;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate18;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:523:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$FormalParameters(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:527:5
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:528:5
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$529$9(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:537:5
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$FormalParameter(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:541:4
        permissibleModifiers = EnumSet.of(FINAL);
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:542:4
        // NonTerminal Modifiers at Java.ccc:542:4
        pushOntoLookaheadStack("FormalParameter", "Java.ccc", 542, 4);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:542:14
        // NonTerminal Type at Java.ccc:542:14
        pushOntoLookaheadStack("FormalParameter", "Java.ccc", 542, 14);
        currentLookaheadProduction = "Type";
        try {
            if (!check$Type(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:543:4
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:544:4
        Token token7 = currentLookaheadToken;
        boolean passedPredicate7 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$544$6(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token7;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:545:4
        // NonTerminal VariableDeclaratorId at Java.ccc:545:4
        pushOntoLookaheadStack("FormalParameter", "Java.ccc", 545, 4);
        currentLookaheadProduction = "VariableDeclaratorId";
        try {
            if (!check$VariableDeclaratorId(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:546:4
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ConstructorDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:552:3
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:553:3
        // NonTerminal Modifiers at Java.ccc:553:3
        pushOntoLookaheadStack("ConstructorDeclaration", "Java.ccc", 553, 3);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:554:3
        Token token5 = currentLookaheadToken;
        boolean passedPredicate5 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$554$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token5;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:555:3
        // NonTerminal TypeIdentifier at Java.ccc:555:3
        pushOntoLookaheadStack("ConstructorDeclaration", "Java.ccc", 555, 3);
        currentLookaheadProduction = "TypeIdentifier";
        try {
            if (!check$TypeIdentifier(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 1;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead - 1;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:555:24
        // NonTerminal FormalParameters at Java.ccc:555:24
        pushOntoLookaheadStack("ConstructorDeclaration", "Java.ccc", 555, 24);
        currentLookaheadProduction = "FormalParameters";
        try {
            if (!check$FormalParameters(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:556:3
        Token token9 = currentLookaheadToken;
        boolean passedPredicate9 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$556$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token9;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate9;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:557:3
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:558:3
        boolean passedPredicate12 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token13 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$558$4(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token13;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate12;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:559:3
        Token token15 = currentLookaheadToken;
        boolean passedPredicate15 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$559$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token15;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate15;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:560:3
        boolean passedPredicate17 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token18 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$560$5(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token18;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate17;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:561:3
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ExplicitConstructorInvocation(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:565:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$565$3(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$569$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$Initializer(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:574:3
        Token token3 = currentLookaheadToken;
        boolean passedPredicate3 = passedPredicate;
        passedPredicate = false;
        try {
            if (!scanToken(STATIC)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token3;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate3;
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 1;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead - 1;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:574:22
        // NonTerminal Block at Java.ccc:574:22
        pushOntoLookaheadStack("Initializer", "Java.ccc", 574, 22);
        currentLookaheadProduction = "Block";
        try {
            if (!check$Block(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$Type(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:579:4
        Token token4 = currentLookaheadToken;
        int remainingLookahead4 = remainingLookahead;
        boolean hitFailure4 = hitFailure;
        boolean passedPredicate4 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$579$4(false)) {
                currentLookaheadToken = token4;
                remainingLookahead = remainingLookahead4;
                hitFailure = hitFailure4;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$582$4(false)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ReferenceType(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:592:4
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$592$4(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$594$4(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ObjectType(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:598:5
        boolean passedPredicate3 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token4 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$598$6(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token4;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate3;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:599:5
        // NonTerminal TypeIdentifier at Java.ccc:599:5
        pushOntoLookaheadStack("ObjectType", "Java.ccc", 599, 5);
        currentLookaheadProduction = "TypeIdentifier";
        try {
            if (!check$TypeIdentifier(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:599:20
        Token token7 = currentLookaheadToken;
        boolean passedPredicate7 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$599$22(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token7;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:600:5
        boolean passedPredicate9 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token10 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$600$7(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token10;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate9;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$DiamondOperator(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:613:20
        if (!scanToken(LT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:613:24
        if (!scanToken(GT)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$PossiblyEmptyTypeArguments(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:616:4
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$616$4(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$618$4(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$TypeArguments(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:623:3
        if (!scanToken(LT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:623:8
        // NonTerminal TypeArgument at Java.ccc:623:8
        pushOntoLookaheadStack("TypeArguments", "Java.ccc", 623, 8);
        currentLookaheadProduction = "TypeArgument";
        try {
            if (!check$TypeArgument(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:623:21
        boolean passedPredicate5 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token6 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$623$23(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token6;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:624:4
        EnumSet<TokenType> previousActives8 = EnumSet.copyOf(token_source.activeTokenTypes);
        boolean somethingChanged9 = false;
        somethingChanged9 = somethingChanged9 |= deactivateTokenTypes(RSIGNEDSHIFT, RUNSIGNEDSHIFT);
        try {
            if (!scanToken(GT)) return false;
        } finally {
            token_source.activeTokenTypes = previousActives8;
            if (somethingChanged9) {
                token_source.reset(currentLookaheadToken);
                nextTokenType = null;
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$TypeArgument(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:628:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$628$3(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$630$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$WildcardBounds(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:633:19
        if (!scanToken(EXTENDS, SUPER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:633:40
        // NonTerminal ReferenceType at Java.ccc:633:40
        pushOntoLookaheadStack("WildcardBounds", "Java.ccc", 633, 40);
        currentLookaheadProduction = "ReferenceType";
        try {
            if (!check$ReferenceType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$PrimitiveType(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:636:3
        boolean passedPredicate3 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token4 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$636$4(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token4;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate3;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:637:4
        if (!scanToken(first_set$Java_ccc$637$4)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$PrimitiveArrayType(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:642:22
        // NonTerminal PrimitiveType at Java.ccc:642:22
        pushOntoLookaheadStack("PrimitiveArrayType", "Java.ccc", 642, 22);
        currentLookaheadProduction = "PrimitiveType";
        try {
            if (!check$PrimitiveType(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for OneOrMore specified at Java.ccc:642:36
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:642:37
        boolean passedPredicate6 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token7 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$642$38(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token7;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:642:51
        if (!scanToken(LBRACKET)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:642:67
        if (!scanToken(RBRACKET)) return false;
        boolean passedPredicate10 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token11 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$642$37(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token11;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate10;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ReturnType(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:644:15
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!scanToken(VOID)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$644$24(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$Name(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:646:9
        if (!scanToken(IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:646:22
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$646$23(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ThrowsList(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:648:14
        if (!scanToken(THROWS)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:648:23
        // NonTerminal ExceptionType at Java.ccc:648:23
        pushOntoLookaheadStack("ThrowsList", "Java.ccc", 648, 23);
        currentLookaheadProduction = "ExceptionType";
        try {
            if (!check$ExceptionType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:648:37
        boolean passedPredicate5 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token6 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$648$39(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token6;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ExceptionType(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:651:5
        boolean passedPredicate3 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token4 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$651$6(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token4;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate3;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:652:5
        if (!scanToken(IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:653:5
        boolean passedPredicate7 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token8 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$654$8(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token8;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:656:5
        Token token10 = currentLookaheadToken;
        boolean passedPredicate10 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$657$7(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token10;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate10;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:661:5
        Token token12 = currentLookaheadToken;
        boolean passedPredicate12 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$661$6(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token12;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate12;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$Expression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:666:5
        // NonTerminal AssignmentExpression at Java.ccc:666:5
        pushOntoLookaheadStack("Expression", "Java.ccc", 666, 5);
        currentLookaheadProduction = "AssignmentExpression";
        try {
            if (!check$AssignmentExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:667:5
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$AssignmentExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:723:3
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:726:3
        // NonTerminal TernaryExpression at Java.ccc:726:3
        pushOntoLookaheadStack("AssignmentExpression", "Java.ccc", 726, 3);
        currentLookaheadProduction = "TernaryExpression";
        try {
            if (!check$TernaryExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:726:21
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:727:3
        Token token6 = currentLookaheadToken;
        boolean passedPredicate6 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$728$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token6;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$TernaryExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:740:3
        // NonTerminal ConditionalOrExpression at Java.ccc:740:3
        pushOntoLookaheadStack("TernaryExpression", "Java.ccc", 740, 3);
        currentLookaheadProduction = "ConditionalOrExpression";
        try {
            if (!check$ConditionalOrExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:740:27
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$740$30(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ConditionalOrExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:744:3
        // NonTerminal ConditionalAndExpression at Java.ccc:744:3
        pushOntoLookaheadStack("ConditionalOrExpression", "Java.ccc", 744, 3);
        currentLookaheadProduction = "ConditionalAndExpression";
        try {
            if (!check$ConditionalAndExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:744:28
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$744$30(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ConditionalAndExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:748:3
        // NonTerminal InclusiveOrExpression at Java.ccc:748:3
        pushOntoLookaheadStack("ConditionalAndExpression", "Java.ccc", 748, 3);
        currentLookaheadProduction = "InclusiveOrExpression";
        try {
            if (!check$InclusiveOrExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:748:25
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$748$27(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$InclusiveOrExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:752:3
        // NonTerminal ExclusiveOrExpression at Java.ccc:752:3
        pushOntoLookaheadStack("InclusiveOrExpression", "Java.ccc", 752, 3);
        currentLookaheadProduction = "ExclusiveOrExpression";
        try {
            if (!check$ExclusiveOrExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:752:25
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$752$27(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ExclusiveOrExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:756:3
        // NonTerminal AndExpression at Java.ccc:756:3
        pushOntoLookaheadStack("ExclusiveOrExpression", "Java.ccc", 756, 3);
        currentLookaheadProduction = "AndExpression";
        try {
            if (!check$AndExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:756:17
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$756$19(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$AndExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:760:3
        // NonTerminal EqualityExpression at Java.ccc:760:3
        pushOntoLookaheadStack("AndExpression", "Java.ccc", 760, 3);
        currentLookaheadProduction = "EqualityExpression";
        try {
            if (!check$EqualityExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:760:22
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$760$24(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$EqualityExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:764:3
        // NonTerminal InstanceOfExpression at Java.ccc:764:3
        pushOntoLookaheadStack("EqualityExpression", "Java.ccc", 764, 3);
        currentLookaheadProduction = "InstanceOfExpression";
        try {
            if (!check$InstanceOfExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:764:24
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$764$26(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$InstanceOfExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:768:3
        // NonTerminal RelationalExpression at Java.ccc:768:3
        pushOntoLookaheadStack("InstanceOfExpression", "Java.ccc", 768, 3);
        currentLookaheadProduction = "RelationalExpression";
        try {
            if (!check$RelationalExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:769:3
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$770$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$RelationalExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:782:3
        // NonTerminal ShiftExpression at Java.ccc:782:3
        pushOntoLookaheadStack("RelationalExpression", "Java.ccc", 782, 3);
        currentLookaheadProduction = "ShiftExpression";
        try {
            if (!check$ShiftExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:783:3
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$784$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ShiftExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:791:4
        // NonTerminal AdditiveExpression at Java.ccc:791:4
        pushOntoLookaheadStack("ShiftExpression", "Java.ccc", 791, 4);
        currentLookaheadProduction = "AdditiveExpression";
        try {
            if (!check$AdditiveExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:792:4
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$797$6(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:801:4
        boolean passedPredicate6 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token7 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$802$7(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token7;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$AdditiveExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:808:3
        // NonTerminal MultiplicativeExpression at Java.ccc:808:3
        pushOntoLookaheadStack("AdditiveExpression", "Java.ccc", 808, 3);
        currentLookaheadProduction = "MultiplicativeExpression";
        try {
            if (!check$MultiplicativeExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:808:28
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$808$31(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$MultiplicativeExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:812:3
        // NonTerminal UnaryExpression at Java.ccc:812:3
        pushOntoLookaheadStack("MultiplicativeExpression", "Java.ccc", 812, 3);
        currentLookaheadProduction = "UnaryExpression";
        try {
            if (!check$UnaryExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:812:19
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$812$22(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$UnaryExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:816:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$816$3(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$818$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$820$3(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$822$3(false)) {
                            currentLookaheadToken = token2;
                            remainingLookahead = remainingLookahead2;
                            hitFailure = hitFailure2;
                            return false;
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$PreIncrementExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:826:3
        if (!scanToken(INCR)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:826:10
        // NonTerminal UnaryExpression at Java.ccc:826:10
        pushOntoLookaheadStack("PreIncrementExpression", "Java.ccc", 826, 10);
        currentLookaheadProduction = "UnaryExpression";
        try {
            if (!check$UnaryExpression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Assertion specified at Java.ccc:827:3
        // No code generated since this assertion does not apply in lookahead
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$PreDecrementExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:832:3
        if (!scanToken(DECR)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:832:10
        // NonTerminal UnaryExpression at Java.ccc:832:10
        pushOntoLookaheadStack("PreDecrementExpression", "Java.ccc", 832, 10);
        currentLookaheadProduction = "UnaryExpression";
        try {
            if (!check$UnaryExpression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Assertion specified at Java.ccc:833:3
        // No code generated since this assertion does not apply in lookahead
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$UnaryExpressionNotPlusMinus(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:838:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$838$3(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$840$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$842$3(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$844$3(false)) {
                            currentLookaheadToken = token2;
                            remainingLookahead = remainingLookahead2;
                            hitFailure = hitFailure2;
                            if (passedPredicate) return false;
                            passedPredicate = false;
                            if (!check$Java_ccc$846$3(false)) {
                                currentLookaheadToken = token2;
                                remainingLookahead = remainingLookahead2;
                                hitFailure = hitFailure2;
                                if (passedPredicate) return false;
                                passedPredicate = false;
                                if (!check$Java_ccc$848$3(false)) {
                                    currentLookaheadToken = token2;
                                    remainingLookahead = remainingLookahead2;
                                    hitFailure = hitFailure2;
                                    return false;
                                }
                            }
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$PostfixExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:852:3
        // NonTerminal PrimaryExpression at Java.ccc:852:3
        pushOntoLookaheadStack("PostfixExpression", "Java.ccc", 852, 3);
        currentLookaheadProduction = "PrimaryExpression";
        try {
            if (!check$PrimaryExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:853:3
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$854$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$SwitchExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:861:4
        // NonTerminal SwitchStatement at Java.ccc:861:4
        pushOntoLookaheadStack("SwitchExpression", "Java.ccc", 861, 4);
        currentLookaheadProduction = "SwitchStatement";
        try {
            if (!check$SwitchStatement(false)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$PrimitiveCastExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:865:4
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:865:13
        // NonTerminal PrimitiveType at Java.ccc:865:13
        pushOntoLookaheadStack("PrimitiveCastExpression", "Java.ccc", 865, 13);
        currentLookaheadProduction = "PrimitiveType";
        try {
            if (!check$PrimitiveType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:865:27
        if (!scanToken(RPAREN)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:865:41
        // NonTerminal UnaryExpression at Java.ccc:865:41
        pushOntoLookaheadStack("PrimitiveCastExpression", "Java.ccc", 865, 41);
        currentLookaheadProduction = "UnaryExpression";
        try {
            if (!check$UnaryExpression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ObjectCastExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:869:4
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:869:13
        // NonTerminal ReferenceType at Java.ccc:869:13
        pushOntoLookaheadStack("ObjectCastExpression", "Java.ccc", 869, 13);
        currentLookaheadProduction = "ReferenceType";
        try {
            if (!check$ReferenceType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:869:27
        boolean passedPredicate5 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token6 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$869$28(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token6;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:869:51
        if (!scanToken(RPAREN)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 1;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead - 1;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:869:66
        // NonTerminal UnaryExpressionNotPlusMinus at Java.ccc:869:66
        pushOntoLookaheadStack("ObjectCastExpression", "Java.ccc", 869, 66);
        currentLookaheadProduction = "UnaryExpressionNotPlusMinus";
        try {
            if (!check$UnaryExpressionNotPlusMinus(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$PrimaryExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:874:3
        Token token4 = currentLookaheadToken;
        int remainingLookahead4 = remainingLookahead;
        boolean hitFailure4 = hitFailure;
        boolean passedPredicate4 = passedPredicate;
        try {
            passedPredicate = false;
            if (!scanToken(first_set$Java_ccc$874$3)) {
                currentLookaheadToken = token4;
                remainingLookahead = remainingLookahead4;
                hitFailure = hitFailure4;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!scanToken(THIS)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!scanToken(SUPER)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$880$3(false)) {
                            currentLookaheadToken = token4;
                            remainingLookahead = remainingLookahead4;
                            hitFailure = hitFailure4;
                            if (passedPredicate) return false;
                            passedPredicate = false;
                            if (!check$Java_ccc$882$3(false)) {
                                currentLookaheadToken = token4;
                                remainingLookahead = remainingLookahead4;
                                hitFailure = hitFailure4;
                                if (passedPredicate) return false;
                                passedPredicate = false;
                                if (!check$Java_ccc$884$3(false)) {
                                    currentLookaheadToken = token4;
                                    remainingLookahead = remainingLookahead4;
                                    hitFailure = hitFailure4;
                                    if (passedPredicate) return false;
                                    passedPredicate = false;
                                    if (!check$Java_ccc$886$3(false)) {
                                        currentLookaheadToken = token4;
                                        remainingLookahead = remainingLookahead4;
                                        hitFailure = hitFailure4;
                                        if (passedPredicate) return false;
                                        passedPredicate = false;
                                        if (!check$Java_ccc$888$3(false)) {
                                            currentLookaheadToken = token4;
                                            remainingLookahead = remainingLookahead4;
                                            hitFailure = hitFailure4;
                                            return false;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:890:2
        boolean passedPredicate6 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token7 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$891$3$(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token7;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Assertion specified at Java.ccc:912:2
        // No code generated since this assertion does not apply in lookahead
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$Parentheses(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:918:5
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:919:5
        // NonTerminal Expression at Java.ccc:919:5
        pushOntoLookaheadStack("Parentheses", "Java.ccc", 919, 5);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:919:16
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:920:5
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ClassLiteral(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:928:17
        Token token4 = currentLookaheadToken;
        int remainingLookahead4 = remainingLookahead;
        boolean hitFailure4 = hitFailure;
        boolean passedPredicate4 = passedPredicate;
        try {
            passedPredicate = false;
            if (!scanToken(VOID)) {
                currentLookaheadToken = token4;
                remainingLookahead = remainingLookahead4;
                hitFailure = hitFailure4;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$928$26(false)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:928:32
        if (!scanToken(DOT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:928:38
        if (!scanToken(CLASS)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$MethodReference(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:931:6
        Token token4 = currentLookaheadToken;
        int remainingLookahead4 = remainingLookahead;
        boolean hitFailure4 = hitFailure;
        boolean passedPredicate4 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$931$6(false)) {
                currentLookaheadToken = token4;
                remainingLookahead = remainingLookahead4;
                hitFailure = hitFailure4;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!scanToken(SUPER)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:932:6
        if (!scanToken(DOUBLE_COLON)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:933:6
        Token token7 = currentLookaheadToken;
        boolean passedPredicate7 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$933$7(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token7;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:934:7
        if (!scanToken(NEW, IDENTIFIER)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$InvocationArguments(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:958:5
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:959:5
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$959$7(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:960:5
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$AllocationExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:964:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$964$3(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$966$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ArrayDimsAndInits(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:975:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$975$3(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$983$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$Label(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:989:9
        if (!scanToken(IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:989:21
        if (!scanToken(COLON)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$LabeledStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:991:20
        // NonTerminal Label at Java.ccc:991:20
        pushOntoLookaheadStack("LabeledStatement", "Java.ccc", 991, 20);
        currentLookaheadProduction = "Label";
        try {
            if (!check$Label(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:991:31
        // NonTerminal Statement at Java.ccc:991:31
        pushOntoLookaheadStack("LabeledStatement", "Java.ccc", 991, 31);
        currentLookaheadProduction = "Statement";
        try {
            if (!check$Statement(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$Statement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:994:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$994$3(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$996$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$998$3(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$1000$3(false)) {
                            currentLookaheadToken = token2;
                            remainingLookahead = remainingLookahead2;
                            hitFailure = hitFailure2;
                            if (passedPredicate) return false;
                            passedPredicate = false;
                            if (!scanToken(SEMICOLON)) {
                                currentLookaheadToken = token2;
                                remainingLookahead = remainingLookahead2;
                                hitFailure = hitFailure2;
                                if (passedPredicate) return false;
                                passedPredicate = false;
                                if (!check$Java_ccc$1004$3(false)) {
                                    currentLookaheadToken = token2;
                                    remainingLookahead = remainingLookahead2;
                                    hitFailure = hitFailure2;
                                    if (passedPredicate) return false;
                                    passedPredicate = false;
                                    if (!check$Java_ccc$1006$3(false)) {
                                        currentLookaheadToken = token2;
                                        remainingLookahead = remainingLookahead2;
                                        hitFailure = hitFailure2;
                                        if (passedPredicate) return false;
                                        passedPredicate = false;
                                        if (!check$Java_ccc$1008$3(false)) {
                                            currentLookaheadToken = token2;
                                            remainingLookahead = remainingLookahead2;
                                            hitFailure = hitFailure2;
                                            if (passedPredicate) return false;
                                            passedPredicate = false;
                                            if (!check$Java_ccc$1010$3(false)) {
                                                currentLookaheadToken = token2;
                                                remainingLookahead = remainingLookahead2;
                                                hitFailure = hitFailure2;
                                                if (passedPredicate) return false;
                                                passedPredicate = false;
                                                if (!check$Java_ccc$1012$3(false)) {
                                                    currentLookaheadToken = token2;
                                                    remainingLookahead = remainingLookahead2;
                                                    hitFailure = hitFailure2;
                                                    if (passedPredicate) return false;
                                                    passedPredicate = false;
                                                    if (!check$Java_ccc$1014$3(false)) {
                                                        currentLookaheadToken = token2;
                                                        remainingLookahead = remainingLookahead2;
                                                        hitFailure = hitFailure2;
                                                        if (passedPredicate) return false;
                                                        passedPredicate = false;
                                                        if (!check$Java_ccc$1016$3(false)) {
                                                            currentLookaheadToken = token2;
                                                            remainingLookahead = remainingLookahead2;
                                                            hitFailure = hitFailure2;
                                                            if (passedPredicate) return false;
                                                            passedPredicate = false;
                                                            if (!check$Java_ccc$1018$3(false)) {
                                                                currentLookaheadToken = token2;
                                                                remainingLookahead = remainingLookahead2;
                                                                hitFailure = hitFailure2;
                                                                if (passedPredicate) return false;
                                                                passedPredicate = false;
                                                                if (!check$Java_ccc$1020$3(false)) {
                                                                    currentLookaheadToken = token2;
                                                                    remainingLookahead = remainingLookahead2;
                                                                    hitFailure = hitFailure2;
                                                                    if (passedPredicate) return false;
                                                                    passedPredicate = false;
                                                                    if (!check$Java_ccc$1022$3(false)) {
                                                                        currentLookaheadToken = token2;
                                                                        remainingLookahead = remainingLookahead2;
                                                                        hitFailure = hitFailure2;
                                                                        if (passedPredicate) return false;
                                                                        passedPredicate = false;
                                                                        if (!check$Java_ccc$1024$3(false)) {
                                                                            currentLookaheadToken = token2;
                                                                            remainingLookahead = remainingLookahead2;
                                                                            hitFailure = hitFailure2;
                                                                            if (passedPredicate) return false;
                                                                            passedPredicate = false;
                                                                            if (!check$Java_ccc$1026$3(false)) {
                                                                                currentLookaheadToken = token2;
                                                                                remainingLookahead = remainingLookahead2;
                                                                                hitFailure = hitFailure2;
                                                                                return false;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$AssertStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1052:19
        if (!scanToken(_ASSERT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1052:29
        // NonTerminal Expression at Java.ccc:1052:29
        pushOntoLookaheadStack("AssertStatement", "Java.ccc", 1052, 29);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1052:40
        Token token5 = currentLookaheadToken;
        boolean passedPredicate5 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1052$42(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token5;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1052:63
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$Block(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1054:20
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:1054:29
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$1054$30(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1054:68
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$BlockStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Assertion specified at Java.ccc:1057:2
        // No code generated since this assertion does not apply in lookahead
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:1058:2
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1059:3
        Token token5 = currentLookaheadToken;
        int remainingLookahead5 = remainingLookahead;
        boolean hitFailure5 = hitFailure;
        boolean passedPredicate5 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1059$3(false)) {
                currentLookaheadToken = token5;
                remainingLookahead = remainingLookahead5;
                hitFailure = hitFailure5;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1061$3(false)) {
                    currentLookaheadToken = token5;
                    remainingLookahead = remainingLookahead5;
                    hitFailure = hitFailure5;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1063$3(false)) {
                        currentLookaheadToken = token5;
                        remainingLookahead = remainingLookahead5;
                        hitFailure = hitFailure5;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$1065$3(false)) {
                            currentLookaheadToken = token5;
                            remainingLookahead = remainingLookahead5;
                            hitFailure = hitFailure5;
                            if (passedPredicate) return false;
                            passedPredicate = false;
                            if (!check$Java_ccc$1067$3(false)) {
                                currentLookaheadToken = token5;
                                remainingLookahead = remainingLookahead5;
                                hitFailure = hitFailure5;
                                if (passedPredicate) return false;
                                passedPredicate = false;
                                if (!check$Java_ccc$1070$3(false)) {
                                    currentLookaheadToken = token5;
                                    remainingLookahead = remainingLookahead5;
                                    hitFailure = hitFailure5;
                                    return false;
                                }
                            }
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$LocalVariableDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:1077:4
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1078:6
        Token token4 = currentLookaheadToken;
        int remainingLookahead4 = remainingLookahead;
        boolean hitFailure4 = hitFailure;
        boolean passedPredicate4 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1078$6(false)) {
                currentLookaheadToken = token4;
                remainingLookahead = remainingLookahead4;
                hitFailure = hitFailure4;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1080$6(false)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$LocalVariableDeclarationLA(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1085:4
        // NonTerminal Modifiers at Java.ccc:1085:4
        pushOntoLookaheadStack("LocalVariableDeclarationLA", "Java.ccc", 1085, 4);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1087:6
        Token token5 = currentLookaheadToken;
        int remainingLookahead5 = remainingLookahead;
        boolean hitFailure5 = hitFailure;
        boolean passedPredicate5 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1087$6(false)) {
                currentLookaheadToken = token5;
                remainingLookahead = remainingLookahead5;
                hitFailure = hitFailure5;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!scanToken(VAR)) {
                    currentLookaheadToken = token5;
                    remainingLookahead = remainingLookahead5;
                    hitFailure = hitFailure5;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1091$6(false)) {
                        currentLookaheadToken = token5;
                        remainingLookahead = remainingLookahead5;
                        hitFailure = hitFailure5;
                        return false;
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1094:5
        if (!scanToken(UNDERSCORE, IDENTIFIER)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$NoVarDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:1098:4
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1099:4
        // NonTerminal Modifiers at Java.ccc:1099:4
        pushOntoLookaheadStack("NoVarDeclaration", "Java.ccc", 1099, 4);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Assertion specified at Java.ccc:1100:4
        if (!(!checkNextTokenImage("var"))) {
            hitFailure = true;
            return false;
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1102:4
        // NonTerminal Type at Java.ccc:1102:4
        pushOntoLookaheadStack("NoVarDeclaration", "Java.ccc", 1102, 4);
        currentLookaheadProduction = "Type";
        try {
            if (!check$Type(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1102:9
        // NonTerminal VariableDeclarator at Java.ccc:1102:9
        pushOntoLookaheadStack("NoVarDeclaration", "Java.ccc", 1102, 9);
        currentLookaheadProduction = "VariableDeclarator";
        try {
            if (!check$VariableDeclarator(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:1102:28
        boolean passedPredicate8 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token9 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$1102$30(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token9;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate8;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$VarDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:1106:3
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1107:3
        // NonTerminal Modifiers at Java.ccc:1107:3
        pushOntoLookaheadStack("VarDeclaration", "Java.ccc", 1107, 3);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Assertion specified at Java.ccc:1108:3
        // No code generated since this assertion does not apply in lookahead
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1110:5
        if (!scanToken(VAR, IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1117:3
        // NonTerminal VariableDeclarator at Java.ccc:1117:3
        pushOntoLookaheadStack("VarDeclaration", "Java.ccc", 1117, 3);
        currentLookaheadProduction = "VariableDeclarator";
        try {
            if (!check$VariableDeclarator(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$StatementExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1123:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1123$3(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1125$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1127$3(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        return false;
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ExpressionStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1145:23
        // NonTerminal StatementExpression at Java.ccc:1145:23
        pushOntoLookaheadStack("ExpressionStatement", "Java.ccc", 1145, 23);
        currentLookaheadProduction = "StatementExpression";
        try {
            if (!check$StatementExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1145:43
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$CasePattern(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1148:5
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1148$5(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1150$5(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$RecordPattern(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1154:5
        // NonTerminal ReferenceType at Java.ccc:1154:5
        pushOntoLookaheadStack("RecordPattern", "Java.ccc", 1154, 5);
        currentLookaheadProduction = "ReferenceType";
        try {
            if (!check$ReferenceType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1155:5
        if (!scanToken(LPAREN)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1156:5
        Token token5 = currentLookaheadToken;
        boolean passedPredicate5 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1157$7(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token5;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1168:5
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$TypePattern(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:1174:3
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1175:5
        Token token4 = currentLookaheadToken;
        int remainingLookahead4 = remainingLookahead;
        boolean hitFailure4 = hitFailure;
        boolean passedPredicate4 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1175$5(false)) {
                currentLookaheadToken = token4;
                remainingLookahead = remainingLookahead4;
                hitFailure = hitFailure4;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1181$5(false)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$WhenClause(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1189:7
        if (!scanToken(WHEN, IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1196:4
        // NonTerminal Expression at Java.ccc:1196:4
        pushOntoLookaheadStack("WhenClause", "Java.ccc", 1196, 4);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$SwitchStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1200:3
        if (!scanToken(SWITCH)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1200:12
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1200:21
        // NonTerminal Expression at Java.ccc:1200:21
        pushOntoLookaheadStack("SwitchStatement", "Java.ccc", 1200, 21);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1200:32
        if (!scanToken(RPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1201:3
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1202:3
        Token token8 = currentLookaheadToken;
        boolean passedPredicate8 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1203$5$(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token8;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate8;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1209:3
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ClassicCaseStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1228:3
        // NonTerminal ClassicSwitchLabel at Java.ccc:1228:3
        pushOntoLookaheadStack("ClassicCaseStatement", "Java.ccc", 1228, 3);
        currentLookaheadProduction = "ClassicSwitchLabel";
        try {
            if (!check$ClassicSwitchLabel(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:1229:3
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$1229$4(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$NewSwitchLabel(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1233:3
        // NonTerminal CaseOrDefault at Java.ccc:1233:3
        pushOntoLookaheadStack("NewSwitchLabel", "Java.ccc", 1233, 3);
        currentLookaheadProduction = "CaseOrDefault";
        try {
            if (!check$CaseOrDefault(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1234:3
        if (!scanToken(LAMBDA)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ClassicSwitchLabel(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1238:3
        // NonTerminal CaseOrDefault at Java.ccc:1238:3
        pushOntoLookaheadStack("ClassicSwitchLabel", "Java.ccc", 1238, 3);
        currentLookaheadProduction = "CaseOrDefault";
        try {
            if (!check$CaseOrDefault(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1239:3
        if (!scanToken(COLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$CaseOrDefault(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1244:4
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1244$4(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1246$4(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1248$4(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!scanToken(_DEFAULT)) {
                            currentLookaheadToken = token2;
                            remainingLookahead = remainingLookahead2;
                            hitFailure = hitFailure2;
                            return false;
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$NewCaseStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1254:4
        // NonTerminal NewSwitchLabel at Java.ccc:1254:4
        pushOntoLookaheadStack("NewCaseStatement", "Java.ccc", 1254, 4);
        currentLookaheadProduction = "NewSwitchLabel";
        try {
            if (!check$NewSwitchLabel(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:1255:4
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1256:6
        Token token5 = currentLookaheadToken;
        int remainingLookahead5 = remainingLookahead;
        boolean hitFailure5 = hitFailure;
        boolean passedPredicate5 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1256$6(false)) {
                currentLookaheadToken = token5;
                remainingLookahead = remainingLookahead5;
                hitFailure = hitFailure5;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1258$6(false)) {
                    currentLookaheadToken = token5;
                    remainingLookahead = remainingLookahead5;
                    hitFailure = hitFailure5;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1260$6(false)) {
                        currentLookaheadToken = token5;
                        remainingLookahead = remainingLookahead5;
                        hitFailure = hitFailure5;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$1263$6(false)) {
                            currentLookaheadToken = token5;
                            remainingLookahead = remainingLookahead5;
                            hitFailure = hitFailure5;
                            return false;
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$IfStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1269:3
        if (!scanToken(IF)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1269:8
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1269:17
        // NonTerminal Expression at Java.ccc:1269:17
        pushOntoLookaheadStack("IfStatement", "Java.ccc", 1269, 17);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1269:28
        if (!scanToken(RPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1269:37
        // NonTerminal Statement at Java.ccc:1269:37
        pushOntoLookaheadStack("IfStatement", "Java.ccc", 1269, 37);
        currentLookaheadProduction = "Statement";
        try {
            if (!check$Statement(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1269:47
        Token token8 = currentLookaheadToken;
        boolean passedPredicate8 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1269$48(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token8;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate8;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$WhileStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1283:3
        if (!scanToken(WHILE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1283:11
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1283:20
        // NonTerminal Expression at Java.ccc:1283:20
        pushOntoLookaheadStack("WhileStatement", "Java.ccc", 1283, 20);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1283:31
        if (!scanToken(RPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1283:40
        // NonTerminal Statement at Java.ccc:1283:40
        pushOntoLookaheadStack("WhileStatement", "Java.ccc", 1283, 40);
        currentLookaheadProduction = "Statement";
        try {
            if (!check$Statement(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$DoStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1287:3
        if (!scanToken(DO)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1287:8
        // NonTerminal Statement at Java.ccc:1287:8
        pushOntoLookaheadStack("DoStatement", "Java.ccc", 1287, 8);
        currentLookaheadProduction = "Statement";
        try {
            if (!check$Statement(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1287:18
        if (!scanToken(WHILE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1287:26
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1287:35
        // NonTerminal Expression at Java.ccc:1287:35
        pushOntoLookaheadStack("DoStatement", "Java.ccc", 1287, 35);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1287:46
        if (!scanToken(RPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1287:55
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ForStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1291:4
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1291$4(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1293$4(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!scanToken(FOR)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        return false;
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$BasicForStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1299:4
        if (!scanToken(FOR)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1299:10
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1299:19
        Token token5 = currentLookaheadToken;
        boolean passedPredicate5 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1299$20(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token5;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1299:29
        if (!scanToken(SEMICOLON)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1299:46
        Token token8 = currentLookaheadToken;
        boolean passedPredicate8 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1299$47(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token8;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate8;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1299:59
        if (!scanToken(SEMICOLON)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1299:71
        Token token11 = currentLookaheadToken;
        boolean passedPredicate11 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1299$72(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token11;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate11;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1299:97
        if (!scanToken(RPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1299:106
        // NonTerminal Statement at Java.ccc:1299:106
        pushOntoLookaheadStack("BasicForStatement", "Java.ccc", 1299, 106);
        currentLookaheadProduction = "Statement";
        try {
            if (!check$Statement(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$EnhancedForStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1303:4
        if (!scanToken(FOR)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1303:10
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1303:19
        // NonTerminal LocalVariableDeclaration at Java.ccc:1303:19
        pushOntoLookaheadStack("EnhancedForStatement", "Java.ccc", 1303, 19);
        currentLookaheadProduction = "LocalVariableDeclaration";
        try {
            if (!check$LocalVariableDeclaration(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1303:44
        if (!scanToken(COLON)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1303:57
        // NonTerminal Expression at Java.ccc:1303:57
        pushOntoLookaheadStack("EnhancedForStatement", "Java.ccc", 1303, 57);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1303:68
        if (!scanToken(RPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1303:77
        // NonTerminal Statement at Java.ccc:1303:77
        pushOntoLookaheadStack("EnhancedForStatement", "Java.ccc", 1303, 77);
        currentLookaheadProduction = "Statement";
        try {
            if (!check$Statement(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ForInit(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1307:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1307$3(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1309$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$StatementExpressionList(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1313:3
        // NonTerminal StatementExpression at Java.ccc:1313:3
        pushOntoLookaheadStack("StatementExpressionList", "Java.ccc", 1313, 3);
        currentLookaheadProduction = "StatementExpression";
        try {
            if (!check$StatementExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:1313:23
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$1313$25(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$BreakStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1317:3
        if (!scanToken(BREAK)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1317:11
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!scanToken(IDENTIFIER)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1317:28
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$YieldStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Assertion specified at Java.ccc:1322:4
        if (!(checkNextTokenImage("yield"))) {
            hitFailure = true;
            return false;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Assertion specified at Java.ccc:1323:4
        if (!(isInProduction("SwitchExpression"))) {
            hitFailure = true;
            return false;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1325:7
        if (!scanToken(YIELD, IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1332:4
        // NonTerminal Expression at Java.ccc:1332:4
        pushOntoLookaheadStack("YieldStatement", "Java.ccc", 1332, 4);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1333:4
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ContinueStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1336:21
        if (!scanToken(CONTINUE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1336:32
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!scanToken(IDENTIFIER)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1336:49
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ReturnStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1338:19
        if (!scanToken(RETURN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1338:28
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1338$29(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1338:42
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ThrowStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1340:18
        if (!scanToken(THROW)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1340:26
        // NonTerminal Expression at Java.ccc:1340:26
        pushOntoLookaheadStack("ThrowStatement", "Java.ccc", 1340, 26);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1340:37
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$SynchronizedStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1342:25
        if (!scanToken(SYNCHRONIZED)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1342:40
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1342:49
        // NonTerminal Expression at Java.ccc:1342:49
        pushOntoLookaheadStack("SynchronizedStatement", "Java.ccc", 1342, 49);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1342:60
        if (!scanToken(RPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1342:69
        // NonTerminal Block at Java.ccc:1342:69
        pushOntoLookaheadStack("SynchronizedStatement", "Java.ccc", 1342, 69);
        currentLookaheadProduction = "Block";
        try {
            if (!check$Block(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$TryStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:1345:3
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1350:3
        if (!scanToken(TRY)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1351:3
        Token token5 = currentLookaheadToken;
        boolean passedPredicate5 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1351$4(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token5;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1352:3
        // NonTerminal Block at Java.ccc:1352:3
        pushOntoLookaheadStack("TryStatement", "Java.ccc", 1352, 3);
        currentLookaheadProduction = "Block";
        try {
            if (!check$Block(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:1353:3
        boolean passedPredicate8 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token9 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$1353$4(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token9;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate8;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1354:3
        Token token11 = currentLookaheadToken;
        boolean passedPredicate11 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1354$4(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token11;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate11;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Assertion specified at Java.ccc:1355:3
        // No code generated since this assertion does not apply in lookahead
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ResourcesInTryBlock(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1360:5
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for OneOrMore specified at Java.ccc:1361:5
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Assertion specified at Java.ccc:1365:8
        if (!(getTokenType(0) == SEMICOLON)) {
            hitFailure = true;
            return false;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Assertion specified at Java.ccc:1366:8
        if (!(getTokenType(1) != RPAREN)) {
            hitFailure = true;
            return false;
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:1368:8
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1369:10
        Token token9 = currentLookaheadToken;
        int remainingLookahead9 = remainingLookahead;
        boolean hitFailure9 = hitFailure;
        boolean passedPredicate9 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1369$10(false)) {
                currentLookaheadToken = token9;
                remainingLookahead = remainingLookahead9;
                hitFailure = hitFailure9;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1371$10(false)) {
                    currentLookaheadToken = token9;
                    remainingLookahead = remainingLookahead9;
                    hitFailure = hitFailure9;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1373$10(false)) {
                        currentLookaheadToken = token9;
                        remainingLookahead = remainingLookahead9;
                        hitFailure = hitFailure9;
                        return false;
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate9;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1376:8
        Token token11 = currentLookaheadToken;
        boolean passedPredicate11 = passedPredicate;
        passedPredicate = false;
        try {
            if (!scanToken(SEMICOLON)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token11;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate11;
        }
        boolean passedPredicate12 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token13 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$1365$8(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token13;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate12;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1378:5
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$CatchBlock(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1382:5
        if (!scanToken(CATCH)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1383:5
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1384:5
        Token token5 = currentLookaheadToken;
        boolean passedPredicate5 = passedPredicate;
        passedPredicate = false;
        try {
            if (!scanToken(FINAL)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token5;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1385:5
        // NonTerminal ObjectType at Java.ccc:1385:5
        pushOntoLookaheadStack("CatchBlock", "Java.ccc", 1385, 5);
        currentLookaheadProduction = "ObjectType";
        try {
            if (!check$ObjectType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:1385:16
        boolean passedPredicate8 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token9 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$1385$17(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token9;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate8;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1385:42
        // NonTerminal VariableDeclaratorId at Java.ccc:1385:42
        pushOntoLookaheadStack("CatchBlock", "Java.ccc", 1385, 42);
        currentLookaheadProduction = "VariableDeclaratorId";
        try {
            if (!check$VariableDeclaratorId(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1386:5
        if (!scanToken(RPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1387:5
        // NonTerminal Block at Java.ccc:1387:5
        pushOntoLookaheadStack("CatchBlock", "Java.ccc", 1387, 5);
        currentLookaheadProduction = "Block";
        try {
            if (!check$Block(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$FinallyBlock(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1397:16
        if (!scanToken(FINALLY)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1397:26
        // NonTerminal Block at Java.ccc:1397:26
        pushOntoLookaheadStack("FinallyBlock", "Java.ccc", 1397, 26);
        currentLookaheadProduction = "Block";
        try {
            if (!check$Block(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$Annotation(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1409:4
        Token token4 = currentLookaheadToken;
        int remainingLookahead4 = remainingLookahead;
        boolean hitFailure4 = hitFailure;
        boolean passedPredicate4 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1409$4(false)) {
                currentLookaheadToken = token4;
                remainingLookahead = remainingLookahead4;
                hitFailure = hitFailure4;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1411$4(false)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1413$4(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        return false;
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$NormalAnnotation(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1417:20
        if (!scanToken(AT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1417:25
        // NonTerminal Name at Java.ccc:1417:25
        pushOntoLookaheadStack("NormalAnnotation", "Java.ccc", 1417, 25);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1417:30
        if (!scanToken(LPAREN)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 2;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead - 2;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1417:45
        Token token6 = currentLookaheadToken;
        boolean passedPredicate6 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1417$47(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token6;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1417:66
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$MarkerAnnotation(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1419:20
        if (!scanToken(AT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1419:25
        // NonTerminal Name at Java.ccc:1419:25
        pushOntoLookaheadStack("MarkerAnnotation", "Java.ccc", 1419, 25);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$SingleMemberAnnotation(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1421:26
        if (!scanToken(AT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1421:31
        // NonTerminal Name at Java.ccc:1421:31
        pushOntoLookaheadStack("SingleMemberAnnotation", "Java.ccc", 1421, 31);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1421:36
        if (!scanToken(LPAREN)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1421:50
        // NonTerminal MemberValue at Java.ccc:1421:50
        pushOntoLookaheadStack("SingleMemberAnnotation", "Java.ccc", 1421, 50);
        currentLookaheadProduction = "MemberValue";
        try {
            if (!check$MemberValue(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1421:62
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$MemberValuePairs(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1433:4
        // NonTerminal MemberValuePair at Java.ccc:1433:4
        pushOntoLookaheadStack("MemberValuePairs", "Java.ccc", 1433, 4);
        currentLookaheadProduction = "MemberValuePair";
        try {
            if (!check$MemberValuePair(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:1433:20
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$1433$22(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$MemberValuePair(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1436:20
        if (!scanToken(IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1436:33
        if (!scanToken(ASSIGN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1436:42
        // NonTerminal MemberValue at Java.ccc:1436:42
        pushOntoLookaheadStack("MemberValuePair", "Java.ccc", 1436, 42);
        currentLookaheadProduction = "MemberValue";
        try {
            if (!check$MemberValue(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$MemberValue(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1439:4
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1439$4(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1441$4(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1443$4(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        return false;
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$MemberValueArrayInitializer(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1447:3
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1448:3
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1449$6(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1451:3
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$AnnotationTypeDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:1456:3
        permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE, ABSTRACT, STATIC, STRICTFP);
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1459:3
        // NonTerminal Modifiers at Java.ccc:1459:3
        pushOntoLookaheadStack("AnnotationTypeDeclaration", "Java.ccc", 1459, 3);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1460:3
        if (!scanToken(AT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1460:8
        if (!scanToken(INTERFACE)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1460:25
        // NonTerminal TypeIdentifier at Java.ccc:1460:25
        pushOntoLookaheadStack("AnnotationTypeDeclaration", "Java.ccc", 1460, 25);
        currentLookaheadProduction = "TypeIdentifier";
        try {
            if (!check$TypeIdentifier(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1460:40
        // NonTerminal AnnotationTypeBody at Java.ccc:1460:40
        pushOntoLookaheadStack("AnnotationTypeDeclaration", "Java.ccc", 1460, 40);
        currentLookaheadProduction = "AnnotationTypeBody";
        try {
            if (!check$AnnotationTypeBody(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$AnnotationTypeBody(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1464:3
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:1464:12
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$1464$14(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1464:49
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$AnnotationMethodDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:1468:4
        permissibleModifiers = EnumSet.of(PUBLIC, ABSTRACT);
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1469:4
        // NonTerminal Modifiers at Java.ccc:1469:4
        pushOntoLookaheadStack("AnnotationMethodDeclaration", "Java.ccc", 1469, 4);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1470:4
        // NonTerminal Type at Java.ccc:1470:4
        pushOntoLookaheadStack("AnnotationMethodDeclaration", "Java.ccc", 1470, 4);
        currentLookaheadProduction = "Type";
        try {
            if (!check$Type(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1470:9
        if (!scanToken(IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1470:22
        if (!scanToken(LPAREN)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1470:36
        if (!scanToken(RPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1470:45
        Token token9 = currentLookaheadToken;
        boolean passedPredicate9 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1470$47(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token9;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate9;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1470:62
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$AnnotationTypeMemberDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1474:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!scanToken(SEMICOLON)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1476$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1478$3(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$1480$3(false)) {
                            currentLookaheadToken = token2;
                            remainingLookahead = remainingLookahead2;
                            hitFailure = hitFailure2;
                            if (passedPredicate) return false;
                            passedPredicate = false;
                            if (!check$Java_ccc$1482$3(false)) {
                                currentLookaheadToken = token2;
                                remainingLookahead = remainingLookahead2;
                                hitFailure = hitFailure2;
                                if (passedPredicate) return false;
                                passedPredicate = false;
                                if (!check$Java_ccc$1484$3(false)) {
                                    currentLookaheadToken = token2;
                                    remainingLookahead = remainingLookahead2;
                                    hitFailure = hitFailure2;
                                    if (passedPredicate) return false;
                                    passedPredicate = false;
                                    if (!check$Java_ccc$1486$3(false)) {
                                        currentLookaheadToken = token2;
                                        remainingLookahead = remainingLookahead2;
                                        hitFailure = hitFailure2;
                                        return false;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$DefaultValue(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1489:16
        if (!scanToken(_DEFAULT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1489:27
        // NonTerminal MemberValue at Java.ccc:1489:27
        pushOntoLookaheadStack("DefaultValue", "Java.ccc", 1489, 27);
        currentLookaheadProduction = "MemberValue";
        try {
            if (!check$MemberValue(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$LambdaExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Assertion specified at Java.ccc:1492:3
        if (!(!isInProduction("NewSwitchLabel"))) {
            hitFailure = true;
            return false;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1493:3
        // NonTerminal LambdaLHS at Java.ccc:1493:3
        pushOntoLookaheadStack("LambdaExpression", "Java.ccc", 1493, 3);
        currentLookaheadProduction = "LambdaLHS";
        try {
            if (!check$LambdaLHS(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1493:19
        Token token6 = currentLookaheadToken;
        int remainingLookahead6 = remainingLookahead;
        boolean hitFailure6 = hitFailure;
        boolean passedPredicate6 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1493$19(false)) {
                currentLookaheadToken = token6;
                remainingLookahead = remainingLookahead6;
                hitFailure = hitFailure6;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1493$27(false)) {
                    currentLookaheadToken = token6;
                    remainingLookahead = remainingLookahead6;
                    hitFailure = hitFailure6;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$LambdaLHS(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1496:14
        Token token4 = currentLookaheadToken;
        int remainingLookahead4 = remainingLookahead;
        boolean hitFailure4 = hitFailure;
        boolean passedPredicate4 = passedPredicate;
        try {
            passedPredicate = false;
            if (!scanToken(IDENTIFIER)) {
                currentLookaheadToken = token4;
                remainingLookahead = remainingLookahead4;
                hitFailure = hitFailure4;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!scanToken(UNDERSCORE)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1496$44(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$1496$62(false)) {
                            currentLookaheadToken = token4;
                            remainingLookahead = remainingLookahead4;
                            hitFailure = hitFailure4;
                            return false;
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1496:80
        if (!scanToken(LAMBDA)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$SimpleLambdaLHS(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1500:4
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1500:14
        if (!scanToken(UNDERSCORE, IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:1501:4
        boolean passedPredicate6 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token7 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$1501$5(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token7;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1502:4
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$LambdaParameters(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1506:5
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1507:5
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1508$7(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1517:5
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$LambdaParameter(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:1521:5
        permissibleModifiers = EnumSet.of(FINAL);
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1522:5
        // NonTerminal Modifiers at Java.ccc:1522:5
        pushOntoLookaheadStack("LambdaParameter", "Java.ccc", 1522, 5);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1524:7
        Token token6 = currentLookaheadToken;
        int remainingLookahead6 = remainingLookahead;
        boolean hitFailure6 = hitFailure;
        boolean passedPredicate6 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1524$7(false)) {
                currentLookaheadToken = token6;
                remainingLookahead = remainingLookahead6;
                hitFailure = hitFailure6;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1526$7(false)) {
                    currentLookaheadToken = token6;
                    remainingLookahead = remainingLookahead6;
                    hitFailure = hitFailure6;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        return true;
    }

    private ArrayList<NonTerminalCall> parsingStack = new ArrayList<>();
    private final ArrayList<NonTerminalCall> lookaheadStack = new ArrayList<>();

    private void pushOntoCallStack(String methodName, String fileName, int line, int column) {
        parsingStack.add(new NonTerminalCall("JavaParser", getToken(1).getLocation(), fileName, methodName, line, column));
    }

    private void popCallStack() {
        NonTerminalCall ntc = parsingStack.remove(parsingStack.size() - 1);
        this.currentlyParsedProduction = ntc.productionName;
    }

    private void restoreCallStack(int prevSize) {
        while (parsingStack.size() > prevSize) {
            popCallStack();
        }
    }

    private ListIterator<NonTerminalCall> stackIteratorBackward() {
        final ListIterator<NonTerminalCall> parseStackIterator = parsingStack.listIterator(parsingStack.size());
        final ListIterator<NonTerminalCall> lookaheadStackIterator = lookaheadStack.listIterator(lookaheadStack.size());
        return new ListIterator<NonTerminalCall>() {

            public boolean hasNext() {
                return lookaheadStackIterator.hasPrevious() || parseStackIterator.hasPrevious();
            }

            public NonTerminalCall next() {
                return lookaheadStackIterator.hasPrevious() ? lookaheadStackIterator.previous() : parseStackIterator.previous();
            }

            public NonTerminalCall previous() {
                return parseStackIterator.hasNext() ? parseStackIterator.next() : lookaheadStackIterator.next();
            }

            public boolean hasPrevious() {
                return parseStackIterator.hasNext() || lookaheadStackIterator.hasNext();
            }

            public void add(NonTerminalCall ntc) {
                throw new UnsupportedOperationException();
            }

            public void set(NonTerminalCall ntc) {
                throw new UnsupportedOperationException();
            }

            public void remove() {
                throw new UnsupportedOperationException();
            }

            public int previousIndex() {
                throw new UnsupportedOperationException();
            }

            public int nextIndex() {
                throw new UnsupportedOperationException();
            }

        };
    }

    private void pushOntoLookaheadStack(String methodName, String fileName, int line, int column) {
        lookaheadStack.add(new NonTerminalCall("JavaParser", getToken(1).getLocation(), fileName, methodName, line, column));
    }

    private void popLookaheadStack() {
        NonTerminalCall ntc = lookaheadStack.remove(lookaheadStack.size() - 1);
        this.currentLookaheadProduction = ntc.productionName;
    }

    void dumpLookaheadStack(PrintStream ps) {
        ListIterator<NonTerminalCall> it = lookaheadStack.listIterator(lookaheadStack.size());
        while (it.hasPrevious()) {
            ps.print(it.previous());
        }
    }

    void dumpCallStack(PrintStream ps) {
        ListIterator<NonTerminalCall> it = parsingStack.listIterator(parsingStack.size());
        while (it.hasPrevious()) {
            ps.print(it.previous());
        }
    }

    void dumpLookaheadCallStack(PrintStream ps) {
        ps.println("Current Parser Production is: " + currentlyParsedProduction);
        ps.println("Current Lookahead Production is: " + currentLookaheadProduction);
        ps.println("---Lookahead Stack---");
        dumpLookaheadStack(ps);
        ps.println("---Call Stack---");
        dumpCallStack(ps);
    }

    public boolean isParserTolerant() {
        return false;
    }

    public void setParserTolerant(boolean tolerantParsing) {
        if (tolerantParsing) {
            throw new UnsupportedOperationException("This parser was not built with that feature!");
        }
    }

    private Token consumeToken(TokenType expectedType) {
        Token nextToken = nextToken(lastConsumedToken);
        if (nextToken.getType() != expectedType) {
            nextToken = handleUnexpectedTokenType(expectedType, nextToken);
        }
        this.lastConsumedToken = nextToken;
        this.nextTokenType = null;
        if (buildTree && tokensAreNodes) {
            lastConsumedToken.open();
            pushNode(lastConsumedToken);
            lastConsumedToken.close();
        }
        return lastConsumedToken;
    }

    private Token handleUnexpectedTokenType(TokenType expectedType, Token nextToken) {
        throw new ParseException(nextToken, EnumSet.of(expectedType), parsingStack);
    }

    private boolean buildTree = true;
    private boolean tokensAreNodes = true;
    private boolean unparsedTokensAreNodes = false;

    public boolean isTreeBuildingEnabled() {
        return buildTree;
    }

    public void setUnparsedTokensAreNodes(boolean unparsedTokensAreNodes) {
        this.unparsedTokensAreNodes = unparsedTokensAreNodes;
    }

    public void setTokensAreNodes(boolean tokensAreNodes) {
        this.tokensAreNodes = tokensAreNodes;
    }

    NodeScope currentNodeScope = new NodeScope();

    /**
    * @return the root node of the AST. It only makes sense to call
    * this after a successful parse.
    */
    public Node rootNode() {
        return currentNodeScope.rootNode();
    }

    /**
    * push a node onto the top of the node stack
    * @param n the node to push
    */
    public void pushNode(Node n) {
        currentNodeScope.add(n);
    }

    /**
    * @return the node on the top of the stack, and remove it from the
    * stack.
    */
    public Node popNode() {
        return currentNodeScope.pop();
    }

    /**
    * @return the node currently on the top of the tree-building stack.
    */
    public Node peekNode() {
        return currentNodeScope.peek();
    }

    /**
    * Puts the node on the top of the stack. However, unlike pushNode()
    * it replaces the node that is currently on the top of the stack.
    * This is effectively equivalent to popNode() followed by pushNode(n)
    * @param n the node to poke
    */
    public void pokeNode(Node n) {
        currentNodeScope.poke(n);
    }

    /**
    * Replace the type of the last consumed token and poke it onto the
    * stack.
    */
    protected void replaceTokenType(TokenType tt) {
        lastConsumedToken = lastConsumedToken.replaceType(tt);
        pokeNode(lastConsumedToken);
    }

    /**
    * @return the number of Nodes on the tree-building stack in the current node
    * scope.
    */
    public int nodeArity() {
        return currentNodeScope.size();
    }

    private void clearNodeScope() {
        currentNodeScope.clear();
    }

    private void openNodeScope(Node n) {
        new NodeScope();
        if (n != null) {
            n.setTokenSource(lastConsumedToken.getTokenSource());
            // We set the begin/end offsets based on the ending location
            // of the last consumed token. So, we start with a Node
            // of length zero. Typically this is overridden in the
            // closeNodeScope() method, unless this node has no children
            n.setBeginOffset(lastConsumedToken.getEndOffset());
            n.setEndOffset(n.getBeginOffset());
            n.setTokenSource(this.token_source);
            n.open();
        }
    }

    /* A definite node is constructed from a specified number of
    * children.  That number of nodes are popped from the stack and
    * made the children of the definite node.  Then the definite node
    * is pushed on to the stack.
    * @param n is the node whose scope is being closed
    * @param num is the number of child nodes to pop as children
    * @return @{code true}
    */
    private boolean closeNodeScope(Node n, int num) {
        n.setBeginOffset(lastConsumedToken.getEndOffset());
        n.setEndOffset(lastConsumedToken.getEndOffset());
        currentNodeScope.close();
        ArrayList<Node> nodes = new ArrayList<>();
        for (int i = 0; i < num; i++) {
            nodes.add(popNode());
        }
        Collections.reverse(nodes);
        for (Node child : nodes) {
            if (child.getInputSource() == n.getInputSource()) {
                n.setBeginOffset(child.getBeginOffset());
                break;
            }
        }
        for (Node child : nodes) {
            if (unparsedTokensAreNodes && child instanceof Token) {
                Token tok = (Token) child;
                while (tok.previousCachedToken() != null && tok.previousCachedToken().isUnparsed()) {
                    tok = tok.previousCachedToken();
                }
                boolean locationSet = false;
                while (tok.isUnparsed()) {
                    n.add(tok);
                    if (!locationSet && tok.getInputSource() == n.getInputSource() && tok.getBeginOffset() < n.getBeginOffset()) {
                        n.setBeginOffset(tok.getBeginOffset());
                        locationSet = true;
                    }
                    tok = tok.nextCachedToken();
                }
            }
            if (child.getInputSource() == n.getInputSource()) {
                n.setEndOffset(child.getEndOffset());
            }
            n.add(child);
        }
        n.close();
        pushNode(n);
        return true;
    }

    /**
    * A conditional node is constructed if the condition is true.  All
    * the nodes that have been pushed since the node was opened are
    * made children of the conditional node, which is then pushed
    * on to the stack.  If the condition is false the node is not
    * constructed and they are left on the stack.
    */
    private boolean closeNodeScope(Node n, boolean condition) {
        if (n == null || !condition) {
            currentNodeScope.close();
            return false;
        }
        return closeNodeScope(n, nodeArity());
    }

    public boolean getBuildTree() {
        return buildTree;
    }

    public void setBuildTree(boolean buildTree) {
        this.buildTree = buildTree;
    }


    @SuppressWarnings("serial")
    class NodeScope extends ArrayList<Node> {
        NodeScope parentScope;

        NodeScope() {
            this.parentScope = JavaParser.this.currentNodeScope;
            JavaParser.this.currentNodeScope = this;
        }

        boolean isRootScope() {
            return parentScope == null;
        }

        Node rootNode() {
            NodeScope ns = this;
            while (ns.parentScope != null) {
                ns = ns.parentScope;
            }
            return ns.isEmpty() ? null : ns.get(0);
        }

        Node peek() {
            if (isEmpty()) {
                return parentScope == null ? null : parentScope.peek();
            }
            return get(size() - 1);
        }

        Node pop() {
            return isEmpty() ? parentScope.pop() : remove(size() - 1);
        }

        void poke(Node n) {
            if (isEmpty()) {
                parentScope.poke(n);
            } else {
                set(size() - 1, n);
            }
        }

        void close() {
            parentScope.addAll(this);
            JavaParser.this.currentNodeScope = parentScope;
        }

        int nestingLevel() {
            int result = 0;
            NodeScope parent = this;
            while (parent.parentScope != null) {
                result++;
                parent = parent.parentScope;
            }
            return result;
        }

        public NodeScope clone() {
            NodeScope clone = (NodeScope) super.clone();
            if (parentScope != null) {
                clone.parentScope = parentScope.clone();
            }
            return clone;
        }

    }

}


