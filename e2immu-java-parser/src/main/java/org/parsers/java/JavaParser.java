/* Generated by: CongoCC Parser Generator. JavaParser.java  */
package org.parsers.java;

import java.io.IOException;
import java.io.PrintStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.charset.Charset;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.ListIterator;
import java.util.concurrent.CancellationException;
import org.parsers.java.Token.TokenType;
import static org.parsers.java.Token.TokenType.*;
import org.parsers.java.ast.ModularCompilationUnit;
import org.parsers.java.ast.ModuleDirective;
import org.parsers.java.ast.RequiresDirective;
import org.parsers.java.ast.ExportsDirective;
import org.parsers.java.ast.OpensDirective;
import org.parsers.java.ast.UsesDirective;
import org.parsers.java.ast.ProvidesDirective;
import org.parsers.java.ast.CompilationUnit;
import org.parsers.java.ast.PackageDeclaration;
import org.parsers.java.ast.ImportDeclaration;
import org.parsers.java.ast.Modifiers;
import org.parsers.java.ast.EmptyDeclaration;
import org.parsers.java.ast.ClassDeclaration;
import org.parsers.java.ast.InterfaceDeclaration;
import org.parsers.java.ast.PermitsList;
import org.parsers.java.ast.ExtendsList;
import org.parsers.java.ast.ImplementsList;
import org.parsers.java.ast.EnumDeclaration;
import org.parsers.java.ast.EnumBody;
import org.parsers.java.ast.RecordDeclaration;
import org.parsers.java.ast.RecordHeader;
import org.parsers.java.ast.RecordComponent;
import org.parsers.java.ast.RecordBody;
import org.parsers.java.ast.CompactConstructorDeclaration;
import org.parsers.java.ast.EnumConstant;
import org.parsers.java.ast.TypeParameters;
import org.parsers.java.ast.TypeParameter;
import org.parsers.java.ast.TypeBound;
import org.parsers.java.ast.ClassOrInterfaceBody;
import org.parsers.java.ast.FieldDeclaration;
import org.parsers.java.ast.VariableDeclarator;
import org.parsers.java.ast.VariableDeclaratorId;
import org.parsers.java.ast.ArrayInitializer;
import org.parsers.java.ast.MethodDeclaration;
import org.parsers.java.ast.FormalParameters;
import org.parsers.java.ast.FormalParameter;
import org.parsers.java.ast.ConstructorDeclaration;
import org.parsers.java.ast.ExplicitConstructorInvocation;
import org.parsers.java.ast.Initializer;
import org.parsers.java.ast.ReferenceType;
import org.parsers.java.ast.ObjectType;
import org.parsers.java.ast.DiamondOperator;
import org.parsers.java.ast.TypeArguments;
import org.parsers.java.ast.TypeArgument;
import org.parsers.java.ast.WildcardBounds;
import org.parsers.java.ast.PrimitiveType;
import org.parsers.java.ast.PrimitiveArrayType;
import org.parsers.java.ast.ReturnType;
import org.parsers.java.ast.Name;
import org.parsers.java.ast.ThrowsList;
import org.parsers.java.ast.Expression;
import org.parsers.java.ast.AssignmentExpression;
import org.parsers.java.ast.TernaryExpression;
import org.parsers.java.ast.ConditionalOrExpression;
import org.parsers.java.ast.ConditionalAndExpression;
import org.parsers.java.ast.InclusiveOrExpression;
import org.parsers.java.ast.ExclusiveOrExpression;
import org.parsers.java.ast.AndExpression;
import org.parsers.java.ast.EqualityExpression;
import org.parsers.java.ast.InstanceOfExpression;
import org.parsers.java.ast.RelationalExpression;
import org.parsers.java.ast.ShiftExpression;
import org.parsers.java.ast.AdditiveExpression;
import org.parsers.java.ast.MultiplicativeExpression;
import org.parsers.java.ast.UnaryExpression;
import org.parsers.java.ast.PreIncrementExpression;
import org.parsers.java.ast.PreDecrementExpression;
import org.parsers.java.ast.UnaryExpressionNotPlusMinus;
import org.parsers.java.ast.PostfixExpression;
import org.parsers.java.ast.SwitchExpression;
import org.parsers.java.ast.CastExpression;
import org.parsers.java.ast.ObjectCastExpression;
import org.parsers.java.ast.LiteralExpression;
import org.parsers.java.ast.DotThis;
import org.parsers.java.ast.DotSuper;
import org.parsers.java.ast.DotNew;
import org.parsers.java.ast.ArrayAccess;
import org.parsers.java.ast.DotName;
import org.parsers.java.ast.MethodReference;
import org.parsers.java.ast.MethodCall;
import org.parsers.java.ast.Parentheses;
import org.parsers.java.ast.ClassLiteral;
import org.parsers.java.ast.InvocationArguments;
import org.parsers.java.ast.AllocationExpression;
import org.parsers.java.ast.ArrayDimsAndInits;
import org.parsers.java.ast.Label;
import org.parsers.java.ast.LabeledStatement;
import org.parsers.java.ast.AssertStatement;
import org.parsers.java.ast.CodeBlock;
import org.parsers.java.ast.LocalVariableDeclaration;
import org.parsers.java.ast.NoVarDeclaration;
import org.parsers.java.ast.VarDeclaration;
import org.parsers.java.ast.EmptyStatement;
import org.parsers.java.ast.StatementExpression;
import org.parsers.java.ast.ExpressionStatement;
import org.parsers.java.ast.CasePattern;
import org.parsers.java.ast.RecordPattern;
import org.parsers.java.ast.WhenClause;
import org.parsers.java.ast.SwitchStatement;
import org.parsers.java.ast.ClassicCaseStatement;
import org.parsers.java.ast.NewSwitchLabel;
import org.parsers.java.ast.ClassicSwitchLabel;
import org.parsers.java.ast.NewCaseStatement;
import org.parsers.java.ast.IfStatement;
import org.parsers.java.ast.WhileStatement;
import org.parsers.java.ast.DoStatement;
import org.parsers.java.ast.BasicForStatement;
import org.parsers.java.ast.EnhancedForStatement;
import org.parsers.java.ast.BreakStatement;
import org.parsers.java.ast.YieldStatement;
import org.parsers.java.ast.ContinueStatement;
import org.parsers.java.ast.ReturnStatement;
import org.parsers.java.ast.ThrowStatement;
import org.parsers.java.ast.SynchronizedStatement;
import org.parsers.java.ast.TryStatement;
import org.parsers.java.ast.ResourcesInTryBlock;
import org.parsers.java.ast.CatchBlock;
import org.parsers.java.ast.FinallyBlock;
import org.parsers.java.ast.NormalAnnotation;
import org.parsers.java.ast.MarkerAnnotation;
import org.parsers.java.ast.SingleMemberAnnotation;
import org.parsers.java.ast.MemberValuePairs;
import org.parsers.java.ast.MemberValuePair;
import org.parsers.java.ast.MemberValue;
import org.parsers.java.ast.MemberValueArrayInitializer;
import org.parsers.java.ast.AnnotationTypeDeclaration;
import org.parsers.java.ast.AnnotationTypeBody;
import org.parsers.java.ast.AnnotationMethodDeclaration;
import org.parsers.java.ast.AnnotationTypeMemberDeclaration;
import org.parsers.java.ast.DefaultValue;
import org.parsers.java.ast.LambdaExpression;
import org.parsers.java.ast.LambdaLHS;
import org.parsers.java.ast.LambdaParameters;
import org.parsers.java.ast.LambdaParameter;


public class JavaParser {
    private EnumSet<TokenType> permissibleModifiers;
    static final int UNLIMITED = Integer.MAX_VALUE;
    // The last token successfully "consumed"
    Token lastConsumedToken;
    private TokenType nextTokenType;
    // Normally null when parsing, populated when doing lookahead
    private Token currentLookaheadToken;
    private int remainingLookahead;
    private boolean hitFailure;
    private boolean passedPredicate;
    private int passedPredicateThreshold = -1;
    private String currentlyParsedProduction;
    private String currentLookaheadProduction;
    private int lookaheadRoutineNesting;
    private final boolean legacyGlitchyLookahead = false;
    private final Token DUMMY_START_TOKEN = new Token();
    private boolean cancelled;

    public void cancel() {
        cancelled = true;
    }

    public boolean isCancelled() {
        return cancelled;
    }

    /** Generated Lexer. */
    private JavaLexer token_source;

    public void setInputSource(String inputSource) {
        token_source.setInputSource(inputSource);
    }

    String getInputSource() {
        return token_source.getInputSource();
    }

    //=================================
    // Generated constructors
    //=================================
    public JavaParser(String inputSource, CharSequence content) {
        this(new JavaLexer(inputSource, content));
    }

    public JavaParser(CharSequence content) {
        this("input", content);
    }

    /**
    * @param inputSource just the name of the input source (typically the filename) that
    * will be used in error messages and so on.
    * @param path The location (typically the filename) from which to get the input to parse
    */
    public JavaParser(String inputSource, Path path) throws IOException {
        this(inputSource, TokenSource.stringFromBytes(Files.readAllBytes(path)));
    }

    public JavaParser(String inputSource, Path path, Charset charset) throws IOException {
        this(inputSource, TokenSource.stringFromBytes(Files.readAllBytes(path), charset));
    }

    /**
    * @param path The location (typically the filename) from which to get the input to parse
    */
    public JavaParser(Path path) throws IOException {
        this(path.toString(), path);
    }

    /** Constructor with user supplied Lexer. */
    public JavaParser(JavaLexer lexer) {
        token_source = lexer;
        lastConsumedToken = DUMMY_START_TOKEN;
        lastConsumedToken.setTokenSource(lexer);
    }

    /**
    * Set the starting line/column for location reporting.
    * By default, this is 1,1.
    */
    public void setStartingPos(int startingLine, int startingColumn) {
        token_source.setStartingPos(startingLine, startingColumn);
    }

    // this method is for testing only.
    public boolean getLegacyGlitchyLookahead() {
        return legacyGlitchyLookahead;
    }

    // If the next token is cached, it returns that
    // Otherwise, it goes to the token_source, i.e. the Lexer.
    private Token nextToken(final Token tok) {
        Token result = token_source.getNextToken(tok);
        while (result.isUnparsed()) {
            result = token_source.getNextToken(result);
        }
        nextTokenType = null;
        return result;
    }

    /**
    * @return the next Token off the stream. This is the same as #getToken(1)
    */
    public final Token getNextToken() {
        return getToken(1);
    }

    /**
    * @param index how many tokens to look ahead
    * @return the specific regular (i.e. parsed) Token index ahead/behind in the stream.
    * If we are in a lookahead, it looks ahead from the currentLookaheadToken
    * Otherwise, it is the lastConsumedToken. If you pass in a negative
    * number it goes backward.
    */
    public final Token getToken(final int index) {
        Token t = currentLookaheadToken == null ? lastConsumedToken : currentLookaheadToken;
        for (int i = 0; i < index; i++) {
            t = nextToken(t);
        }
        for (int i = 0; i > index; i--) {
            t = t.getPrevious();
            if (t == null) break;
        }
        return t;
    }

    private String tokenImage(int n) {
        Token t = getToken(n);
        return t == null ? null : t.toString();
    }

    private TokenType getTokenType(int n) {
        Token t = getToken(n);
        return t == null ? null : t.getType();
    }

    private boolean checkNextTokenImage(String img, String...additionalImages) {
        String nextImage = getToken(1).toString();
        if (nextImage.equals(img)) return true;
        for (String image : additionalImages) {
            if (nextImage.equals(image)) return true;
        }
        return false;
    }

    private TokenType nextTokenType() {
        if (nextTokenType == null) {
            nextTokenType = nextToken(lastConsumedToken).getType();
        }
        return nextTokenType;
    }

    boolean activateTokenTypes(TokenType...types) {
        if (token_source.activeTokenTypes == null) return false;
        boolean result = false;
        for (TokenType tt : types) {
            result |= token_source.activeTokenTypes.add(tt);
        }
        if (result) {
            token_source.reset(getToken(0));
            nextTokenType = null;
        }
        return result;
    }

    private void uncacheTokens() {
        token_source.reset(getToken(0));
    }

    boolean deactivateTokenTypes(TokenType...types) {
        boolean result = false;
        if (token_source.activeTokenTypes == null) {
            token_source.activeTokenTypes = EnumSet.allOf(TokenType.class);
        }
        for (TokenType tt : types) {
            result |= token_source.activeTokenTypes.remove(tt);
        }
        if (result) {
            token_source.reset(getToken(0));
            nextTokenType = null;
        }
        return result;
    }

    /*
    * This method generalizes the failure of an assertion, i.e. the routine
    * works both when in lookahead and in parsing. If the current lookahead
    * token is null, then we are not in a lookahead, i.e. we are parsing, so
    * it just throws the exception. If we are in a lookahead routine, we set
    * the hitFilaure flag to true, so that the lookahead routine we're in will
    * fail at the first opportunity.
    */
    private void fail(String message, Token token) {
        if (currentLookaheadToken == null) {
            throw new ParseException(message, token, parsingStack);
        }
        hitFailure = true;
    }

    private static final HashMap<TokenType[], EnumSet<TokenType>> enumSetCache = new HashMap<>();

    private static EnumSet<TokenType> tokenTypeSet(TokenType first, TokenType...rest) {
        TokenType[] key = new TokenType[1 + rest.length];
        key[0] = first;
        if (rest.length > 0) {
            System.arraycopy(rest, 0, key, 1, rest.length);
        }
        Arrays.sort(key);
        if (enumSetCache.containsKey(key)) {
            return enumSetCache.get(key);
        }
        EnumSet<TokenType> result = (rest.length == 0) ? EnumSet.of(first) : EnumSet.of(first, rest);
        enumSetCache.put(key, result);
        return result;
    }

    //====================================================================//
    // Start of methods for BNF Productions                               //
    // This code is generated by the ParserProductions.java.ftl template. //
    //====================================================================//
    private static final EnumSet<TokenType> Root_FIRST_SET = Root_FIRST_SET_init();

    private static EnumSet<TokenType> Root_FIRST_SET_init() {
        return tokenTypeSet(EOF, ABSTRACT, CLASS, _DEFAULT, ENUM, FINAL, _IMPORT, INTERFACE, NATIVE, PACKAGE, PRIVATE, PROTECTED, PUBLIC, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VOLATILE, SEALED, NON_SEALED, MODULE, OPEN, SEMICOLON, AT, IDENTIFIER);
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:31:1
    final public Node Root() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Root";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:31:1
        // Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:32:4
        if (scan$Java_ccc$32$4()) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:32:4
            pushOntoCallStack("Root", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 32, 4);
            try {
                ModularCompilationUnit();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:32:27
            return peekNode();
        } else if (scan$Java_ccc$34$4()) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:34:4
            pushOntoCallStack("Root", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 34, 4);
            try {
                CompilationUnit();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:34:20
            return peekNode();
        } else {
            pushOntoCallStack("Root", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 32, 4);
            throw new ParseException(lastConsumedToken, Root_FIRST_SET, parsingStack);
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:37:1
    final public void ModularCompilationUnit() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ModularCompilationUnit";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:37:1
        ModularCompilationUnit thisProduction = null;
        if (buildTree) {
            thisProduction = new ModularCompilationUnit();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:38:4
            while (true) {
                if (!(nextTokenType() == _IMPORT)) break;
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:38:5
                pushOntoCallStack("ModularCompilationUnit", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 38, 5);
                try {
                    ImportDeclaration();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:39:4
            while (true) {
                if (!(scan$Java_ccc$39$5())) break;
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:39:5
                pushOntoCallStack("ModularCompilationUnit", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 39, 5);
                try {
                    Annotation();
                } finally {
                    popCallStack();
                }
            }
            // Code for Assertion specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:40:4
            if (!(checkNextTokenImage("open") || checkNextTokenImage("module"))) {
                fail("Assertion at: /Users/bnaudts/git/congo/examples/java/Java.ccc:40:4 failed. ", getToken(1));
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:42:4
            if (scan$Java_ccc$43$7()) {
                EnumSet<TokenType> previousActives44 = EnumSet.copyOf(token_source.activeTokenTypes);
                boolean somethingChanged45 = false;
                somethingChanged45 = activateTokenTypes(OPEN);
                try {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:43:29
                    consumeToken(OPEN);
                } finally {
                    token_source.activeTokenTypes = previousActives44;
                    if (somethingChanged45) {
                        token_source.reset(lastConsumedToken);
                        nextTokenType = null;
                    }
                }
            }
            EnumSet<TokenType> previousActives57 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged58 = false;
            somethingChanged58 = activateTokenTypes(MODULE);
            try {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:45:28
                consumeToken(MODULE);
            } finally {
                token_source.activeTokenTypes = previousActives57;
                if (somethingChanged58) {
                    token_source.reset(lastConsumedToken);
                    nextTokenType = null;
                }
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:46:4
            pushOntoCallStack("ModularCompilationUnit", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 46, 4);
            try {
                Name();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:47:4
            consumeToken(LBRACE);
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:48:4
            while (true) {
                if (!(scan$Java_ccc$48$5())) break;
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:48:25
                pushOntoCallStack("ModularCompilationUnit", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 48, 25);
                try {
                    ModuleDirective();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:49:4
            consumeToken(RBRACE);
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:50:4
            consumeToken(EOF);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> ModuleDirective_FIRST_SET = tokenTypeSet(EXPORTS, OPENS, PROVIDES, REQUIRES, USES);

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:53:1
    final public void ModuleDirective() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ModuleDirective";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:53:1
        ModuleDirective thisProduction = null;
        if (buildTree) {
            thisProduction = new ModuleDirective();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:54:4
            if (scan$Java_ccc$54$4()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:54:4
                pushOntoCallStack("ModuleDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 54, 4);
                try {
                    RequiresDirective();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$56$4()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:56:4
                pushOntoCallStack("ModuleDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 56, 4);
                try {
                    ExportsDirective();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$58$4()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:58:4
                pushOntoCallStack("ModuleDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 58, 4);
                try {
                    OpensDirective();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$60$4()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:60:4
                pushOntoCallStack("ModuleDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 60, 4);
                try {
                    UsesDirective();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$62$4()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:62:4
                pushOntoCallStack("ModuleDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 62, 4);
                try {
                    ProvidesDirective();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("ModuleDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 54, 4);
                throw new ParseException(lastConsumedToken, ModuleDirective_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:65:1
    final public void RequiresDirective() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "RequiresDirective";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:65:1
        RequiresDirective thisProduction = null;
        if (buildTree) {
            thisProduction = new RequiresDirective();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            EnumSet<TokenType> previousActives10 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged11 = false;
            somethingChanged11 = activateTokenTypes(REQUIRES, TRANSITIVE);
            try {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:66:42
                consumeToken(REQUIRES);
                // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:66:53
                // Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:66:54
                if (nextTokenType() == TRANSITIVE) {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:66:54
                    consumeToken(TRANSITIVE);
                } else if (nextTokenType() == STATIC) {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:66:67
                    consumeToken(STATIC);
                }
            } finally {
                token_source.activeTokenTypes = previousActives10;
                if (somethingChanged11) {
                    token_source.reset(lastConsumedToken);
                    nextTokenType = null;
                }
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:67:4
            pushOntoCallStack("RequiresDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 67, 4);
            try {
                Name();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:68:4
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:71:1
    final public void ExportsDirective() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ExportsDirective";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:71:1
        ExportsDirective thisProduction = null;
        if (buildTree) {
            thisProduction = new ExportsDirective();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            EnumSet<TokenType> previousActives10 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged11 = false;
            somethingChanged11 = activateTokenTypes(EXPORTS);
            try {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:72:29
                consumeToken(EXPORTS);
            } finally {
                token_source.activeTokenTypes = previousActives10;
                if (somethingChanged11) {
                    token_source.reset(lastConsumedToken);
                    nextTokenType = null;
                }
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:73:4
            pushOntoCallStack("ExportsDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 73, 4);
            try {
                Name();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:74:4
            if (scan$Java_ccc$75$6()) {
                EnumSet<TokenType> previousActives35 = EnumSet.copyOf(token_source.activeTokenTypes);
                boolean somethingChanged36 = false;
                somethingChanged36 = activateTokenTypes(TO);
                try {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:75:26
                    consumeToken(TO);
                } finally {
                    token_source.activeTokenTypes = previousActives35;
                    if (somethingChanged36) {
                        token_source.reset(lastConsumedToken);
                        nextTokenType = null;
                    }
                }
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:76:6
                pushOntoCallStack("ExportsDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 76, 6);
                try {
                    Name();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:76:11
                while (true) {
                    if (!(nextTokenType() == COMMA)) break;
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:76:12
                    consumeToken(COMMA);
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:76:20
                    pushOntoCallStack("ExportsDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 76, 20);
                    try {
                        Name();
                    } finally {
                        popCallStack();
                    }
                }
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:78:4
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:81:1
    final public void OpensDirective() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "OpensDirective";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:81:1
        OpensDirective thisProduction = null;
        if (buildTree) {
            thisProduction = new OpensDirective();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            EnumSet<TokenType> previousActives10 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged11 = false;
            somethingChanged11 = activateTokenTypes(OPENS);
            try {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:82:27
                consumeToken(OPENS);
            } finally {
                token_source.activeTokenTypes = previousActives10;
                if (somethingChanged11) {
                    token_source.reset(lastConsumedToken);
                    nextTokenType = null;
                }
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:83:4
            pushOntoCallStack("OpensDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 83, 4);
            try {
                Name();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:84:4
            if (scan$Java_ccc$85$6()) {
                EnumSet<TokenType> previousActives35 = EnumSet.copyOf(token_source.activeTokenTypes);
                boolean somethingChanged36 = false;
                somethingChanged36 = activateTokenTypes(TO);
                try {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:85:26
                    consumeToken(TO);
                } finally {
                    token_source.activeTokenTypes = previousActives35;
                    if (somethingChanged36) {
                        token_source.reset(lastConsumedToken);
                        nextTokenType = null;
                    }
                }
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:86:6
                pushOntoCallStack("OpensDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 86, 6);
                try {
                    Name();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:86:11
                while (true) {
                    if (!(nextTokenType() == COMMA)) break;
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:86:12
                    consumeToken(COMMA);
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:86:20
                    pushOntoCallStack("OpensDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 86, 20);
                    try {
                        Name();
                    } finally {
                        popCallStack();
                    }
                }
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:88:4
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:91:1
    final public void UsesDirective() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "UsesDirective";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:91:1
        UsesDirective thisProduction = null;
        if (buildTree) {
            thisProduction = new UsesDirective();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            EnumSet<TokenType> previousActives10 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged11 = false;
            somethingChanged11 = activateTokenTypes(USES);
            try {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:92:27
                consumeToken(USES);
            } finally {
                token_source.activeTokenTypes = previousActives10;
                if (somethingChanged11) {
                    token_source.reset(lastConsumedToken);
                    nextTokenType = null;
                }
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:93:5
            pushOntoCallStack("UsesDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 93, 5);
            try {
                Name();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:94:5
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:97:1
    final public void ProvidesDirective() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ProvidesDirective";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:97:1
        ProvidesDirective thisProduction = null;
        if (buildTree) {
            thisProduction = new ProvidesDirective();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            EnumSet<TokenType> previousActives10 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged11 = false;
            somethingChanged11 = activateTokenTypes(PROVIDES);
            try {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:98:30
                consumeToken(PROVIDES);
            } finally {
                token_source.activeTokenTypes = previousActives10;
                if (somethingChanged11) {
                    token_source.reset(lastConsumedToken);
                    nextTokenType = null;
                }
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:99:5
            pushOntoCallStack("ProvidesDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 99, 5);
            try {
                Name();
            } finally {
                popCallStack();
            }
            EnumSet<TokenType> previousActives27 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged28 = false;
            somethingChanged28 = activateTokenTypes(WITH);
            try {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:100:27
                consumeToken(WITH);
            } finally {
                token_source.activeTokenTypes = previousActives27;
                if (somethingChanged28) {
                    token_source.reset(lastConsumedToken);
                    nextTokenType = null;
                }
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:101:5
            pushOntoCallStack("ProvidesDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 101, 5);
            try {
                Name();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:102:5
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:102:6
                consumeToken(COMMA);
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:102:14
                pushOntoCallStack("ProvidesDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 102, 14);
                try {
                    Name();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:103:5
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:106:1
    final public CompilationUnit CompilationUnit() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "CompilationUnit";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:106:1
        CompilationUnit thisProduction = null;
        if (buildTree) {
            thisProduction = new CompilationUnit();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:107:3
            if (scan$Java_ccc$107$5()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:107:5
                pushOntoCallStack("CompilationUnit", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 107, 5);
                try {
                    PackageDeclaration();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:108:3
            while (true) {
                if (!(nextTokenType() == _IMPORT)) break;
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:108:5
                pushOntoCallStack("CompilationUnit", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 108, 5);
                try {
                    ImportDeclaration();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:109:3
            while (true) {
                if (!(scan$Java_ccc$109$5())) break;
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:109:5
                pushOntoCallStack("CompilationUnit", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 109, 5);
                try {
                    TypeDeclaration();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:110:3
            if (scan$Java_ccc$112$5()) {
                // Code for Assertion specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:112:5
                if (!(getTokenType(1) != RBRACE)) {
                    fail("Assertion at: /Users/bnaudts/git/congo/examples/java/Java.ccc:112:5 failed. ", getToken(1));
                }
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:113:5
                consumeToken(EOF);
            }
            // Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:115:3
            return thisProduction;
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:127:1
    final public void PackageDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "PackageDeclaration";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:127:1
        PackageDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new PackageDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:128:5
            while (true) {
                if (!(scan$Java_ccc$128$6())) break;
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:128:6
                pushOntoCallStack("PackageDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 128, 6);
                try {
                    Annotation();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:129:5
            consumeToken(PACKAGE);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:131:5
            pushOntoCallStack("PackageDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 131, 5);
            try {
                Name();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:132:5
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:142:1
    final public void ImportDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ImportDeclaration";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:142:1
        ImportDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new ImportDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:142:21
            consumeToken(_IMPORT);
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:142:31
            if (nextTokenType() == STATIC) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:142:33
                consumeToken(STATIC);
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:142:44
            pushOntoCallStack("ImportDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 142, 44);
            try {
                Name();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:142:49
            if (nextTokenType() == DOT) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:142:51
                consumeToken(DOT);
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:142:57
                consumeToken(STAR);
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:142:66
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:144:1
    final public void Modifiers() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Modifiers";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:144:1
        Modifiers thisProduction = null;
        if (buildTree) {
            thisProduction = new Modifiers();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:145:2
            while (true) {
                // Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:146:3
                if (scan$Java_ccc$146$3()) {
                    if (nextTokenType() == PUBLIC) {
                        // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:150:4
                        consumeToken(PUBLIC);
                    } else if (nextTokenType() == STATIC) {
                        // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:150:13
                        consumeToken(STATIC);
                    } else if (nextTokenType() == PROTECTED) {
                        // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:150:22
                        consumeToken(PROTECTED);
                    } else if (nextTokenType() == PRIVATE) {
                        // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:150:34
                        consumeToken(PRIVATE);
                    } else if (nextTokenType() == FINAL) {
                        // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:150:45
                        consumeToken(FINAL);
                    } else if (nextTokenType() == ABSTRACT) {
                        // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:150:53
                        consumeToken(ABSTRACT);
                    } else if (nextTokenType() == SYNCHRONIZED) {
                        // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:151:5
                        consumeToken(SYNCHRONIZED);
                    } else if (nextTokenType() == NATIVE) {
                        // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:151:20
                        consumeToken(NATIVE);
                    } else if (nextTokenType() == TRANSIENT) {
                        // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:151:29
                        consumeToken(TRANSIENT);
                    } else if (nextTokenType() == VOLATILE) {
                        // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:151:41
                        consumeToken(VOLATILE);
                    } else if (nextTokenType() == STRICTFP) {
                        // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:151:52
                        consumeToken(STRICTFP);
                    } else if (nextTokenType() == _DEFAULT) {
                        // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:152:5
                        consumeToken(_DEFAULT);
                    } else {
                        pushOntoCallStack("Modifiers", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 150, 4);
                        throw new ParseException(lastConsumedToken, first_set$Java_ccc$150$4, parsingStack);
                    }
                    // Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:153:3
                    if (permissibleModifiers != null) {
                        TokenType tt = getTokenType(0);
                        switch(tt) {
                            case ABSTRACT : 
                            case FINAL : 
                                permissibleModifiers.remove(ABSTRACT);
                                permissibleModifiers.remove(FINAL);
                                break;
                            case PRIVATE : 
                            case PROTECTED : 
                            case PUBLIC : 
                                permissibleModifiers.remove(PRIVATE);
                                permissibleModifiers.remove(PROTECTED);
                                permissibleModifiers.remove(PUBLIC);
                                break;
                            default : 
                                permissibleModifiers.remove(lastConsumedToken.getType());
                        }
                    }
                } else if (scan$Java_ccc$175$3()) {
                    EnumSet<TokenType> previousActives131 = EnumSet.copyOf(token_source.activeTokenTypes);
                    boolean somethingChanged132 = false;
                    somethingChanged132 = activateTokenTypes(SEALED, NON_SEALED);
                    try {
                        if (nextTokenType() == SEALED) {
                            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:189:39
                            consumeToken(SEALED);
                        } else if (nextTokenType() == NON_SEALED) {
                            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:189:48
                            consumeToken(NON_SEALED);
                        } else {
                            pushOntoCallStack("Modifiers", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 189, 39);
                            throw new ParseException(lastConsumedToken, first_set$Java_ccc$189$39, parsingStack);
                        }
                    } finally {
                        token_source.activeTokenTypes = previousActives131;
                        if (somethingChanged132) {
                            token_source.reset(lastConsumedToken);
                            nextTokenType = null;
                        }
                    }
                    // Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:190:3
                    if (permissibleModifiers != null) {
                        permissibleModifiers.remove(SEALED);
                        permissibleModifiers.remove(NON_SEALED);
                    }
                } else if (scan$Java_ccc$197$3()) {
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:197:3
                    pushOntoCallStack("Modifiers", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 197, 3);
                    try {
                        Annotation();
                    } finally {
                        popCallStack();
                    }
                } else {
                    break;
                }
            }
            // Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:199:2
            permissibleModifiers = null;
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:206:1
    final public void TypeDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "TypeDeclaration";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:206:1
        if (nextTokenType() == SEMICOLON) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:209:5
            pushOntoCallStack("TypeDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 209, 5);
            try {
                EmptyDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$211$5()) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:211:5
            pushOntoCallStack("TypeDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 211, 5);
            try {
                AnnotationTypeDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$213$5()) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:213:5
            pushOntoCallStack("TypeDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 213, 5);
            try {
                ClassDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$215$5()) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:215:5
            pushOntoCallStack("TypeDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 215, 5);
            try {
                InterfaceDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$217$5()) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:217:5
            pushOntoCallStack("TypeDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 217, 5);
            try {
                EnumDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$219$5()) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:219:5
            pushOntoCallStack("TypeDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 219, 5);
            try {
                RecordDeclaration();
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("TypeDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 209, 5);
            throw new ParseException(lastConsumedToken, first_set$Java_ccc$209$5, parsingStack);
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:246:1
    final public void EmptyDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "EmptyDeclaration";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:246:1
        EmptyDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new EmptyDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:246:21
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:248:1
    final public void TypeIdentifier() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "TypeIdentifier";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:248:1
        // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:249:4
        consumeToken(IDENTIFIER);
        // Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:250:4
        String temp = tokenImage(0);
        // Code for Assertion specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:251:4
        if (!(!temp.equals("record") && !temp.equals("var") && !temp.equals("permits") && !temp.equals("sealed") && !temp.equals("yield"))) {
            fail("Assertion at: /Users/bnaudts/git/congo/examples/java/Java.ccc:251:4 failed. " + "Illegal type name " + temp, getToken(1));
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:260:1
    final public void ClassDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ClassDeclaration";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:260:1
        ClassDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new ClassDeclaration();
            openNodeScope(thisProduction);
        }
        permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE, ABSTRACT, FINAL, STATIC, STRICTFP, SEALED, NON_SEALED);
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:265:3
            pushOntoCallStack("ClassDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 265, 3);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:266:3
            consumeToken(CLASS);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:267:3
            pushOntoCallStack("ClassDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 267, 3);
            try {
                TypeIdentifier();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:268:3
            if (nextTokenType() == LT) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:268:5
                pushOntoCallStack("ClassDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 268, 5);
                try {
                    TypeParameters();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:269:3
            if (nextTokenType() == EXTENDS) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:269:5
                pushOntoCallStack("ClassDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 269, 5);
                try {
                    ExtendsList();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:270:3
            if (nextTokenType() == IMPLEMENTS) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:270:5
                pushOntoCallStack("ClassDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 270, 5);
                try {
                    ImplementsList();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:271:3
            if (scan$Java_ccc$271$5()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:271:5
                pushOntoCallStack("ClassDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 271, 5);
                try {
                    PermitsList();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:272:3
            pushOntoCallStack("ClassDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 272, 3);
            try {
                ClassOrInterfaceBody();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:275:1
    final public void InterfaceDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "InterfaceDeclaration";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:275:1
        InterfaceDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new InterfaceDeclaration();
            openNodeScope(thisProduction);
        }
        permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE, ABSTRACT, STATIC, STRICTFP, SEALED, NON_SEALED);
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:280:3
            pushOntoCallStack("InterfaceDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 280, 3);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:281:3
            consumeToken(INTERFACE);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:282:3
            pushOntoCallStack("InterfaceDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 282, 3);
            try {
                TypeIdentifier();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:283:3
            if (nextTokenType() == LT) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:283:5
                pushOntoCallStack("InterfaceDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 283, 5);
                try {
                    TypeParameters();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:284:3
            if (nextTokenType() == EXTENDS) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:284:5
                pushOntoCallStack("InterfaceDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 284, 5);
                try {
                    ExtendsList();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:285:3
            if (scan$Java_ccc$285$5()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:285:5
                pushOntoCallStack("InterfaceDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 285, 5);
                try {
                    PermitsList();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:286:3
            pushOntoCallStack("InterfaceDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 286, 3);
            try {
                ClassOrInterfaceBody();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:289:1
    final public void PermitsList() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "PermitsList";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:289:1
        PermitsList thisProduction = null;
        if (buildTree) {
            thisProduction = new PermitsList();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            if (nextTokenType() == PERMITS) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:292:7
                consumeToken(PERMITS);
            } else if (nextTokenType() == IDENTIFIER) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:294:7
                consumeToken(IDENTIFIER);
                // Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:295:7
                replaceTokenType(TokenType.PERMITS);
            } else {
                pushOntoCallStack("PermitsList", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 292, 7);
                throw new ParseException(lastConsumedToken, first_set$Java_ccc$292$7, parsingStack);
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:299:4
            pushOntoCallStack("PermitsList", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 299, 4);
            try {
                ObjectType();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:300:4
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:300:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:300:13
                pushOntoCallStack("PermitsList", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 300, 13);
                try {
                    ObjectType();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:303:1
    final public void ExtendsList() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ExtendsList";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:303:1
        ExtendsList thisProduction = null;
        if (buildTree) {
            thisProduction = new ExtendsList();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:304:4
            consumeToken(EXTENDS);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:305:4
            pushOntoCallStack("ExtendsList", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 305, 4);
            try {
                ObjectType();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:306:4
            while (true) {
                if (!(scan$Java_ccc$307$6())) break;
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:308:6
                consumeToken(COMMA);
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:308:14
                pushOntoCallStack("ExtendsList", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 308, 14);
                try {
                    ObjectType();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:320:1
    final public void ImplementsList() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ImplementsList";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:320:1
        ImplementsList thisProduction = null;
        if (buildTree) {
            thisProduction = new ImplementsList();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:321:4
            consumeToken(IMPLEMENTS);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:321:17
            pushOntoCallStack("ImplementsList", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 321, 17);
            try {
                ObjectType();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:322:4
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:323:6
                consumeToken(COMMA);
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:323:14
                pushOntoCallStack("ImplementsList", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 323, 14);
                try {
                    ObjectType();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:328:1
    final public void EnumDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "EnumDeclaration";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:328:1
        EnumDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new EnumDeclaration();
            openNodeScope(thisProduction);
        }
        permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE, ABSTRACT, FINAL, STATIC, STRICTFP);
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:332:4
            pushOntoCallStack("EnumDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 332, 4);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:333:4
            consumeToken(ENUM);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:334:4
            pushOntoCallStack("EnumDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 334, 4);
            try {
                TypeIdentifier();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:335:4
            if (nextTokenType() == IMPLEMENTS) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:335:5
                pushOntoCallStack("EnumDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 335, 5);
                try {
                    ImplementsList();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:336:4
            pushOntoCallStack("EnumDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 336, 4);
            try {
                EnumBody();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:339:1
    final public void EnumBody() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "EnumBody";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:339:1
        EnumBody thisProduction = null;
        if (buildTree) {
            thisProduction = new EnumBody();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:340:4
            consumeToken(LBRACE);
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:341:4
            if (nextTokenType() == AT || nextTokenType == IDENTIFIER) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:341:6
                pushOntoCallStack("EnumBody", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 341, 6);
                try {
                    EnumConstant();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:341:19
                while (true) {
                    if (!(scan$Java_ccc$341$21())) break;
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:341:28
                    consumeToken(COMMA);
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:341:37
                    pushOntoCallStack("EnumBody", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 341, 37);
                    try {
                        EnumConstant();
                    } finally {
                        popCallStack();
                    }
                }
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:342:4
            if (nextTokenType() == COMMA) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:342:6
                consumeToken(COMMA);
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:343:4
            if (nextTokenType() == SEMICOLON) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:343:6
                consumeToken(SEMICOLON);
                // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:343:18
                while (true) {
                    if (!(first_set$Java_ccc$343$20.contains(nextTokenType()))) break;
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:343:20
                    pushOntoCallStack("EnumBody", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 343, 20);
                    try {
                        ClassOrInterfaceBodyDeclaration();
                    } finally {
                        popCallStack();
                    }
                }
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:344:4
            consumeToken(RBRACE);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:347:1
    final public void RecordDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "RecordDeclaration";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:347:1
        RecordDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new RecordDeclaration();
            openNodeScope(thisProduction);
        }
        permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE, ABSTRACT, FINAL, STATIC, STRICTFP);
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:352:3
            pushOntoCallStack("RecordDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 352, 3);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for Assertion specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:353:3
            if (!(checkNextTokenImage("record") && getTokenType(2) == IDENTIFIER)) {
                fail("Assertion at: /Users/bnaudts/git/congo/examples/java/Java.ccc:353:3 failed. ", getToken(1));
            }
            if (nextTokenType() == RECORD) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:356:5
                consumeToken(RECORD);
            } else if (nextTokenType() == IDENTIFIER) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:358:5
                consumeToken(IDENTIFIER);
                // Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:359:5
                replaceTokenType(TokenType.RECORD);
            } else {
                pushOntoCallStack("RecordDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 356, 5);
                throw new ParseException(lastConsumedToken, first_set$Java_ccc$356$5, parsingStack);
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:363:3
            pushOntoCallStack("RecordDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 363, 3);
            try {
                TypeIdentifier();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:364:3
            if (nextTokenType() == LT) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:364:4
                pushOntoCallStack("RecordDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 364, 4);
                try {
                    TypeParameters();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:365:3
            pushOntoCallStack("RecordDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 365, 3);
            try {
                RecordHeader();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:366:3
            if (nextTokenType() == IMPLEMENTS) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:366:4
                pushOntoCallStack("RecordDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 366, 4);
                try {
                    ImplementsList();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:367:3
            pushOntoCallStack("RecordDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 367, 3);
            try {
                RecordBody();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:370:1
    final public void RecordHeader() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "RecordHeader";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:370:1
        RecordHeader thisProduction = null;
        if (buildTree) {
            thisProduction = new RecordHeader();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:371:4
            consumeToken(LPAREN);
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:372:4
            if (first_set$Java_ccc$373$6.contains(nextTokenType())) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:373:6
                pushOntoCallStack("RecordHeader", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 373, 6);
                try {
                    RecordComponent();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:374:6
                while (true) {
                    if (!(nextTokenType() == COMMA)) break;
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:374:7
                    consumeToken(COMMA);
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:374:15
                    pushOntoCallStack("RecordHeader", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 374, 15);
                    try {
                        RecordComponent();
                    } finally {
                        popCallStack();
                    }
                }
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:376:4
            consumeToken(RPAREN);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:379:1
    final public void RecordComponent() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "RecordComponent";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:379:1
        RecordComponent thisProduction = null;
        if (buildTree) {
            thisProduction = new RecordComponent();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:380:4
            while (true) {
                if (!(scan$Java_ccc$380$5())) break;
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:380:5
                pushOntoCallStack("RecordComponent", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 380, 5);
                try {
                    Annotation();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:380:18
            pushOntoCallStack("RecordComponent", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 380, 18);
            try {
                Type();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:380:23
            if (nextTokenType() == VAR_ARGS || nextTokenType == AT) {
                // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:380:24
                while (true) {
                    if (!(scan$Java_ccc$380$25())) break;
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:380:25
                    pushOntoCallStack("RecordComponent", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 380, 25);
                    try {
                        Annotation();
                    } finally {
                        popCallStack();
                    }
                }
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:380:38
                consumeToken(VAR_ARGS);
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:380:50
            consumeToken(IDENTIFIER);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:383:1
    final public void RecordBody() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "RecordBody";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:383:1
        RecordBody thisProduction = null;
        if (buildTree) {
            thisProduction = new RecordBody();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:384:3
            consumeToken(LBRACE);
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:385:3
            while (true) {
                // Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:386:4
                if (scan$Java_ccc$386$4()) {
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:386:4
                    pushOntoCallStack("RecordBody", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 386, 4);
                    try {
                        CompactConstructorDeclaration();
                    } finally {
                        popCallStack();
                    }
                } else if (first_set$Java_ccc$388$4.contains(nextTokenType())) {
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:388:4
                    pushOntoCallStack("RecordBody", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 388, 4);
                    try {
                        ClassOrInterfaceBodyDeclaration();
                    } finally {
                        popCallStack();
                    }
                } else {
                    break;
                }
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:390:3
            consumeToken(RBRACE);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:393:1
    final public void CompactConstructorDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "CompactConstructorDeclaration";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:393:1
        CompactConstructorDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new CompactConstructorDeclaration();
            openNodeScope(thisProduction);
        }
        permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE);
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:395:4
            pushOntoCallStack("CompactConstructorDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 395, 4);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:396:3
            pushOntoCallStack("CompactConstructorDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 396, 3);
            try {
                TypeIdentifier();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:397:3
            consumeToken(LBRACE);
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:399:3
            if (scan$Java_ccc$399$5()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:399:5
                pushOntoCallStack("CompactConstructorDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 399, 5);
                try {
                    ExplicitConstructorInvocation();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:400:3
            while (true) {
                if (!(scan$Java_ccc$400$5())) break;
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:400:25
                pushOntoCallStack("CompactConstructorDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 400, 25);
                try {
                    BlockStatement();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:401:3
            consumeToken(RBRACE);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:406:1
    final public void EnumConstant() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "EnumConstant";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:406:1
        EnumConstant thisProduction = null;
        if (buildTree) {
            thisProduction = new EnumConstant();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:407:3
            while (true) {
                if (!(scan$Java_ccc$407$4())) break;
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:407:4
                pushOntoCallStack("EnumConstant", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 407, 4);
                try {
                    Annotation();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:407:17
            consumeToken(IDENTIFIER);
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:407:30
            if (nextTokenType() == LPAREN) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:407:32
                pushOntoCallStack("EnumConstant", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 407, 32);
                try {
                    InvocationArguments();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:407:54
            if (nextTokenType() == LBRACE) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:407:56
                pushOntoCallStack("EnumConstant", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 407, 56);
                try {
                    ClassOrInterfaceBody();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:410:1
    final public void TypeParameters() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "TypeParameters";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:410:1
        TypeParameters thisProduction = null;
        if (buildTree) {
            thisProduction = new TypeParameters();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:411:4
            consumeToken(LT);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:412:4
            pushOntoCallStack("TypeParameters", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 412, 4);
            try {
                TypeParameter();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:412:18
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:412:20
                consumeToken(COMMA);
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:412:28
                pushOntoCallStack("TypeParameters", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 412, 28);
                try {
                    TypeParameter();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:413:4
            consumeToken(GT);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:424:1
    final public void TypeParameter() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "TypeParameter";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:424:1
        TypeParameter thisProduction = null;
        if (buildTree) {
            thisProduction = new TypeParameter();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:424:16
            while (true) {
                if (!(scan$Java_ccc$424$17())) break;
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:424:17
                pushOntoCallStack("TypeParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 424, 17);
                try {
                    Annotation();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:424:30
            pushOntoCallStack("TypeParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 424, 30);
            try {
                TypeIdentifier();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:424:50
            if (nextTokenType() == EXTENDS) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:424:51
                pushOntoCallStack("TypeParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 424, 51);
                try {
                    TypeBound();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:426:1
    final public void TypeBound() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "TypeBound";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:426:1
        TypeBound thisProduction = null;
        if (buildTree) {
            thisProduction = new TypeBound();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:427:4
            consumeToken(EXTENDS);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:427:14
            pushOntoCallStack("TypeBound", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 427, 14);
            try {
                ObjectType();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:427:25
            while (true) {
                if (!(nextTokenType() == BIT_AND)) break;
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:427:27
                consumeToken(BIT_AND);
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:427:37
                pushOntoCallStack("TypeBound", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 427, 37);
                try {
                    ObjectType();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:430:1
    final public void ClassOrInterfaceBody() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ClassOrInterfaceBody";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:430:1
        ClassOrInterfaceBody thisProduction = null;
        if (buildTree) {
            thisProduction = new ClassOrInterfaceBody();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:430:24
            consumeToken(LBRACE);
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:430:33
            while (true) {
                if (!(scan$Java_ccc$430$34())) break;
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:430:54
                pushOntoCallStack("ClassOrInterfaceBody", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 430, 54);
                try {
                    ClassOrInterfaceBodyDeclaration();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:430:90
            consumeToken(RBRACE);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> ClassOrInterfaceBodyDeclaration_FIRST_SET = ClassOrInterfaceBodyDeclaration_FIRST_SET_init();

    private static EnumSet<TokenType> ClassOrInterfaceBodyDeclaration_FIRST_SET_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, CLASS, _DEFAULT, DOUBLE, ENUM, FINAL, FLOAT, INT, INTERFACE, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VOID, VOLATILE, SEALED, NON_SEALED, LBRACE, SEMICOLON, AT, LT, IDENTIFIER);
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:432:1
    final public void ClassOrInterfaceBodyDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ClassOrInterfaceBodyDeclaration";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:432:1
        // Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:433:3
        if (scan$Java_ccc$433$3()) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:433:3
            pushOntoCallStack("ClassOrInterfaceBodyDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 433, 3);
            try {
                Initializer();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$435$3()) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:435:3
            pushOntoCallStack("ClassOrInterfaceBodyDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 435, 3);
            try {
                TypeDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$437$3()) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:437:3
            pushOntoCallStack("ClassOrInterfaceBodyDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 437, 3);
            try {
                ConstructorDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$439$3()) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:439:3
            pushOntoCallStack("ClassOrInterfaceBodyDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 439, 3);
            try {
                MethodDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$441$3()) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:441:3
            pushOntoCallStack("ClassOrInterfaceBodyDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 441, 3);
            try {
                FieldDeclaration();
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("ClassOrInterfaceBodyDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 433, 3);
            throw new ParseException(lastConsumedToken, ClassOrInterfaceBodyDeclaration_FIRST_SET, parsingStack);
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:450:1
    final public void FieldDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "FieldDeclaration";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:450:1
        FieldDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new FieldDeclaration();
            openNodeScope(thisProduction);
        }
        permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE, STATIC, FINAL, TRANSIENT, VOLATILE);
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:454:3
            pushOntoCallStack("FieldDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 454, 3);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:455:3
            pushOntoCallStack("FieldDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 455, 3);
            try {
                Type();
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:455:8
            pushOntoCallStack("FieldDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 455, 8);
            try {
                VariableDeclarator();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:455:27
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:455:29
                consumeToken(COMMA);
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:455:37
                pushOntoCallStack("FieldDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 455, 37);
                try {
                    VariableDeclarator();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:455:59
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:458:1
    final public void VariableDeclarator() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "VariableDeclarator";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:458:1
        VariableDeclarator thisProduction = null;
        if (buildTree) {
            thisProduction = new VariableDeclarator();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:458:23
            pushOntoCallStack("VariableDeclarator", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 458, 23);
            try {
                VariableDeclaratorId();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:458:44
            if (nextTokenType() == ASSIGN) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:458:46
                consumeToken(ASSIGN);
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:458:55
                pushOntoCallStack("VariableDeclarator", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 458, 55);
                try {
                    VariableInitializer();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> VariableDeclaratorId_FIRST_SET = tokenTypeSet(UNDERSCORE, IDENTIFIER);

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:460:1
    final public void VariableDeclaratorId() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "VariableDeclaratorId";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:460:1
        VariableDeclaratorId thisProduction = null;
        if (buildTree) {
            thisProduction = new VariableDeclaratorId();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:461:5
            if (nextTokenType() == IDENTIFIER) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:461:5
                consumeToken(IDENTIFIER);
                // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:462:5
                while (true) {
                    if (!(nextTokenType() == LBRACKET || nextTokenType == AT)) break;
                    // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:462:7
                    while (true) {
                        if (!(scan$Java_ccc$462$8())) break;
                        // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:462:8
                        pushOntoCallStack("VariableDeclaratorId", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 462, 8);
                        try {
                            Annotation();
                        } finally {
                            popCallStack();
                        }
                    }
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:462:21
                    consumeToken(LBRACKET);
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:462:32
                    consumeToken(RBRACKET);
                }
            } else if (scan$Java_ccc$464$5()) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:465:5
                consumeToken(UNDERSCORE);
            } else {
                pushOntoCallStack("VariableDeclaratorId", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 461, 5);
                throw new ParseException(lastConsumedToken, VariableDeclaratorId_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> VariableInitializer_FIRST_SET = VariableInitializer_FIRST_SET_init();

    private static EnumSet<TokenType> VariableInitializer_FIRST_SET_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, LBRACE, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:468:1
    final public void VariableInitializer() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "VariableInitializer";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:468:1
        // Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:468:28
        if (nextTokenType() == LBRACE) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:468:28
            pushOntoCallStack("VariableInitializer", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 468, 28);
            try {
                ArrayInitializer();
            } finally {
                popCallStack();
            }
        } else if (first_set$Java_ccc$468$47.contains(nextTokenType())) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:468:47
            pushOntoCallStack("VariableInitializer", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 468, 47);
            try {
                Expression();
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("VariableInitializer", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 468, 28);
            throw new ParseException(lastConsumedToken, VariableInitializer_FIRST_SET, parsingStack);
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:470:1
    final public void ArrayInitializer() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ArrayInitializer";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:470:1
        ArrayInitializer thisProduction = null;
        if (buildTree) {
            thisProduction = new ArrayInitializer();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:471:4
            consumeToken(LBRACE);
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:471:13
            if (first_set$Java_ccc$471$15.contains(nextTokenType())) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:471:15
                pushOntoCallStack("ArrayInitializer", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 471, 15);
                try {
                    VariableInitializer();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:471:35
                while (true) {
                    if (!(scan$Java_ccc$471$37())) break;
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:471:44
                    consumeToken(COMMA);
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:471:52
                    pushOntoCallStack("ArrayInitializer", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 471, 52);
                    try {
                        VariableInitializer();
                    } finally {
                        popCallStack();
                    }
                }
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:471:77
            if (nextTokenType() == COMMA) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:471:79
                consumeToken(COMMA);
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:471:89
            consumeToken(RBRACE);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:474:1
    final public MethodDeclaration MethodDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "MethodDeclaration";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:474:1
        MethodDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new MethodDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            if (scan$Java_ccc$476$5()) {
                // Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:478:5
                permissibleModifiers = EnumSet.of(PUBLIC, PRIVATE, ABSTRACT, STATIC, SYNCHRONIZED, NATIVE, STRICTFP, _DEFAULT);
            } else if (scan$Java_ccc$484$5()) {
                // Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:488:5
                permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE, ABSTRACT, STATIC, SYNCHRONIZED, FINAL, NATIVE, STRICTFP, _DEFAULT);
            } else {
                // Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:494:5
                permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE, ABSTRACT, STATIC, FINAL, SYNCHRONIZED, NATIVE, STRICTFP);
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:500:3
            pushOntoCallStack("MethodDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 500, 3);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:501:3
            if (nextTokenType() == LT) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:501:5
                pushOntoCallStack("MethodDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 501, 5);
                try {
                    TypeParameters();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:502:3
            pushOntoCallStack("MethodDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 502, 3);
            try {
                ReturnType();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:503:3
            consumeToken(IDENTIFIER);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:504:9
            pushOntoCallStack("MethodDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 504, 9);
            try {
                FormalParameters();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:504:26
            while (true) {
                if (!(nextTokenType() == LBRACKET || nextTokenType == AT)) break;
                // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:504:28
                while (true) {
                    if (!(scan$Java_ccc$504$29())) break;
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:504:29
                    pushOntoCallStack("MethodDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 504, 29);
                    try {
                        Annotation();
                    } finally {
                        popCallStack();
                    }
                }
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:504:42
                consumeToken(LBRACKET);
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:504:52
                consumeToken(RBRACKET);
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:505:3
            if (nextTokenType() == THROWS) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:505:5
                pushOntoCallStack("MethodDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 505, 5);
                try {
                    ThrowsList();
                } finally {
                    popCallStack();
                }
            }
            if (nextTokenType() == LBRACE) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:506:5
                pushOntoCallStack("MethodDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 506, 5);
                try {
                    Block();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == SEMICOLON) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:506:13
                consumeToken(SEMICOLON);
            } else {
                pushOntoCallStack("MethodDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 506, 5);
                throw new ParseException(lastConsumedToken, first_set$Java_ccc$506$5, parsingStack);
            }
            // Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:507:3
            return thisProduction;
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:510:1
    final public void FormalParameters() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "FormalParameters";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:510:1
        FormalParameters thisProduction = null;
        if (buildTree) {
            thisProduction = new FormalParameters();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:510:20
            consumeToken(LPAREN);
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:510:29
            if (scan$Java_ccc$510$31()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:510:31
                pushOntoCallStack("FormalParameters", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 510, 31);
                try {
                    FormalParameter();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:510:47
                while (true) {
                    if (!(nextTokenType() == COMMA)) break;
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:510:49
                    consumeToken(COMMA);
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:510:57
                    pushOntoCallStack("FormalParameters", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 510, 57);
                    try {
                        FormalParameter();
                    } finally {
                        popCallStack();
                    }
                }
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:510:78
            consumeToken(RPAREN);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:512:1
    final public void FormalParameter() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "FormalParameter";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:512:1
        FormalParameter thisProduction = null;
        if (buildTree) {
            thisProduction = new FormalParameter();
            openNodeScope(thisProduction);
        }
        permissibleModifiers = EnumSet.of(FINAL);
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:512:64
            pushOntoCallStack("FormalParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 512, 64);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:512:74
            pushOntoCallStack("FormalParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 512, 74);
            try {
                Type();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:512:79
            if (nextTokenType() == VAR_ARGS || nextTokenType == AT) {
                // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:512:81
                while (true) {
                    if (!(scan$Java_ccc$512$82())) break;
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:512:82
                    pushOntoCallStack("FormalParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 512, 82);
                    try {
                        Annotation();
                    } finally {
                        popCallStack();
                    }
                }
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:512:95
                consumeToken(VAR_ARGS);
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:512:108
            pushOntoCallStack("FormalParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 512, 108);
            try {
                VariableDeclaratorId();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:514:1
    final public void ConstructorDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ConstructorDeclaration";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:514:1
        ConstructorDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new ConstructorDeclaration();
            openNodeScope(thisProduction);
        }
        permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE);
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:516:3
            pushOntoCallStack("ConstructorDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 516, 3);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:517:3
            if (nextTokenType() == LT) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:517:5
                pushOntoCallStack("ConstructorDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 517, 5);
                try {
                    TypeParameters();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:518:3
            pushOntoCallStack("ConstructorDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 518, 3);
            try {
                TypeIdentifier();
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:518:18
            pushOntoCallStack("ConstructorDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 518, 18);
            try {
                FormalParameters();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:519:3
            if (nextTokenType() == THROWS) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:519:5
                pushOntoCallStack("ConstructorDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 519, 5);
                try {
                    ThrowsList();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:520:3
            consumeToken(LBRACE);
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:522:3
            if (scan$Java_ccc$522$5()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:522:5
                pushOntoCallStack("ConstructorDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 522, 5);
                try {
                    ExplicitConstructorInvocation();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:523:3
            while (true) {
                if (!(scan$Java_ccc$523$5())) break;
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:523:25
                pushOntoCallStack("ConstructorDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 523, 25);
                try {
                    BlockStatement();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:524:3
            consumeToken(RBRACE);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> ExplicitConstructorInvocation_FIRST_SET = tokenTypeSet(SUPER, THIS, LPAREN, LT, IDENTIFIER);

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:527:1
    final public void ExplicitConstructorInvocation() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ExplicitConstructorInvocation";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:527:1
        ExplicitConstructorInvocation thisProduction = null;
        if (buildTree) {
            thisProduction = new ExplicitConstructorInvocation();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:528:3
            if (scan$Java_ccc$528$3()) {
                // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:528:3
                if (scan$Java_ccc$528$4()) {
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:528:4
                    pushOntoCallStack("ExplicitConstructorInvocation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 528, 4);
                    try {
                        TypeArguments();
                    } finally {
                        popCallStack();
                    }
                }
                if (nextTokenType() == THIS) {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:528:20
                    consumeToken(THIS);
                } else if (nextTokenType() == SUPER) {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:528:29
                    consumeToken(SUPER);
                } else {
                    pushOntoCallStack("ExplicitConstructorInvocation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 528, 20);
                    throw new ParseException(lastConsumedToken, first_set$Java_ccc$528$20, parsingStack);
                }
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:528:44
                pushOntoCallStack("ExplicitConstructorInvocation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 528, 44);
                try {
                    InvocationArguments();
                } finally {
                    popCallStack();
                }
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:528:64
                consumeToken(SEMICOLON);
            } else if (scan$Java_ccc$532$3()) {
                if (nextTokenType() == IDENTIFIER) {
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:4
                    pushOntoCallStack("ExplicitConstructorInvocation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 532, 4);
                    try {
                        Name();
                    } finally {
                        popCallStack();
                    }
                    // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:9
                    if (scan$Java_ccc$532$10()) {
                        // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:10
                        consumeToken(DOT);
                        // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:15
                        consumeToken(THIS);
                    }
                } else if (nextTokenType() == LPAREN) {
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:30
                    pushOntoCallStack("ExplicitConstructorInvocation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 532, 30);
                    try {
                        Parentheses();
                    } finally {
                        popCallStack();
                    }
                    // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:42
                    if (scan$Java_ccc$532$43()) {
                        // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:43
                        consumeToken(DOT);
                        // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:55
                        pushOntoCallStack("ExplicitConstructorInvocation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 532, 55);
                        try {
                            Name();
                        } finally {
                            popCallStack();
                        }
                    }
                    // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:60
                    if (scan$Java_ccc$532$61()) {
                        // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:61
                        consumeToken(DOT);
                        // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:66
                        consumeToken(THIS);
                    }
                } else {
                    pushOntoCallStack("ExplicitConstructorInvocation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 532, 4);
                    throw new ParseException(lastConsumedToken, first_set$Java_ccc$532$4, parsingStack);
                }
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:533:3
                consumeToken(DOT);
                // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:533:9
                if (scan$Java_ccc$533$10()) {
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:533:10
                    pushOntoCallStack("ExplicitConstructorInvocation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 533, 10);
                    try {
                        TypeArguments();
                    } finally {
                        popCallStack();
                    }
                }
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:533:25
                consumeToken(SUPER);
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:533:39
                pushOntoCallStack("ExplicitConstructorInvocation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 533, 39);
                try {
                    InvocationArguments();
                } finally {
                    popCallStack();
                }
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:533:59
                consumeToken(SEMICOLON);
            } else {
                pushOntoCallStack("ExplicitConstructorInvocation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 528, 3);
                throw new ParseException(lastConsumedToken, ExplicitConstructorInvocation_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:536:1
    final public void Initializer() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Initializer";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:536:1
        Initializer thisProduction = null;
        if (buildTree) {
            thisProduction = new Initializer();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:537:3
            if (nextTokenType() == STATIC) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:537:5
                consumeToken(STATIC);
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:537:22
            pushOntoCallStack("Initializer", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 537, 22);
            try {
                Block();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> Type_FIRST_SET = Type_FIRST_SET_init();

    private static EnumSet<TokenType> Type_FIRST_SET_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, AT, IDENTIFIER);
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:540:1
    final public void Type() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Type";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:540:1
        // Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:541:4
        if (scan$Java_ccc$541$4()) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:541:4
            pushOntoCallStack("Type", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 541, 4);
            try {
                ReferenceType();
            } finally {
                popCallStack();
            }
        } else if (first_set$Java_ccc$543$4.contains(nextTokenType())) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:543:4
            pushOntoCallStack("Type", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 543, 4);
            try {
                PrimitiveType();
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("Type", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 541, 4);
            throw new ParseException(lastConsumedToken, Type_FIRST_SET, parsingStack);
        }
    }

    private static final EnumSet<TokenType> ReferenceType_FIRST_SET = ReferenceType_FIRST_SET_init();

    private static EnumSet<TokenType> ReferenceType_FIRST_SET_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, AT, IDENTIFIER);
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:550:1
    final public void ReferenceType() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ReferenceType";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:550:1
        ReferenceType thisProduction = null;
        if (buildTree) {
            thisProduction = new ReferenceType();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:551:4
            if (scan$Java_ccc$551$4()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:551:4
                pushOntoCallStack("ReferenceType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 551, 4);
                try {
                    PrimitiveArrayType();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == AT || nextTokenType == IDENTIFIER) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:553:4
                pushOntoCallStack("ReferenceType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 553, 4);
                try {
                    ObjectType();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:553:15
                while (true) {
                    if (!(scan$Java_ccc$553$16())) break;
                    // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:553:16
                    while (true) {
                        if (!(scan$Java_ccc$553$17())) break;
                        // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:553:17
                        pushOntoCallStack("ReferenceType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 553, 17);
                        try {
                            Annotation();
                        } finally {
                            popCallStack();
                        }
                    }
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:553:30
                    consumeToken(LBRACKET);
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:553:40
                    consumeToken(RBRACKET);
                }
            } else {
                pushOntoCallStack("ReferenceType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 551, 4);
                throw new ParseException(lastConsumedToken, ReferenceType_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:556:1
    final public void ObjectType() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ObjectType";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:556:1
        ObjectType thisProduction = null;
        if (buildTree) {
            thisProduction = new ObjectType();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:557:5
            while (true) {
                if (!(scan$Java_ccc$557$6())) break;
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:557:6
                pushOntoCallStack("ObjectType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 557, 6);
                try {
                    Annotation();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:558:5
            pushOntoCallStack("ObjectType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 558, 5);
            try {
                TypeIdentifier();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:558:20
            if (scan$Java_ccc$558$22()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:558:22
                pushOntoCallStack("ObjectType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 558, 22);
                try {
                    TypeArguments();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:559:5
            while (true) {
                if (!(scan$Java_ccc$559$7())) break;
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:559:7
                consumeToken(DOT);
                // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:559:13
                while (true) {
                    if (!(scan$Java_ccc$559$14())) break;
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:559:14
                    pushOntoCallStack("ObjectType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 559, 14);
                    try {
                        Annotation();
                    } finally {
                        popCallStack();
                    }
                }
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:559:27
                consumeToken(IDENTIFIER);
                // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:559:45
                if (scan$Java_ccc$559$47()) {
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:559:47
                    pushOntoCallStack("ObjectType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 559, 47);
                    try {
                        TypeArguments();
                    } finally {
                        popCallStack();
                    }
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:572:1
    final public void DiamondOperator() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "DiamondOperator";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:572:1
        DiamondOperator thisProduction = null;
        if (buildTree) {
            thisProduction = new DiamondOperator();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:572:20
            consumeToken(LT);
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:572:24
            consumeToken(GT);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> PossiblyEmptyTypeArguments_FIRST_SET = tokenTypeSet(LT);

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:574:1
    final public void PossiblyEmptyTypeArguments() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "PossiblyEmptyTypeArguments";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:574:1
        // Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:575:4
        if (scan$Java_ccc$575$4()) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:575:4
            pushOntoCallStack("PossiblyEmptyTypeArguments", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 575, 4);
            try {
                DiamondOperator();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$577$4()) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:577:4
            pushOntoCallStack("PossiblyEmptyTypeArguments", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 577, 4);
            try {
                TypeArguments();
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("PossiblyEmptyTypeArguments", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 575, 4);
            throw new ParseException(lastConsumedToken, PossiblyEmptyTypeArguments_FIRST_SET, parsingStack);
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:580:1
    final public void TypeArguments() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "TypeArguments";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:580:1
        TypeArguments thisProduction = null;
        if (buildTree) {
            thisProduction = new TypeArguments();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:582:3
            consumeToken(LT);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:582:8
            pushOntoCallStack("TypeArguments", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 582, 8);
            try {
                TypeArgument();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:582:21
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:582:23
                consumeToken(COMMA);
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:582:31
                pushOntoCallStack("TypeArguments", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 582, 31);
                try {
                    TypeArgument();
                } finally {
                    popCallStack();
                }
            }
            EnumSet<TokenType> previousActives34 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged35 = false;
            somethingChanged35 = somethingChanged35 |= deactivateTokenTypes(RSIGNEDSHIFT, RUNSIGNEDSHIFT);
            try {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:583:52
                consumeToken(GT);
            } finally {
                token_source.activeTokenTypes = previousActives34;
                if (somethingChanged35) {
                    token_source.reset(lastConsumedToken);
                    nextTokenType = null;
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> TypeArgument_FIRST_SET = TypeArgument_FIRST_SET_init();

    private static EnumSet<TokenType> TypeArgument_FIRST_SET_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, AT, HOOK, IDENTIFIER);
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:586:1
    final public void TypeArgument() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "TypeArgument";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:586:1
        TypeArgument thisProduction = null;
        if (buildTree) {
            thisProduction = new TypeArgument();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:587:3
            if (scan$Java_ccc$587$3()) {
                // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:587:3
                while (true) {
                    if (!(scan$Java_ccc$587$4())) break;
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:587:4
                    pushOntoCallStack("TypeArgument", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 587, 4);
                    try {
                        Annotation();
                    } finally {
                        popCallStack();
                    }
                }
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:587:17
                consumeToken(HOOK);
                // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:587:29
                if (nextTokenType() == EXTENDS || nextTokenType == SUPER) {
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:587:31
                    pushOntoCallStack("TypeArgument", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 587, 31);
                    try {
                        WildcardBounds();
                    } finally {
                        popCallStack();
                    }
                }
            } else if (first_set$Java_ccc$589$3.contains(nextTokenType())) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:589:3
                pushOntoCallStack("TypeArgument", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 589, 3);
                try {
                    ReferenceType();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("TypeArgument", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 587, 3);
                throw new ParseException(lastConsumedToken, TypeArgument_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:592:1
    final public void WildcardBounds() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "WildcardBounds";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:592:1
        WildcardBounds thisProduction = null;
        if (buildTree) {
            thisProduction = new WildcardBounds();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            if (nextTokenType() == EXTENDS) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:592:19
                consumeToken(EXTENDS);
            } else if (nextTokenType() == SUPER) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:592:31
                consumeToken(SUPER);
            } else {
                pushOntoCallStack("WildcardBounds", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 592, 19);
                throw new ParseException(lastConsumedToken, first_set$Java_ccc$592$19, parsingStack);
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:592:40
            pushOntoCallStack("WildcardBounds", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 592, 40);
            try {
                ReferenceType();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> PrimitiveType_FIRST_SET = PrimitiveType_FIRST_SET_init();

    private static EnumSet<TokenType> PrimitiveType_FIRST_SET_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, AT);
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:594:1
    final public void PrimitiveType() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "PrimitiveType";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:594:1
        PrimitiveType thisProduction = null;
        if (buildTree) {
            thisProduction = new PrimitiveType();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:595:3
            if (nextTokenType() == BOOLEAN || nextTokenType == AT) {
                // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:595:3
                while (true) {
                    if (!(scan$Java_ccc$595$4())) break;
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:595:4
                    pushOntoCallStack("PrimitiveType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 595, 4);
                    try {
                        Annotation();
                    } finally {
                        popCallStack();
                    }
                }
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:596:3
                consumeToken(BOOLEAN);
            } else if (nextTokenType() == CHAR) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:596:15
                consumeToken(CHAR);
            } else if (nextTokenType() == BYTE) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:596:24
                consumeToken(BYTE);
            } else if (nextTokenType() == SHORT) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:596:33
                consumeToken(SHORT);
            } else if (nextTokenType() == INT) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:596:43
                consumeToken(INT);
            } else if (nextTokenType() == LONG) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:596:51
                consumeToken(LONG);
            } else if (nextTokenType() == FLOAT) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:596:60
                consumeToken(FLOAT);
            } else if (scan$Java_ccc$596$70()) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:596:70
                consumeToken(DOUBLE);
            } else {
                pushOntoCallStack("PrimitiveType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 595, 3);
                throw new ParseException(lastConsumedToken, PrimitiveType_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:600:1
    final public void PrimitiveArrayType() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "PrimitiveArrayType";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:600:1
        PrimitiveArrayType thisProduction = null;
        if (buildTree) {
            thisProduction = new PrimitiveArrayType();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:600:22
            pushOntoCallStack("PrimitiveArrayType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 600, 22);
            try {
                PrimitiveType();
            } finally {
                popCallStack();
            }
            // Code for OneOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:600:36
            while (true) {
                // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:600:37
                while (true) {
                    if (!(scan$Java_ccc$600$38())) break;
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:600:38
                    pushOntoCallStack("PrimitiveArrayType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 600, 38);
                    try {
                        Annotation();
                    } finally {
                        popCallStack();
                    }
                }
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:600:51
                consumeToken(LBRACKET);
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:600:61
                consumeToken(RBRACKET);
                if (!(scan$Java_ccc$600$37())) break;
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> ReturnType_FIRST_SET = ReturnType_FIRST_SET_init();

    private static EnumSet<TokenType> ReturnType_FIRST_SET_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, VOID, AT, IDENTIFIER);
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:602:1
    final public void ReturnType() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ReturnType";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:602:1
        ReturnType thisProduction = null;
        if (buildTree) {
            thisProduction = new ReturnType();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:602:15
            if (nextTokenType() == VOID) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:602:15
                consumeToken(VOID);
            } else if (first_set$Java_ccc$602$24.contains(nextTokenType())) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:602:24
                pushOntoCallStack("ReturnType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 602, 24);
                try {
                    Type();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("ReturnType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 602, 15);
                throw new ParseException(lastConsumedToken, ReturnType_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:604:1
    final public void Name() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Name";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:604:1
        Name thisProduction = null;
        if (buildTree) {
            thisProduction = new Name();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:604:9
            consumeToken(IDENTIFIER);
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:604:22
            while (true) {
                if (!(scan$Java_ccc$604$23())) break;
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:604:23
                consumeToken(DOT);
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:604:29
                consumeToken(IDENTIFIER);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:606:1
    final public void ThrowsList() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ThrowsList";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:606:1
        ThrowsList thisProduction = null;
        if (buildTree) {
            thisProduction = new ThrowsList();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:606:14
            consumeToken(THROWS);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:606:23
            pushOntoCallStack("ThrowsList", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 606, 23);
            try {
                ExceptionType();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:606:37
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:606:39
                consumeToken(COMMA);
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:606:47
                pushOntoCallStack("ThrowsList", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 606, 47);
                try {
                    ExceptionType();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:608:1
    final public void ExceptionType() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ExceptionType";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:608:1
        ObjectType thisProduction = null;
        if (buildTree) {
            thisProduction = new ObjectType();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:609:5
            while (true) {
                if (!(scan$Java_ccc$609$6())) break;
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:609:6
                pushOntoCallStack("ExceptionType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 609, 6);
                try {
                    Annotation();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:610:5
            consumeToken(IDENTIFIER);
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:611:5
            while (true) {
                if (!(scan$Java_ccc$612$8())) break;
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:612:8
                consumeToken(DOT);
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:612:14
                consumeToken(IDENTIFIER);
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:614:5
            if (scan$Java_ccc$615$7()) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:615:7
                consumeToken(DOT);
                // Code for OneOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:616:7
                while (true) {
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:616:8
                    pushOntoCallStack("ExceptionType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 616, 8);
                    try {
                        Annotation();
                    } finally {
                        popCallStack();
                    }
                    if (!(scan$Java_ccc$616$8())) break;
                }
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:617:7
                consumeToken(IDENTIFIER);
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:619:5
            if (scan$Java_ccc$619$6()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:619:6
                pushOntoCallStack("ExceptionType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 619, 6);
                try {
                    TypeArguments();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:623:1
    final public Expression Expression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Expression";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:623:1
        // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:624:5
        pushOntoCallStack("Expression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 624, 5);
        try {
            AssignmentExpression();
        } finally {
            popCallStack();
        }
        // Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:625:5
        return (Expression) peekNode();
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:680:1
    final public void AssignmentExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "AssignmentExpression";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:680:1
        AssignmentExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new AssignmentExpression();
            openNodeScope(thisProduction);
        }
        Expression lhs;
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:684:3
            pushOntoCallStack("AssignmentExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 684, 3);
            try {
                TernaryExpression();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:684:21
            lhs = (Expression) peekNode();
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:685:3
            if ((lhs.isAssignableTo()) && scan$Java_ccc$686$5()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:687:8
                pushOntoCallStack("AssignmentExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 687, 8);
                try {
                    AssignmentOperator();
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:687:27
                pushOntoCallStack("AssignmentExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 687, 27);
                try {
                    Expression();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> AssignmentOperator_FIRST_SET = AssignmentOperator_FIRST_SET_init();

    private static EnumSet<TokenType> AssignmentOperator_FIRST_SET_init() {
        return tokenTypeSet(ASSIGN, PLUSASSIGN, MINUSASSIGN, STARASSIGN, SLASHASSIGN, ANDASSIGN, ORASSIGN, XORASSIGN, REMASSIGN, LSHIFTASSIGN, RSIGNEDSHIFTASSIGN, RUNSIGNEDSHIFTASSIGN);
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:691:1
    final public void AssignmentOperator() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "AssignmentOperator";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:691:1
        // Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:692:3
        if (nextTokenType() == ASSIGN) {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:692:3
            consumeToken(ASSIGN);
        } else if (nextTokenType() == STARASSIGN) {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:692:14
            consumeToken(STARASSIGN);
        } else if (nextTokenType() == SLASHASSIGN) {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:692:29
            consumeToken(SLASHASSIGN);
        } else if (nextTokenType() == REMASSIGN) {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:692:45
            consumeToken(REMASSIGN);
        } else if (nextTokenType() == PLUSASSIGN) {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:692:59
            consumeToken(PLUSASSIGN);
        } else if (nextTokenType() == MINUSASSIGN) {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:692:74
            consumeToken(MINUSASSIGN);
        } else if (nextTokenType() == LSHIFTASSIGN) {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:692:90
            consumeToken(LSHIFTASSIGN);
        } else if (nextTokenType() == RSIGNEDSHIFTASSIGN) {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:692:107
            consumeToken(RSIGNEDSHIFTASSIGN);
        } else if (nextTokenType() == RUNSIGNEDSHIFTASSIGN) {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:692:130
            consumeToken(RUNSIGNEDSHIFTASSIGN);
        } else if (nextTokenType() == ANDASSIGN) {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:692:155
            consumeToken(ANDASSIGN);
        } else if (nextTokenType() == XORASSIGN) {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:692:169
            consumeToken(XORASSIGN);
        } else if (nextTokenType() == ORASSIGN) {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:692:183
            consumeToken(ORASSIGN);
        } else {
            pushOntoCallStack("AssignmentOperator", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 692, 3);
            throw new ParseException(lastConsumedToken, AssignmentOperator_FIRST_SET, parsingStack);
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:695:1
    final public void TernaryExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "TernaryExpression";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:695:1
        TernaryExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new TernaryExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:696:3
            pushOntoCallStack("TernaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 696, 3);
            try {
                ConditionalOrExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:696:27
            if (nextTokenType() == HOOK) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:696:30
                consumeToken(HOOK);
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:696:37
                pushOntoCallStack("TernaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 696, 37);
                try {
                    Expression();
                } finally {
                    popCallStack();
                }
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:696:48
                consumeToken(COLON);
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:696:56
                pushOntoCallStack("TernaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 696, 56);
                try {
                    Expression();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:699:1
    final public void ConditionalOrExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ConditionalOrExpression";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:699:1
        ConditionalOrExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new ConditionalOrExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:700:3
            pushOntoCallStack("ConditionalOrExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 700, 3);
            try {
                ConditionalAndExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:700:28
            while (true) {
                if (!(nextTokenType() == SC_OR)) break;
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:700:30
                consumeToken(SC_OR);
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:700:38
                pushOntoCallStack("ConditionalOrExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 700, 38);
                try {
                    ConditionalAndExpression();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:703:1
    final public void ConditionalAndExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ConditionalAndExpression";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:703:1
        ConditionalAndExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new ConditionalAndExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:704:3
            pushOntoCallStack("ConditionalAndExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 704, 3);
            try {
                InclusiveOrExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:704:25
            while (true) {
                if (!(nextTokenType() == SC_AND)) break;
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:704:27
                consumeToken(SC_AND);
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:704:36
                pushOntoCallStack("ConditionalAndExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 704, 36);
                try {
                    InclusiveOrExpression();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:707:1
    final public void InclusiveOrExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "InclusiveOrExpression";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:707:1
        InclusiveOrExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new InclusiveOrExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:708:3
            pushOntoCallStack("InclusiveOrExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 708, 3);
            try {
                ExclusiveOrExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:708:25
            while (true) {
                if (!(nextTokenType() == BIT_OR)) break;
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:708:27
                consumeToken(BIT_OR);
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:708:36
                pushOntoCallStack("InclusiveOrExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 708, 36);
                try {
                    ExclusiveOrExpression();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:711:1
    final public void ExclusiveOrExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ExclusiveOrExpression";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:711:1
        ExclusiveOrExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new ExclusiveOrExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:712:3
            pushOntoCallStack("ExclusiveOrExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 712, 3);
            try {
                AndExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:712:17
            while (true) {
                if (!(nextTokenType() == XOR)) break;
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:712:19
                consumeToken(XOR);
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:712:25
                pushOntoCallStack("ExclusiveOrExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 712, 25);
                try {
                    AndExpression();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:715:1
    final public void AndExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "AndExpression";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:715:1
        AndExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new AndExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:716:3
            pushOntoCallStack("AndExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 716, 3);
            try {
                EqualityExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:716:22
            while (true) {
                if (!(nextTokenType() == BIT_AND)) break;
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:716:24
                consumeToken(BIT_AND);
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:716:34
                pushOntoCallStack("AndExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 716, 34);
                try {
                    EqualityExpression();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:719:1
    final public void EqualityExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "EqualityExpression";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:719:1
        EqualityExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new EqualityExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:720:3
            pushOntoCallStack("EqualityExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 720, 3);
            try {
                InstanceOfExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:720:24
            while (true) {
                if (!(nextTokenType() == EQ || nextTokenType == NE)) break;
                if (nextTokenType() == EQ) {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:720:28
                    consumeToken(EQ);
                } else if (nextTokenType() == NE) {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:720:35
                    consumeToken(NE);
                } else {
                    pushOntoCallStack("EqualityExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 720, 28);
                    throw new ParseException(lastConsumedToken, first_set$Java_ccc$720$28, parsingStack);
                }
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:720:42
                EqualityExpression EqualityExpression1 = null;
                if (buildTree) {
                    EqualityExpression1 = new EqualityExpression();
                    openNodeScope(EqualityExpression1);
                }
                ParseException parseException46 = null;
                int callStackSize47 = parsingStack.size();
                try {
                    pushOntoCallStack("EqualityExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 720, 42);
                    try {
                        InstanceOfExpression();
                    } finally {
                        popCallStack();
                    }
                } catch (ParseException e) {
                    parseException46 = e;
                    throw e;
                } finally {
                    restoreCallStack(callStackSize47);
                    if (EqualityExpression1 != null) {
                        if (parseException46 == null) {
                            closeNodeScope(EqualityExpression1, 3);
                        } else {
                            clearNodeScope();
                        }
                    }
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:723:1
    final public void InstanceOfExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "InstanceOfExpression";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:723:1
        InstanceOfExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new InstanceOfExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:724:3
            pushOntoCallStack("InstanceOfExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 724, 3);
            try {
                RelationalExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:725:3
            if (nextTokenType() == INSTANCEOF) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:726:5
                consumeToken(INSTANCEOF);
                if (scan$Java_ccc$728$7()) {
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:728:7
                    pushOntoCallStack("InstanceOfExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 728, 7);
                    try {
                        LocalVariableDeclaration();
                    } finally {
                        popCallStack();
                    }
                } else if (scan$Java_ccc$730$7()) {
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:730:7
                    pushOntoCallStack("InstanceOfExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 730, 7);
                    try {
                        RecordPattern();
                    } finally {
                        popCallStack();
                    }
                } else if (first_set$Java_ccc$732$7.contains(nextTokenType())) {
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:732:7
                    pushOntoCallStack("InstanceOfExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 732, 7);
                    try {
                        ReferenceType();
                    } finally {
                        popCallStack();
                    }
                } else {
                    pushOntoCallStack("InstanceOfExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 728, 7);
                    throw new ParseException(lastConsumedToken, first_set$Java_ccc$728$7, parsingStack);
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:737:1
    final public void RelationalExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "RelationalExpression";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:737:1
        RelationalExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new RelationalExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:738:3
            pushOntoCallStack("RelationalExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 738, 3);
            try {
                ShiftExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:739:3
            if (nextTokenType() == GT || nextTokenType == LT || nextTokenType == LE || nextTokenType == GE) {
                if (nextTokenType() == LT) {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:740:7
                    consumeToken(LT);
                } else if (nextTokenType() == GT) {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:740:14
                    consumeToken(GT);
                } else if (nextTokenType() == LE) {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:740:21
                    consumeToken(LE);
                } else if (nextTokenType() == GE) {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:740:28
                    consumeToken(GE);
                } else {
                    pushOntoCallStack("RelationalExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 740, 7);
                    throw new ParseException(lastConsumedToken, first_set$Java_ccc$740$7, parsingStack);
                }
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:741:5
                pushOntoCallStack("RelationalExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 741, 5);
                try {
                    ShiftExpression();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:746:1
    final public void ShiftExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ShiftExpression";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:746:1
        ShiftExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new ShiftExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:747:4
            pushOntoCallStack("ShiftExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 747, 4);
            try {
                AdditiveExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:748:4
            if (scan$Java_ccc$752$6()) {
                // Code for UncacheTokens specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:752:41
                uncacheTokens();
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:754:4
            while (true) {
                if (!(nextTokenType() == LSHIFT || nextTokenType == RSIGNEDSHIFT || nextTokenType == RUNSIGNEDSHIFT)) break;
                if (nextTokenType() == LSHIFT) {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:755:8
                    consumeToken(LSHIFT);
                } else if (nextTokenType() == RSIGNEDSHIFT) {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:755:19
                    consumeToken(RSIGNEDSHIFT);
                } else if (nextTokenType() == RUNSIGNEDSHIFT) {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:755:36
                    consumeToken(RUNSIGNEDSHIFT);
                } else {
                    pushOntoCallStack("ShiftExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 755, 8);
                    throw new ParseException(lastConsumedToken, first_set$Java_ccc$755$8, parsingStack);
                }
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:756:7
                ShiftExpression ShiftExpression1 = null;
                if (buildTree) {
                    ShiftExpression1 = new ShiftExpression();
                    openNodeScope(ShiftExpression1);
                }
                ParseException parseException64 = null;
                int callStackSize65 = parsingStack.size();
                try {
                    pushOntoCallStack("ShiftExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 756, 7);
                    try {
                        AdditiveExpression();
                    } finally {
                        popCallStack();
                    }
                } catch (ParseException e) {
                    parseException64 = e;
                    throw e;
                } finally {
                    restoreCallStack(callStackSize65);
                    if (ShiftExpression1 != null) {
                        if (parseException64 == null) {
                            closeNodeScope(ShiftExpression1, 3);
                        } else {
                            clearNodeScope();
                        }
                    }
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:760:1
    final public void AdditiveExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "AdditiveExpression";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:760:1
        AdditiveExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new AdditiveExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:761:3
            pushOntoCallStack("AdditiveExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 761, 3);
            try {
                MultiplicativeExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:761:28
            while (true) {
                if (!(nextTokenType() == PLUS || nextTokenType == MINUS)) break;
                if (nextTokenType() == PLUS) {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:761:33
                    consumeToken(PLUS);
                } else if (nextTokenType() == MINUS) {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:761:42
                    consumeToken(MINUS);
                } else {
                    pushOntoCallStack("AdditiveExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 761, 33);
                    throw new ParseException(lastConsumedToken, first_set$Java_ccc$761$33, parsingStack);
                }
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:761:52
                pushOntoCallStack("AdditiveExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 761, 52);
                try {
                    MultiplicativeExpression();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:764:1
    final public void MultiplicativeExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "MultiplicativeExpression";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:764:1
        MultiplicativeExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new MultiplicativeExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:765:3
            pushOntoCallStack("MultiplicativeExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 765, 3);
            try {
                UnaryExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:765:19
            while (true) {
                if (!(nextTokenType() == STAR || nextTokenType == SLASH || nextTokenType == REM)) break;
                if (nextTokenType() == STAR) {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:765:24
                    consumeToken(STAR);
                } else if (nextTokenType() == SLASH) {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:765:33
                    consumeToken(SLASH);
                } else if (nextTokenType() == REM) {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:765:42
                    consumeToken(REM);
                } else {
                    pushOntoCallStack("MultiplicativeExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 765, 24);
                    throw new ParseException(lastConsumedToken, first_set$Java_ccc$765$24, parsingStack);
                }
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:765:50
                pushOntoCallStack("MultiplicativeExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 765, 50);
                try {
                    UnaryExpression();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> UnaryExpression_FIRST_SET = UnaryExpression_FIRST_SET_init();

    private static EnumSet<TokenType> UnaryExpression_FIRST_SET_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:768:1
    final public void UnaryExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "UnaryExpression";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:768:1
        UnaryExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new UnaryExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:769:3
            if (nextTokenType() == PLUS || nextTokenType == MINUS) {
                if (nextTokenType() == PLUS) {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:769:5
                    consumeToken(PLUS);
                } else if (nextTokenType() == MINUS) {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:769:14
                    consumeToken(MINUS);
                } else {
                    pushOntoCallStack("UnaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 769, 5);
                    throw new ParseException(lastConsumedToken, first_set$Java_ccc$769$5, parsingStack);
                }
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:769:24
                pushOntoCallStack("UnaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 769, 24);
                try {
                    UnaryExpression();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == INCR) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:771:3
                pushOntoCallStack("UnaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 771, 3);
                try {
                    PreIncrementExpression();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == DECR) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:773:3
                pushOntoCallStack("UnaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 773, 3);
                try {
                    PreDecrementExpression();
                } finally {
                    popCallStack();
                }
            } else if (first_set$Java_ccc$775$3.contains(nextTokenType())) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:775:3
                pushOntoCallStack("UnaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 775, 3);
                try {
                    UnaryExpressionNotPlusMinus();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("UnaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 769, 3);
                throw new ParseException(lastConsumedToken, UnaryExpression_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:778:1
    final public void PreIncrementExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "PreIncrementExpression";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:778:1
        PreIncrementExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new PreIncrementExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:779:3
            consumeToken(INCR);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:779:10
            pushOntoCallStack("PreIncrementExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 779, 10);
            try {
                UnaryExpression();
            } finally {
                popCallStack();
            }
            // Code for Assertion specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:780:3
            if (!(((Expression) peekNode()).isAssignableTo())) {
                fail("Assertion at: /Users/bnaudts/git/congo/examples/java/Java.ccc:780:3 failed. " + "Expression after ++ is not an assignable variable.", getToken(1));
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:784:1
    final public void PreDecrementExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "PreDecrementExpression";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:784:1
        PreDecrementExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new PreDecrementExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:785:3
            consumeToken(DECR);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:785:10
            pushOntoCallStack("PreDecrementExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 785, 10);
            try {
                UnaryExpression();
            } finally {
                popCallStack();
            }
            // Code for Assertion specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:786:3
            if (!(((Expression) peekNode()).isAssignableTo())) {
                fail("Assertion at: /Users/bnaudts/git/congo/examples/java/Java.ccc:786:3 failed. " + "expression after -- is not an assignable variable", getToken(1));
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> UnaryExpressionNotPlusMinus_FIRST_SET = UnaryExpressionNotPlusMinus_FIRST_SET_init();

    private static EnumSet<TokenType> UnaryExpressionNotPlusMinus_FIRST_SET_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, AT, BANG, TILDE, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:790:1
    final public void UnaryExpressionNotPlusMinus() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "UnaryExpressionNotPlusMinus";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:790:1
        UnaryExpressionNotPlusMinus thisProduction = null;
        if (buildTree) {
            thisProduction = new UnaryExpressionNotPlusMinus();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:791:3
            if (nextTokenType() == BANG || nextTokenType == TILDE) {
                if (nextTokenType() == TILDE) {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:791:5
                    consumeToken(TILDE);
                } else if (nextTokenType() == BANG) {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:791:15
                    consumeToken(BANG);
                } else {
                    pushOntoCallStack("UnaryExpressionNotPlusMinus", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 791, 5);
                    throw new ParseException(lastConsumedToken, first_set$Java_ccc$791$5, parsingStack);
                }
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:791:24
                pushOntoCallStack("UnaryExpressionNotPlusMinus", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 791, 24);
                try {
                    UnaryExpression();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$793$3()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:793:3
                pushOntoCallStack("UnaryExpressionNotPlusMinus", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 793, 3);
                try {
                    LambdaExpression();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == SWITCH) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:795:3
                pushOntoCallStack("UnaryExpressionNotPlusMinus", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 795, 3);
                try {
                    SwitchExpression();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$797$3()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:797:3
                pushOntoCallStack("UnaryExpressionNotPlusMinus", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 797, 3);
                try {
                    PrimitiveCastExpression();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$799$3()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:799:3
                pushOntoCallStack("UnaryExpressionNotPlusMinus", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 799, 3);
                try {
                    ObjectCastExpression();
                } finally {
                    popCallStack();
                }
            } else if (first_set$Java_ccc$801$3.contains(nextTokenType())) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:801:3
                pushOntoCallStack("UnaryExpressionNotPlusMinus", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 801, 3);
                try {
                    PostfixExpression();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("UnaryExpressionNotPlusMinus", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 791, 3);
                throw new ParseException(lastConsumedToken, UnaryExpressionNotPlusMinus_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:804:1
    final public void PostfixExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "PostfixExpression";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:804:1
        PostfixExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new PostfixExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:805:3
            pushOntoCallStack("PostfixExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 805, 3);
            try {
                PrimaryExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:806:3
            // Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:807:5
            if ((((Expression) peekNode()).isAssignableTo()) && scan$Java_ccc$807$5()) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:809:5
                consumeToken(INCR);
            } else if (nextTokenType() == DECR) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:809:14
                consumeToken(DECR);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:813:1
    final public void SwitchExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "SwitchExpression";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:813:1
        SwitchExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new SwitchExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:814:4
            pushOntoCallStack("SwitchExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 814, 4);
            try {
                SwitchStatement();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:817:1
    final public void PrimitiveCastExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "PrimitiveCastExpression";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:817:1
        CastExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new CastExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:818:4
            consumeToken(LPAREN);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:818:13
            pushOntoCallStack("PrimitiveCastExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 818, 13);
            try {
                PrimitiveType();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:818:27
            consumeToken(RPAREN);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:818:41
            pushOntoCallStack("PrimitiveCastExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 818, 41);
            try {
                UnaryExpression();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:821:1
    final public void ObjectCastExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ObjectCastExpression";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:821:1
        ObjectCastExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new ObjectCastExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:822:4
            consumeToken(LPAREN);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:822:13
            pushOntoCallStack("ObjectCastExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 822, 13);
            try {
                ReferenceType();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:822:27
            while (true) {
                if (!(nextTokenType() == BIT_AND)) break;
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:822:28
                consumeToken(BIT_AND);
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:822:38
                pushOntoCallStack("ObjectCastExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 822, 38);
                try {
                    ObjectType();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:822:51
            consumeToken(RPAREN);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:822:66
            pushOntoCallStack("ObjectCastExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 822, 66);
            try {
                UnaryExpressionNotPlusMinus();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:825:1
    final public void PrimaryExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "PrimaryExpression";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:825:1
        if (first_set$Java_ccc$827$3.contains(nextTokenType())) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:827:3
            pushOntoCallStack("PrimaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 827, 3);
            try {
                LiteralExpression();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == THIS) {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:829:3
            LiteralExpression PrimaryExpression1 = null;
            if (buildTree) {
                PrimaryExpression1 = new LiteralExpression();
                openNodeScope(PrimaryExpression1);
            }
            ParseException parseException30 = null;
            int callStackSize31 = parsingStack.size();
            try {
                consumeToken(THIS);
            } catch (ParseException e) {
                parseException30 = e;
                throw e;
            } finally {
                restoreCallStack(callStackSize31);
                if (PrimaryExpression1 != null) {
                    if (parseException30 == null) {
                        closeNodeScope(PrimaryExpression1, true);
                    } else {
                        clearNodeScope();
                    }
                }
            }
        } else if (nextTokenType() == SUPER) {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:831:3
            LiteralExpression PrimaryExpression2 = null;
            if (buildTree) {
                PrimaryExpression2 = new LiteralExpression();
                openNodeScope(PrimaryExpression2);
            }
            ParseException parseException38 = null;
            int callStackSize39 = parsingStack.size();
            try {
                consumeToken(SUPER);
            } catch (ParseException e) {
                parseException38 = e;
                throw e;
            } finally {
                restoreCallStack(callStackSize39);
                if (PrimaryExpression2 != null) {
                    if (parseException38 == null) {
                        closeNodeScope(PrimaryExpression2, true);
                    } else {
                        clearNodeScope();
                    }
                }
            }
        } else if (nextTokenType() == LPAREN) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:833:3
            pushOntoCallStack("PrimaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 833, 3);
            try {
                Parentheses();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == NEW) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:835:3
            pushOntoCallStack("PrimaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 835, 3);
            try {
                AllocationExpression();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$837$3()) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:837:3
            pushOntoCallStack("PrimaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 837, 3);
            try {
                ClassLiteral();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$839$3()) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:839:3
            pushOntoCallStack("PrimaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 839, 3);
            try {
                MethodReference();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == IDENTIFIER) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:841:3
            pushOntoCallStack("PrimaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 841, 3);
            try {
                Name();
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("PrimaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 827, 3);
            throw new ParseException(lastConsumedToken, first_set$Java_ccc$827$3$, parsingStack);
        }
        // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:843:2
        while (true) {
            // Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:844:3
            if (scan$Java_ccc$844$3()) {
                DotThis PrimaryExpression3 = null;
                if (buildTree) {
                    PrimaryExpression3 = new DotThis();
                    openNodeScope(PrimaryExpression3);
                }
                ParseException parseException94 = null;
                int callStackSize95 = parsingStack.size();
                try {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:844:4
                    consumeToken(DOT);
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:844:10
                    consumeToken(THIS);
                } catch (ParseException e) {
                    parseException94 = e;
                    throw e;
                } finally {
                    restoreCallStack(callStackSize95);
                    if (PrimaryExpression3 != null) {
                        if (parseException94 == null) {
                            closeNodeScope(PrimaryExpression3, nodeArity() + 1);
                        } else {
                            clearNodeScope();
                        }
                    }
                }
            } else if (scan$Java_ccc$846$3()) {
                DotSuper PrimaryExpression4 = null;
                if (buildTree) {
                    PrimaryExpression4 = new DotSuper();
                    openNodeScope(PrimaryExpression4);
                }
                ParseException parseException113 = null;
                int callStackSize114 = parsingStack.size();
                try {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:846:4
                    consumeToken(DOT);
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:846:10
                    consumeToken(SUPER);
                } catch (ParseException e) {
                    parseException113 = e;
                    throw e;
                } finally {
                    restoreCallStack(callStackSize114);
                    if (PrimaryExpression4 != null) {
                        if (parseException113 == null) {
                            closeNodeScope(PrimaryExpression4, nodeArity() + 1);
                        } else {
                            clearNodeScope();
                        }
                    }
                }
            } else if (scan$Java_ccc$848$3()) {
                DotNew PrimaryExpression5 = null;
                if (buildTree) {
                    PrimaryExpression5 = new DotNew();
                    openNodeScope(PrimaryExpression5);
                }
                ParseException parseException132 = null;
                int callStackSize133 = parsingStack.size();
                try {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:848:4
                    consumeToken(DOT);
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:848:16
                    pushOntoCallStack("PrimaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 848, 16);
                    try {
                        AllocationExpression();
                    } finally {
                        popCallStack();
                    }
                } catch (ParseException e) {
                    parseException132 = e;
                    throw e;
                } finally {
                    restoreCallStack(callStackSize133);
                    if (PrimaryExpression5 != null) {
                        if (parseException132 == null) {
                            closeNodeScope(PrimaryExpression5, nodeArity() + 1);
                        } else {
                            clearNodeScope();
                        }
                    }
                }
            } else if (nextTokenType() == LBRACKET) {
                ArrayAccess PrimaryExpression6 = null;
                if (buildTree) {
                    PrimaryExpression6 = new ArrayAccess();
                    openNodeScope(PrimaryExpression6);
                }
                ParseException parseException151 = null;
                int callStackSize152 = parsingStack.size();
                try {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:850:4
                    consumeToken(LBRACKET);
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:850:15
                    pushOntoCallStack("PrimaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 850, 15);
                    try {
                        Expression();
                    } finally {
                        popCallStack();
                    }
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:850:26
                    consumeToken(RBRACKET);
                } catch (ParseException e) {
                    parseException151 = e;
                    throw e;
                } finally {
                    restoreCallStack(callStackSize152);
                    if (PrimaryExpression6 != null) {
                        if (parseException151 == null) {
                            closeNodeScope(PrimaryExpression6, nodeArity() + 1);
                        } else {
                            clearNodeScope();
                        }
                    }
                }
            } else if (nextTokenType() == DOT) {
                DotName PrimaryExpression7 = null;
                if (buildTree) {
                    PrimaryExpression7 = new DotName();
                    openNodeScope(PrimaryExpression7);
                }
                ParseException parseException174 = null;
                int callStackSize175 = parsingStack.size();
                try {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:852:4
                    consumeToken(DOT);
                    // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:852:10
                    if (scan$Java_ccc$852$11()) {
                        // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:852:11
                        pushOntoCallStack("PrimaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 852, 11);
                        try {
                            TypeArguments();
                        } finally {
                            popCallStack();
                        }
                    }
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:852:26
                    consumeToken(IDENTIFIER);
                } catch (ParseException e) {
                    parseException174 = e;
                    throw e;
                } finally {
                    restoreCallStack(callStackSize175);
                    if (PrimaryExpression7 != null) {
                        if (parseException174 == null) {
                            closeNodeScope(PrimaryExpression7, nodeArity() + 1);
                        } else {
                            clearNodeScope();
                        }
                    }
                }
            } else if (nextTokenType() == DOUBLE_COLON) {
                MethodReference PrimaryExpression8 = null;
                if (buildTree) {
                    PrimaryExpression8 = new MethodReference();
                    openNodeScope(PrimaryExpression8);
                }
                ParseException parseException205 = null;
                int callStackSize206 = parsingStack.size();
                try {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:854:4
                    consumeToken(DOUBLE_COLON);
                    // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:854:19
                    if (scan$Java_ccc$854$20()) {
                        // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:854:20
                        pushOntoCallStack("PrimaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 854, 20);
                        try {
                            TypeArguments();
                        } finally {
                            popCallStack();
                        }
                    }
                    if (nextTokenType() == IDENTIFIER) {
                        // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:854:36
                        consumeToken(IDENTIFIER);
                    } else if (nextTokenType() == NEW) {
                        // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:854:49
                        consumeToken(NEW);
                    } else {
                        pushOntoCallStack("PrimaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 854, 36);
                        throw new ParseException(lastConsumedToken, first_set$Java_ccc$854$36, parsingStack);
                    }
                } catch (ParseException e) {
                    parseException205 = e;
                    throw e;
                } finally {
                    restoreCallStack(callStackSize206);
                    if (PrimaryExpression8 != null) {
                        if (parseException205 == null) {
                            closeNodeScope(PrimaryExpression8, nodeArity() + 1);
                        } else {
                            clearNodeScope();
                        }
                    }
                }
            } else if (scan$Java_ccc$862$3()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:864:3
                MethodCall PrimaryExpression9 = null;
                if (buildTree) {
                    PrimaryExpression9 = new MethodCall();
                    openNodeScope(PrimaryExpression9);
                }
                ParseException parseException255 = null;
                int callStackSize256 = parsingStack.size();
                try {
                    pushOntoCallStack("PrimaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 864, 3);
                    try {
                        InvocationArguments();
                    } finally {
                        popCallStack();
                    }
                } catch (ParseException e) {
                    parseException255 = e;
                    throw e;
                } finally {
                    restoreCallStack(callStackSize256);
                    if (PrimaryExpression9 != null) {
                        if (parseException255 == null) {
                            closeNodeScope(PrimaryExpression9, nodeArity() + 1);
                        } else {
                            clearNodeScope();
                        }
                    }
                }
            } else {
                break;
            }
        }
        // Code for Assertion specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:866:2
        if (!(getTokenType(0) != SUPER)) {
            fail("Assertion at: /Users/bnaudts/git/congo/examples/java/Java.ccc:866:2 failed. " + "Not a valid expression here " + getToken(0).getLocation(), getToken(1));
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:869:1
    final public void LiteralExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "LiteralExpression";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:869:1
        LiteralExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new LiteralExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:869:22
            pushOntoCallStack("LiteralExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 869, 22);
            try {
                Literal();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:871:1
    final public void Parentheses() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Parentheses";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:871:1
        Parentheses thisProduction = null;
        if (buildTree) {
            thisProduction = new Parentheses();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:872:5
            consumeToken(LPAREN);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:873:5
            pushOntoCallStack("Parentheses", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 873, 5);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:873:16
            thisProduction.setNestedExpression((Expression) peekNode());
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:874:5
            consumeToken(RPAREN);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:882:1
    final public void ClassLiteral() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ClassLiteral";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:882:1
        ClassLiteral thisProduction = null;
        if (buildTree) {
            thisProduction = new ClassLiteral();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            if (nextTokenType() == VOID) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:882:17
                consumeToken(VOID);
            } else if (first_set$Java_ccc$882$26.contains(nextTokenType())) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:882:26
                pushOntoCallStack("ClassLiteral", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 882, 26);
                try {
                    Type();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("ClassLiteral", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 882, 17);
                throw new ParseException(lastConsumedToken, first_set$Java_ccc$882$17, parsingStack);
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:882:32
            consumeToken(DOT);
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:882:38
            consumeToken(CLASS);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:884:1
    final public void MethodReference() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "MethodReference";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:884:1
        MethodReference thisProduction = null;
        if (buildTree) {
            thisProduction = new MethodReference();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            if (first_set$Java_ccc$885$6.contains(nextTokenType())) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:885:6
                pushOntoCallStack("MethodReference", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 885, 6);
                try {
                    Type();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == SUPER) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:885:13
                consumeToken(SUPER);
            } else {
                pushOntoCallStack("MethodReference", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 885, 6);
                throw new ParseException(lastConsumedToken, first_set$Java_ccc$885$6$, parsingStack);
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:886:6
            consumeToken(DOUBLE_COLON);
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:887:6
            if (scan$Java_ccc$887$7()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:887:7
                pushOntoCallStack("MethodReference", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 887, 7);
                try {
                    TypeArguments();
                } finally {
                    popCallStack();
                }
            }
            if (nextTokenType() == IDENTIFIER) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:888:7
                consumeToken(IDENTIFIER);
            } else if (nextTokenType() == NEW) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:888:20
                consumeToken(NEW);
            } else {
                pushOntoCallStack("MethodReference", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 888, 7);
                throw new ParseException(lastConsumedToken, first_set$Java_ccc$888$7, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> Literal_FIRST_SET = Literal_FIRST_SET_init();

    private static EnumSet<TokenType> Literal_FIRST_SET_init() {
        return tokenTypeSet(FALSE, NULL, TRUE, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL);
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:891:1
    final public void Literal() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Literal";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:891:1
        // Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:892:3
        if (nextTokenType() == INTEGER_LITERAL) {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:892:3
            consumeToken(INTEGER_LITERAL);
        } else if (nextTokenType() == LONG_LITERAL) {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:894:3
            consumeToken(LONG_LITERAL);
        } else if (nextTokenType() == FLOATING_POINT_LITERAL) {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:896:3
            consumeToken(FLOATING_POINT_LITERAL);
        } else if (nextTokenType() == CHARACTER_LITERAL) {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:898:3
            consumeToken(CHARACTER_LITERAL);
        } else if (nextTokenType() == STRING_LITERAL) {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:900:3
            consumeToken(STRING_LITERAL);
        } else if (nextTokenType() == TEXT_BLOCK_LITERAL) {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:902:3
            consumeToken(TEXT_BLOCK_LITERAL);
        } else if (nextTokenType() == TRUE) {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:904:3
            consumeToken(TRUE);
        } else if (nextTokenType() == FALSE) {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:906:3
            consumeToken(FALSE);
        } else if (nextTokenType() == NULL) {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:908:3
            consumeToken(NULL);
        } else {
            pushOntoCallStack("Literal", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 892, 3);
            throw new ParseException(lastConsumedToken, Literal_FIRST_SET, parsingStack);
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:911:1
    final public void InvocationArguments() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "InvocationArguments";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:911:1
        InvocationArguments thisProduction = null;
        if (buildTree) {
            thisProduction = new InvocationArguments();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:912:5
            consumeToken(LPAREN);
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:913:5
            if (first_set$Java_ccc$913$7.contains(nextTokenType())) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:913:7
                pushOntoCallStack("InvocationArguments", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 913, 7);
                try {
                    Expression();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:913:18
                while (true) {
                    if (!(nextTokenType() == COMMA)) break;
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:913:19
                    consumeToken(COMMA);
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:913:27
                    pushOntoCallStack("InvocationArguments", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 913, 27);
                    try {
                        Expression();
                    } finally {
                        popCallStack();
                    }
                }
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:914:5
            consumeToken(RPAREN);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> AllocationExpression_FIRST_SET = tokenTypeSet(NEW);

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:917:1
    final public void AllocationExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "AllocationExpression";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:917:1
        AllocationExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new AllocationExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:918:3
            if (scan$Java_ccc$918$3()) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:918:3
                consumeToken(NEW);
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:918:9
                pushOntoCallStack("AllocationExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 918, 9);
                try {
                    PrimitiveType();
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:918:28
                pushOntoCallStack("AllocationExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 918, 28);
                try {
                    ArrayDimsAndInits();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == NEW) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:920:3
                consumeToken(NEW);
                // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:920:9
                if (scan$Java_ccc$920$10()) {
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:920:10
                    pushOntoCallStack("AllocationExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 920, 10);
                    try {
                        TypeArguments();
                    } finally {
                        popCallStack();
                    }
                }
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:920:25
                pushOntoCallStack("AllocationExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 920, 25);
                try {
                    ObjectType();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:920:36
                if (nextTokenType() == LT) {
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:920:38
                    pushOntoCallStack("AllocationExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 920, 38);
                    try {
                        PossiblyEmptyTypeArguments();
                    } finally {
                        popCallStack();
                    }
                }
                if (nextTokenType() == LBRACKET || nextTokenType == AT) {
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:922:7
                    pushOntoCallStack("AllocationExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 922, 7);
                    try {
                        ArrayDimsAndInits();
                    } finally {
                        popCallStack();
                    }
                } else if (nextTokenType() == LPAREN) {
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:924:7
                    pushOntoCallStack("AllocationExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 924, 7);
                    try {
                        InvocationArguments();
                    } finally {
                        popCallStack();
                    }
                    // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:924:27
                    if (nextTokenType() == LBRACE) {
                        // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:924:29
                        pushOntoCallStack("AllocationExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 924, 29);
                        try {
                            ClassOrInterfaceBody();
                        } finally {
                            popCallStack();
                        }
                    }
                } else {
                    pushOntoCallStack("AllocationExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 922, 7);
                    throw new ParseException(lastConsumedToken, first_set$Java_ccc$922$7, parsingStack);
                }
            } else {
                pushOntoCallStack("AllocationExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 918, 3);
                throw new ParseException(lastConsumedToken, AllocationExpression_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> ArrayDimsAndInits_FIRST_SET = tokenTypeSet(LBRACKET, AT);

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:928:1
    final public void ArrayDimsAndInits() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ArrayDimsAndInits";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:928:1
        ArrayDimsAndInits thisProduction = null;
        if (buildTree) {
            thisProduction = new ArrayDimsAndInits();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:929:3
            if (scan$Java_ccc$929$3()) {
                // Code for OneOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:930:3
                while (true) {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:931:5
                    consumeToken(LBRACKET);
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:931:22
                    pushOntoCallStack("ArrayDimsAndInits", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 931, 22);
                    try {
                        Expression();
                    } finally {
                        popCallStack();
                    }
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:931:33
                    consumeToken(RBRACKET);
                    if (!(scan$Java_ccc$931$5())) break;
                }
                // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:933:3
                while (true) {
                    if (!(scan$Java_ccc$934$5())) break;
                    // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:934:5
                    while (true) {
                        if (!(scan$Java_ccc$934$6())) break;
                        // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:934:6
                        pushOntoCallStack("ArrayDimsAndInits", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 934, 6);
                        try {
                            Annotation();
                        } finally {
                            popCallStack();
                        }
                    }
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:934:19
                    consumeToken(LBRACKET);
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:934:29
                    consumeToken(RBRACKET);
                }
            } else if (nextTokenType() == LBRACKET || nextTokenType == AT) {
                // Code for OneOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:937:3
                while (true) {
                    // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:938:5
                    while (true) {
                        if (!(scan$Java_ccc$938$6())) break;
                        // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:938:6
                        pushOntoCallStack("ArrayDimsAndInits", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 938, 6);
                        try {
                            Annotation();
                        } finally {
                            popCallStack();
                        }
                    }
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:938:19
                    consumeToken(LBRACKET);
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:938:29
                    consumeToken(RBRACKET);
                    if (!(nextTokenType() == LBRACKET || nextTokenType == AT)) break;
                }
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:940:3
                pushOntoCallStack("ArrayDimsAndInits", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 940, 3);
                try {
                    ArrayInitializer();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("ArrayDimsAndInits", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 929, 3);
                throw new ParseException(lastConsumedToken, ArrayDimsAndInits_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:943:1
    final public void Label() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Label";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:943:1
        Label thisProduction = null;
        if (buildTree) {
            thisProduction = new Label();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:943:9
            consumeToken(IDENTIFIER);
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:943:21
            consumeToken(COLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:945:1
    final public void LabeledStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "LabeledStatement";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:945:1
        LabeledStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new LabeledStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:945:20
            pushOntoCallStack("LabeledStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 945, 20);
            try {
                Label();
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:945:31
            pushOntoCallStack("LabeledStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 945, 31);
            try {
                Statement();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> Statement_FIRST_SET = Statement_FIRST_SET_init();

    private static EnumSet<TokenType> Statement_FIRST_SET_init() {
        return tokenTypeSet(_ASSERT, BOOLEAN, BREAK, BYTE, CHAR, CONTINUE, DO, DOUBLE, FALSE, FLOAT, FOR, IF, INT, LONG, NEW, NULL, RETURN, SHORT, SUPER, SWITCH, SYNCHRONIZED, THIS, THROW, TRUE, TRY, VOID, WHILE, YIELD, LPAREN, LBRACE, SEMICOLON, AT, INCR, DECR, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:947:1
    final public void Statement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Statement";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:947:1
        // Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:948:3
        if (scan$Java_ccc$948$3()) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:948:3
            pushOntoCallStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 948, 3);
            try {
                LabeledStatement();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == _ASSERT) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:950:3
            pushOntoCallStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 950, 3);
            try {
                AssertStatement();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == LBRACE) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:952:3
            pushOntoCallStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 952, 3);
            try {
                Block();
            } finally {
                popCallStack();
            }
        } else if ((checkNextTokenImage("yield")) && scan$Java_ccc$954$3()) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:954:3
            pushOntoCallStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 954, 3);
            try {
                YieldStatement();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == SEMICOLON) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:956:3
            pushOntoCallStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 956, 3);
            try {
                EmptyStatement();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == SWITCH) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:958:3
            pushOntoCallStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 958, 3);
            try {
                SwitchStatement();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == IF) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:960:3
            pushOntoCallStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 960, 3);
            try {
                IfStatement();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == WHILE) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:962:3
            pushOntoCallStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 962, 3);
            try {
                WhileStatement();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == DO) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:964:3
            pushOntoCallStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 964, 3);
            try {
                DoStatement();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == FOR) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:966:3
            pushOntoCallStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 966, 3);
            try {
                ForStatement();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == BREAK) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:968:3
            pushOntoCallStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 968, 3);
            try {
                BreakStatement();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == CONTINUE) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:970:3
            pushOntoCallStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 970, 3);
            try {
                ContinueStatement();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == RETURN) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:972:3
            pushOntoCallStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 972, 3);
            try {
                ReturnStatement();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == THROW) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:974:3
            pushOntoCallStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 974, 3);
            try {
                ThrowStatement();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == SYNCHRONIZED) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:976:3
            pushOntoCallStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 976, 3);
            try {
                SynchronizedStatement();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == TRY) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:978:3
            pushOntoCallStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 978, 3);
            try {
                TryStatement();
            } finally {
                popCallStack();
            }
        } else if (first_set$Java_ccc$980$3.contains(nextTokenType())) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:980:3
            pushOntoCallStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 980, 3);
            try {
                ExpressionStatement();
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 948, 3);
            throw new ParseException(lastConsumedToken, Statement_FIRST_SET, parsingStack);
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1006:1
    final public void AssertStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "AssertStatement";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1006:1
        AssertStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new AssertStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1006:19
            consumeToken(_ASSERT);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1006:29
            pushOntoCallStack("AssertStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1006, 29);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1006:40
            if (nextTokenType() == COLON) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1006:42
                consumeToken(COLON);
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1006:50
                pushOntoCallStack("AssertStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1006, 50);
                try {
                    Expression();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1006:63
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1008:1
    final public void Block() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Block";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1008:1
        CodeBlock thisProduction = null;
        if (buildTree) {
            thisProduction = new CodeBlock();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1008:20
            consumeToken(LBRACE);
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1008:29
            while (true) {
                if (!(scan$Java_ccc$1008$30())) break;
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1008:50
                pushOntoCallStack("Block", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1008, 50);
                try {
                    BlockStatement();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1008:68
            consumeToken(RBRACE);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1010:1
    final public void BlockStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "BlockStatement";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1010:1
        // Code for Assertion specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1011:2
        if (assert$Java_ccc$1011$11()) {
            fail("Assertion at: /Users/bnaudts/git/congo/examples/java/Java.ccc:1011:2 failed. " + "Cannot declare anything to be public, private, protected, or static  in a local context", getToken(1));
        }
        if ((checkNextTokenImage("yield")) && scan$Java_ccc$1016$3()) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1016:3
            pushOntoCallStack("BlockStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1016, 3);
            try {
                YieldStatement();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$1018$3()) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1018:3
            pushOntoCallStack("BlockStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1018, 3);
            try {
                RecordDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$1020$3()) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1020:3
            pushOntoCallStack("BlockStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1020, 3);
            try {
                LocalVariableDeclaration();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1020:28
            Node varDecl = peekNode();
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1021:3
            consumeToken(SEMICOLON);
            // Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1021:15
            varDecl.add(popNode());
        } else if (scan$Java_ccc$1023$3()) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1023:3
            pushOntoCallStack("BlockStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1023, 3);
            try {
                ClassDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$1025$3()) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1025:3
            pushOntoCallStack("BlockStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1025, 3);
            try {
                InterfaceDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$1027$3()) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1027:3
            pushOntoCallStack("BlockStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1027, 3);
            try {
                EnumDeclaration();
            } finally {
                popCallStack();
            }
        } else if (first_set$Java_ccc$1029$3.contains(nextTokenType())) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1029:3
            pushOntoCallStack("BlockStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1029, 3);
            try {
                Statement();
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("BlockStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1016, 3);
            throw new ParseException(lastConsumedToken, first_set$Java_ccc$1016$3, parsingStack);
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1033:1
    final public void LocalVariableDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "LocalVariableDeclaration";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1033:1
        if (scan$Java_ccc$1037$6()) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1037:6
            pushOntoCallStack("LocalVariableDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1037, 6);
            try {
                NoVarDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$1039$6()) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1039:6
            pushOntoCallStack("LocalVariableDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1039, 6);
            try {
                VarDeclaration();
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("LocalVariableDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1037, 6);
            throw new ParseException(lastConsumedToken, first_set$Java_ccc$1037$6, parsingStack);
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1043:1
    final public void NoVarDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "NoVarDeclaration";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1043:1
        NoVarDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new NoVarDeclaration();
            openNodeScope(thisProduction);
        }
        permissibleModifiers = EnumSet.of(FINAL);
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1045:4
            pushOntoCallStack("NoVarDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1045, 4);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1046:4
            pushOntoCallStack("NoVarDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1046, 4);
            try {
                Type();
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1046:14
            pushOntoCallStack("NoVarDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1046, 14);
            try {
                VariableDeclarator();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1046:33
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1046:35
                consumeToken(COMMA);
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1046:43
                pushOntoCallStack("NoVarDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1046, 43);
                try {
                    VariableDeclarator();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1049:1
    final public void VarDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "VarDeclaration";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1049:1
        VarDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new VarDeclaration();
            openNodeScope(thisProduction);
        }
        permissibleModifiers = EnumSet.of(FINAL);
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1051:3
            pushOntoCallStack("VarDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1051, 3);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for Assertion specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1052:3
            if (!(checkNextTokenImage("var") && (getTokenType(2) == IDENTIFIER || getTokenType(2) == UNDERSCORE))) {
                fail("Assertion at: /Users/bnaudts/git/congo/examples/java/Java.ccc:1052:3 failed. ", getToken(1));
            }
            if (nextTokenType() == VAR) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1055:6
                consumeToken(VAR);
            } else if (nextTokenType() == IDENTIFIER) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1057:6
                consumeToken(IDENTIFIER);
                // Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1058:6
                replaceTokenType(TokenType.VAR);
            } else {
                pushOntoCallStack("VarDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1055, 6);
                throw new ParseException(lastConsumedToken, first_set$Java_ccc$1055$6, parsingStack);
            }
            if (nextTokenType() == IDENTIFIER) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1062:4
                consumeToken(IDENTIFIER);
            } else if (nextTokenType() == UNDERSCORE) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1062:17
                consumeToken(UNDERSCORE);
            } else {
                pushOntoCallStack("VarDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1062, 4);
                throw new ParseException(lastConsumedToken, first_set$Java_ccc$1062$4, parsingStack);
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1063:3
            if (nextTokenType() == ASSIGN) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1063:4
                consumeToken(ASSIGN);
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1063:13
                pushOntoCallStack("VarDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1063, 13);
                try {
                    Expression();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1080:1
    final public void EmptyStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "EmptyStatement";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1080:1
        EmptyStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new EmptyStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1080:19
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> StatementExpression_FIRST_SET = StatementExpression_FIRST_SET_init();

    private static EnumSet<TokenType> StatementExpression_FIRST_SET_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, THIS, TRUE, VOID, LPAREN, AT, INCR, DECR, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1082:1
    final public void StatementExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "StatementExpression";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1082:1
        StatementExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new StatementExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1083:3
            if (nextTokenType() == INCR) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1083:3
                pushOntoCallStack("StatementExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1083, 3);
                try {
                    PreIncrementExpression();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == DECR) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1085:3
                pushOntoCallStack("StatementExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1085, 3);
                try {
                    PreDecrementExpression();
                } finally {
                    popCallStack();
                }
            } else if (first_set$Java_ccc$1087$3.contains(nextTokenType())) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1087:3
                pushOntoCallStack("StatementExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1087, 3);
                try {
                    PrimaryExpression();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1088:3
                Expression lhs = (Expression) peekNode();
                if ((lhs.isAssignableTo()) && scan$Java_ccc$1090$7()) {
                    if (nextTokenType() == INCR || nextTokenType == DECR) {
                        PostfixExpression StatementExpression1 = null;
                        if (buildTree) {
                            StatementExpression1 = new PostfixExpression();
                            openNodeScope(StatementExpression1);
                        }
                        ParseException parseException59 = null;
                        int callStackSize60 = parsingStack.size();
                        try {
                            if (nextTokenType() == INCR) {
                                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1092:12
                                consumeToken(INCR);
                            } else if (nextTokenType() == DECR) {
                                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1092:21
                                consumeToken(DECR);
                            } else {
                                pushOntoCallStack("StatementExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1092, 12);
                                throw new ParseException(lastConsumedToken, first_set$Java_ccc$1092$12, parsingStack);
                            }
                        } catch (ParseException e) {
                            parseException59 = e;
                            throw e;
                        } finally {
                            restoreCallStack(callStackSize60);
                            if (StatementExpression1 != null) {
                                if (parseException59 == null) {
                                    closeNodeScope(StatementExpression1, 2);
                                } else {
                                    clearNodeScope();
                                }
                            }
                        }
                    } else if (first_set$Java_ccc$1094$11.contains(nextTokenType())) {
                        // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1094:11
                        pushOntoCallStack("StatementExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1094, 11);
                        try {
                            AssignmentOperator();
                        } finally {
                            popCallStack();
                        }
                        // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1094:30
                        AssignmentExpression StatementExpression2 = null;
                        if (buildTree) {
                            StatementExpression2 = new AssignmentExpression();
                            openNodeScope(StatementExpression2);
                        }
                        ParseException parseException90 = null;
                        int callStackSize91 = parsingStack.size();
                        try {
                            pushOntoCallStack("StatementExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1094, 30);
                            try {
                                Expression();
                            } finally {
                                popCallStack();
                            }
                        } catch (ParseException e) {
                            parseException90 = e;
                            throw e;
                        } finally {
                            restoreCallStack(callStackSize91);
                            if (StatementExpression2 != null) {
                                if (parseException90 == null) {
                                    closeNodeScope(StatementExpression2, 3);
                                } else {
                                    clearNodeScope();
                                }
                            }
                        }
                    } else {
                        pushOntoCallStack("StatementExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1092, 11);
                        throw new ParseException(lastConsumedToken, first_set$Java_ccc$1092$11, parsingStack);
                    }
                } else {
                    // Code for Assertion specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1097:7
                    if (!(lhs instanceof MethodCall || lhs instanceof AllocationExpression || lhs instanceof ExplicitConstructorInvocation)) {
                        fail("Assertion at: /Users/bnaudts/git/congo/examples/java/Java.ccc:1097:7 failed. " + "Not a valid statement.", getToken(1));
                    }
                }
            } else {
                pushOntoCallStack("StatementExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1083, 3);
                throw new ParseException(lastConsumedToken, StatementExpression_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1104:1
    final public void ExpressionStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ExpressionStatement";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1104:1
        ExpressionStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new ExpressionStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1104:23
            pushOntoCallStack("ExpressionStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1104, 23);
            try {
                StatementExpression();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1104:43
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> CasePattern_FIRST_SET = CasePattern_FIRST_SET_init();

    private static EnumSet<TokenType> CasePattern_FIRST_SET_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, _DEFAULT, DOUBLE, FINAL, FLOAT, INT, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VOLATILE, SEALED, NON_SEALED, AT, IDENTIFIER);
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1106:1
    final public void CasePattern() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "CasePattern";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1106:1
        CasePattern thisProduction = null;
        if (buildTree) {
            thisProduction = new CasePattern();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1107:5
            if (scan$Java_ccc$1107$5()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1107:5
                pushOntoCallStack("CasePattern", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1107, 5);
                try {
                    RecordPattern();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$1109$5()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1109:5
                pushOntoCallStack("CasePattern", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1109, 5);
                try {
                    TypePattern();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("CasePattern", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1107, 5);
                throw new ParseException(lastConsumedToken, CasePattern_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1112:1
    final public void RecordPattern() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "RecordPattern";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1112:1
        RecordPattern thisProduction = null;
        if (buildTree) {
            thisProduction = new RecordPattern();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1113:5
            pushOntoCallStack("RecordPattern", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1113, 5);
            try {
                ReferenceType();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1114:5
            consumeToken(LPAREN);
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1115:5
            if (scan$Java_ccc$1116$7()) {
                if (nextTokenType() == UNDERSCORE) {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1118:9
                    consumeToken(UNDERSCORE);
                } else if (first_set$Java_ccc$1120$9.contains(nextTokenType())) {
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1120:9
                    pushOntoCallStack("RecordPattern", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1120, 9);
                    try {
                        CasePattern();
                    } finally {
                        popCallStack();
                    }
                    // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1121:9
                    while (true) {
                        if (!(nextTokenType() == COMMA)) break;
                        // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1122:11
                        consumeToken(COMMA);
                        if (nextTokenType() == UNDERSCORE) {
                            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1123:12
                            consumeToken(UNDERSCORE);
                        } else if (first_set$Java_ccc$1123$25.contains(nextTokenType())) {
                            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1123:25
                            pushOntoCallStack("RecordPattern", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1123, 25);
                            try {
                                CasePattern();
                            } finally {
                                popCallStack();
                            }
                        } else {
                            pushOntoCallStack("RecordPattern", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1123, 12);
                            throw new ParseException(lastConsumedToken, first_set$Java_ccc$1123$12, parsingStack);
                        }
                    }
                } else {
                    pushOntoCallStack("RecordPattern", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1118, 9);
                    throw new ParseException(lastConsumedToken, first_set$Java_ccc$1118$9, parsingStack);
                }
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1127:5
            consumeToken(RPAREN);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1131:1
    final public void TypePattern() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "TypePattern";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1131:1
        LocalVariableDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new LocalVariableDeclaration();
            openNodeScope(thisProduction);
        }
        permissibleModifiers = EnumSet.of(FINAL);
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1133:3
            pushOntoCallStack("TypePattern", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1133, 3);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1133:13
            pushOntoCallStack("TypePattern", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1133, 13);
            try {
                Type();
            } finally {
                popCallStack();
            }
            if (nextTokenType() == IDENTIFIER) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1133:19
                consumeToken(IDENTIFIER);
            } else if (nextTokenType() == UNDERSCORE) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1133:32
                consumeToken(UNDERSCORE);
            } else {
                pushOntoCallStack("TypePattern", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1133, 19);
                throw new ParseException(lastConsumedToken, first_set$Java_ccc$1133$19, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1136:1
    final public void WhenClause() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "WhenClause";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1136:1
        WhenClause thisProduction = null;
        if (buildTree) {
            thisProduction = new WhenClause();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            if (nextTokenType() == WHEN) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1140:7
                consumeToken(WHEN);
            } else if (nextTokenType() == IDENTIFIER) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1142:7
                consumeToken(IDENTIFIER);
                // Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1143:7
                replaceTokenType(TokenType.WHEN);
            } else {
                pushOntoCallStack("WhenClause", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1140, 7);
                throw new ParseException(lastConsumedToken, first_set$Java_ccc$1140$7, parsingStack);
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1147:4
            pushOntoCallStack("WhenClause", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1147, 4);
            try {
                Expression();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1150:1
    final public void SwitchStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "SwitchStatement";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1150:1
        SwitchStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new SwitchStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1151:3
            consumeToken(SWITCH);
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1151:12
            consumeToken(LPAREN);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1151:21
            pushOntoCallStack("SwitchStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1151, 21);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1151:32
            consumeToken(RPAREN);
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1152:3
            consumeToken(LBRACE);
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1153:3
            // Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1154:5
            if (scan$Java_ccc$1154$5()) {
                // Code for OneOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1155:5
                while (true) {
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1155:6
                    pushOntoCallStack("SwitchStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1155, 6);
                    try {
                        NewCaseStatement();
                    } finally {
                        popCallStack();
                    }
                    if (!(nextTokenType() == CASE || nextTokenType == _DEFAULT)) break;
                }
            } else if (scan$Java_ccc$1157$5()) {
                // Code for OneOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1158:5
                while (true) {
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1158:6
                    pushOntoCallStack("SwitchStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1158, 6);
                    try {
                        ClassicCaseStatement();
                    } finally {
                        popCallStack();
                    }
                    if (!(nextTokenType() == CASE || nextTokenType == _DEFAULT)) break;
                }
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1160:3
            consumeToken(RBRACE);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1178:1
    final public void ClassicCaseStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ClassicCaseStatement";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1178:1
        ClassicCaseStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new ClassicCaseStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1179:3
            pushOntoCallStack("ClassicCaseStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1179, 3);
            try {
                ClassicSwitchLabel();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1180:3
            while (true) {
                if (!(scan$Java_ccc$1180$4())) break;
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1180:42
                pushOntoCallStack("ClassicCaseStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1180, 42);
                try {
                    BlockStatement();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1183:1
    final public void NewSwitchLabel() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "NewSwitchLabel";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1183:1
        NewSwitchLabel thisProduction = null;
        if (buildTree) {
            thisProduction = new NewSwitchLabel();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1184:3
            pushOntoCallStack("NewSwitchLabel", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1184, 3);
            try {
                CaseOrDefault();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1185:3
            consumeToken(LAMBDA);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1188:1
    final public void ClassicSwitchLabel() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ClassicSwitchLabel";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1188:1
        ClassicSwitchLabel thisProduction = null;
        if (buildTree) {
            thisProduction = new ClassicSwitchLabel();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1189:3
            pushOntoCallStack("ClassicSwitchLabel", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1189, 3);
            try {
                CaseOrDefault();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1190:3
            consumeToken(COLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> CaseOrDefault_FIRST_SET = tokenTypeSet(CASE, _DEFAULT);

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1194:1
    final public void CaseOrDefault() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "CaseOrDefault";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1194:1
        // Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1195:4
        if (scan$Java_ccc$1195$4()) {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1195:4
            consumeToken(CASE);
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1195:11
            consumeToken(NULL);
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1195:23
            if (nextTokenType() == COMMA) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1195:24
                consumeToken(COMMA);
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1195:31
                consumeToken(_DEFAULT);
            }
        } else if (scan$Java_ccc$1197$4()) {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1197:4
            consumeToken(CASE);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1197:11
            pushOntoCallStack("CaseOrDefault", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1197, 11);
            try {
                CasePattern();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1197:28
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1197:29
                consumeToken(COMMA);
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1197:37
                pushOntoCallStack("CaseOrDefault", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1197, 37);
                try {
                    CasePattern();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1197:51
            if (scan$Java_ccc$1197$52()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1197:52
                pushOntoCallStack("CaseOrDefault", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1197, 52);
                try {
                    WhenClause();
                } finally {
                    popCallStack();
                }
            }
        } else if (nextTokenType() == CASE) {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1199:4
            consumeToken(CASE);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1199:11
            pushOntoCallStack("CaseOrDefault", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1199, 11);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1199:22
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1199:23
                consumeToken(COMMA);
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1199:31
                pushOntoCallStack("CaseOrDefault", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1199, 31);
                try {
                    Expression();
                } finally {
                    popCallStack();
                }
            }
        } else if (nextTokenType() == _DEFAULT) {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1201:4
            consumeToken(_DEFAULT);
        } else {
            pushOntoCallStack("CaseOrDefault", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1195, 4);
            throw new ParseException(lastConsumedToken, CaseOrDefault_FIRST_SET, parsingStack);
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1204:1
    final public void NewCaseStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "NewCaseStatement";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1204:1
        NewCaseStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new NewCaseStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1205:4
            pushOntoCallStack("NewCaseStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1205, 4);
            try {
                NewSwitchLabel();
            } finally {
                popCallStack();
            }
            if (nextTokenType() == LBRACE) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1207:6
                pushOntoCallStack("NewCaseStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1207, 6);
                try {
                    Block();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == THROW) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1209:6
                pushOntoCallStack("NewCaseStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1209, 6);
                try {
                    ThrowStatement();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$1211$6()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1212:9
                pushOntoCallStack("NewCaseStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1212, 9);
                try {
                    Expression();
                } finally {
                    popCallStack();
                }
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1212:20
                consumeToken(SEMICOLON);
            } else if (scan$Java_ccc$1214$6()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1215:6
                pushOntoCallStack("NewCaseStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1215, 6);
                try {
                    BlockStatement();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("NewCaseStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1207, 6);
                throw new ParseException(lastConsumedToken, first_set$Java_ccc$1207$6, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1219:1
    final public void IfStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "IfStatement";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1219:1
        IfStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new IfStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1220:3
            consumeToken(IF);
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1220:8
            consumeToken(LPAREN);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1220:17
            pushOntoCallStack("IfStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1220, 17);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1220:28
            consumeToken(RPAREN);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1220:37
            pushOntoCallStack("IfStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1220, 37);
            try {
                Statement();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1220:47
            if (nextTokenType() == ELSE) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1220:49
                consumeToken(ELSE);
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1220:56
                pushOntoCallStack("IfStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1220, 56);
                try {
                    Statement();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1237:1
    final public void WhileStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "WhileStatement";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1237:1
        WhileStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new WhileStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1238:3
            consumeToken(WHILE);
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1238:11
            consumeToken(LPAREN);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1238:20
            pushOntoCallStack("WhileStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1238, 20);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1238:31
            consumeToken(RPAREN);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1238:40
            pushOntoCallStack("WhileStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1238, 40);
            try {
                Statement();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1241:1
    final public void DoStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "DoStatement";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1241:1
        DoStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new DoStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1242:3
            consumeToken(DO);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1242:8
            pushOntoCallStack("DoStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1242, 8);
            try {
                Statement();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1242:18
            consumeToken(WHILE);
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1242:26
            consumeToken(LPAREN);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1242:35
            pushOntoCallStack("DoStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1242, 35);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1242:46
            consumeToken(RPAREN);
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1242:55
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> ForStatement_FIRST_SET = tokenTypeSet(FOR);

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1245:1
    final public void ForStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ForStatement";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1245:1
        // Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1246:4
        if (scan$Java_ccc$1246$4()) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1246:4
            pushOntoCallStack("ForStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1246, 4);
            try {
                BasicForStatement();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$1248$4()) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1248:4
            pushOntoCallStack("ForStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1248, 4);
            try {
                EnhancedForStatement();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == FOR) {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1250:4
            consumeToken(FOR);
            // Code for Failure specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1250:10
            fail("Failure", getToken(1));
        } else {
            pushOntoCallStack("ForStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1246, 4);
            throw new ParseException(lastConsumedToken, ForStatement_FIRST_SET, parsingStack);
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1253:1
    final public void BasicForStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "BasicForStatement";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1253:1
        BasicForStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new BasicForStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1254:4
            consumeToken(FOR);
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1254:10
            consumeToken(LPAREN);
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1254:19
            if (first_set$Java_ccc$1254$20.contains(nextTokenType())) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1254:20
                pushOntoCallStack("BasicForStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1254, 20);
                try {
                    ForInit();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1254:29
            consumeToken(SEMICOLON);
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1254:46
            if (first_set$Java_ccc$1254$47.contains(nextTokenType())) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1254:47
                pushOntoCallStack("BasicForStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1254, 47);
                try {
                    Expression();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1254:59
            consumeToken(SEMICOLON);
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1254:71
            if (first_set$Java_ccc$1254$72.contains(nextTokenType())) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1254:72
                pushOntoCallStack("BasicForStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1254, 72);
                try {
                    StatementExpressionList();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1254:97
            consumeToken(RPAREN);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1254:106
            pushOntoCallStack("BasicForStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1254, 106);
            try {
                Statement();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1257:1
    final public void EnhancedForStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "EnhancedForStatement";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1257:1
        EnhancedForStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new EnhancedForStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1258:4
            consumeToken(FOR);
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1258:10
            consumeToken(LPAREN);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1258:19
            pushOntoCallStack("EnhancedForStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1258, 19);
            try {
                LocalVariableDeclaration();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1258:44
            consumeToken(COLON);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1258:57
            pushOntoCallStack("EnhancedForStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1258, 57);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1258:68
            consumeToken(RPAREN);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1258:77
            pushOntoCallStack("EnhancedForStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1258, 77);
            try {
                Statement();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> ForInit_FIRST_SET = ForInit_FIRST_SET_init();

    private static EnumSet<TokenType> ForInit_FIRST_SET_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, _DEFAULT, DOUBLE, FALSE, FINAL, FLOAT, INT, LONG, NATIVE, NEW, NULL, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SUPER, SYNCHRONIZED, THIS, TRANSIENT, TRUE, VAR, VOID, VOLATILE, SEALED, NON_SEALED, LPAREN, AT, INCR, DECR, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1261:1
    final public void ForInit() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ForInit";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1261:1
        // Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1262:3
        if (scan$Java_ccc$1262$3()) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1262:3
            pushOntoCallStack("ForInit", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1262, 3);
            try {
                LocalVariableDeclaration();
            } finally {
                popCallStack();
            }
        } else if (first_set$Java_ccc$1264$3.contains(nextTokenType())) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1264:3
            pushOntoCallStack("ForInit", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1264, 3);
            try {
                StatementExpressionList();
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("ForInit", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1262, 3);
            throw new ParseException(lastConsumedToken, ForInit_FIRST_SET, parsingStack);
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1267:1
    final public void StatementExpressionList() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "StatementExpressionList";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1267:1
        // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1268:3
        pushOntoCallStack("StatementExpressionList", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1268, 3);
        try {
            StatementExpression();
        } finally {
            popCallStack();
        }
        // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1268:23
        while (true) {
            if (!(nextTokenType() == COMMA)) break;
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1268:25
            consumeToken(COMMA);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1268:33
            pushOntoCallStack("StatementExpressionList", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1268, 33);
            try {
                StatementExpression();
            } finally {
                popCallStack();
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1271:1
    final public void BreakStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "BreakStatement";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1271:1
        BreakStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new BreakStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1272:3
            consumeToken(BREAK);
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1272:11
            if (nextTokenType() == IDENTIFIER) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1272:13
                consumeToken(IDENTIFIER);
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1272:28
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1275:1
    final public void YieldStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "YieldStatement";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1275:1
        YieldStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new YieldStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            if (nextTokenType() == YIELD) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1278:7
                consumeToken(YIELD);
            } else if (nextTokenType() == IDENTIFIER) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1280:7
                consumeToken(IDENTIFIER);
                // Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1281:7
                replaceTokenType(TokenType.YIELD);
            } else {
                pushOntoCallStack("YieldStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1278, 7);
                throw new ParseException(lastConsumedToken, first_set$Java_ccc$1278$7, parsingStack);
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1285:4
            pushOntoCallStack("YieldStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1285, 4);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1286:4
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1289:1
    final public void ContinueStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ContinueStatement";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1289:1
        ContinueStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new ContinueStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1289:21
            consumeToken(CONTINUE);
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1289:32
            if (nextTokenType() == IDENTIFIER) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1289:34
                consumeToken(IDENTIFIER);
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1289:49
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1291:1
    final public void ReturnStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ReturnStatement";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1291:1
        ReturnStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new ReturnStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1291:19
            consumeToken(RETURN);
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1291:28
            if (first_set$Java_ccc$1291$29.contains(nextTokenType())) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1291:29
                pushOntoCallStack("ReturnStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1291, 29);
                try {
                    Expression();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1291:42
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1293:1
    final public void ThrowStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ThrowStatement";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1293:1
        ThrowStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new ThrowStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1293:18
            consumeToken(THROW);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1293:26
            pushOntoCallStack("ThrowStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1293, 26);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1293:37
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1295:1
    final public void SynchronizedStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "SynchronizedStatement";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1295:1
        SynchronizedStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new SynchronizedStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1295:25
            consumeToken(SYNCHRONIZED);
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1295:40
            consumeToken(LPAREN);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1295:49
            pushOntoCallStack("SynchronizedStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1295, 49);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1295:60
            consumeToken(RPAREN);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1295:69
            pushOntoCallStack("SynchronizedStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1295, 69);
            try {
                Block();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1297:1
    final public void TryStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "TryStatement";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1297:1
        TryStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new TryStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1298:3
            consumeToken(TRY);
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1299:3
            if (nextTokenType() == LPAREN) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1299:4
                pushOntoCallStack("TryStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1299, 4);
                try {
                    ResourcesInTryBlock();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1300:3
            pushOntoCallStack("TryStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1300, 3);
            try {
                Block();
            } finally {
                popCallStack();
            }
            // Code for Assertion specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1301:3
            if (!(getTokenType(1) == TokenType.FINALLY || getTokenType(1) == TokenType.CATCH || currentNodeScope.get(1) instanceof ResourcesInTryBlock)) {
                fail("Assertion at: /Users/bnaudts/git/congo/examples/java/Java.ccc:1301:3 failed. " + "Since this is not a try-with-resources, there must be at least one catch or finally block.", getToken(1));
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1305:3
            while (true) {
                if (!(nextTokenType() == CATCH)) break;
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1305:4
                pushOntoCallStack("TryStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1305, 4);
                try {
                    CatchBlock();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1306:3
            if (nextTokenType() == FINALLY) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1306:4
                pushOntoCallStack("TryStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1306, 4);
                try {
                    FinallyBlock();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1309:1
    final public void ResourcesInTryBlock() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ResourcesInTryBlock";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1309:1
        ResourcesInTryBlock thisProduction = null;
        if (buildTree) {
            thisProduction = new ResourcesInTryBlock();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1310:5
            consumeToken(LPAREN);
            // Code for OneOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1311:5
            while (true) {
                if (scan$Java_ccc$1315$10()) {
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1315:10
                    pushOntoCallStack("ResourcesInTryBlock", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1315, 10);
                    try {
                        LocalVariableDeclaration();
                    } finally {
                        popCallStack();
                    }
                } else if (nextTokenType() == IDENTIFIER) {
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1317:10
                    pushOntoCallStack("ResourcesInTryBlock", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1317, 10);
                    try {
                        Name();
                    } finally {
                        popCallStack();
                    }
                } else if (first_set$Java_ccc$1319$10.contains(nextTokenType())) {
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1319:10
                    pushOntoCallStack("ResourcesInTryBlock", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1319, 10);
                    try {
                        PrimaryExpression();
                    } finally {
                        popCallStack();
                    }
                    // Code for Assertion specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1320:10
                    if (!(peekNode() instanceof DotName)) {
                        fail("Assertion at: /Users/bnaudts/git/congo/examples/java/Java.ccc:1320:10 failed. " + "Resource should be a field access here.", getToken(1));
                    }
                } else {
                    pushOntoCallStack("ResourcesInTryBlock", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1315, 10);
                    throw new ParseException(lastConsumedToken, first_set$Java_ccc$1315$10, parsingStack);
                }
                // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1322:8
                if (nextTokenType() == SEMICOLON) {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1322:9
                    consumeToken(SEMICOLON);
                }
                if (!(scan$Java_ccc$1312$7())) break;
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1324:5
            consumeToken(RPAREN);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1327:1
    final public void CatchBlock() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "CatchBlock";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1327:1
        CatchBlock thisProduction = null;
        if (buildTree) {
            thisProduction = new CatchBlock();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1328:5
            consumeToken(CATCH);
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1329:5
            consumeToken(LPAREN);
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1330:5
            if (nextTokenType() == FINAL) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1330:6
                consumeToken(FINAL);
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1331:5
            pushOntoCallStack("CatchBlock", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1331, 5);
            try {
                ObjectType();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1331:16
            while (true) {
                if (!(nextTokenType() == BIT_OR)) break;
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1331:17
                consumeToken(BIT_OR);
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1331:27
                pushOntoCallStack("CatchBlock", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1331, 27);
                try {
                    ObjectType();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1331:42
            pushOntoCallStack("CatchBlock", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1331, 42);
            try {
                VariableDeclaratorId();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1332:5
            consumeToken(RPAREN);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1333:5
            pushOntoCallStack("CatchBlock", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1333, 5);
            try {
                Block();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1343:1
    final public void FinallyBlock() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "FinallyBlock";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1343:1
        FinallyBlock thisProduction = null;
        if (buildTree) {
            thisProduction = new FinallyBlock();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1343:16
            consumeToken(FINALLY);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1343:26
            pushOntoCallStack("FinallyBlock", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1343, 26);
            try {
                Block();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1352:1
    final public void Annotation() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Annotation";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1352:1
        if (scan$Java_ccc$1355$4()) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1355:4
            pushOntoCallStack("Annotation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1355, 4);
            try {
                NormalAnnotation();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$1357$4()) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1357:4
            pushOntoCallStack("Annotation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1357, 4);
            try {
                SingleMemberAnnotation();
            } finally {
                popCallStack();
            }
        } else if (nextTokenType() == AT) {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1359:4
            pushOntoCallStack("Annotation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1359, 4);
            try {
                MarkerAnnotation();
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("Annotation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1355, 4);
            throw new ParseException(lastConsumedToken, first_set$Java_ccc$1355$4, parsingStack);
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1363:1
    final public void NormalAnnotation() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "NormalAnnotation";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1363:1
        NormalAnnotation thisProduction = null;
        if (buildTree) {
            thisProduction = new NormalAnnotation();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1363:20
            consumeToken(AT);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1363:25
            pushOntoCallStack("NormalAnnotation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1363, 25);
            try {
                Name();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1363:30
            consumeToken(LPAREN);
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1363:45
            if (nextTokenType() == IDENTIFIER) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1363:47
                pushOntoCallStack("NormalAnnotation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1363, 47);
                try {
                    MemberValuePairs();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1363:66
            consumeToken(RPAREN);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1365:1
    final public void MarkerAnnotation() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "MarkerAnnotation";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1365:1
        MarkerAnnotation thisProduction = null;
        if (buildTree) {
            thisProduction = new MarkerAnnotation();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1365:20
            consumeToken(AT);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1365:25
            pushOntoCallStack("MarkerAnnotation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1365, 25);
            try {
                Name();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1367:1
    final public void SingleMemberAnnotation() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "SingleMemberAnnotation";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1367:1
        SingleMemberAnnotation thisProduction = null;
        if (buildTree) {
            thisProduction = new SingleMemberAnnotation();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1367:26
            consumeToken(AT);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1367:31
            pushOntoCallStack("SingleMemberAnnotation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1367, 31);
            try {
                Name();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1367:36
            consumeToken(LPAREN);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1367:50
            pushOntoCallStack("SingleMemberAnnotation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1367, 50);
            try {
                MemberValue();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1367:62
            consumeToken(RPAREN);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1378:1
    final public void MemberValuePairs() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "MemberValuePairs";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1378:1
        MemberValuePairs thisProduction = null;
        if (buildTree) {
            thisProduction = new MemberValuePairs();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1379:4
            pushOntoCallStack("MemberValuePairs", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1379, 4);
            try {
                MemberValuePair();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1379:20
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1379:22
                consumeToken(COMMA);
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1379:30
                pushOntoCallStack("MemberValuePairs", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1379, 30);
                try {
                    MemberValuePair();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1382:1
    final public void MemberValuePair() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "MemberValuePair";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1382:1
        MemberValuePair thisProduction = null;
        if (buildTree) {
            thisProduction = new MemberValuePair();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1382:20
            consumeToken(IDENTIFIER);
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1382:33
            consumeToken(ASSIGN);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1382:42
            pushOntoCallStack("MemberValuePair", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1382, 42);
            try {
                MemberValue();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> MemberValue_FIRST_SET = MemberValue_FIRST_SET_init();

    private static EnumSet<TokenType> MemberValue_FIRST_SET_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, LBRACE, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1384:1
    final public void MemberValue() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "MemberValue";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1384:1
        MemberValue thisProduction = null;
        if (buildTree) {
            thisProduction = new MemberValue();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1385:4
            if (scan$Java_ccc$1385$4()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1385:4
                pushOntoCallStack("MemberValue", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1385, 4);
                try {
                    Annotation();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == LBRACE) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1387:4
                pushOntoCallStack("MemberValue", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1387, 4);
                try {
                    MemberValueArrayInitializer();
                } finally {
                    popCallStack();
                }
            } else if (first_set$Java_ccc$1389$4.contains(nextTokenType())) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1389:4
                pushOntoCallStack("MemberValue", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1389, 4);
                try {
                    TernaryExpression();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("MemberValue", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1385, 4);
                throw new ParseException(lastConsumedToken, MemberValue_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1392:1
    final public void MemberValueArrayInitializer() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "MemberValueArrayInitializer";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1392:1
        MemberValueArrayInitializer thisProduction = null;
        if (buildTree) {
            thisProduction = new MemberValueArrayInitializer();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1393:3
            consumeToken(LBRACE);
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1394:3
            if (first_set$Java_ccc$1395$6.contains(nextTokenType())) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1395:6
                pushOntoCallStack("MemberValueArrayInitializer", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1395, 6);
                try {
                    MemberValue();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1395:18
                while (true) {
                    if (!(scan$Java_ccc$1395$20())) break;
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1395:20
                    consumeToken(COMMA);
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1395:34
                    pushOntoCallStack("MemberValueArrayInitializer", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1395, 34);
                    try {
                        MemberValue();
                    } finally {
                        popCallStack();
                    }
                }
                // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1395:49
                if (nextTokenType() == COMMA) {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1395:50
                    consumeToken(COMMA);
                }
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1397:3
            consumeToken(RBRACE);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1401:1
    final public void AnnotationTypeDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "AnnotationTypeDeclaration";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1401:1
        AnnotationTypeDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new AnnotationTypeDeclaration();
            openNodeScope(thisProduction);
        }
        permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE, ABSTRACT, STATIC, STRICTFP);
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1405:3
            pushOntoCallStack("AnnotationTypeDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1405, 3);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1406:3
            consumeToken(AT);
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1406:8
            consumeToken(INTERFACE);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1406:25
            pushOntoCallStack("AnnotationTypeDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1406, 25);
            try {
                TypeIdentifier();
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1406:40
            pushOntoCallStack("AnnotationTypeDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1406, 40);
            try {
                AnnotationTypeBody();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1409:1
    final public void AnnotationTypeBody() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "AnnotationTypeBody";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1409:1
        AnnotationTypeBody thisProduction = null;
        if (buildTree) {
            thisProduction = new AnnotationTypeBody();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1410:3
            consumeToken(LBRACE);
            // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1410:12
            while (true) {
                if (!(first_set$Java_ccc$1410$14.contains(nextTokenType()))) break;
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1410:14
                pushOntoCallStack("AnnotationTypeBody", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1410, 14);
                try {
                    AnnotationTypeMemberDeclaration();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1410:49
            consumeToken(RBRACE);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1413:1
    final public void AnnotationMethodDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "AnnotationMethodDeclaration";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1413:1
        AnnotationMethodDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new AnnotationMethodDeclaration();
            openNodeScope(thisProduction);
        }
        permissibleModifiers = EnumSet.of(PUBLIC, ABSTRACT);
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1415:4
            pushOntoCallStack("AnnotationMethodDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1415, 4);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1416:4
            pushOntoCallStack("AnnotationMethodDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1416, 4);
            try {
                Type();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1416:9
            consumeToken(IDENTIFIER);
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1416:22
            consumeToken(LPAREN);
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1416:36
            consumeToken(RPAREN);
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1416:45
            if (nextTokenType() == _DEFAULT) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1416:47
                pushOntoCallStack("AnnotationMethodDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1416, 47);
                try {
                    DefaultValue();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1416:62
            consumeToken(SEMICOLON);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> AnnotationTypeMemberDeclaration_FIRST_SET = AnnotationTypeMemberDeclaration_FIRST_SET_init();

    private static EnumSet<TokenType> AnnotationTypeMemberDeclaration_FIRST_SET_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, CLASS, _DEFAULT, DOUBLE, ENUM, FINAL, FLOAT, INT, INTERFACE, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VOLATILE, SEALED, NON_SEALED, SEMICOLON, AT, IDENTIFIER);
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1419:1
    final public void AnnotationTypeMemberDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "AnnotationTypeMemberDeclaration";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1419:1
        AnnotationTypeMemberDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new AnnotationTypeMemberDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1420:3
            if (nextTokenType() == SEMICOLON) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1420:3
                pushOntoCallStack("AnnotationTypeMemberDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1420, 3);
                try {
                    EmptyDeclaration();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$1422$3()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1422:3
                pushOntoCallStack("AnnotationTypeMemberDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1422, 3);
                try {
                    AnnotationTypeDeclaration();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$1424$3()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1424:3
                pushOntoCallStack("AnnotationTypeMemberDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1424, 3);
                try {
                    ClassDeclaration();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$1426$3()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1426:3
                pushOntoCallStack("AnnotationTypeMemberDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1426, 3);
                try {
                    InterfaceDeclaration();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$1428$3()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1428:3
                pushOntoCallStack("AnnotationTypeMemberDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1428, 3);
                try {
                    EnumDeclaration();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$1430$3()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1430:3
                pushOntoCallStack("AnnotationTypeMemberDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1430, 3);
                try {
                    AnnotationMethodDeclaration();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$1432$3()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1432:3
                pushOntoCallStack("AnnotationTypeMemberDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1432, 3);
                try {
                    FieldDeclaration();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("AnnotationTypeMemberDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1420, 3);
                throw new ParseException(lastConsumedToken, AnnotationTypeMemberDeclaration_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1435:1
    final public void DefaultValue() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "DefaultValue";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1435:1
        DefaultValue thisProduction = null;
        if (buildTree) {
            thisProduction = new DefaultValue();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1435:16
            consumeToken(_DEFAULT);
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1435:27
            pushOntoCallStack("DefaultValue", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1435, 27);
            try {
                MemberValue();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1437:1
    final public void LambdaExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "LambdaExpression";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1437:1
        LambdaExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new LambdaExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1439:3
            pushOntoCallStack("LambdaExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1439, 3);
            try {
                LambdaLHS();
            } finally {
                popCallStack();
            }
            if (nextTokenType() == LBRACE) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1439:19
                pushOntoCallStack("LambdaExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1439, 19);
                try {
                    Block();
                } finally {
                    popCallStack();
                }
            } else if (first_set$Java_ccc$1439$27.contains(nextTokenType())) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1439:27
                pushOntoCallStack("LambdaExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1439, 27);
                try {
                    Expression();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("LambdaExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1439, 19);
                throw new ParseException(lastConsumedToken, first_set$Java_ccc$1439$19, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1442:1
    final public void LambdaLHS() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "LambdaLHS";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1442:1
        LambdaLHS thisProduction = null;
        if (buildTree) {
            thisProduction = new LambdaLHS();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            if (nextTokenType() == IDENTIFIER) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1442:14
                consumeToken(IDENTIFIER);
            } else if (scan$Java_ccc$1442$29()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1442:29
                pushOntoCallStack("LambdaLHS", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1442, 29);
                try {
                    SimpleLambdaLHS();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == LPAREN) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1442:47
                pushOntoCallStack("LambdaLHS", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1442, 47);
                try {
                    LambdaParameters();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("LambdaLHS", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1442, 14);
                throw new ParseException(lastConsumedToken, first_set$Java_ccc$1442$14, parsingStack);
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1442:65
            consumeToken(LAMBDA);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1444:1
    final public void SimpleLambdaLHS() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "SimpleLambdaLHS";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1444:1
        // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1446:4
        consumeToken(LPAREN);
        if (nextTokenType() == IDENTIFIER) {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1446:14
            consumeToken(IDENTIFIER);
        } else if (nextTokenType() == UNDERSCORE) {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1446:27
            consumeToken(UNDERSCORE);
        } else {
            pushOntoCallStack("SimpleLambdaLHS", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1446, 14);
            throw new ParseException(lastConsumedToken, first_set$Java_ccc$1446$14, parsingStack);
        }
        // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1447:4
        while (true) {
            if (!(nextTokenType() == COMMA)) break;
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1447:5
            consumeToken(COMMA);
            if (nextTokenType() == IDENTIFIER) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1447:14
                consumeToken(IDENTIFIER);
            } else if (nextTokenType() == UNDERSCORE) {
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1447:27
                consumeToken(UNDERSCORE);
            } else {
                pushOntoCallStack("SimpleLambdaLHS", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1447, 14);
                throw new ParseException(lastConsumedToken, first_set$Java_ccc$1447$14, parsingStack);
            }
        }
        // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1448:4
        consumeToken(RPAREN);
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1451:1
    final public void LambdaParameters() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "LambdaParameters";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1451:1
        LambdaParameters thisProduction = null;
        if (buildTree) {
            thisProduction = new LambdaParameters();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1451:20
            consumeToken(LPAREN);
            // Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1451:29
            if (scan$Java_ccc$1451$31()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1451:31
                pushOntoCallStack("LambdaParameters", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1451, 31);
                try {
                    LambdaParameter();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1451:47
                while (true) {
                    if (!(nextTokenType() == COMMA)) break;
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1451:49
                    consumeToken(COMMA);
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1451:57
                    pushOntoCallStack("LambdaParameters", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1451, 57);
                    try {
                        LambdaParameter();
                    } finally {
                        popCallStack();
                    }
                }
            }
            // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1451:78
            consumeToken(RPAREN);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1453:1
    final public void LambdaParameter() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "LambdaParameter";
        // Code for BNFProduction specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1453:1
        LambdaParameter thisProduction = null;
        if (buildTree) {
            thisProduction = new LambdaParameter();
            openNodeScope(thisProduction);
        }
        permissibleModifiers = EnumSet.of(FINAL);
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1455:5
            pushOntoCallStack("LambdaParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1455, 5);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            if (scan$Java_ccc$1457$7()) {
                // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1457:7
                pushOntoCallStack("LambdaParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1457, 7);
                try {
                    Type();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1457:12
                while (true) {
                    if (!(scan$Java_ccc$1457$13())) break;
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1457:13
                    pushOntoCallStack("LambdaParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1457, 13);
                    try {
                        Annotation();
                    } finally {
                        popCallStack();
                    }
                }
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1457:26
                consumeToken(VAR_ARGS);
                // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1457:42
                consumeToken(IDENTIFIER);
            } else if (first_set$Java_ccc$1459$7.contains(nextTokenType())) {
                if (scan$Java_ccc$1460$9()) {
                    if (nextTokenType() == VAR) {
                        // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1462:11
                        consumeToken(VAR);
                    } else if (nextTokenType() == IDENTIFIER) {
                        // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1464:11
                        consumeToken(IDENTIFIER);
                        // Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1465:11
                        replaceTokenType(TokenType.VAR);
                    } else {
                        pushOntoCallStack("LambdaParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1462, 11);
                        throw new ParseException(lastConsumedToken, first_set$Java_ccc$1462$11, parsingStack);
                    }
                } else if (first_set$Java_ccc$1470$9.contains(nextTokenType())) {
                    // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1470:9
                    pushOntoCallStack("LambdaParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1470, 9);
                    try {
                        Type();
                    } finally {
                        popCallStack();
                    }
                } else {
                    pushOntoCallStack("LambdaParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1460, 9);
                    throw new ParseException(lastConsumedToken, first_set$Java_ccc$1460$9, parsingStack);
                }
                if (nextTokenType() == IDENTIFIER) {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1473:9
                    consumeToken(IDENTIFIER);
                    // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1473:21
                    while (true) {
                        if (!(nextTokenType() == LBRACKET || nextTokenType == AT)) break;
                        // Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1473:22
                        while (true) {
                            if (!(scan$Java_ccc$1473$23())) break;
                            // Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1473:23
                            pushOntoCallStack("LambdaParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1473, 23);
                            try {
                                Annotation();
                            } finally {
                                popCallStack();
                            }
                        }
                        // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1473:36
                        consumeToken(LBRACKET);
                        // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1473:46
                        consumeToken(RBRACKET);
                    }
                } else if (nextTokenType() == UNDERSCORE) {
                    // Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1475:9
                    consumeToken(UNDERSCORE);
                } else {
                    pushOntoCallStack("LambdaParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1473, 9);
                    throw new ParseException(lastConsumedToken, first_set$Java_ccc$1473$9, parsingStack);
                }
            } else {
                pushOntoCallStack("LambdaParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1457, 7);
                throw new ParseException(lastConsumedToken, first_set$Java_ccc$1457$7, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$150$4 = first_set$Java_ccc$150$4_init();

    private static EnumSet<TokenType> first_set$Java_ccc$150$4_init() {
        return tokenTypeSet(ABSTRACT, _DEFAULT, FINAL, NATIVE, PRIVATE, PROTECTED, PUBLIC, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VOLATILE);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$189$39 = tokenTypeSet(SEALED, NON_SEALED);
    private static final EnumSet<TokenType> first_set$Java_ccc$209$5 = first_set$Java_ccc$209$5_init();

    private static EnumSet<TokenType> first_set$Java_ccc$209$5_init() {
        return tokenTypeSet(ABSTRACT, CLASS, _DEFAULT, ENUM, FINAL, INTERFACE, NATIVE, PRIVATE, PROTECTED, PUBLIC, RECORD, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VOLATILE, SEALED, NON_SEALED, SEMICOLON, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$292$7 = tokenTypeSet(PERMITS, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$343$20 = first_set$Java_ccc$343$20_init();

    private static EnumSet<TokenType> first_set$Java_ccc$343$20_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, CLASS, _DEFAULT, DOUBLE, ENUM, FINAL, FLOAT, INT, INTERFACE, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VOID, VOLATILE, SEALED, NON_SEALED, LBRACE, SEMICOLON, AT, LT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$356$5 = tokenTypeSet(RECORD, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$373$6 = first_set$Java_ccc$373$6_init();

    private static EnumSet<TokenType> first_set$Java_ccc$373$6_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$388$4 = first_set$Java_ccc$388$4_init();

    private static EnumSet<TokenType> first_set$Java_ccc$388$4_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, CLASS, _DEFAULT, DOUBLE, ENUM, FINAL, FLOAT, INT, INTERFACE, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VOID, VOLATILE, SEALED, NON_SEALED, LBRACE, SEMICOLON, AT, LT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$468$47 = first_set$Java_ccc$468$47_init();

    private static EnumSet<TokenType> first_set$Java_ccc$468$47_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$471$15 = first_set$Java_ccc$471$15_init();

    private static EnumSet<TokenType> first_set$Java_ccc$471$15_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, LBRACE, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$506$5 = tokenTypeSet(LBRACE, SEMICOLON);
    private static final EnumSet<TokenType> first_set$Java_ccc$528$20 = tokenTypeSet(SUPER, THIS);
    private static final EnumSet<TokenType> first_set$Java_ccc$532$4 = tokenTypeSet(LPAREN, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$543$4 = first_set$Java_ccc$543$4_init();

    private static EnumSet<TokenType> first_set$Java_ccc$543$4_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, AT);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$589$3 = first_set$Java_ccc$589$3_init();

    private static EnumSet<TokenType> first_set$Java_ccc$589$3_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$592$19 = tokenTypeSet(EXTENDS, SUPER);
    private static final EnumSet<TokenType> first_set$Java_ccc$602$24 = first_set$Java_ccc$602$24_init();

    private static EnumSet<TokenType> first_set$Java_ccc$602$24_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$687$8 = first_set$Java_ccc$687$8_init();

    private static EnumSet<TokenType> first_set$Java_ccc$687$8_init() {
        return tokenTypeSet(ASSIGN, PLUSASSIGN, MINUSASSIGN, STARASSIGN, SLASHASSIGN, ANDASSIGN, ORASSIGN, XORASSIGN, REMASSIGN, LSHIFTASSIGN, RSIGNEDSHIFTASSIGN, RUNSIGNEDSHIFTASSIGN);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$720$28 = tokenTypeSet(EQ, NE);
    private static final EnumSet<TokenType> first_set$Java_ccc$728$7 = first_set$Java_ccc$728$7_init();

    private static EnumSet<TokenType> first_set$Java_ccc$728$7_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, _DEFAULT, DOUBLE, FINAL, FLOAT, INT, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VAR, VOLATILE, SEALED, NON_SEALED, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$732$7 = first_set$Java_ccc$732$7_init();

    private static EnumSet<TokenType> first_set$Java_ccc$732$7_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$740$7 = tokenTypeSet(GT, LT, LE, GE);
    private static final EnumSet<TokenType> first_set$Java_ccc$755$8 = tokenTypeSet(LSHIFT, RSIGNEDSHIFT, RUNSIGNEDSHIFT);
    private static final EnumSet<TokenType> first_set$Java_ccc$761$33 = tokenTypeSet(PLUS, MINUS);
    private static final EnumSet<TokenType> first_set$Java_ccc$765$24 = tokenTypeSet(STAR, SLASH, REM);
    private static final EnumSet<TokenType> first_set$Java_ccc$769$5 = tokenTypeSet(PLUS, MINUS);
    private static final EnumSet<TokenType> first_set$Java_ccc$775$3 = first_set$Java_ccc$775$3_init();

    private static EnumSet<TokenType> first_set$Java_ccc$775$3_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, AT, BANG, TILDE, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$791$5 = tokenTypeSet(BANG, TILDE);
    private static final EnumSet<TokenType> first_set$Java_ccc$801$3 = first_set$Java_ccc$801$3_init();

    private static EnumSet<TokenType> first_set$Java_ccc$801$3_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, THIS, TRUE, VOID, LPAREN, AT, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$827$3$ = first_set$Java_ccc$827$3$_init();

    private static EnumSet<TokenType> first_set$Java_ccc$827$3$_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, THIS, TRUE, VOID, LPAREN, AT, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$827$3 = first_set$Java_ccc$827$3_init();

    private static EnumSet<TokenType> first_set$Java_ccc$827$3_init() {
        return tokenTypeSet(FALSE, NULL, TRUE, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$854$36 = tokenTypeSet(NEW, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$882$17 = first_set$Java_ccc$882$17_init();

    private static EnumSet<TokenType> first_set$Java_ccc$882$17_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, VOID, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$882$26 = first_set$Java_ccc$882$26_init();

    private static EnumSet<TokenType> first_set$Java_ccc$882$26_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$885$6$ = first_set$Java_ccc$885$6$_init();

    private static EnumSet<TokenType> first_set$Java_ccc$885$6$_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, SUPER, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$885$6 = first_set$Java_ccc$885$6_init();

    private static EnumSet<TokenType> first_set$Java_ccc$885$6_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$888$7 = tokenTypeSet(NEW, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$913$7 = first_set$Java_ccc$913$7_init();

    private static EnumSet<TokenType> first_set$Java_ccc$913$7_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$922$7 = tokenTypeSet(LPAREN, LBRACKET, AT);
    private static final EnumSet<TokenType> first_set$Java_ccc$980$3 = first_set$Java_ccc$980$3_init();

    private static EnumSet<TokenType> first_set$Java_ccc$980$3_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, THIS, TRUE, VOID, LPAREN, AT, INCR, DECR, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1016$3 = first_set$Java_ccc$1016$3_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1016$3_init() {
        return tokenTypeSet(ABSTRACT, _ASSERT, BOOLEAN, BREAK, BYTE, CHAR, CLASS, CONTINUE, _DEFAULT, DO, DOUBLE, ENUM, FALSE, FINAL, FLOAT, FOR, IF, INT, INTERFACE, LONG, NATIVE, NEW, NULL, PRIVATE, PROTECTED, PUBLIC, RETURN, RECORD, SHORT, STATIC, STRICTFP, SUPER, SWITCH, SYNCHRONIZED, THIS, THROW, TRANSIENT, TRUE, TRY, VAR, VOID, VOLATILE, WHILE, YIELD, SEALED, NON_SEALED, LPAREN, LBRACE, SEMICOLON, AT, INCR, DECR, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1029$3 = first_set$Java_ccc$1029$3_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1029$3_init() {
        return tokenTypeSet(_ASSERT, BOOLEAN, BREAK, BYTE, CHAR, CONTINUE, DO, DOUBLE, FALSE, FLOAT, FOR, IF, INT, LONG, NEW, NULL, RETURN, SHORT, SUPER, SWITCH, SYNCHRONIZED, THIS, THROW, TRUE, TRY, VOID, WHILE, YIELD, LPAREN, LBRACE, SEMICOLON, AT, INCR, DECR, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1037$6 = first_set$Java_ccc$1037$6_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1037$6_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, _DEFAULT, DOUBLE, FINAL, FLOAT, INT, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VAR, VOLATILE, SEALED, NON_SEALED, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1055$6 = tokenTypeSet(VAR, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$1062$4 = tokenTypeSet(UNDERSCORE, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$1087$3 = first_set$Java_ccc$1087$3_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1087$3_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, THIS, TRUE, VOID, LPAREN, AT, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1092$11 = first_set$Java_ccc$1092$11_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1092$11_init() {
        return tokenTypeSet(ASSIGN, INCR, DECR, PLUSASSIGN, MINUSASSIGN, STARASSIGN, SLASHASSIGN, ANDASSIGN, ORASSIGN, XORASSIGN, REMASSIGN, LSHIFTASSIGN, RSIGNEDSHIFTASSIGN, RUNSIGNEDSHIFTASSIGN);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1092$12 = tokenTypeSet(INCR, DECR);
    private static final EnumSet<TokenType> first_set$Java_ccc$1094$11 = first_set$Java_ccc$1094$11_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1094$11_init() {
        return tokenTypeSet(ASSIGN, PLUSASSIGN, MINUSASSIGN, STARASSIGN, SLASHASSIGN, ANDASSIGN, ORASSIGN, XORASSIGN, REMASSIGN, LSHIFTASSIGN, RSIGNEDSHIFTASSIGN, RUNSIGNEDSHIFTASSIGN);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1094$11$ = first_set$Java_ccc$1094$11$_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1094$11$_init() {
        return tokenTypeSet(ASSIGN, PLUSASSIGN, MINUSASSIGN, STARASSIGN, SLASHASSIGN, ANDASSIGN, ORASSIGN, XORASSIGN, REMASSIGN, LSHIFTASSIGN, RSIGNEDSHIFTASSIGN, RUNSIGNEDSHIFTASSIGN);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1118$9 = first_set$Java_ccc$1118$9_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1118$9_init() {
        return tokenTypeSet(UNDERSCORE, ABSTRACT, BOOLEAN, BYTE, CHAR, _DEFAULT, DOUBLE, FINAL, FLOAT, INT, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VOLATILE, SEALED, NON_SEALED, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1120$9 = first_set$Java_ccc$1120$9_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1120$9_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, _DEFAULT, DOUBLE, FINAL, FLOAT, INT, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VOLATILE, SEALED, NON_SEALED, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1123$12 = first_set$Java_ccc$1123$12_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1123$12_init() {
        return tokenTypeSet(UNDERSCORE, ABSTRACT, BOOLEAN, BYTE, CHAR, _DEFAULT, DOUBLE, FINAL, FLOAT, INT, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VOLATILE, SEALED, NON_SEALED, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1123$25 = first_set$Java_ccc$1123$25_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1123$25_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, _DEFAULT, DOUBLE, FINAL, FLOAT, INT, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VOLATILE, SEALED, NON_SEALED, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1133$19 = tokenTypeSet(UNDERSCORE, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$1140$7 = tokenTypeSet(WHEN, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$1207$6 = first_set$Java_ccc$1207$6_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1207$6_init() {
        return tokenTypeSet(ABSTRACT, _ASSERT, BOOLEAN, BREAK, BYTE, CHAR, CLASS, CONTINUE, _DEFAULT, DO, DOUBLE, ENUM, FALSE, FINAL, FLOAT, FOR, IF, INT, INTERFACE, LONG, NATIVE, NEW, NULL, PRIVATE, PROTECTED, PUBLIC, RETURN, RECORD, SHORT, STATIC, STRICTFP, SUPER, SWITCH, SYNCHRONIZED, THIS, THROW, TRANSIENT, TRUE, TRY, VAR, VOID, VOLATILE, WHILE, YIELD, SEALED, NON_SEALED, LPAREN, LBRACE, SEMICOLON, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1254$20 = first_set$Java_ccc$1254$20_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1254$20_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, _DEFAULT, DOUBLE, FALSE, FINAL, FLOAT, INT, LONG, NATIVE, NEW, NULL, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SUPER, SYNCHRONIZED, THIS, TRANSIENT, TRUE, VAR, VOID, VOLATILE, SEALED, NON_SEALED, LPAREN, AT, INCR, DECR, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1254$47 = first_set$Java_ccc$1254$47_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1254$47_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1254$72 = first_set$Java_ccc$1254$72_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1254$72_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, THIS, TRUE, VOID, LPAREN, AT, INCR, DECR, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1264$3 = first_set$Java_ccc$1264$3_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1264$3_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, THIS, TRUE, VOID, LPAREN, AT, INCR, DECR, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1278$7 = tokenTypeSet(YIELD, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$1291$29 = first_set$Java_ccc$1291$29_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1291$29_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1315$10 = first_set$Java_ccc$1315$10_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1315$10_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, _DEFAULT, DOUBLE, FALSE, FINAL, FLOAT, INT, LONG, NATIVE, NEW, NULL, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SUPER, SYNCHRONIZED, THIS, TRANSIENT, TRUE, VAR, VOID, VOLATILE, SEALED, NON_SEALED, LPAREN, AT, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1319$10 = first_set$Java_ccc$1319$10_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1319$10_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, THIS, TRUE, VOID, LPAREN, AT, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1355$4 = tokenTypeSet(AT);
    private static final EnumSet<TokenType> first_set$Java_ccc$1389$4 = first_set$Java_ccc$1389$4_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1389$4_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1395$6 = first_set$Java_ccc$1395$6_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1395$6_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, LBRACE, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1410$14 = first_set$Java_ccc$1410$14_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1410$14_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, CLASS, _DEFAULT, DOUBLE, ENUM, FINAL, FLOAT, INT, INTERFACE, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VOLATILE, SEALED, NON_SEALED, SEMICOLON, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1439$19 = first_set$Java_ccc$1439$19_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1439$19_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, LBRACE, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1439$27 = first_set$Java_ccc$1439$27_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1439$27_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1442$14 = tokenTypeSet(LPAREN, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$1446$14 = tokenTypeSet(UNDERSCORE, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$1447$14 = tokenTypeSet(UNDERSCORE, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$1457$7 = first_set$Java_ccc$1457$7_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1457$7_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, VAR, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1459$7 = first_set$Java_ccc$1459$7_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1459$7_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, VAR, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1460$9 = first_set$Java_ccc$1460$9_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1460$9_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, VAR, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1462$11 = tokenTypeSet(VAR, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$1470$9 = first_set$Java_ccc$1470$9_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1470$9_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1473$9 = tokenTypeSet(UNDERSCORE, IDENTIFIER);

    private boolean scanToken(TokenType expectedType, TokenType...additionalTypes) {
        Token peekedToken = nextToken(currentLookaheadToken);
        TokenType type = peekedToken.getType();
        if (type != expectedType) {
            boolean matched = false;
            for (TokenType tt : additionalTypes) {
                if (type == tt) {
                    matched = true;
                    break;
                }
            }
            if (!matched) return false;
        }
        --remainingLookahead;
        currentLookaheadToken = peekedToken;
        return true;
    }

    private boolean scanToken(EnumSet<TokenType> types) {
        Token peekedToken = nextToken(currentLookaheadToken);
        TokenType type = peekedToken.getType();
        if (!types.contains(type)) return false;
        --remainingLookahead;
        currentLookaheadToken = peekedToken;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:38:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$38$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:38:5
            // NonTerminal ImportDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:38:5
            pushOntoLookaheadStack("ModularCompilationUnit", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 38, 5);
            currentLookaheadProduction = "ImportDeclaration";
            try {
                if (!check$ImportDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:39:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$39$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:39:5
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:39:5
            pushOntoLookaheadStack("ModularCompilationUnit", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 39, 5);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:43:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$43$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            EnumSet<TokenType> previousActives3 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged4 = false;
            somethingChanged4 = activateTokenTypes(OPEN);
            try {
                if (!scanToken(OPEN)) return false;
            } finally {
                token_source.activeTokenTypes = previousActives3;
                if (somethingChanged4) {
                    token_source.reset(currentLookaheadToken);
                    nextTokenType = null;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:48:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$48$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$48$11(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:48:25
            // NonTerminal ModuleDirective at /Users/bnaudts/git/congo/examples/java/Java.ccc:48:25
            pushOntoLookaheadStack("ModularCompilationUnit", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 48, 25);
            currentLookaheadProduction = "ModuleDirective";
            try {
                if (!check$ModuleDirective(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:54:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$54$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:54:4
            // NonTerminal RequiresDirective at /Users/bnaudts/git/congo/examples/java/Java.ccc:54:4
            pushOntoLookaheadStack("ModuleDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 54, 4);
            currentLookaheadProduction = "RequiresDirective";
            try {
                if (!check$RequiresDirective(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:56:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$56$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:56:4
            // NonTerminal ExportsDirective at /Users/bnaudts/git/congo/examples/java/Java.ccc:56:4
            pushOntoLookaheadStack("ModuleDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 56, 4);
            currentLookaheadProduction = "ExportsDirective";
            try {
                if (!check$ExportsDirective(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:58:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$58$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:58:4
            // NonTerminal OpensDirective at /Users/bnaudts/git/congo/examples/java/Java.ccc:58:4
            pushOntoLookaheadStack("ModuleDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 58, 4);
            currentLookaheadProduction = "OpensDirective";
            try {
                if (!check$OpensDirective(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:60:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$60$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:60:4
            // NonTerminal UsesDirective at /Users/bnaudts/git/congo/examples/java/Java.ccc:60:4
            pushOntoLookaheadStack("ModuleDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 60, 4);
            currentLookaheadProduction = "UsesDirective";
            try {
                if (!check$UsesDirective(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:62:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$62$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:62:4
            // NonTerminal ProvidesDirective at /Users/bnaudts/git/congo/examples/java/Java.ccc:62:4
            pushOntoLookaheadStack("ModuleDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 62, 4);
            currentLookaheadProduction = "ProvidesDirective";
            try {
                if (!check$ProvidesDirective(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:75:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$75$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            EnumSet<TokenType> previousActives3 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged4 = false;
            somethingChanged4 = activateTokenTypes(TO);
            try {
                if (!scanToken(TO)) return false;
            } finally {
                token_source.activeTokenTypes = previousActives3;
                if (somethingChanged4) {
                    token_source.reset(currentLookaheadToken);
                    nextTokenType = null;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:76:6
            // NonTerminal Name at /Users/bnaudts/git/congo/examples/java/Java.ccc:76:6
            pushOntoLookaheadStack("ExportsDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 76, 6);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:76:11
            boolean passedPredicate8 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token9 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$76$12(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token9;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate8;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:76:12
    // BuildScanRoutine macro
    private boolean check$Java_ccc$76$12(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:76:12
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:76:20
            // NonTerminal Name at /Users/bnaudts/git/congo/examples/java/Java.ccc:76:20
            pushOntoLookaheadStack("ExportsDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 76, 20);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:85:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$85$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            EnumSet<TokenType> previousActives3 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged4 = false;
            somethingChanged4 = activateTokenTypes(TO);
            try {
                if (!scanToken(TO)) return false;
            } finally {
                token_source.activeTokenTypes = previousActives3;
                if (somethingChanged4) {
                    token_source.reset(currentLookaheadToken);
                    nextTokenType = null;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:86:6
            // NonTerminal Name at /Users/bnaudts/git/congo/examples/java/Java.ccc:86:6
            pushOntoLookaheadStack("OpensDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 86, 6);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:86:11
            boolean passedPredicate8 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token9 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$86$12(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token9;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate8;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:86:12
    // BuildScanRoutine macro
    private boolean check$Java_ccc$86$12(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:86:12
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:86:20
            // NonTerminal Name at /Users/bnaudts/git/congo/examples/java/Java.ccc:86:20
            pushOntoLookaheadStack("OpensDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 86, 20);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:102:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$102$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:102:6
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:102:14
            // NonTerminal Name at /Users/bnaudts/git/congo/examples/java/Java.ccc:102:14
            pushOntoLookaheadStack("ProvidesDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 102, 14);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:107:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$107$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:107:5
            // NonTerminal PackageDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:107:5
            pushOntoLookaheadStack("CompilationUnit", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 107, 5);
            currentLookaheadProduction = "PackageDeclaration";
            try {
                if (!check$PackageDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:108:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$108$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:108:5
            // NonTerminal ImportDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:108:5
            pushOntoLookaheadStack("CompilationUnit", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 108, 5);
            currentLookaheadProduction = "ImportDeclaration";
            try {
                if (!check$ImportDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:109:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$109$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$207$8(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:109:5
            // NonTerminal TypeDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:109:5
            pushOntoLookaheadStack("CompilationUnit", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 109, 5);
            currentLookaheadProduction = "TypeDeclaration";
            try {
                if (!check$TypeDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:128:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$128$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:128:6
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:128:6
            pushOntoLookaheadStack("PackageDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 128, 6);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:142:51
    // BuildScanRoutine macro
    private boolean check$Java_ccc$142$51(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:142:51
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:142:57
            if (!scanToken(STAR)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:146:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$146$3$(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:146:3
            Token token2 = currentLookaheadToken;
            int remainingLookahead2 = remainingLookahead;
            boolean hitFailure2 = hitFailure;
            boolean passedPredicate2 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$146$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$175$3(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$197$3(false)) {
                            currentLookaheadToken = token2;
                            remainingLookahead = remainingLookahead2;
                            hitFailure = hitFailure2;
                            return false;
                        }
                    }
                }
            } finally {
                passedPredicate = passedPredicate2;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:146:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$146$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (!(isParserTolerant() || permissibleModifiers == null || permissibleModifiers.contains(getTokenType(1)))) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:150:4
            if (!scanToken(first_set$Java_ccc$150$4)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:153:3
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:175:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$175$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (!(permissibleModifiers == null || permissibleModifiers.contains(SEALED) && (checkNextTokenImage("sealed", "non-sealed") || checkNextTokenImage("non") && "-".equals(tokenImage(2)) && "sealed".equals(tokenImage(3)) && getToken(3).getBeginOffset() == getToken(1).getEndOffset() + 1))) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            EnumSet<TokenType> previousActives3 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged4 = false;
            somethingChanged4 = activateTokenTypes(SEALED, NON_SEALED);
            try {
                if (hitFailure) return false;
                if (remainingLookahead <= 0) {
                    return true;
                }
                // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:189:39
                if (!scanToken(SEALED, NON_SEALED)) return false;
            } finally {
                token_source.activeTokenTypes = previousActives3;
                if (somethingChanged4) {
                    token_source.reset(currentLookaheadToken);
                    nextTokenType = null;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:190:3
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:197:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$197$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:197:3
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:197:3
            pushOntoLookaheadStack("Modifiers", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 197, 3);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:211:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$211$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:211:5
            // NonTerminal AnnotationTypeDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:211:5
            pushOntoLookaheadStack("TypeDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 211, 5);
            currentLookaheadProduction = "AnnotationTypeDeclaration";
            try {
                if (!check$AnnotationTypeDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:213:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$213$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:213:5
            // NonTerminal ClassDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:213:5
            pushOntoLookaheadStack("TypeDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 213, 5);
            currentLookaheadProduction = "ClassDeclaration";
            try {
                if (!check$ClassDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:215:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$215$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:215:5
            // NonTerminal InterfaceDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:215:5
            pushOntoLookaheadStack("TypeDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 215, 5);
            currentLookaheadProduction = "InterfaceDeclaration";
            try {
                if (!check$InterfaceDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:217:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$217$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:217:5
            // NonTerminal EnumDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:217:5
            pushOntoLookaheadStack("TypeDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 217, 5);
            currentLookaheadProduction = "EnumDeclaration";
            try {
                if (!check$EnumDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:219:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$219$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:219:5
            // NonTerminal RecordDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:219:5
            pushOntoLookaheadStack("TypeDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 219, 5);
            currentLookaheadProduction = "RecordDeclaration";
            try {
                if (!check$RecordDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:227:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$227$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:227:4
            // NonTerminal Modifiers at /Users/bnaudts/git/congo/examples/java/Java.ccc:227:4
            pushOntoLookaheadStack("TypeDeclarationLA", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 227, 4);
            currentLookaheadProduction = "Modifiers";
            try {
                if (!check$Modifiers(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:229:6
            Token token5 = currentLookaheadToken;
            int remainingLookahead5 = remainingLookahead;
            boolean hitFailure5 = hitFailure;
            boolean passedPredicate5 = passedPredicate;
            try {
                passedPredicate = false;
                if (!scanToken(CLASS)) {
                    currentLookaheadToken = token5;
                    remainingLookahead = remainingLookahead5;
                    hitFailure = hitFailure5;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!scanToken(INTERFACE)) {
                        currentLookaheadToken = token5;
                        remainingLookahead = remainingLookahead5;
                        hitFailure = hitFailure5;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!scanToken(ENUM)) {
                            currentLookaheadToken = token5;
                            remainingLookahead = remainingLookahead5;
                            hitFailure = hitFailure5;
                            if (passedPredicate && !legacyGlitchyLookahead) return false;
                            passedPredicate = false;
                            if (!check$Java_ccc$232$8(false)) {
                                currentLookaheadToken = token5;
                                remainingLookahead = remainingLookahead5;
                                hitFailure = hitFailure5;
                                if (passedPredicate && !legacyGlitchyLookahead) return false;
                                passedPredicate = false;
                                if (!check$Java_ccc$233$8(false)) {
                                    currentLookaheadToken = token5;
                                    remainingLookahead = remainingLookahead5;
                                    hitFailure = hitFailure5;
                                    return false;
                                }
                            }
                        }
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:232:8
    // BuildScanRoutine macro
    private boolean check$Java_ccc$232$8(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:232:8
            if (!scanToken(AT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:232:13
            if (!scanToken(INTERFACE)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:233:8
    // BuildScanRoutine macro
    private boolean check$Java_ccc$233$8(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:233:8
            if (!scanToken(IDENTIFIER)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Assertion specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:234:8
            if (!(currentLookaheadToken.toString().equals("record"))) {
                hitFailure = true;
                return false;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:235:8
            if (!scanToken(IDENTIFIER)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:268:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$268$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:268:5
            // NonTerminal TypeParameters at /Users/bnaudts/git/congo/examples/java/Java.ccc:268:5
            pushOntoLookaheadStack("ClassDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 268, 5);
            currentLookaheadProduction = "TypeParameters";
            try {
                if (!check$TypeParameters(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:269:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$269$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:269:5
            // NonTerminal ExtendsList at /Users/bnaudts/git/congo/examples/java/Java.ccc:269:5
            pushOntoLookaheadStack("ClassDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 269, 5);
            currentLookaheadProduction = "ExtendsList";
            try {
                if (!check$ExtendsList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:270:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$270$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:270:5
            // NonTerminal ImplementsList at /Users/bnaudts/git/congo/examples/java/Java.ccc:270:5
            pushOntoLookaheadStack("ClassDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 270, 5);
            currentLookaheadProduction = "ImplementsList";
            try {
                if (!check$ImplementsList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:271:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$271$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 0;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (!(checkNextTokenImage("permits"))) return false;
            passedPredicate = true;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:271:5
            // NonTerminal PermitsList at /Users/bnaudts/git/congo/examples/java/Java.ccc:271:5
            pushOntoLookaheadStack("ClassDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 271, 5);
            currentLookaheadProduction = "PermitsList";
            try {
                if (!check$PermitsList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:283:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$283$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:283:5
            // NonTerminal TypeParameters at /Users/bnaudts/git/congo/examples/java/Java.ccc:283:5
            pushOntoLookaheadStack("InterfaceDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 283, 5);
            currentLookaheadProduction = "TypeParameters";
            try {
                if (!check$TypeParameters(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:284:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$284$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:284:5
            // NonTerminal ExtendsList at /Users/bnaudts/git/congo/examples/java/Java.ccc:284:5
            pushOntoLookaheadStack("InterfaceDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 284, 5);
            currentLookaheadProduction = "ExtendsList";
            try {
                if (!check$ExtendsList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:285:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$285$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 0;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (!(checkNextTokenImage("permits"))) return false;
            passedPredicate = true;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:285:5
            // NonTerminal PermitsList at /Users/bnaudts/git/congo/examples/java/Java.ccc:285:5
            pushOntoLookaheadStack("InterfaceDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 285, 5);
            currentLookaheadProduction = "PermitsList";
            try {
                if (!check$PermitsList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:300:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$300$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:300:5
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:300:13
            // NonTerminal ObjectType at /Users/bnaudts/git/congo/examples/java/Java.ccc:300:13
            pushOntoLookaheadStack("PermitsList", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 300, 13);
            currentLookaheadProduction = "ObjectType";
            try {
                if (!check$ObjectType(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:307:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$307$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (!backscan$Java_ccc$307$13()) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:308:6
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:308:14
            // NonTerminal ObjectType at /Users/bnaudts/git/congo/examples/java/Java.ccc:308:14
            pushOntoLookaheadStack("ExtendsList", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 308, 14);
            currentLookaheadProduction = "ObjectType";
            try {
                if (!check$ObjectType(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:323:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$323$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:323:6
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:323:14
            // NonTerminal ObjectType at /Users/bnaudts/git/congo/examples/java/Java.ccc:323:14
            pushOntoLookaheadStack("ImplementsList", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 323, 14);
            currentLookaheadProduction = "ObjectType";
            try {
                if (!check$ObjectType(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:335:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$335$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:335:5
            // NonTerminal ImplementsList at /Users/bnaudts/git/congo/examples/java/Java.ccc:335:5
            pushOntoLookaheadStack("EnumDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 335, 5);
            currentLookaheadProduction = "ImplementsList";
            try {
                if (!check$ImplementsList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:341:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$341$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:341:6
            // NonTerminal EnumConstant at /Users/bnaudts/git/congo/examples/java/Java.ccc:341:6
            pushOntoLookaheadStack("EnumBody", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 341, 6);
            currentLookaheadProduction = "EnumConstant";
            try {
                if (!check$EnumConstant(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:341:19
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$341$21(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:341:21
    // BuildScanRoutine macro
    private boolean check$Java_ccc$341$21(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:341:28
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:341:37
            // NonTerminal EnumConstant at /Users/bnaudts/git/congo/examples/java/Java.ccc:341:37
            pushOntoLookaheadStack("EnumBody", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 341, 37);
            currentLookaheadProduction = "EnumConstant";
            try {
                if (!check$EnumConstant(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:343:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$343$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:343:6
            if (!scanToken(SEMICOLON)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:343:18
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$343$20(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:343:20
    // BuildScanRoutine macro
    private boolean check$Java_ccc$343$20(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:343:20
            // NonTerminal ClassOrInterfaceBodyDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:343:20
            pushOntoLookaheadStack("EnumBody", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 343, 20);
            currentLookaheadProduction = "ClassOrInterfaceBodyDeclaration";
            try {
                if (!check$ClassOrInterfaceBodyDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:364:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$364$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:364:4
            // NonTerminal TypeParameters at /Users/bnaudts/git/congo/examples/java/Java.ccc:364:4
            pushOntoLookaheadStack("RecordDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 364, 4);
            currentLookaheadProduction = "TypeParameters";
            try {
                if (!check$TypeParameters(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:366:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$366$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:366:4
            // NonTerminal ImplementsList at /Users/bnaudts/git/congo/examples/java/Java.ccc:366:4
            pushOntoLookaheadStack("RecordDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 366, 4);
            currentLookaheadProduction = "ImplementsList";
            try {
                if (!check$ImplementsList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:373:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$373$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:373:6
            // NonTerminal RecordComponent at /Users/bnaudts/git/congo/examples/java/Java.ccc:373:6
            pushOntoLookaheadStack("RecordHeader", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 373, 6);
            currentLookaheadProduction = "RecordComponent";
            try {
                if (!check$RecordComponent(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:374:6
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$374$7(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:374:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$374$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:374:7
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:374:15
            // NonTerminal RecordComponent at /Users/bnaudts/git/congo/examples/java/Java.ccc:374:15
            pushOntoLookaheadStack("RecordHeader", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 374, 15);
            currentLookaheadProduction = "RecordComponent";
            try {
                if (!check$RecordComponent(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:380:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$380$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:380:5
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:380:5
            pushOntoLookaheadStack("RecordComponent", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 380, 5);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:380:24
    // BuildScanRoutine macro
    private boolean check$Java_ccc$380$24(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:380:24
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$380$25(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:380:38
            if (!scanToken(VAR_ARGS)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:380:25
    // BuildScanRoutine macro
    private boolean check$Java_ccc$380$25(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:380:25
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:380:25
            pushOntoLookaheadStack("RecordComponent", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 380, 25);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:386:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$386$4$(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:386:4
            Token token2 = currentLookaheadToken;
            int remainingLookahead2 = remainingLookahead;
            boolean hitFailure2 = hitFailure;
            boolean passedPredicate2 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$386$4(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$388$4(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate2;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:386:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$386$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:386:4
            // NonTerminal CompactConstructorDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:386:4
            pushOntoLookaheadStack("RecordBody", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 386, 4);
            currentLookaheadProduction = "CompactConstructorDeclaration";
            try {
                if (!check$CompactConstructorDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:388:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$388$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:388:4
            // NonTerminal ClassOrInterfaceBodyDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:388:4
            pushOntoLookaheadStack("RecordBody", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 388, 4);
            currentLookaheadProduction = "ClassOrInterfaceBodyDeclaration";
            try {
                if (!check$ClassOrInterfaceBodyDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:399:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$399$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:399:5
            // NonTerminal ExplicitConstructorInvocation at /Users/bnaudts/git/congo/examples/java/Java.ccc:399:5
            pushOntoLookaheadStack("CompactConstructorDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 399, 5);
            currentLookaheadProduction = "ExplicitConstructorInvocation";
            try {
                if (!check$ExplicitConstructorInvocation(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:400:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$400$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$400$11(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:400:25
            // NonTerminal BlockStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:400:25
            pushOntoLookaheadStack("CompactConstructorDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 400, 25);
            currentLookaheadProduction = "BlockStatement";
            try {
                if (!check$BlockStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:407:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$407$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:407:4
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:407:4
            pushOntoLookaheadStack("EnumConstant", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 407, 4);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:407:32
    // BuildScanRoutine macro
    private boolean check$Java_ccc$407$32(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:407:32
            // NonTerminal InvocationArguments at /Users/bnaudts/git/congo/examples/java/Java.ccc:407:32
            pushOntoLookaheadStack("EnumConstant", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 407, 32);
            currentLookaheadProduction = "InvocationArguments";
            try {
                if (!check$InvocationArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:407:56
    // BuildScanRoutine macro
    private boolean check$Java_ccc$407$56(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:407:56
            // NonTerminal ClassOrInterfaceBody at /Users/bnaudts/git/congo/examples/java/Java.ccc:407:56
            pushOntoLookaheadStack("EnumConstant", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 407, 56);
            currentLookaheadProduction = "ClassOrInterfaceBody";
            try {
                if (!check$ClassOrInterfaceBody(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:412:20
    // BuildScanRoutine macro
    private boolean check$Java_ccc$412$20(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:412:20
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:412:28
            // NonTerminal TypeParameter at /Users/bnaudts/git/congo/examples/java/Java.ccc:412:28
            pushOntoLookaheadStack("TypeParameters", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 412, 28);
            currentLookaheadProduction = "TypeParameter";
            try {
                if (!check$TypeParameter(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:424:17
    // BuildScanRoutine macro
    private boolean check$Java_ccc$424$17(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:424:17
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:424:17
            pushOntoLookaheadStack("TypeParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 424, 17);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:424:51
    // BuildScanRoutine macro
    private boolean check$Java_ccc$424$51(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:424:51
            // NonTerminal TypeBound at /Users/bnaudts/git/congo/examples/java/Java.ccc:424:51
            pushOntoLookaheadStack("TypeParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 424, 51);
            currentLookaheadProduction = "TypeBound";
            try {
                if (!check$TypeBound(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:427:27
    // BuildScanRoutine macro
    private boolean check$Java_ccc$427$27(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:427:27
            if (!scanToken(BIT_AND)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:427:37
            // NonTerminal ObjectType at /Users/bnaudts/git/congo/examples/java/Java.ccc:427:37
            pushOntoLookaheadStack("TypeBound", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 427, 37);
            currentLookaheadProduction = "ObjectType";
            try {
                if (!check$ObjectType(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:430:34
    // BuildScanRoutine macro
    private boolean check$Java_ccc$430$34(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$430$40(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:430:54
            // NonTerminal ClassOrInterfaceBodyDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:430:54
            pushOntoLookaheadStack("ClassOrInterfaceBody", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 430, 54);
            currentLookaheadProduction = "ClassOrInterfaceBodyDeclaration";
            try {
                if (!check$ClassOrInterfaceBodyDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:433:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$433$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:433:3
            // NonTerminal Initializer at /Users/bnaudts/git/congo/examples/java/Java.ccc:433:3
            pushOntoLookaheadStack("ClassOrInterfaceBodyDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 433, 3);
            currentLookaheadProduction = "Initializer";
            try {
                if (!check$Initializer(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:435:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$435$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$207$8(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:435:3
            // NonTerminal TypeDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:435:3
            pushOntoLookaheadStack("ClassOrInterfaceBodyDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 435, 3);
            currentLookaheadProduction = "TypeDeclaration";
            try {
                if (!check$TypeDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:437:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$437$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:437:3
            // NonTerminal ConstructorDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:437:3
            pushOntoLookaheadStack("ClassOrInterfaceBodyDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 437, 3);
            currentLookaheadProduction = "ConstructorDeclaration";
            try {
                if (!check$ConstructorDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:439:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$439$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:439:3
            // NonTerminal MethodDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:439:3
            pushOntoLookaheadStack("ClassOrInterfaceBodyDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 439, 3);
            currentLookaheadProduction = "MethodDeclaration";
            try {
                if (!check$MethodDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:441:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$441$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:441:3
            // NonTerminal FieldDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:441:3
            pushOntoLookaheadStack("ClassOrInterfaceBodyDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 441, 3);
            currentLookaheadProduction = "FieldDeclaration";
            try {
                if (!check$FieldDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:455:29
    // BuildScanRoutine macro
    private boolean check$Java_ccc$455$29(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:455:29
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:455:37
            // NonTerminal VariableDeclarator at /Users/bnaudts/git/congo/examples/java/Java.ccc:455:37
            pushOntoLookaheadStack("FieldDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 455, 37);
            currentLookaheadProduction = "VariableDeclarator";
            try {
                if (!check$VariableDeclarator(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:458:46
    // BuildScanRoutine macro
    private boolean check$Java_ccc$458$46(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:458:46
            if (!scanToken(ASSIGN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:458:55
            // NonTerminal VariableInitializer at /Users/bnaudts/git/congo/examples/java/Java.ccc:458:55
            pushOntoLookaheadStack("VariableDeclarator", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 458, 55);
            currentLookaheadProduction = "VariableInitializer";
            try {
                if (!check$VariableInitializer(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:461:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$461$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:461:5
            if (!scanToken(IDENTIFIER)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:462:5
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$462$7(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:462:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$462$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:462:7
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$462$8(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:462:21
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:462:32
            if (!scanToken(RBRACKET)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:462:8
    // BuildScanRoutine macro
    private boolean check$Java_ccc$462$8(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:462:8
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:462:8
            pushOntoLookaheadStack("VariableDeclaratorId", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 462, 8);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:464:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$464$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (backscan$Java_ccc$464$10()) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:465:5
            if (!scanToken(UNDERSCORE)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:468:28
    // BuildScanRoutine macro
    private boolean check$Java_ccc$468$28(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:468:28
            // NonTerminal ArrayInitializer at /Users/bnaudts/git/congo/examples/java/Java.ccc:468:28
            pushOntoLookaheadStack("VariableInitializer", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 468, 28);
            currentLookaheadProduction = "ArrayInitializer";
            try {
                if (!check$ArrayInitializer(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:468:47
    // BuildScanRoutine macro
    private boolean check$Java_ccc$468$47(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:468:47
            // NonTerminal Expression at /Users/bnaudts/git/congo/examples/java/Java.ccc:468:47
            pushOntoLookaheadStack("VariableInitializer", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 468, 47);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:471:15
    // BuildScanRoutine macro
    private boolean check$Java_ccc$471$15(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:471:15
            // NonTerminal VariableInitializer at /Users/bnaudts/git/congo/examples/java/Java.ccc:471:15
            pushOntoLookaheadStack("ArrayInitializer", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 471, 15);
            currentLookaheadProduction = "VariableInitializer";
            try {
                if (!check$VariableInitializer(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:471:35
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$471$37(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:471:37
    // BuildScanRoutine macro
    private boolean check$Java_ccc$471$37(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:471:44
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:471:52
            // NonTerminal VariableInitializer at /Users/bnaudts/git/congo/examples/java/Java.ccc:471:52
            pushOntoLookaheadStack("ArrayInitializer", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 471, 52);
            currentLookaheadProduction = "VariableInitializer";
            try {
                if (!check$VariableInitializer(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:476:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$476$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (!backscan$Java_ccc$476$10()) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:478:5
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:484:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$484$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (backscan$Java_ccc$484$10()) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:488:5
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:494:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$494$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:494:5
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:501:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$501$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:501:5
            // NonTerminal TypeParameters at /Users/bnaudts/git/congo/examples/java/Java.ccc:501:5
            pushOntoLookaheadStack("MethodDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 501, 5);
            currentLookaheadProduction = "TypeParameters";
            try {
                if (!check$TypeParameters(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:504:28
    // BuildScanRoutine macro
    private boolean check$Java_ccc$504$28(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:504:28
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$504$29(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:504:42
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:504:52
            if (!scanToken(RBRACKET)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:504:29
    // BuildScanRoutine macro
    private boolean check$Java_ccc$504$29(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:504:29
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:504:29
            pushOntoLookaheadStack("MethodDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 504, 29);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:505:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$505$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:505:5
            // NonTerminal ThrowsList at /Users/bnaudts/git/congo/examples/java/Java.ccc:505:5
            pushOntoLookaheadStack("MethodDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 505, 5);
            currentLookaheadProduction = "ThrowsList";
            try {
                if (!check$ThrowsList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:506:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$506$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:506:5
            // NonTerminal Block at /Users/bnaudts/git/congo/examples/java/Java.ccc:506:5
            pushOntoLookaheadStack("MethodDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 506, 5);
            currentLookaheadProduction = "Block";
            try {
                if (!check$Block(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:510:31
    // BuildScanRoutine macro
    private boolean check$Java_ccc$510$31(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:510:31
            // NonTerminal FormalParameter at /Users/bnaudts/git/congo/examples/java/Java.ccc:510:31
            pushOntoLookaheadStack("FormalParameters", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 510, 31);
            currentLookaheadProduction = "FormalParameter";
            try {
                if (!check$FormalParameter(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:510:47
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$510$49(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:510:49
    // BuildScanRoutine macro
    private boolean check$Java_ccc$510$49(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:510:49
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:510:57
            // NonTerminal FormalParameter at /Users/bnaudts/git/congo/examples/java/Java.ccc:510:57
            pushOntoLookaheadStack("FormalParameters", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 510, 57);
            currentLookaheadProduction = "FormalParameter";
            try {
                if (!check$FormalParameter(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:512:81
    // BuildScanRoutine macro
    private boolean check$Java_ccc$512$81(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:512:81
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$512$82(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:512:95
            if (!scanToken(VAR_ARGS)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:512:82
    // BuildScanRoutine macro
    private boolean check$Java_ccc$512$82(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:512:82
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:512:82
            pushOntoLookaheadStack("FormalParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 512, 82);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:517:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$517$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:517:5
            // NonTerminal TypeParameters at /Users/bnaudts/git/congo/examples/java/Java.ccc:517:5
            pushOntoLookaheadStack("ConstructorDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 517, 5);
            currentLookaheadProduction = "TypeParameters";
            try {
                if (!check$TypeParameters(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:519:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$519$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:519:5
            // NonTerminal ThrowsList at /Users/bnaudts/git/congo/examples/java/Java.ccc:519:5
            pushOntoLookaheadStack("ConstructorDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 519, 5);
            currentLookaheadProduction = "ThrowsList";
            try {
                if (!check$ThrowsList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:522:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$522$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:522:5
            // NonTerminal ExplicitConstructorInvocation at /Users/bnaudts/git/congo/examples/java/Java.ccc:522:5
            pushOntoLookaheadStack("ConstructorDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 522, 5);
            currentLookaheadProduction = "ExplicitConstructorInvocation";
            try {
                if (!check$ExplicitConstructorInvocation(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:523:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$523$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$523$11(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:523:25
            // NonTerminal BlockStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:523:25
            pushOntoLookaheadStack("ConstructorDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 523, 25);
            currentLookaheadProduction = "BlockStatement";
            try {
                if (!check$BlockStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:528:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$528$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:528:3
            Token token3 = currentLookaheadToken;
            boolean passedPredicate3 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$528$4(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token3;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:528:20
            if (!scanToken(SUPER, THIS)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:528:44
            // NonTerminal InvocationArguments at /Users/bnaudts/git/congo/examples/java/Java.ccc:528:44
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 528, 44);
            currentLookaheadProduction = "InvocationArguments";
            try {
                if (!check$InvocationArguments(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:528:64
            if (!scanToken(SEMICOLON)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:528:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$528$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:528:4
            // NonTerminal TypeArguments at /Users/bnaudts/git/congo/examples/java/Java.ccc:528:4
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 528, 4);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:532:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$532$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:4
            Token token4 = currentLookaheadToken;
            int remainingLookahead4 = remainingLookahead;
            boolean hitFailure4 = hitFailure;
            boolean passedPredicate4 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$532$4(false)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$532$30(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:533:3
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:533:9
            Token token7 = currentLookaheadToken;
            boolean passedPredicate7 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$533$10(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token7;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate7;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:533:25
            if (!scanToken(SUPER)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:533:39
            // NonTerminal InvocationArguments at /Users/bnaudts/git/congo/examples/java/Java.ccc:533:39
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 533, 39);
            currentLookaheadProduction = "InvocationArguments";
            try {
                if (!check$InvocationArguments(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:533:59
            if (!scanToken(SEMICOLON)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:532:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$532$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:4
            // NonTerminal Name at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:4
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 532, 4);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:9
            Token token4 = currentLookaheadToken;
            boolean passedPredicate4 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$532$10(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token4;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:532:10
    // BuildScanRoutine macro
    private boolean check$Java_ccc$532$10(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:10
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:15
            if (!scanToken(THIS)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:532:30
    // BuildScanRoutine macro
    private boolean check$Java_ccc$532$30(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:30
            // NonTerminal Parentheses at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:30
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 532, 30);
            currentLookaheadProduction = "Parentheses";
            try {
                if (!check$Parentheses(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:42
            Token token4 = currentLookaheadToken;
            boolean passedPredicate4 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$532$43(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token4;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:60
            Token token6 = currentLookaheadToken;
            boolean passedPredicate6 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$532$61(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token6;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate6;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:532:43
    // BuildScanRoutine macro
    private boolean check$Java_ccc$532$43(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:43
            if (!scanToken(DOT)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:55
            // NonTerminal Name at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:55
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 532, 55);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:532:61
    // BuildScanRoutine macro
    private boolean check$Java_ccc$532$61(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:61
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:66
            if (!scanToken(THIS)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:533:10
    // BuildScanRoutine macro
    private boolean check$Java_ccc$533$10(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:533:10
            // NonTerminal TypeArguments at /Users/bnaudts/git/congo/examples/java/Java.ccc:533:10
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 533, 10);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:541:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$541$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:541:4
            // NonTerminal ReferenceType at /Users/bnaudts/git/congo/examples/java/Java.ccc:541:4
            pushOntoLookaheadStack("Type", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 541, 4);
            currentLookaheadProduction = "ReferenceType";
            try {
                if (!check$ReferenceType(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:543:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$543$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:543:4
            // NonTerminal PrimitiveType at /Users/bnaudts/git/congo/examples/java/Java.ccc:543:4
            pushOntoLookaheadStack("Type", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 543, 4);
            currentLookaheadProduction = "PrimitiveType";
            try {
                if (!check$PrimitiveType(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:551:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$551$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:551:4
            // NonTerminal PrimitiveArrayType at /Users/bnaudts/git/congo/examples/java/Java.ccc:551:4
            pushOntoLookaheadStack("ReferenceType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 551, 4);
            currentLookaheadProduction = "PrimitiveArrayType";
            try {
                if (!check$PrimitiveArrayType(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:553:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$553$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:553:4
            // NonTerminal ObjectType at /Users/bnaudts/git/congo/examples/java/Java.ccc:553:4
            pushOntoLookaheadStack("ReferenceType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 553, 4);
            currentLookaheadProduction = "ObjectType";
            try {
                if (!check$ObjectType(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:553:15
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$553$16(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:553:16
    // BuildScanRoutine macro
    private boolean check$Java_ccc$553$16(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:553:16
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$553$17(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:553:30
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:553:40
            if (!scanToken(RBRACKET)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:553:17
    // BuildScanRoutine macro
    private boolean check$Java_ccc$553$17(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:553:17
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:553:17
            pushOntoLookaheadStack("ReferenceType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 553, 17);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:557:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$557$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:557:6
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:557:6
            pushOntoLookaheadStack("ObjectType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 557, 6);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:558:22
    // BuildScanRoutine macro
    private boolean check$Java_ccc$558$22(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:558:22
            // NonTerminal TypeArguments at /Users/bnaudts/git/congo/examples/java/Java.ccc:558:22
            pushOntoLookaheadStack("ObjectType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 558, 22);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:559:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$559$7(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:559:7
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:559:13
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$559$14(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:559:27
            if (!scanToken(IDENTIFIER)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:559:45
            Token token8 = currentLookaheadToken;
            boolean passedPredicate8 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$559$47(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token8;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate8;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:559:14
    // BuildScanRoutine macro
    private boolean check$Java_ccc$559$14(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:559:14
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:559:14
            pushOntoLookaheadStack("ObjectType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 559, 14);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:559:47
    // BuildScanRoutine macro
    private boolean check$Java_ccc$559$47(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:559:47
            // NonTerminal TypeArguments at /Users/bnaudts/git/congo/examples/java/Java.ccc:559:47
            pushOntoLookaheadStack("ObjectType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 559, 47);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:575:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$575$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:575:4
            // NonTerminal DiamondOperator at /Users/bnaudts/git/congo/examples/java/Java.ccc:575:4
            pushOntoLookaheadStack("PossiblyEmptyTypeArguments", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 575, 4);
            currentLookaheadProduction = "DiamondOperator";
            try {
                if (!check$DiamondOperator(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:577:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$577$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:577:4
            // NonTerminal TypeArguments at /Users/bnaudts/git/congo/examples/java/Java.ccc:577:4
            pushOntoLookaheadStack("PossiblyEmptyTypeArguments", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 577, 4);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:582:23
    // BuildScanRoutine macro
    private boolean check$Java_ccc$582$23(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:582:23
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:582:31
            // NonTerminal TypeArgument at /Users/bnaudts/git/congo/examples/java/Java.ccc:582:31
            pushOntoLookaheadStack("TypeArguments", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 582, 31);
            currentLookaheadProduction = "TypeArgument";
            try {
                if (!check$TypeArgument(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:587:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$587$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:587:3
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$587$4(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:587:17
            if (!scanToken(HOOK)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:587:29
            Token token7 = currentLookaheadToken;
            boolean passedPredicate7 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$587$31(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token7;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate7;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:587:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$587$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:587:4
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:587:4
            pushOntoLookaheadStack("TypeArgument", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 587, 4);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:587:31
    // BuildScanRoutine macro
    private boolean check$Java_ccc$587$31(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:587:31
            // NonTerminal WildcardBounds at /Users/bnaudts/git/congo/examples/java/Java.ccc:587:31
            pushOntoLookaheadStack("TypeArgument", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 587, 31);
            currentLookaheadProduction = "WildcardBounds";
            try {
                if (!check$WildcardBounds(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:589:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$589$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:589:3
            // NonTerminal ReferenceType at /Users/bnaudts/git/congo/examples/java/Java.ccc:589:3
            pushOntoLookaheadStack("TypeArgument", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 589, 3);
            currentLookaheadProduction = "ReferenceType";
            try {
                if (!check$ReferenceType(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:595:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$595$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:595:3
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$595$4(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:596:3
            if (!scanToken(BOOLEAN)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:595:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$595$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:595:4
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:595:4
            pushOntoLookaheadStack("PrimitiveType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 595, 4);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:596:70
    // BuildScanRoutine macro
    private boolean check$Java_ccc$596$70(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:596:70
            if (!scanToken(DOUBLE)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:600:37
    // BuildScanRoutine macro
    private boolean check$Java_ccc$600$37(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:600:37
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$600$38(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:600:51
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:600:61
            if (!scanToken(RBRACKET)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:600:38
    // BuildScanRoutine macro
    private boolean check$Java_ccc$600$38(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:600:38
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:600:38
            pushOntoLookaheadStack("PrimitiveArrayType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 600, 38);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:602:24
    // BuildScanRoutine macro
    private boolean check$Java_ccc$602$24(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:602:24
            // NonTerminal Type at /Users/bnaudts/git/congo/examples/java/Java.ccc:602:24
            pushOntoLookaheadStack("ReturnType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 602, 24);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:604:23
    // BuildScanRoutine macro
    private boolean check$Java_ccc$604$23(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:604:23
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:604:29
            if (!scanToken(IDENTIFIER)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:606:39
    // BuildScanRoutine macro
    private boolean check$Java_ccc$606$39(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:606:39
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:606:47
            // NonTerminal ExceptionType at /Users/bnaudts/git/congo/examples/java/Java.ccc:606:47
            pushOntoLookaheadStack("ThrowsList", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 606, 47);
            currentLookaheadProduction = "ExceptionType";
            try {
                if (!check$ExceptionType(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:609:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$609$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:609:6
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:609:6
            pushOntoLookaheadStack("ExceptionType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 609, 6);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:612:8
    // BuildScanRoutine macro
    private boolean check$Java_ccc$612$8(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:612:8
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:612:14
            if (!scanToken(IDENTIFIER)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:615:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$615$7(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:615:7
            if (!scanToken(DOT)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for OneOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:616:7
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:616:8
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:616:8
            pushOntoLookaheadStack("ExceptionType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 616, 8);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            boolean passedPredicate6 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token7 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$616$8(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token7;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate6;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:617:7
            if (!scanToken(IDENTIFIER)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:616:8
    // BuildScanRoutine macro
    private boolean check$Java_ccc$616$8(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:616:8
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:616:8
            pushOntoLookaheadStack("ExceptionType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 616, 8);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:619:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$619$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:619:6
            // NonTerminal TypeArguments at /Users/bnaudts/git/congo/examples/java/Java.ccc:619:6
            pushOntoLookaheadStack("ExceptionType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 619, 6);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:686:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$686$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:687:8
            if (!scanToken(first_set$Java_ccc$687$8)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:687:27
            // NonTerminal Expression at /Users/bnaudts/git/congo/examples/java/Java.ccc:687:27
            pushOntoLookaheadStack("AssignmentExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 687, 27);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:696:30
    // BuildScanRoutine macro
    private boolean check$Java_ccc$696$30(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:696:30
            if (!scanToken(HOOK)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:696:37
            // NonTerminal Expression at /Users/bnaudts/git/congo/examples/java/Java.ccc:696:37
            pushOntoLookaheadStack("TernaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 696, 37);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:696:48
            if (!scanToken(COLON)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:696:56
            // NonTerminal Expression at /Users/bnaudts/git/congo/examples/java/Java.ccc:696:56
            pushOntoLookaheadStack("TernaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 696, 56);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:700:30
    // BuildScanRoutine macro
    private boolean check$Java_ccc$700$30(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:700:30
            if (!scanToken(SC_OR)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:700:38
            // NonTerminal ConditionalAndExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:700:38
            pushOntoLookaheadStack("ConditionalOrExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 700, 38);
            currentLookaheadProduction = "ConditionalAndExpression";
            try {
                if (!check$ConditionalAndExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:704:27
    // BuildScanRoutine macro
    private boolean check$Java_ccc$704$27(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:704:27
            if (!scanToken(SC_AND)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:704:36
            // NonTerminal InclusiveOrExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:704:36
            pushOntoLookaheadStack("ConditionalAndExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 704, 36);
            currentLookaheadProduction = "InclusiveOrExpression";
            try {
                if (!check$InclusiveOrExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:708:27
    // BuildScanRoutine macro
    private boolean check$Java_ccc$708$27(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:708:27
            if (!scanToken(BIT_OR)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:708:36
            // NonTerminal ExclusiveOrExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:708:36
            pushOntoLookaheadStack("InclusiveOrExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 708, 36);
            currentLookaheadProduction = "ExclusiveOrExpression";
            try {
                if (!check$ExclusiveOrExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:712:19
    // BuildScanRoutine macro
    private boolean check$Java_ccc$712$19(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:712:19
            if (!scanToken(XOR)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:712:25
            // NonTerminal AndExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:712:25
            pushOntoLookaheadStack("ExclusiveOrExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 712, 25);
            currentLookaheadProduction = "AndExpression";
            try {
                if (!check$AndExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:716:24
    // BuildScanRoutine macro
    private boolean check$Java_ccc$716$24(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:716:24
            if (!scanToken(BIT_AND)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:716:34
            // NonTerminal EqualityExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:716:34
            pushOntoLookaheadStack("AndExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 716, 34);
            currentLookaheadProduction = "EqualityExpression";
            try {
                if (!check$EqualityExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:720:26
    // BuildScanRoutine macro
    private boolean check$Java_ccc$720$26(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:720:28
            if (!scanToken(EQ, NE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:720:42
            // NonTerminal InstanceOfExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:720:42
            pushOntoLookaheadStack("EqualityExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 720, 42);
            currentLookaheadProduction = "InstanceOfExpression";
            try {
                if (!check$InstanceOfExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:726:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$726$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:726:5
            if (!scanToken(INSTANCEOF)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:728:7
            Token token5 = currentLookaheadToken;
            int remainingLookahead5 = remainingLookahead;
            boolean hitFailure5 = hitFailure;
            boolean passedPredicate5 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$728$7(false)) {
                    currentLookaheadToken = token5;
                    remainingLookahead = remainingLookahead5;
                    hitFailure = hitFailure5;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$730$7(false)) {
                        currentLookaheadToken = token5;
                        remainingLookahead = remainingLookahead5;
                        hitFailure = hitFailure5;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$732$7(false)) {
                            currentLookaheadToken = token5;
                            remainingLookahead = remainingLookahead5;
                            hitFailure = hitFailure5;
                            return false;
                        }
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:728:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$728$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1034$9(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:728:7
            // NonTerminal LocalVariableDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:728:7
            pushOntoLookaheadStack("InstanceOfExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 728, 7);
            currentLookaheadProduction = "LocalVariableDeclaration";
            try {
                if (!check$LocalVariableDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:730:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$730$7(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:730:7
            // NonTerminal RecordPattern at /Users/bnaudts/git/congo/examples/java/Java.ccc:730:7
            pushOntoLookaheadStack("InstanceOfExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 730, 7);
            currentLookaheadProduction = "RecordPattern";
            try {
                if (!check$RecordPattern(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:732:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$732$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:732:7
            // NonTerminal ReferenceType at /Users/bnaudts/git/congo/examples/java/Java.ccc:732:7
            pushOntoLookaheadStack("InstanceOfExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 732, 7);
            currentLookaheadProduction = "ReferenceType";
            try {
                if (!check$ReferenceType(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:740:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$740$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:740:7
            if (!scanToken(GT, LT, LE, GE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:741:5
            // NonTerminal ShiftExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:741:5
            pushOntoLookaheadStack("RelationalExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 741, 5);
            currentLookaheadProduction = "ShiftExpression";
            try {
                if (!check$ShiftExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:752:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$752$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$752$11(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for UncacheTokens specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:752:41
            uncacheTokens();
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:755:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$755$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:755:8
            if (!scanToken(LSHIFT, RSIGNEDSHIFT, RUNSIGNEDSHIFT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:756:7
            // NonTerminal AdditiveExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:756:7
            pushOntoLookaheadStack("ShiftExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 756, 7);
            currentLookaheadProduction = "AdditiveExpression";
            try {
                if (!check$AdditiveExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:761:31
    // BuildScanRoutine macro
    private boolean check$Java_ccc$761$31(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:761:33
            if (!scanToken(PLUS, MINUS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:761:52
            // NonTerminal MultiplicativeExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:761:52
            pushOntoLookaheadStack("AdditiveExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 761, 52);
            currentLookaheadProduction = "MultiplicativeExpression";
            try {
                if (!check$MultiplicativeExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:765:22
    // BuildScanRoutine macro
    private boolean check$Java_ccc$765$22(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:765:24
            if (!scanToken(STAR, SLASH, REM)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:765:50
            // NonTerminal UnaryExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:765:50
            pushOntoLookaheadStack("MultiplicativeExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 765, 50);
            currentLookaheadProduction = "UnaryExpression";
            try {
                if (!check$UnaryExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:769:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$769$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:769:5
            if (!scanToken(PLUS, MINUS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:769:24
            // NonTerminal UnaryExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:769:24
            pushOntoLookaheadStack("UnaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 769, 24);
            currentLookaheadProduction = "UnaryExpression";
            try {
                if (!check$UnaryExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:771:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$771$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:771:3
            // NonTerminal PreIncrementExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:771:3
            pushOntoLookaheadStack("UnaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 771, 3);
            currentLookaheadProduction = "PreIncrementExpression";
            try {
                if (!check$PreIncrementExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:773:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$773$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:773:3
            // NonTerminal PreDecrementExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:773:3
            pushOntoLookaheadStack("UnaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 773, 3);
            currentLookaheadProduction = "PreDecrementExpression";
            try {
                if (!check$PreDecrementExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:775:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$775$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:775:3
            // NonTerminal UnaryExpressionNotPlusMinus at /Users/bnaudts/git/congo/examples/java/Java.ccc:775:3
            pushOntoLookaheadStack("UnaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 775, 3);
            currentLookaheadProduction = "UnaryExpressionNotPlusMinus";
            try {
                if (!check$UnaryExpressionNotPlusMinus(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:791:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$791$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:791:5
            if (!scanToken(BANG, TILDE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:791:24
            // NonTerminal UnaryExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:791:24
            pushOntoLookaheadStack("UnaryExpressionNotPlusMinus", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 791, 24);
            currentLookaheadProduction = "UnaryExpression";
            try {
                if (!check$UnaryExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:793:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$793$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (backscan$Java_ccc$1438$8()) return false;
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:793:3
            // NonTerminal LambdaExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:793:3
            pushOntoLookaheadStack("UnaryExpressionNotPlusMinus", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 793, 3);
            currentLookaheadProduction = "LambdaExpression";
            try {
                if (!check$LambdaExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:795:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$795$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:795:3
            // NonTerminal SwitchExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:795:3
            pushOntoLookaheadStack("UnaryExpressionNotPlusMinus", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 795, 3);
            currentLookaheadProduction = "SwitchExpression";
            try {
                if (!check$SwitchExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:797:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$797$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:797:3
            // NonTerminal PrimitiveCastExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:797:3
            pushOntoLookaheadStack("UnaryExpressionNotPlusMinus", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 797, 3);
            currentLookaheadProduction = "PrimitiveCastExpression";
            try {
                if (!check$PrimitiveCastExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:799:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$799$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:799:3
            // NonTerminal ObjectCastExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:799:3
            pushOntoLookaheadStack("UnaryExpressionNotPlusMinus", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 799, 3);
            currentLookaheadProduction = "ObjectCastExpression";
            try {
                if (!check$ObjectCastExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:801:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$801$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:801:3
            // NonTerminal PostfixExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:801:3
            pushOntoLookaheadStack("UnaryExpressionNotPlusMinus", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 801, 3);
            currentLookaheadProduction = "PostfixExpression";
            try {
                if (!check$PostfixExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:807:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$807$5$(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:807:5
            Token token2 = currentLookaheadToken;
            int remainingLookahead2 = remainingLookahead;
            boolean hitFailure2 = hitFailure;
            boolean passedPredicate2 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$807$5(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!scanToken(DECR)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate2;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:807:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$807$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:809:5
            if (!scanToken(INCR)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:822:28
    // BuildScanRoutine macro
    private boolean check$Java_ccc$822$28(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:822:28
            if (!scanToken(BIT_AND)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:822:38
            // NonTerminal ObjectType at /Users/bnaudts/git/congo/examples/java/Java.ccc:822:38
            pushOntoLookaheadStack("ObjectCastExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 822, 38);
            currentLookaheadProduction = "ObjectType";
            try {
                if (!check$ObjectType(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:833:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$833$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:833:3
            // NonTerminal Parentheses at /Users/bnaudts/git/congo/examples/java/Java.ccc:833:3
            pushOntoLookaheadStack("PrimaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 833, 3);
            currentLookaheadProduction = "Parentheses";
            try {
                if (!check$Parentheses(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:835:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$835$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:835:3
            // NonTerminal AllocationExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:835:3
            pushOntoLookaheadStack("PrimaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 835, 3);
            currentLookaheadProduction = "AllocationExpression";
            try {
                if (!check$AllocationExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:837:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$837$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:837:3
            // NonTerminal ClassLiteral at /Users/bnaudts/git/congo/examples/java/Java.ccc:837:3
            pushOntoLookaheadStack("PrimaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 837, 3);
            currentLookaheadProduction = "ClassLiteral";
            try {
                if (!check$ClassLiteral(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:839:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$839$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:839:3
            // NonTerminal MethodReference at /Users/bnaudts/git/congo/examples/java/Java.ccc:839:3
            pushOntoLookaheadStack("PrimaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 839, 3);
            currentLookaheadProduction = "MethodReference";
            try {
                if (!check$MethodReference(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:841:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$841$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:841:3
            // NonTerminal Name at /Users/bnaudts/git/congo/examples/java/Java.ccc:841:3
            pushOntoLookaheadStack("PrimaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 841, 3);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:844:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$844$3$(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:844:3
            Token token2 = currentLookaheadToken;
            int remainingLookahead2 = remainingLookahead;
            boolean hitFailure2 = hitFailure;
            boolean passedPredicate2 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$844$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$846$3(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$848$3(false)) {
                            currentLookaheadToken = token2;
                            remainingLookahead = remainingLookahead2;
                            hitFailure = hitFailure2;
                            if (passedPredicate && !legacyGlitchyLookahead) return false;
                            passedPredicate = false;
                            if (!check$Java_ccc$850$3(false)) {
                                currentLookaheadToken = token2;
                                remainingLookahead = remainingLookahead2;
                                hitFailure = hitFailure2;
                                if (passedPredicate && !legacyGlitchyLookahead) return false;
                                passedPredicate = false;
                                if (!check$Java_ccc$852$3(false)) {
                                    currentLookaheadToken = token2;
                                    remainingLookahead = remainingLookahead2;
                                    hitFailure = hitFailure2;
                                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                                    passedPredicate = false;
                                    if (!check$Java_ccc$854$3(false)) {
                                        currentLookaheadToken = token2;
                                        remainingLookahead = remainingLookahead2;
                                        hitFailure = hitFailure2;
                                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                                        passedPredicate = false;
                                        if (!check$Java_ccc$862$3(false)) {
                                            currentLookaheadToken = token2;
                                            remainingLookahead = remainingLookahead2;
                                            hitFailure = hitFailure2;
                                            return false;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } finally {
                passedPredicate = passedPredicate2;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:844:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$844$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:844:4
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:844:10
            if (!scanToken(THIS)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:846:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$846$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:846:4
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:846:10
            if (!scanToken(SUPER)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:848:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$848$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:848:4
            if (!scanToken(DOT)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:848:16
            // NonTerminal AllocationExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:848:16
            pushOntoLookaheadStack("PrimaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 848, 16);
            currentLookaheadProduction = "AllocationExpression";
            try {
                if (!check$AllocationExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:850:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$850$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:850:4
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:850:15
            // NonTerminal Expression at /Users/bnaudts/git/congo/examples/java/Java.ccc:850:15
            pushOntoLookaheadStack("PrimaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 850, 15);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:850:26
            if (!scanToken(RBRACKET)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:852:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$852$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:852:4
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:852:10
            Token token6 = currentLookaheadToken;
            boolean passedPredicate6 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$852$11(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token6;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate6;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:852:26
            if (!scanToken(IDENTIFIER)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:852:11
    // BuildScanRoutine macro
    private boolean check$Java_ccc$852$11(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:852:11
            // NonTerminal TypeArguments at /Users/bnaudts/git/congo/examples/java/Java.ccc:852:11
            pushOntoLookaheadStack("PrimaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 852, 11);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:854:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$854$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:854:4
            if (!scanToken(DOUBLE_COLON)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:854:19
            Token token6 = currentLookaheadToken;
            boolean passedPredicate6 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$854$20(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token6;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate6;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:854:36
            if (!scanToken(NEW, IDENTIFIER)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:854:20
    // BuildScanRoutine macro
    private boolean check$Java_ccc$854$20(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:854:20
            // NonTerminal TypeArguments at /Users/bnaudts/git/congo/examples/java/Java.ccc:854:20
            pushOntoLookaheadStack("PrimaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 854, 20);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:862:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$862$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (!(getTokenType(0) == IDENTIFIER)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:864:3
            // NonTerminal InvocationArguments at /Users/bnaudts/git/congo/examples/java/Java.ccc:864:3
            pushOntoLookaheadStack("PrimaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 864, 3);
            currentLookaheadProduction = "InvocationArguments";
            try {
                if (!check$InvocationArguments(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:882:26
    // BuildScanRoutine macro
    private boolean check$Java_ccc$882$26(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:882:26
            // NonTerminal Type at /Users/bnaudts/git/congo/examples/java/Java.ccc:882:26
            pushOntoLookaheadStack("ClassLiteral", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 882, 26);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:885:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$885$6$(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:885:6
            // NonTerminal Type at /Users/bnaudts/git/congo/examples/java/Java.ccc:885:6
            pushOntoLookaheadStack("MethodReference", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 885, 6);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:887:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$887$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:887:7
            // NonTerminal TypeArguments at /Users/bnaudts/git/congo/examples/java/Java.ccc:887:7
            pushOntoLookaheadStack("MethodReference", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 887, 7);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:913:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$913$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:913:7
            // NonTerminal Expression at /Users/bnaudts/git/congo/examples/java/Java.ccc:913:7
            pushOntoLookaheadStack("InvocationArguments", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 913, 7);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:913:18
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$913$19(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:913:19
    // BuildScanRoutine macro
    private boolean check$Java_ccc$913$19(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:913:19
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:913:27
            // NonTerminal Expression at /Users/bnaudts/git/congo/examples/java/Java.ccc:913:27
            pushOntoLookaheadStack("InvocationArguments", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 913, 27);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:918:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$918$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:918:3
            if (!scanToken(NEW)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:918:9
            // NonTerminal PrimitiveType at /Users/bnaudts/git/congo/examples/java/Java.ccc:918:9
            pushOntoLookaheadStack("AllocationExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 918, 9);
            currentLookaheadProduction = "PrimitiveType";
            try {
                if (!check$PrimitiveType(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:918:28
            // NonTerminal ArrayDimsAndInits at /Users/bnaudts/git/congo/examples/java/Java.ccc:918:28
            pushOntoLookaheadStack("AllocationExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 918, 28);
            currentLookaheadProduction = "ArrayDimsAndInits";
            try {
                if (!check$ArrayDimsAndInits(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:920:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$920$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:920:3
            if (!scanToken(NEW)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:920:9
            Token token4 = currentLookaheadToken;
            boolean passedPredicate4 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$920$10(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token4;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:920:25
            // NonTerminal ObjectType at /Users/bnaudts/git/congo/examples/java/Java.ccc:920:25
            pushOntoLookaheadStack("AllocationExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 920, 25);
            currentLookaheadProduction = "ObjectType";
            try {
                if (!check$ObjectType(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:920:36
            Token token7 = currentLookaheadToken;
            boolean passedPredicate7 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$920$38(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token7;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate7;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:922:7
            Token token10 = currentLookaheadToken;
            int remainingLookahead10 = remainingLookahead;
            boolean hitFailure10 = hitFailure;
            boolean passedPredicate10 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$922$7(false)) {
                    currentLookaheadToken = token10;
                    remainingLookahead = remainingLookahead10;
                    hitFailure = hitFailure10;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$924$7(false)) {
                        currentLookaheadToken = token10;
                        remainingLookahead = remainingLookahead10;
                        hitFailure = hitFailure10;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate10;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:920:10
    // BuildScanRoutine macro
    private boolean check$Java_ccc$920$10(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:920:10
            // NonTerminal TypeArguments at /Users/bnaudts/git/congo/examples/java/Java.ccc:920:10
            pushOntoLookaheadStack("AllocationExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 920, 10);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:920:38
    // BuildScanRoutine macro
    private boolean check$Java_ccc$920$38(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:920:38
            // NonTerminal PossiblyEmptyTypeArguments at /Users/bnaudts/git/congo/examples/java/Java.ccc:920:38
            pushOntoLookaheadStack("AllocationExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 920, 38);
            currentLookaheadProduction = "PossiblyEmptyTypeArguments";
            try {
                if (!check$PossiblyEmptyTypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:922:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$922$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:922:7
            // NonTerminal ArrayDimsAndInits at /Users/bnaudts/git/congo/examples/java/Java.ccc:922:7
            pushOntoLookaheadStack("AllocationExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 922, 7);
            currentLookaheadProduction = "ArrayDimsAndInits";
            try {
                if (!check$ArrayDimsAndInits(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:924:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$924$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:924:7
            // NonTerminal InvocationArguments at /Users/bnaudts/git/congo/examples/java/Java.ccc:924:7
            pushOntoLookaheadStack("AllocationExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 924, 7);
            currentLookaheadProduction = "InvocationArguments";
            try {
                if (!check$InvocationArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:924:27
            Token token4 = currentLookaheadToken;
            boolean passedPredicate4 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$924$29(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token4;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:924:29
    // BuildScanRoutine macro
    private boolean check$Java_ccc$924$29(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:924:29
            // NonTerminal ClassOrInterfaceBody at /Users/bnaudts/git/congo/examples/java/Java.ccc:924:29
            pushOntoLookaheadStack("AllocationExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 924, 29);
            currentLookaheadProduction = "ClassOrInterfaceBody";
            try {
                if (!check$ClassOrInterfaceBody(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:929:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$929$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for OneOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:930:3
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:931:5
            if (!scanToken(LBRACKET)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:931:22
            // NonTerminal Expression at /Users/bnaudts/git/congo/examples/java/Java.ccc:931:22
            pushOntoLookaheadStack("ArrayDimsAndInits", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 931, 22);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:931:33
            if (!scanToken(RBRACKET)) return false;
            boolean passedPredicate7 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token8 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$931$5(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token8;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate7;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:933:3
            boolean passedPredicate10 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token11 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$934$5(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token11;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate10;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:931:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$931$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:931:5
            if (!scanToken(LBRACKET)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:931:22
            // NonTerminal Expression at /Users/bnaudts/git/congo/examples/java/Java.ccc:931:22
            pushOntoLookaheadStack("ArrayDimsAndInits", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 931, 22);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:931:33
            if (!scanToken(RBRACKET)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:934:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$934$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:934:5
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$934$6(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:934:19
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:934:29
            if (!scanToken(RBRACKET)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:934:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$934$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:934:6
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:934:6
            pushOntoLookaheadStack("ArrayDimsAndInits", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 934, 6);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:937:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$937$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for OneOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:937:3
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:938:5
            boolean passedPredicate5 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token6 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$938$6(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token6;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:938:19
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:938:29
            if (!scanToken(RBRACKET)) return false;
            boolean passedPredicate9 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token10 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$938$5(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token10;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate9;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:940:3
            // NonTerminal ArrayInitializer at /Users/bnaudts/git/congo/examples/java/Java.ccc:940:3
            pushOntoLookaheadStack("ArrayDimsAndInits", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 940, 3);
            currentLookaheadProduction = "ArrayInitializer";
            try {
                if (!check$ArrayInitializer(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:938:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$938$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:938:5
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$938$6(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:938:19
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:938:29
            if (!scanToken(RBRACKET)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:938:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$938$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:938:6
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:938:6
            pushOntoLookaheadStack("ArrayDimsAndInits", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 938, 6);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:948:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$948$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:948:3
            // NonTerminal LabeledStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:948:3
            pushOntoLookaheadStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 948, 3);
            currentLookaheadProduction = "LabeledStatement";
            try {
                if (!check$LabeledStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:950:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$950$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:950:3
            // NonTerminal AssertStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:950:3
            pushOntoLookaheadStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 950, 3);
            currentLookaheadProduction = "AssertStatement";
            try {
                if (!check$AssertStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:952:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$952$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:952:3
            // NonTerminal Block at /Users/bnaudts/git/congo/examples/java/Java.ccc:952:3
            pushOntoLookaheadStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 952, 3);
            currentLookaheadProduction = "Block";
            try {
                if (!check$Block(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:954:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$954$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (!backscan$Java_ccc$1276$42()) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:954:3
            // NonTerminal YieldStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:954:3
            pushOntoLookaheadStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 954, 3);
            currentLookaheadProduction = "YieldStatement";
            try {
                if (!check$YieldStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:958:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$958$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:958:3
            // NonTerminal SwitchStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:958:3
            pushOntoLookaheadStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 958, 3);
            currentLookaheadProduction = "SwitchStatement";
            try {
                if (!check$SwitchStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:960:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$960$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:960:3
            // NonTerminal IfStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:960:3
            pushOntoLookaheadStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 960, 3);
            currentLookaheadProduction = "IfStatement";
            try {
                if (!check$IfStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:962:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$962$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:962:3
            // NonTerminal WhileStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:962:3
            pushOntoLookaheadStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 962, 3);
            currentLookaheadProduction = "WhileStatement";
            try {
                if (!check$WhileStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:964:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$964$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:964:3
            // NonTerminal DoStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:964:3
            pushOntoLookaheadStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 964, 3);
            currentLookaheadProduction = "DoStatement";
            try {
                if (!check$DoStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:966:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$966$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:966:3
            // NonTerminal ForStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:966:3
            pushOntoLookaheadStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 966, 3);
            currentLookaheadProduction = "ForStatement";
            try {
                if (!check$ForStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:968:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$968$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:968:3
            // NonTerminal BreakStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:968:3
            pushOntoLookaheadStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 968, 3);
            currentLookaheadProduction = "BreakStatement";
            try {
                if (!check$BreakStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:970:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$970$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:970:3
            // NonTerminal ContinueStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:970:3
            pushOntoLookaheadStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 970, 3);
            currentLookaheadProduction = "ContinueStatement";
            try {
                if (!check$ContinueStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:972:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$972$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:972:3
            // NonTerminal ReturnStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:972:3
            pushOntoLookaheadStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 972, 3);
            currentLookaheadProduction = "ReturnStatement";
            try {
                if (!check$ReturnStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:974:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$974$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:974:3
            // NonTerminal ThrowStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:974:3
            pushOntoLookaheadStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 974, 3);
            currentLookaheadProduction = "ThrowStatement";
            try {
                if (!check$ThrowStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:976:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$976$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:976:3
            // NonTerminal SynchronizedStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:976:3
            pushOntoLookaheadStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 976, 3);
            currentLookaheadProduction = "SynchronizedStatement";
            try {
                if (!check$SynchronizedStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:978:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$978$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:978:3
            // NonTerminal TryStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:978:3
            pushOntoLookaheadStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 978, 3);
            currentLookaheadProduction = "TryStatement";
            try {
                if (!check$TryStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:980:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$980$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:980:3
            // NonTerminal ExpressionStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:980:3
            pushOntoLookaheadStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 980, 3);
            currentLookaheadProduction = "ExpressionStatement";
            try {
                if (!check$ExpressionStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1006:42
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1006$42(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1006:42
            if (!scanToken(COLON)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1006:50
            // NonTerminal Expression at /Users/bnaudts/git/congo/examples/java/Java.ccc:1006:50
            pushOntoLookaheadStack("AssertStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1006, 50);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1008:30
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1008$30(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$1008$36(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1008:50
            // NonTerminal BlockStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:1008:50
            pushOntoLookaheadStack("Block", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1008, 50);
            currentLookaheadProduction = "BlockStatement";
            try {
                if (!check$BlockStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1011:12
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1011$12(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1011:12
            Token token2 = currentLookaheadToken;
            int remainingLookahead2 = remainingLookahead;
            boolean hitFailure2 = hitFailure;
            boolean passedPredicate2 = passedPredicate;
            try {
                passedPredicate = false;
                if (!scanToken(FINAL)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1011$20(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate2;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1011:20
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1011$20(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1011:20
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:1011:20
            pushOntoLookaheadStack("BlockStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1011, 20);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1016:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1016$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (!backscan$Java_ccc$1276$42()) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1016:3
            // NonTerminal YieldStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:1016:3
            pushOntoLookaheadStack("BlockStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1016, 3);
            currentLookaheadProduction = "YieldStatement";
            try {
                if (!check$YieldStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1018:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1018$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1018:3
            // NonTerminal RecordDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:1018:3
            pushOntoLookaheadStack("BlockStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1018, 3);
            currentLookaheadProduction = "RecordDeclaration";
            try {
                if (!check$RecordDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1020:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1020$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1034$9(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1020:3
            // NonTerminal LocalVariableDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:1020:3
            pushOntoLookaheadStack("BlockStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1020, 3);
            currentLookaheadProduction = "LocalVariableDeclaration";
            try {
                if (!check$LocalVariableDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1020:28
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1021:3
            if (!scanToken(SEMICOLON)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1021:15
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1023:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1023$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1023:3
            // NonTerminal ClassDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:1023:3
            pushOntoLookaheadStack("BlockStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1023, 3);
            currentLookaheadProduction = "ClassDeclaration";
            try {
                if (!check$ClassDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1025:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1025$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1025:3
            // NonTerminal InterfaceDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:1025:3
            pushOntoLookaheadStack("BlockStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1025, 3);
            currentLookaheadProduction = "InterfaceDeclaration";
            try {
                if (!check$InterfaceDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1027:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1027$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1027:3
            // NonTerminal EnumDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:1027:3
            pushOntoLookaheadStack("BlockStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1027, 3);
            currentLookaheadProduction = "EnumDeclaration";
            try {
                if (!check$EnumDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1029:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1029$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1029:3
            // NonTerminal Statement at /Users/bnaudts/git/congo/examples/java/Java.ccc:1029:3
            pushOntoLookaheadStack("BlockStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1029, 3);
            currentLookaheadProduction = "Statement";
            try {
                if (!check$Statement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1037:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1037$6(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1037:6
            // NonTerminal NoVarDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:1037:6
            pushOntoLookaheadStack("LocalVariableDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1037, 6);
            currentLookaheadProduction = "NoVarDeclaration";
            try {
                if (!check$NoVarDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1039:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1039$6(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1039:6
            // NonTerminal VarDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:1039:6
            pushOntoLookaheadStack("LocalVariableDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1039, 6);
            currentLookaheadProduction = "VarDeclaration";
            try {
                if (!check$VarDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1046:35
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1046$35(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1046:35
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1046:43
            // NonTerminal VariableDeclarator at /Users/bnaudts/git/congo/examples/java/Java.ccc:1046:43
            pushOntoLookaheadStack("NoVarDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1046, 43);
            currentLookaheadProduction = "VariableDeclarator";
            try {
                if (!check$VariableDeclarator(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1063:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1063$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1063:4
            if (!scanToken(ASSIGN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1063:13
            // NonTerminal Expression at /Users/bnaudts/git/congo/examples/java/Java.ccc:1063:13
            pushOntoLookaheadStack("VarDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1063, 13);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1070:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1070$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1070:6
            // NonTerminal Type at /Users/bnaudts/git/congo/examples/java/Java.ccc:1070:6
            pushOntoLookaheadStack("LocalVariableDeclarationLA", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1070, 6);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1083:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1083$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1083:3
            // NonTerminal PreIncrementExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:1083:3
            pushOntoLookaheadStack("StatementExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1083, 3);
            currentLookaheadProduction = "PreIncrementExpression";
            try {
                if (!check$PreIncrementExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1085:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1085$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1085:3
            // NonTerminal PreDecrementExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:1085:3
            pushOntoLookaheadStack("StatementExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1085, 3);
            currentLookaheadProduction = "PreDecrementExpression";
            try {
                if (!check$PreDecrementExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1087:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1087$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1087:3
            // NonTerminal PrimaryExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:1087:3
            pushOntoLookaheadStack("StatementExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1087, 3);
            currentLookaheadProduction = "PrimaryExpression";
            try {
                if (!check$PrimaryExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1088:3
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1090:7
            Token token6 = currentLookaheadToken;
            int remainingLookahead6 = remainingLookahead;
            boolean hitFailure6 = hitFailure;
            boolean passedPredicate6 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$1090$7(false)) {
                    currentLookaheadToken = token6;
                    remainingLookahead = remainingLookahead6;
                    hitFailure = hitFailure6;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1097$7(false)) {
                        currentLookaheadToken = token6;
                        remainingLookahead = remainingLookahead6;
                        hitFailure = hitFailure6;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate6;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1090:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1090$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1092:11
            Token token4 = currentLookaheadToken;
            int remainingLookahead4 = remainingLookahead;
            boolean hitFailure4 = hitFailure;
            boolean passedPredicate4 = passedPredicate;
            try {
                passedPredicate = false;
                if (!scanToken(INCR, DECR)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1094$11(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1094:11
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1094$11(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1094:11
            if (!scanToken(first_set$Java_ccc$1094$11$)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1094:30
            // NonTerminal Expression at /Users/bnaudts/git/congo/examples/java/Java.ccc:1094:30
            pushOntoLookaheadStack("StatementExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1094, 30);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1097:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1097$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Assertion specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1097:7
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1107:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1107$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1107:5
            // NonTerminal RecordPattern at /Users/bnaudts/git/congo/examples/java/Java.ccc:1107:5
            pushOntoLookaheadStack("CasePattern", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1107, 5);
            currentLookaheadProduction = "RecordPattern";
            try {
                if (!check$RecordPattern(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1109:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1109$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1109:5
            // NonTerminal TypePattern at /Users/bnaudts/git/congo/examples/java/Java.ccc:1109:5
            pushOntoLookaheadStack("CasePattern", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1109, 5);
            currentLookaheadProduction = "TypePattern";
            try {
                if (!check$TypePattern(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1116:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1116$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$1116$13(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1118:9
            Token token4 = currentLookaheadToken;
            int remainingLookahead4 = remainingLookahead;
            boolean hitFailure4 = hitFailure;
            boolean passedPredicate4 = passedPredicate;
            try {
                passedPredicate = false;
                if (!scanToken(UNDERSCORE)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1120$9(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1120:9
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1120$9(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1120:9
            // NonTerminal CasePattern at /Users/bnaudts/git/congo/examples/java/Java.ccc:1120:9
            pushOntoLookaheadStack("RecordPattern", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1120, 9);
            currentLookaheadProduction = "CasePattern";
            try {
                if (!check$CasePattern(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1121:9
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1122$11(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1122:11
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1122$11(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1122:11
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1123:12
            Token token5 = currentLookaheadToken;
            int remainingLookahead5 = remainingLookahead;
            boolean hitFailure5 = hitFailure;
            boolean passedPredicate5 = passedPredicate;
            try {
                passedPredicate = false;
                if (!scanToken(UNDERSCORE)) {
                    currentLookaheadToken = token5;
                    remainingLookahead = remainingLookahead5;
                    hitFailure = hitFailure5;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1123$25(false)) {
                        currentLookaheadToken = token5;
                        remainingLookahead = remainingLookahead5;
                        hitFailure = hitFailure5;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1123:25
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1123$25(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1123:25
            // NonTerminal CasePattern at /Users/bnaudts/git/congo/examples/java/Java.ccc:1123:25
            pushOntoLookaheadStack("RecordPattern", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1123, 25);
            currentLookaheadProduction = "CasePattern";
            try {
                if (!check$CasePattern(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1154:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1154$5$(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1154:5
            Token token2 = currentLookaheadToken;
            int remainingLookahead2 = remainingLookahead;
            boolean hitFailure2 = hitFailure;
            boolean passedPredicate2 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$1154$5(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1157$5(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate2;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1154:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1154$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1154$10(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for OneOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1155:5
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1155:6
            // NonTerminal NewCaseStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:1155:6
            pushOntoLookaheadStack("SwitchStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1155, 6);
            currentLookaheadProduction = "NewCaseStatement";
            try {
                if (!check$NewCaseStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
            boolean passedPredicate5 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token6 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1155$6(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token6;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1155:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1155$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1155:6
            // NonTerminal NewCaseStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:1155:6
            pushOntoLookaheadStack("SwitchStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1155, 6);
            currentLookaheadProduction = "NewCaseStatement";
            try {
                if (!check$NewCaseStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1157:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1157$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1157$10(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for OneOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1158:5
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1158:6
            // NonTerminal ClassicCaseStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:1158:6
            pushOntoLookaheadStack("SwitchStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1158, 6);
            currentLookaheadProduction = "ClassicCaseStatement";
            try {
                if (!check$ClassicCaseStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
            boolean passedPredicate5 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token6 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1158$6(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token6;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1158:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1158$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1158:6
            // NonTerminal ClassicCaseStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:1158:6
            pushOntoLookaheadStack("SwitchStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1158, 6);
            currentLookaheadProduction = "ClassicCaseStatement";
            try {
                if (!check$ClassicCaseStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1180:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1180$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$1180$10(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1180:42
            // NonTerminal BlockStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:1180:42
            pushOntoLookaheadStack("ClassicCaseStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1180, 42);
            currentLookaheadProduction = "BlockStatement";
            try {
                if (!check$BlockStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1195:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1195$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1195:4
            if (!scanToken(CASE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1195:11
            if (!scanToken(NULL)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1195:23
            Token token5 = currentLookaheadToken;
            boolean passedPredicate5 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$1195$24(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token5;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1195:24
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1195$24(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1195:24
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1195:31
            if (!scanToken(_DEFAULT)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1197:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1197$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1197:4
            if (!scanToken(CASE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1197:11
            // NonTerminal CasePattern at /Users/bnaudts/git/congo/examples/java/Java.ccc:1197:11
            pushOntoLookaheadStack("CaseOrDefault", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1197, 11);
            currentLookaheadProduction = "CasePattern";
            try {
                if (!check$CasePattern(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1197:28
            boolean passedPredicate5 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token6 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1197$29(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token6;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1197:51
            Token token8 = currentLookaheadToken;
            boolean passedPredicate8 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$1197$52(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token8;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate8;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1197:29
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1197$29(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1197:29
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1197:37
            // NonTerminal CasePattern at /Users/bnaudts/git/congo/examples/java/Java.ccc:1197:37
            pushOntoLookaheadStack("CaseOrDefault", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1197, 37);
            currentLookaheadProduction = "CasePattern";
            try {
                if (!check$CasePattern(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1197:52
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1197$52(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 0;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (!(checkNextTokenImage("when"))) return false;
            passedPredicate = true;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1197:52
            // NonTerminal WhenClause at /Users/bnaudts/git/congo/examples/java/Java.ccc:1197:52
            pushOntoLookaheadStack("CaseOrDefault", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1197, 52);
            currentLookaheadProduction = "WhenClause";
            try {
                if (!check$WhenClause(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1199:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1199$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1199:4
            if (!scanToken(CASE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1199:11
            // NonTerminal Expression at /Users/bnaudts/git/congo/examples/java/Java.ccc:1199:11
            pushOntoLookaheadStack("CaseOrDefault", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1199, 11);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1199:22
            boolean passedPredicate5 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token6 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1199$23(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token6;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1199:23
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1199$23(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1199:23
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1199:31
            // NonTerminal Expression at /Users/bnaudts/git/congo/examples/java/Java.ccc:1199:31
            pushOntoLookaheadStack("CaseOrDefault", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1199, 31);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1207:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1207$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1207:6
            // NonTerminal Block at /Users/bnaudts/git/congo/examples/java/Java.ccc:1207:6
            pushOntoLookaheadStack("NewCaseStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1207, 6);
            currentLookaheadProduction = "Block";
            try {
                if (!check$Block(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1209:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1209$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1209:6
            // NonTerminal ThrowStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:1209:6
            pushOntoLookaheadStack("NewCaseStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1209, 6);
            currentLookaheadProduction = "ThrowStatement";
            try {
                if (!check$ThrowStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1211:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1211$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 0;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (!backscan$Java_ccc$1211$13()) return false;
            passedPredicate = true;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1212:9
            // NonTerminal Expression at /Users/bnaudts/git/congo/examples/java/Java.ccc:1212:9
            pushOntoLookaheadStack("NewCaseStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1212, 9);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1212:20
            if (!scanToken(SEMICOLON)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1214:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1214$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$1214$12(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1215:6
            // NonTerminal BlockStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:1215:6
            pushOntoLookaheadStack("NewCaseStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1215, 6);
            currentLookaheadProduction = "BlockStatement";
            try {
                if (!check$BlockStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1220:49
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1220$49(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1220:49
            if (!scanToken(ELSE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1220:56
            // NonTerminal Statement at /Users/bnaudts/git/congo/examples/java/Java.ccc:1220:56
            pushOntoLookaheadStack("IfStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1220, 56);
            currentLookaheadProduction = "Statement";
            try {
                if (!check$Statement(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1246:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1246$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1246:4
            // NonTerminal BasicForStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:1246:4
            pushOntoLookaheadStack("ForStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1246, 4);
            currentLookaheadProduction = "BasicForStatement";
            try {
                if (!check$BasicForStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1248:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1248$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1248:4
            // NonTerminal EnhancedForStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:1248:4
            pushOntoLookaheadStack("ForStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1248, 4);
            currentLookaheadProduction = "EnhancedForStatement";
            try {
                if (!check$EnhancedForStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1254:20
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1254$20(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1254:20
            // NonTerminal ForInit at /Users/bnaudts/git/congo/examples/java/Java.ccc:1254:20
            pushOntoLookaheadStack("BasicForStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1254, 20);
            currentLookaheadProduction = "ForInit";
            try {
                if (!check$ForInit(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1254:47
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1254$47(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1254:47
            // NonTerminal Expression at /Users/bnaudts/git/congo/examples/java/Java.ccc:1254:47
            pushOntoLookaheadStack("BasicForStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1254, 47);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1254:72
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1254$72(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1254:72
            // NonTerminal StatementExpressionList at /Users/bnaudts/git/congo/examples/java/Java.ccc:1254:72
            pushOntoLookaheadStack("BasicForStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1254, 72);
            currentLookaheadProduction = "StatementExpressionList";
            try {
                if (!check$StatementExpressionList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1262:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1262$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1034$9(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1262:3
            // NonTerminal LocalVariableDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:1262:3
            pushOntoLookaheadStack("ForInit", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1262, 3);
            currentLookaheadProduction = "LocalVariableDeclaration";
            try {
                if (!check$LocalVariableDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1264:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1264$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1264:3
            // NonTerminal StatementExpressionList at /Users/bnaudts/git/congo/examples/java/Java.ccc:1264:3
            pushOntoLookaheadStack("ForInit", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1264, 3);
            currentLookaheadProduction = "StatementExpressionList";
            try {
                if (!check$StatementExpressionList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1268:25
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1268$25(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1268:25
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1268:33
            // NonTerminal StatementExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:1268:33
            pushOntoLookaheadStack("StatementExpressionList", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1268, 33);
            currentLookaheadProduction = "StatementExpression";
            try {
                if (!check$StatementExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1291:29
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1291$29(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1291:29
            // NonTerminal Expression at /Users/bnaudts/git/congo/examples/java/Java.ccc:1291:29
            pushOntoLookaheadStack("ReturnStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1291, 29);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1299:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1299$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1299:4
            // NonTerminal ResourcesInTryBlock at /Users/bnaudts/git/congo/examples/java/Java.ccc:1299:4
            pushOntoLookaheadStack("TryStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1299, 4);
            currentLookaheadProduction = "ResourcesInTryBlock";
            try {
                if (!check$ResourcesInTryBlock(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1305:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1305$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1305:4
            // NonTerminal CatchBlock at /Users/bnaudts/git/congo/examples/java/Java.ccc:1305:4
            pushOntoLookaheadStack("TryStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1305, 4);
            currentLookaheadProduction = "CatchBlock";
            try {
                if (!check$CatchBlock(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1306:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1306$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1306:4
            // NonTerminal FinallyBlock at /Users/bnaudts/git/congo/examples/java/Java.ccc:1306:4
            pushOntoLookaheadStack("TryStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1306, 4);
            currentLookaheadProduction = "FinallyBlock";
            try {
                if (!check$FinallyBlock(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1312:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1312$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (!(getTokenType(0) == SEMICOLON)) return false;
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$1312$45(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1315:10
            Token token4 = currentLookaheadToken;
            int remainingLookahead4 = remainingLookahead;
            boolean hitFailure4 = hitFailure;
            boolean passedPredicate4 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$1315$10(false)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1317$10(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$1319$10(false)) {
                            currentLookaheadToken = token4;
                            remainingLookahead = remainingLookahead4;
                            hitFailure = hitFailure4;
                            return false;
                        }
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1322:8
            Token token6 = currentLookaheadToken;
            boolean passedPredicate6 = passedPredicate;
            passedPredicate = false;
            try {
                if (!scanToken(SEMICOLON)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token6;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate6;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1315:10
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1315$10(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1034$9(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1315:10
            // NonTerminal LocalVariableDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:1315:10
            pushOntoLookaheadStack("ResourcesInTryBlock", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1315, 10);
            currentLookaheadProduction = "LocalVariableDeclaration";
            try {
                if (!check$LocalVariableDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1317:10
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1317$10(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1317:10
            // NonTerminal Name at /Users/bnaudts/git/congo/examples/java/Java.ccc:1317:10
            pushOntoLookaheadStack("ResourcesInTryBlock", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1317, 10);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1319:10
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1319$10(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1319:10
            // NonTerminal PrimaryExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:1319:10
            pushOntoLookaheadStack("ResourcesInTryBlock", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1319, 10);
            currentLookaheadProduction = "PrimaryExpression";
            try {
                if (!check$PrimaryExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Assertion specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1320:10
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1331:17
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1331$17(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1331:17
            if (!scanToken(BIT_OR)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1331:27
            // NonTerminal ObjectType at /Users/bnaudts/git/congo/examples/java/Java.ccc:1331:27
            pushOntoLookaheadStack("CatchBlock", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1331, 27);
            currentLookaheadProduction = "ObjectType";
            try {
                if (!check$ObjectType(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1355:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1355$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1355:4
            // NonTerminal NormalAnnotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:1355:4
            pushOntoLookaheadStack("Annotation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1355, 4);
            currentLookaheadProduction = "NormalAnnotation";
            try {
                if (!check$NormalAnnotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1357:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1357$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1357:4
            // NonTerminal SingleMemberAnnotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:1357:4
            pushOntoLookaheadStack("Annotation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1357, 4);
            currentLookaheadProduction = "SingleMemberAnnotation";
            try {
                if (!check$SingleMemberAnnotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1359:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1359$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1359:4
            // NonTerminal MarkerAnnotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:1359:4
            pushOntoLookaheadStack("Annotation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1359, 4);
            currentLookaheadProduction = "MarkerAnnotation";
            try {
                if (!check$MarkerAnnotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1363:47
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1363$47(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1363:47
            // NonTerminal MemberValuePairs at /Users/bnaudts/git/congo/examples/java/Java.ccc:1363:47
            pushOntoLookaheadStack("NormalAnnotation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1363, 47);
            currentLookaheadProduction = "MemberValuePairs";
            try {
                if (!check$MemberValuePairs(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1379:22
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1379$22(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1379:22
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1379:30
            // NonTerminal MemberValuePair at /Users/bnaudts/git/congo/examples/java/Java.ccc:1379:30
            pushOntoLookaheadStack("MemberValuePairs", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1379, 30);
            currentLookaheadProduction = "MemberValuePair";
            try {
                if (!check$MemberValuePair(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1385:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1385$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1385:4
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:1385:4
            pushOntoLookaheadStack("MemberValue", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1385, 4);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1387:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1387$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1387:4
            // NonTerminal MemberValueArrayInitializer at /Users/bnaudts/git/congo/examples/java/Java.ccc:1387:4
            pushOntoLookaheadStack("MemberValue", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1387, 4);
            currentLookaheadProduction = "MemberValueArrayInitializer";
            try {
                if (!check$MemberValueArrayInitializer(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1389:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1389$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1389:4
            // NonTerminal TernaryExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:1389:4
            pushOntoLookaheadStack("MemberValue", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1389, 4);
            currentLookaheadProduction = "TernaryExpression";
            try {
                if (!check$TernaryExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1395:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1395$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1395:6
            // NonTerminal MemberValue at /Users/bnaudts/git/congo/examples/java/Java.ccc:1395:6
            pushOntoLookaheadStack("MemberValueArrayInitializer", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1395, 6);
            currentLookaheadProduction = "MemberValue";
            try {
                if (!check$MemberValue(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1395:18
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1395$20(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1395:49
            Token token7 = currentLookaheadToken;
            boolean passedPredicate7 = passedPredicate;
            passedPredicate = false;
            try {
                if (!scanToken(COMMA)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token7;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate7;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1395:20
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1395$20(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1395:20
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1395:34
            // NonTerminal MemberValue at /Users/bnaudts/git/congo/examples/java/Java.ccc:1395:34
            pushOntoLookaheadStack("MemberValueArrayInitializer", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1395, 34);
            currentLookaheadProduction = "MemberValue";
            try {
                if (!check$MemberValue(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1410:14
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1410$14(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1410:14
            // NonTerminal AnnotationTypeMemberDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:1410:14
            pushOntoLookaheadStack("AnnotationTypeBody", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1410, 14);
            currentLookaheadProduction = "AnnotationTypeMemberDeclaration";
            try {
                if (!check$AnnotationTypeMemberDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1416:47
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1416$47(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1416:47
            // NonTerminal DefaultValue at /Users/bnaudts/git/congo/examples/java/Java.ccc:1416:47
            pushOntoLookaheadStack("AnnotationMethodDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1416, 47);
            currentLookaheadProduction = "DefaultValue";
            try {
                if (!check$DefaultValue(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1422:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1422$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1422:3
            // NonTerminal AnnotationTypeDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:1422:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1422, 3);
            currentLookaheadProduction = "AnnotationTypeDeclaration";
            try {
                if (!check$AnnotationTypeDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1424:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1424$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1424:3
            // NonTerminal ClassDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:1424:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1424, 3);
            currentLookaheadProduction = "ClassDeclaration";
            try {
                if (!check$ClassDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1426:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1426$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1426:3
            // NonTerminal InterfaceDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:1426:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1426, 3);
            currentLookaheadProduction = "InterfaceDeclaration";
            try {
                if (!check$InterfaceDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1428:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1428$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1428:3
            // NonTerminal EnumDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:1428:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1428, 3);
            currentLookaheadProduction = "EnumDeclaration";
            try {
                if (!check$EnumDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1430:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1430$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1430:3
            // NonTerminal AnnotationMethodDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:1430:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1430, 3);
            currentLookaheadProduction = "AnnotationMethodDeclaration";
            try {
                if (!check$AnnotationMethodDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1432:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1432$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1432:3
            // NonTerminal FieldDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:1432:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1432, 3);
            currentLookaheadProduction = "FieldDeclaration";
            try {
                if (!check$FieldDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1439:19
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1439$19(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1439:19
            // NonTerminal Block at /Users/bnaudts/git/congo/examples/java/Java.ccc:1439:19
            pushOntoLookaheadStack("LambdaExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1439, 19);
            currentLookaheadProduction = "Block";
            try {
                if (!check$Block(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1439:27
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1439$27(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1439:27
            // NonTerminal Expression at /Users/bnaudts/git/congo/examples/java/Java.ccc:1439:27
            pushOntoLookaheadStack("LambdaExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1439, 27);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1442:29
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1442$29(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 3;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1442:29
            // NonTerminal SimpleLambdaLHS at /Users/bnaudts/git/congo/examples/java/Java.ccc:1442:29
            pushOntoLookaheadStack("LambdaLHS", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1442, 29);
            currentLookaheadProduction = "SimpleLambdaLHS";
            try {
                if (!check$SimpleLambdaLHS(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1442:47
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1442$47(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1442:47
            // NonTerminal LambdaParameters at /Users/bnaudts/git/congo/examples/java/Java.ccc:1442:47
            pushOntoLookaheadStack("LambdaLHS", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1442, 47);
            currentLookaheadProduction = "LambdaParameters";
            try {
                if (!check$LambdaParameters(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1447:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1447$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1447:5
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1447:14
            if (!scanToken(UNDERSCORE, IDENTIFIER)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1451:31
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1451$31(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1451:31
            // NonTerminal LambdaParameter at /Users/bnaudts/git/congo/examples/java/Java.ccc:1451:31
            pushOntoLookaheadStack("LambdaParameters", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1451, 31);
            currentLookaheadProduction = "LambdaParameter";
            try {
                if (!check$LambdaParameter(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1451:47
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1451$49(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1451:49
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1451$49(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1451:49
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1451:57
            // NonTerminal LambdaParameter at /Users/bnaudts/git/congo/examples/java/Java.ccc:1451:57
            pushOntoLookaheadStack("LambdaParameters", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1451, 57);
            currentLookaheadProduction = "LambdaParameter";
            try {
                if (!check$LambdaParameter(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1457:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1457$7(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1457:7
            // NonTerminal Type at /Users/bnaudts/git/congo/examples/java/Java.ccc:1457:7
            pushOntoLookaheadStack("LambdaParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1457, 7);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1457:12
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1457$13(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1457:26
            if (!scanToken(VAR_ARGS)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1457:42
            if (!scanToken(IDENTIFIER)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1457:13
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1457$13(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1457:13
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:1457:13
            pushOntoLookaheadStack("LambdaParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1457, 13);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1459:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1459$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1460:9
            Token token4 = currentLookaheadToken;
            int remainingLookahead4 = remainingLookahead;
            boolean hitFailure4 = hitFailure;
            boolean passedPredicate4 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$1460$9(false)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1470$9(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1473:9
            Token token7 = currentLookaheadToken;
            int remainingLookahead7 = remainingLookahead;
            boolean hitFailure7 = hitFailure;
            boolean passedPredicate7 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$1473$9(false)) {
                    currentLookaheadToken = token7;
                    remainingLookahead = remainingLookahead7;
                    hitFailure = hitFailure7;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!scanToken(UNDERSCORE)) {
                        currentLookaheadToken = token7;
                        remainingLookahead = remainingLookahead7;
                        hitFailure = hitFailure7;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate7;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1460:9
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1460$9(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (!(checkNextTokenImage("var"))) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1462:11
            if (!scanToken(VAR, IDENTIFIER)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1470:9
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1470$9(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1470:9
            // NonTerminal Type at /Users/bnaudts/git/congo/examples/java/Java.ccc:1470:9
            pushOntoLookaheadStack("LambdaParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1470, 9);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1473:9
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1473$9(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1473:9
            if (!scanToken(IDENTIFIER)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1473:21
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1473$22(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1473:22
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1473$22(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1473:22
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1473$23(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1473:36
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1473:46
            if (!scanToken(RBRACKET)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1473:23
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1473$23(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1473:23
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:1473:23
            pushOntoLookaheadStack("LambdaParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1473, 23);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for assertion at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1011:2
    // BuildAssertionRoutine macro
    private boolean assert$Java_ccc$1011$11() {
        final boolean scanToEnd = true;
        int remainingLookahead4 = remainingLookahead;
        remainingLookahead = UNLIMITED;
        Token currentLookahead3 = currentLookaheadToken;
        boolean prevHitFailure = hitFailure;
        if (currentLookaheadToken == null) {
            currentLookaheadToken = lastConsumedToken;
        }
        try {
            lookaheadRoutineNesting++;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1011:11
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1011$12(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1011:34
            if (!scanToken(PRIVATE, PROTECTED, PUBLIC, STATIC)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = currentLookahead3;
            remainingLookahead = remainingLookahead4;
            hitFailure = prevHitFailure;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:32:4
    private boolean scan$Java_ccc$32$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:32:4
            // NonTerminal ModularCompilationUnit at /Users/bnaudts/git/congo/examples/java/Java.ccc:32:4
            pushOntoLookaheadStack("Root", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 32, 4);
            currentLookaheadProduction = "ModularCompilationUnit";
            try {
                if (!check$ModularCompilationUnit(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:32:27
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:34:4
    private boolean scan$Java_ccc$34$4() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:34:4
            // NonTerminal CompilationUnit at /Users/bnaudts/git/congo/examples/java/Java.ccc:34:4
            pushOntoLookaheadStack("Root", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 34, 4);
            currentLookaheadProduction = "CompilationUnit";
            try {
                if (!check$CompilationUnit(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:34:20
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:39:5
    private boolean scan$Java_ccc$39$5() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:39:5
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:39:5
            pushOntoLookaheadStack("ModularCompilationUnit", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 39, 5);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:43:7
    private boolean scan$Java_ccc$43$7() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            EnumSet<TokenType> previousActives3 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged4 = false;
            somethingChanged4 = activateTokenTypes(OPEN);
            try {
                if (!scanToken(OPEN)) return false;
            } finally {
                token_source.activeTokenTypes = previousActives3;
                if (somethingChanged4) {
                    token_source.reset(currentLookaheadToken);
                    nextTokenType = null;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:48:5
    private boolean scan$Java_ccc$48$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$48$11(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:54:4
    private boolean scan$Java_ccc$54$4() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:54:4
            // NonTerminal RequiresDirective at /Users/bnaudts/git/congo/examples/java/Java.ccc:54:4
            pushOntoLookaheadStack("ModuleDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 54, 4);
            currentLookaheadProduction = "RequiresDirective";
            try {
                if (!check$RequiresDirective(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:56:4
    private boolean scan$Java_ccc$56$4() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:56:4
            // NonTerminal ExportsDirective at /Users/bnaudts/git/congo/examples/java/Java.ccc:56:4
            pushOntoLookaheadStack("ModuleDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 56, 4);
            currentLookaheadProduction = "ExportsDirective";
            try {
                if (!check$ExportsDirective(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:58:4
    private boolean scan$Java_ccc$58$4() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:58:4
            // NonTerminal OpensDirective at /Users/bnaudts/git/congo/examples/java/Java.ccc:58:4
            pushOntoLookaheadStack("ModuleDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 58, 4);
            currentLookaheadProduction = "OpensDirective";
            try {
                if (!check$OpensDirective(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:60:4
    private boolean scan$Java_ccc$60$4() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:60:4
            // NonTerminal UsesDirective at /Users/bnaudts/git/congo/examples/java/Java.ccc:60:4
            pushOntoLookaheadStack("ModuleDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 60, 4);
            currentLookaheadProduction = "UsesDirective";
            try {
                if (!check$UsesDirective(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:62:4
    private boolean scan$Java_ccc$62$4() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:62:4
            // NonTerminal ProvidesDirective at /Users/bnaudts/git/congo/examples/java/Java.ccc:62:4
            pushOntoLookaheadStack("ModuleDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 62, 4);
            currentLookaheadProduction = "ProvidesDirective";
            try {
                if (!check$ProvidesDirective(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:75:6
    private boolean scan$Java_ccc$75$6() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            EnumSet<TokenType> previousActives3 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged4 = false;
            somethingChanged4 = activateTokenTypes(TO);
            try {
                if (!scanToken(TO)) return false;
            } finally {
                token_source.activeTokenTypes = previousActives3;
                if (somethingChanged4) {
                    token_source.reset(currentLookaheadToken);
                    nextTokenType = null;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:76:6
            // NonTerminal Name at /Users/bnaudts/git/congo/examples/java/Java.ccc:76:6
            pushOntoLookaheadStack("ExportsDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 76, 6);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:76:11
            boolean passedPredicate8 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token9 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$76$12(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token9;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate8;
            }
            hitFailure = false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:85:6
    private boolean scan$Java_ccc$85$6() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            EnumSet<TokenType> previousActives3 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged4 = false;
            somethingChanged4 = activateTokenTypes(TO);
            try {
                if (!scanToken(TO)) return false;
            } finally {
                token_source.activeTokenTypes = previousActives3;
                if (somethingChanged4) {
                    token_source.reset(currentLookaheadToken);
                    nextTokenType = null;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:86:6
            // NonTerminal Name at /Users/bnaudts/git/congo/examples/java/Java.ccc:86:6
            pushOntoLookaheadStack("OpensDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 86, 6);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:86:11
            boolean passedPredicate8 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token9 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$86$12(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token9;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate8;
            }
            hitFailure = false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:107:5
    private boolean scan$Java_ccc$107$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:107:5
            // NonTerminal PackageDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:107:5
            pushOntoLookaheadStack("CompilationUnit", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 107, 5);
            currentLookaheadProduction = "PackageDeclaration";
            try {
                if (!check$PackageDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:109:5
    private boolean scan$Java_ccc$109$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$207$8(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:112:5
    private boolean scan$Java_ccc$112$5() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (!scanToken(EOF)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:128:6
    private boolean scan$Java_ccc$128$6() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:128:6
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:128:6
            pushOntoLookaheadStack("PackageDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 128, 6);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:146:3
    private boolean scan$Java_ccc$146$3() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (!(isParserTolerant() || permissibleModifiers == null || permissibleModifiers.contains(getTokenType(1)))) return false;
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:150:4
            if (!scanToken(first_set$Java_ccc$150$4)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:153:3
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:175:3
    private boolean scan$Java_ccc$175$3() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (!(permissibleModifiers == null || permissibleModifiers.contains(SEALED) && (checkNextTokenImage("sealed", "non-sealed") || checkNextTokenImage("non") && "-".equals(tokenImage(2)) && "sealed".equals(tokenImage(3)) && getToken(3).getBeginOffset() == getToken(1).getEndOffset() + 1))) return false;
            // End BuildPredicateCode macro
            EnumSet<TokenType> previousActives3 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged4 = false;
            somethingChanged4 = activateTokenTypes(SEALED, NON_SEALED);
            try {
                if (hitFailure) return false;
                if (remainingLookahead <= 0) {
                    return true;
                }
                // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:189:39
                if (!scanToken(SEALED, NON_SEALED)) return false;
            } finally {
                token_source.activeTokenTypes = previousActives3;
                if (somethingChanged4) {
                    token_source.reset(currentLookaheadToken);
                    nextTokenType = null;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:190:3
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:197:3
    private boolean scan$Java_ccc$197$3() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:197:3
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:197:3
            pushOntoLookaheadStack("Modifiers", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 197, 3);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:211:5
    private boolean scan$Java_ccc$211$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:211:5
            // NonTerminal AnnotationTypeDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:211:5
            pushOntoLookaheadStack("TypeDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 211, 5);
            currentLookaheadProduction = "AnnotationTypeDeclaration";
            try {
                if (!check$AnnotationTypeDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:213:5
    private boolean scan$Java_ccc$213$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:213:5
            // NonTerminal ClassDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:213:5
            pushOntoLookaheadStack("TypeDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 213, 5);
            currentLookaheadProduction = "ClassDeclaration";
            try {
                if (!check$ClassDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:215:5
    private boolean scan$Java_ccc$215$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:215:5
            // NonTerminal InterfaceDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:215:5
            pushOntoLookaheadStack("TypeDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 215, 5);
            currentLookaheadProduction = "InterfaceDeclaration";
            try {
                if (!check$InterfaceDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:217:5
    private boolean scan$Java_ccc$217$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:217:5
            // NonTerminal EnumDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:217:5
            pushOntoLookaheadStack("TypeDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 217, 5);
            currentLookaheadProduction = "EnumDeclaration";
            try {
                if (!check$EnumDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:219:5
    private boolean scan$Java_ccc$219$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:219:5
            // NonTerminal RecordDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:219:5
            pushOntoLookaheadStack("TypeDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 219, 5);
            currentLookaheadProduction = "RecordDeclaration";
            try {
                if (!check$RecordDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:271:5
    private boolean scan$Java_ccc$271$5() {
        remainingLookahead = 0;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (!(checkNextTokenImage("permits"))) return false;
            passedPredicate = true;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:285:5
    private boolean scan$Java_ccc$285$5() {
        remainingLookahead = 0;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (!(checkNextTokenImage("permits"))) return false;
            passedPredicate = true;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:307:6
    private boolean scan$Java_ccc$307$6() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (!backscan$Java_ccc$307$13()) return false;
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:308:6
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:308:14
            // NonTerminal ObjectType at /Users/bnaudts/git/congo/examples/java/Java.ccc:308:14
            pushOntoLookaheadStack("ExtendsList", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 308, 14);
            currentLookaheadProduction = "ObjectType";
            try {
                if (!check$ObjectType(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:341:21
    private boolean scan$Java_ccc$341$21() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:341:28
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:341:37
            // NonTerminal EnumConstant at /Users/bnaudts/git/congo/examples/java/Java.ccc:341:37
            pushOntoLookaheadStack("EnumBody", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 341, 37);
            currentLookaheadProduction = "EnumConstant";
            try {
                if (!check$EnumConstant(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:380:5
    private boolean scan$Java_ccc$380$5() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:380:5
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:380:5
            pushOntoLookaheadStack("RecordComponent", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 380, 5);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:380:25
    private boolean scan$Java_ccc$380$25() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:380:25
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:380:25
            pushOntoLookaheadStack("RecordComponent", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 380, 25);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:386:4
    private boolean scan$Java_ccc$386$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:386:4
            // NonTerminal CompactConstructorDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:386:4
            pushOntoLookaheadStack("RecordBody", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 386, 4);
            currentLookaheadProduction = "CompactConstructorDeclaration";
            try {
                if (!check$CompactConstructorDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:399:5
    private boolean scan$Java_ccc$399$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:399:5
            // NonTerminal ExplicitConstructorInvocation at /Users/bnaudts/git/congo/examples/java/Java.ccc:399:5
            pushOntoLookaheadStack("CompactConstructorDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 399, 5);
            currentLookaheadProduction = "ExplicitConstructorInvocation";
            try {
                if (!check$ExplicitConstructorInvocation(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:400:5
    private boolean scan$Java_ccc$400$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$400$11(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:407:4
    private boolean scan$Java_ccc$407$4() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:407:4
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:407:4
            pushOntoLookaheadStack("EnumConstant", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 407, 4);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:424:17
    private boolean scan$Java_ccc$424$17() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:424:17
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:424:17
            pushOntoLookaheadStack("TypeParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 424, 17);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:430:34
    private boolean scan$Java_ccc$430$34() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$430$40(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:433:3
    private boolean scan$Java_ccc$433$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:433:3
            // NonTerminal Initializer at /Users/bnaudts/git/congo/examples/java/Java.ccc:433:3
            pushOntoLookaheadStack("ClassOrInterfaceBodyDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 433, 3);
            currentLookaheadProduction = "Initializer";
            try {
                if (!check$Initializer(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:435:3
    private boolean scan$Java_ccc$435$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$207$8(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:437:3
    private boolean scan$Java_ccc$437$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:437:3
            // NonTerminal ConstructorDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:437:3
            pushOntoLookaheadStack("ClassOrInterfaceBodyDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 437, 3);
            currentLookaheadProduction = "ConstructorDeclaration";
            try {
                if (!check$ConstructorDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:439:3
    private boolean scan$Java_ccc$439$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:439:3
            // NonTerminal MethodDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:439:3
            pushOntoLookaheadStack("ClassOrInterfaceBodyDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 439, 3);
            currentLookaheadProduction = "MethodDeclaration";
            try {
                if (!check$MethodDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:441:3
    private boolean scan$Java_ccc$441$3() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:441:3
            // NonTerminal FieldDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:441:3
            pushOntoLookaheadStack("ClassOrInterfaceBodyDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 441, 3);
            currentLookaheadProduction = "FieldDeclaration";
            try {
                if (!check$FieldDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:462:8
    private boolean scan$Java_ccc$462$8() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:462:8
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:462:8
            pushOntoLookaheadStack("VariableDeclaratorId", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 462, 8);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:464:5
    private boolean scan$Java_ccc$464$5() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (backscan$Java_ccc$464$10()) return false;
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:465:5
            if (!scanToken(UNDERSCORE)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:471:37
    private boolean scan$Java_ccc$471$37() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:471:44
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:471:52
            // NonTerminal VariableInitializer at /Users/bnaudts/git/congo/examples/java/Java.ccc:471:52
            pushOntoLookaheadStack("ArrayInitializer", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 471, 52);
            currentLookaheadProduction = "VariableInitializer";
            try {
                if (!check$VariableInitializer(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:476:5
    private boolean scan$Java_ccc$476$5() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (!backscan$Java_ccc$476$10()) return false;
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:478:5
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:484:5
    private boolean scan$Java_ccc$484$5() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (backscan$Java_ccc$484$10()) return false;
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:488:5
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:504:29
    private boolean scan$Java_ccc$504$29() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:504:29
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:504:29
            pushOntoLookaheadStack("MethodDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 504, 29);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:510:31
    private boolean scan$Java_ccc$510$31() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:510:31
            // NonTerminal FormalParameter at /Users/bnaudts/git/congo/examples/java/Java.ccc:510:31
            pushOntoLookaheadStack("FormalParameters", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 510, 31);
            currentLookaheadProduction = "FormalParameter";
            try {
                if (!check$FormalParameter(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:510:47
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$510$49(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:512:82
    private boolean scan$Java_ccc$512$82() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:512:82
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:512:82
            pushOntoLookaheadStack("FormalParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 512, 82);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:522:5
    private boolean scan$Java_ccc$522$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:522:5
            // NonTerminal ExplicitConstructorInvocation at /Users/bnaudts/git/congo/examples/java/Java.ccc:522:5
            pushOntoLookaheadStack("ConstructorDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 522, 5);
            currentLookaheadProduction = "ExplicitConstructorInvocation";
            try {
                if (!check$ExplicitConstructorInvocation(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:523:5
    private boolean scan$Java_ccc$523$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$523$11(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:528:3
    private boolean scan$Java_ccc$528$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:528:3
            Token token3 = currentLookaheadToken;
            boolean passedPredicate3 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$528$4(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token3;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:528:20
            if (!scanToken(SUPER, THIS)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:528:44
            // NonTerminal InvocationArguments at /Users/bnaudts/git/congo/examples/java/Java.ccc:528:44
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 528, 44);
            currentLookaheadProduction = "InvocationArguments";
            try {
                if (!check$InvocationArguments(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:528:64
            if (!scanToken(SEMICOLON)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:528:4
    private boolean scan$Java_ccc$528$4() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:528:4
            // NonTerminal TypeArguments at /Users/bnaudts/git/congo/examples/java/Java.ccc:528:4
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 528, 4);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:3
    private boolean scan$Java_ccc$532$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:4
            Token token4 = currentLookaheadToken;
            int remainingLookahead4 = remainingLookahead;
            boolean hitFailure4 = hitFailure;
            boolean passedPredicate4 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$532$4(false)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$532$30(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:533:3
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:533:9
            Token token7 = currentLookaheadToken;
            boolean passedPredicate7 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$533$10(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token7;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate7;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:533:25
            if (!scanToken(SUPER)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:533:39
            // NonTerminal InvocationArguments at /Users/bnaudts/git/congo/examples/java/Java.ccc:533:39
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 533, 39);
            currentLookaheadProduction = "InvocationArguments";
            try {
                if (!check$InvocationArguments(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:533:59
            if (!scanToken(SEMICOLON)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:10
    private boolean scan$Java_ccc$532$10() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:10
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:15
            if (!scanToken(THIS)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:43
    private boolean scan$Java_ccc$532$43() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:43
            if (!scanToken(DOT)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:55
            // NonTerminal Name at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:55
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 532, 55);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:61
    private boolean scan$Java_ccc$532$61() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:61
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:532:66
            if (!scanToken(THIS)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:533:10
    private boolean scan$Java_ccc$533$10() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:533:10
            // NonTerminal TypeArguments at /Users/bnaudts/git/congo/examples/java/Java.ccc:533:10
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 533, 10);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:541:4
    private boolean scan$Java_ccc$541$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:541:4
            // NonTerminal ReferenceType at /Users/bnaudts/git/congo/examples/java/Java.ccc:541:4
            pushOntoLookaheadStack("Type", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 541, 4);
            currentLookaheadProduction = "ReferenceType";
            try {
                if (!check$ReferenceType(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:551:4
    private boolean scan$Java_ccc$551$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:551:4
            // NonTerminal PrimitiveArrayType at /Users/bnaudts/git/congo/examples/java/Java.ccc:551:4
            pushOntoLookaheadStack("ReferenceType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 551, 4);
            currentLookaheadProduction = "PrimitiveArrayType";
            try {
                if (!check$PrimitiveArrayType(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:553:16
    private boolean scan$Java_ccc$553$16() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:553:16
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$553$17(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:553:30
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:553:40
            if (!scanToken(RBRACKET)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:553:17
    private boolean scan$Java_ccc$553$17() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:553:17
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:553:17
            pushOntoLookaheadStack("ReferenceType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 553, 17);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:557:6
    private boolean scan$Java_ccc$557$6() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:557:6
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:557:6
            pushOntoLookaheadStack("ObjectType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 557, 6);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:558:22
    private boolean scan$Java_ccc$558$22() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:558:22
            // NonTerminal TypeArguments at /Users/bnaudts/git/congo/examples/java/Java.ccc:558:22
            pushOntoLookaheadStack("ObjectType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 558, 22);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:559:7
    private boolean scan$Java_ccc$559$7() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:559:7
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:559:13
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$559$14(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:559:27
            if (!scanToken(IDENTIFIER)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:559:45
            Token token8 = currentLookaheadToken;
            boolean passedPredicate8 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$559$47(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token8;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate8;
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:559:14
    private boolean scan$Java_ccc$559$14() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:559:14
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:559:14
            pushOntoLookaheadStack("ObjectType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 559, 14);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:559:47
    private boolean scan$Java_ccc$559$47() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:559:47
            // NonTerminal TypeArguments at /Users/bnaudts/git/congo/examples/java/Java.ccc:559:47
            pushOntoLookaheadStack("ObjectType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 559, 47);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:575:4
    private boolean scan$Java_ccc$575$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:575:4
            // NonTerminal DiamondOperator at /Users/bnaudts/git/congo/examples/java/Java.ccc:575:4
            pushOntoLookaheadStack("PossiblyEmptyTypeArguments", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 575, 4);
            currentLookaheadProduction = "DiamondOperator";
            try {
                if (!check$DiamondOperator(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:577:4
    private boolean scan$Java_ccc$577$4() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:577:4
            // NonTerminal TypeArguments at /Users/bnaudts/git/congo/examples/java/Java.ccc:577:4
            pushOntoLookaheadStack("PossiblyEmptyTypeArguments", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 577, 4);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:587:3
    private boolean scan$Java_ccc$587$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:587:3
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$587$4(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:587:17
            if (!scanToken(HOOK)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:587:29
            Token token7 = currentLookaheadToken;
            boolean passedPredicate7 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$587$31(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token7;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate7;
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:587:4
    private boolean scan$Java_ccc$587$4() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:587:4
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:587:4
            pushOntoLookaheadStack("TypeArgument", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 587, 4);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:595:4
    private boolean scan$Java_ccc$595$4() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:595:4
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:595:4
            pushOntoLookaheadStack("PrimitiveType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 595, 4);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:596:70
    private boolean scan$Java_ccc$596$70() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:596:70
            if (!scanToken(DOUBLE)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:600:37
    private boolean scan$Java_ccc$600$37() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:600:37
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$600$38(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:600:51
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:600:61
            if (!scanToken(RBRACKET)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:600:38
    private boolean scan$Java_ccc$600$38() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:600:38
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:600:38
            pushOntoLookaheadStack("PrimitiveArrayType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 600, 38);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:604:23
    private boolean scan$Java_ccc$604$23() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:604:23
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:604:29
            if (!scanToken(IDENTIFIER)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:609:6
    private boolean scan$Java_ccc$609$6() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:609:6
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:609:6
            pushOntoLookaheadStack("ExceptionType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 609, 6);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:612:8
    private boolean scan$Java_ccc$612$8() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:612:8
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:612:14
            if (!scanToken(IDENTIFIER)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:615:7
    private boolean scan$Java_ccc$615$7() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:615:7
            if (!scanToken(DOT)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for OneOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:616:7
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:616:8
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:616:8
            pushOntoLookaheadStack("ExceptionType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 616, 8);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            boolean passedPredicate6 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token7 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$616$8(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token7;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate6;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:617:7
            if (!scanToken(IDENTIFIER)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:616:8
    private boolean scan$Java_ccc$616$8() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:616:8
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:616:8
            pushOntoLookaheadStack("ExceptionType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 616, 8);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:619:6
    private boolean scan$Java_ccc$619$6() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:619:6
            // NonTerminal TypeArguments at /Users/bnaudts/git/congo/examples/java/Java.ccc:619:6
            pushOntoLookaheadStack("ExceptionType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 619, 6);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:686:5
    private boolean scan$Java_ccc$686$5() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:687:8
            if (!scanToken(first_set$Java_ccc$687$8)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:687:27
            // NonTerminal Expression at /Users/bnaudts/git/congo/examples/java/Java.ccc:687:27
            pushOntoLookaheadStack("AssignmentExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 687, 27);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:728:7
    private boolean scan$Java_ccc$728$7() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1034$9(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:730:7
    private boolean scan$Java_ccc$730$7() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:730:7
            // NonTerminal RecordPattern at /Users/bnaudts/git/congo/examples/java/Java.ccc:730:7
            pushOntoLookaheadStack("InstanceOfExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 730, 7);
            currentLookaheadProduction = "RecordPattern";
            try {
                if (!check$RecordPattern(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:752:6
    private boolean scan$Java_ccc$752$6() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$752$11(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:793:3
    private boolean scan$Java_ccc$793$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (backscan$Java_ccc$1438$8()) return false;
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:793:3
            // NonTerminal LambdaExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:793:3
            pushOntoLookaheadStack("UnaryExpressionNotPlusMinus", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 793, 3);
            currentLookaheadProduction = "LambdaExpression";
            try {
                if (!check$LambdaExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:797:3
    private boolean scan$Java_ccc$797$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:797:3
            // NonTerminal PrimitiveCastExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:797:3
            pushOntoLookaheadStack("UnaryExpressionNotPlusMinus", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 797, 3);
            currentLookaheadProduction = "PrimitiveCastExpression";
            try {
                if (!check$PrimitiveCastExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:799:3
    private boolean scan$Java_ccc$799$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:799:3
            // NonTerminal ObjectCastExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:799:3
            pushOntoLookaheadStack("UnaryExpressionNotPlusMinus", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 799, 3);
            currentLookaheadProduction = "ObjectCastExpression";
            try {
                if (!check$ObjectCastExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:807:5
    private boolean scan$Java_ccc$807$5() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:809:5
            if (!scanToken(INCR)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:837:3
    private boolean scan$Java_ccc$837$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:837:3
            // NonTerminal ClassLiteral at /Users/bnaudts/git/congo/examples/java/Java.ccc:837:3
            pushOntoLookaheadStack("PrimaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 837, 3);
            currentLookaheadProduction = "ClassLiteral";
            try {
                if (!check$ClassLiteral(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:839:3
    private boolean scan$Java_ccc$839$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:839:3
            // NonTerminal MethodReference at /Users/bnaudts/git/congo/examples/java/Java.ccc:839:3
            pushOntoLookaheadStack("PrimaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 839, 3);
            currentLookaheadProduction = "MethodReference";
            try {
                if (!check$MethodReference(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:844:3
    private boolean scan$Java_ccc$844$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:844:4
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:844:10
            if (!scanToken(THIS)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:846:3
    private boolean scan$Java_ccc$846$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:846:4
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:846:10
            if (!scanToken(SUPER)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:848:3
    private boolean scan$Java_ccc$848$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:848:4
            if (!scanToken(DOT)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:848:16
            // NonTerminal AllocationExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:848:16
            pushOntoLookaheadStack("PrimaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 848, 16);
            currentLookaheadProduction = "AllocationExpression";
            try {
                if (!check$AllocationExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:852:11
    private boolean scan$Java_ccc$852$11() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:852:11
            // NonTerminal TypeArguments at /Users/bnaudts/git/congo/examples/java/Java.ccc:852:11
            pushOntoLookaheadStack("PrimaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 852, 11);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:854:20
    private boolean scan$Java_ccc$854$20() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:854:20
            // NonTerminal TypeArguments at /Users/bnaudts/git/congo/examples/java/Java.ccc:854:20
            pushOntoLookaheadStack("PrimaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 854, 20);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:862:3
    private boolean scan$Java_ccc$862$3() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (!(getTokenType(0) == IDENTIFIER)) return false;
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:864:3
            // NonTerminal InvocationArguments at /Users/bnaudts/git/congo/examples/java/Java.ccc:864:3
            pushOntoLookaheadStack("PrimaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 864, 3);
            currentLookaheadProduction = "InvocationArguments";
            try {
                if (!check$InvocationArguments(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:887:7
    private boolean scan$Java_ccc$887$7() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:887:7
            // NonTerminal TypeArguments at /Users/bnaudts/git/congo/examples/java/Java.ccc:887:7
            pushOntoLookaheadStack("MethodReference", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 887, 7);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:918:3
    private boolean scan$Java_ccc$918$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:918:3
            if (!scanToken(NEW)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:918:9
            // NonTerminal PrimitiveType at /Users/bnaudts/git/congo/examples/java/Java.ccc:918:9
            pushOntoLookaheadStack("AllocationExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 918, 9);
            currentLookaheadProduction = "PrimitiveType";
            try {
                if (!check$PrimitiveType(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:918:28
            // NonTerminal ArrayDimsAndInits at /Users/bnaudts/git/congo/examples/java/Java.ccc:918:28
            pushOntoLookaheadStack("AllocationExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 918, 28);
            currentLookaheadProduction = "ArrayDimsAndInits";
            try {
                if (!check$ArrayDimsAndInits(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:920:10
    private boolean scan$Java_ccc$920$10() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:920:10
            // NonTerminal TypeArguments at /Users/bnaudts/git/congo/examples/java/Java.ccc:920:10
            pushOntoLookaheadStack("AllocationExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 920, 10);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:929:3
    private boolean scan$Java_ccc$929$3() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for OneOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:930:3
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:931:5
            if (!scanToken(LBRACKET)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:931:22
            // NonTerminal Expression at /Users/bnaudts/git/congo/examples/java/Java.ccc:931:22
            pushOntoLookaheadStack("ArrayDimsAndInits", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 931, 22);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:931:33
            if (!scanToken(RBRACKET)) return false;
            boolean passedPredicate7 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token8 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$931$5(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token8;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate7;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:933:3
            boolean passedPredicate10 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token11 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$934$5(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token11;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate10;
            }
            hitFailure = false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:931:5
    private boolean scan$Java_ccc$931$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:931:5
            if (!scanToken(LBRACKET)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:931:22
            // NonTerminal Expression at /Users/bnaudts/git/congo/examples/java/Java.ccc:931:22
            pushOntoLookaheadStack("ArrayDimsAndInits", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 931, 22);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:931:33
            if (!scanToken(RBRACKET)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:934:5
    private boolean scan$Java_ccc$934$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:934:5
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$934$6(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:934:19
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:934:29
            if (!scanToken(RBRACKET)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:934:6
    private boolean scan$Java_ccc$934$6() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:934:6
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:934:6
            pushOntoLookaheadStack("ArrayDimsAndInits", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 934, 6);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:938:6
    private boolean scan$Java_ccc$938$6() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:938:6
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:938:6
            pushOntoLookaheadStack("ArrayDimsAndInits", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 938, 6);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:948:3
    private boolean scan$Java_ccc$948$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:948:3
            // NonTerminal LabeledStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:948:3
            pushOntoLookaheadStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 948, 3);
            currentLookaheadProduction = "LabeledStatement";
            try {
                if (!check$LabeledStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:954:3
    private boolean scan$Java_ccc$954$3() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (!backscan$Java_ccc$1276$42()) return false;
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:954:3
            // NonTerminal YieldStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:954:3
            pushOntoLookaheadStack("Statement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 954, 3);
            currentLookaheadProduction = "YieldStatement";
            try {
                if (!check$YieldStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1008:30
    private boolean scan$Java_ccc$1008$30() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$1008$36(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1016:3
    private boolean scan$Java_ccc$1016$3() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (!backscan$Java_ccc$1276$42()) return false;
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1016:3
            // NonTerminal YieldStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:1016:3
            pushOntoLookaheadStack("BlockStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1016, 3);
            currentLookaheadProduction = "YieldStatement";
            try {
                if (!check$YieldStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1018:3
    private boolean scan$Java_ccc$1018$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1018:3
            // NonTerminal RecordDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:1018:3
            pushOntoLookaheadStack("BlockStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1018, 3);
            currentLookaheadProduction = "RecordDeclaration";
            try {
                if (!check$RecordDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1020:3
    private boolean scan$Java_ccc$1020$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1034$9(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1023:3
    private boolean scan$Java_ccc$1023$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1023:3
            // NonTerminal ClassDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:1023:3
            pushOntoLookaheadStack("BlockStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1023, 3);
            currentLookaheadProduction = "ClassDeclaration";
            try {
                if (!check$ClassDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1025:3
    private boolean scan$Java_ccc$1025$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1025:3
            // NonTerminal InterfaceDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:1025:3
            pushOntoLookaheadStack("BlockStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1025, 3);
            currentLookaheadProduction = "InterfaceDeclaration";
            try {
                if (!check$InterfaceDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1027:3
    private boolean scan$Java_ccc$1027$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1027:3
            // NonTerminal EnumDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:1027:3
            pushOntoLookaheadStack("BlockStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1027, 3);
            currentLookaheadProduction = "EnumDeclaration";
            try {
                if (!check$EnumDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1037:6
    private boolean scan$Java_ccc$1037$6() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1037:6
            // NonTerminal NoVarDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:1037:6
            pushOntoLookaheadStack("LocalVariableDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1037, 6);
            currentLookaheadProduction = "NoVarDeclaration";
            try {
                if (!check$NoVarDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1039:6
    private boolean scan$Java_ccc$1039$6() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1039:6
            // NonTerminal VarDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:1039:6
            pushOntoLookaheadStack("LocalVariableDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1039, 6);
            currentLookaheadProduction = "VarDeclaration";
            try {
                if (!check$VarDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1090:7
    private boolean scan$Java_ccc$1090$7() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1092:11
            Token token4 = currentLookaheadToken;
            int remainingLookahead4 = remainingLookahead;
            boolean hitFailure4 = hitFailure;
            boolean passedPredicate4 = passedPredicate;
            try {
                passedPredicate = false;
                if (!scanToken(INCR, DECR)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1094$11(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1107:5
    private boolean scan$Java_ccc$1107$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1107:5
            // NonTerminal RecordPattern at /Users/bnaudts/git/congo/examples/java/Java.ccc:1107:5
            pushOntoLookaheadStack("CasePattern", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1107, 5);
            currentLookaheadProduction = "RecordPattern";
            try {
                if (!check$RecordPattern(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1109:5
    private boolean scan$Java_ccc$1109$5() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1109:5
            // NonTerminal TypePattern at /Users/bnaudts/git/congo/examples/java/Java.ccc:1109:5
            pushOntoLookaheadStack("CasePattern", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1109, 5);
            currentLookaheadProduction = "TypePattern";
            try {
                if (!check$TypePattern(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1116:7
    private boolean scan$Java_ccc$1116$7() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$1116$13(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1154:5
    private boolean scan$Java_ccc$1154$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1154$10(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1157:5
    private boolean scan$Java_ccc$1157$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1157$10(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1180:4
    private boolean scan$Java_ccc$1180$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$1180$10(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1195:4
    private boolean scan$Java_ccc$1195$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1195:4
            if (!scanToken(CASE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1195:11
            if (!scanToken(NULL)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1195:23
            Token token5 = currentLookaheadToken;
            boolean passedPredicate5 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$1195$24(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token5;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1197:4
    private boolean scan$Java_ccc$1197$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1197:4
            if (!scanToken(CASE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1197:11
            // NonTerminal CasePattern at /Users/bnaudts/git/congo/examples/java/Java.ccc:1197:11
            pushOntoLookaheadStack("CaseOrDefault", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1197, 11);
            currentLookaheadProduction = "CasePattern";
            try {
                if (!check$CasePattern(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1197:28
            boolean passedPredicate5 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token6 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1197$29(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token6;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1197:51
            Token token8 = currentLookaheadToken;
            boolean passedPredicate8 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$1197$52(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token8;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate8;
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1197:52
    private boolean scan$Java_ccc$1197$52() {
        remainingLookahead = 0;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (!(checkNextTokenImage("when"))) return false;
            passedPredicate = true;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1211:6
    private boolean scan$Java_ccc$1211$6() {
        remainingLookahead = 0;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (!backscan$Java_ccc$1211$13()) return false;
            passedPredicate = true;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1214:6
    private boolean scan$Java_ccc$1214$6() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$1214$12(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1246:4
    private boolean scan$Java_ccc$1246$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1246:4
            // NonTerminal BasicForStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:1246:4
            pushOntoLookaheadStack("ForStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1246, 4);
            currentLookaheadProduction = "BasicForStatement";
            try {
                if (!check$BasicForStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1248:4
    private boolean scan$Java_ccc$1248$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1248:4
            // NonTerminal EnhancedForStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:1248:4
            pushOntoLookaheadStack("ForStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1248, 4);
            currentLookaheadProduction = "EnhancedForStatement";
            try {
                if (!check$EnhancedForStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1262:3
    private boolean scan$Java_ccc$1262$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1034$9(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1312:7
    private boolean scan$Java_ccc$1312$7() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (!(getTokenType(0) == SEMICOLON)) return false;
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$1312$45(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1315:10
    private boolean scan$Java_ccc$1315$10() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1034$9(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1355:4
    private boolean scan$Java_ccc$1355$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1355:4
            // NonTerminal NormalAnnotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:1355:4
            pushOntoLookaheadStack("Annotation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1355, 4);
            currentLookaheadProduction = "NormalAnnotation";
            try {
                if (!check$NormalAnnotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1357:4
    private boolean scan$Java_ccc$1357$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1357:4
            // NonTerminal SingleMemberAnnotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:1357:4
            pushOntoLookaheadStack("Annotation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1357, 4);
            currentLookaheadProduction = "SingleMemberAnnotation";
            try {
                if (!check$SingleMemberAnnotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1385:4
    private boolean scan$Java_ccc$1385$4() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1385:4
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:1385:4
            pushOntoLookaheadStack("MemberValue", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1385, 4);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1395:20
    private boolean scan$Java_ccc$1395$20() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1395:20
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1395:34
            // NonTerminal MemberValue at /Users/bnaudts/git/congo/examples/java/Java.ccc:1395:34
            pushOntoLookaheadStack("MemberValueArrayInitializer", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1395, 34);
            currentLookaheadProduction = "MemberValue";
            try {
                if (!check$MemberValue(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1422:3
    private boolean scan$Java_ccc$1422$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1422:3
            // NonTerminal AnnotationTypeDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:1422:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1422, 3);
            currentLookaheadProduction = "AnnotationTypeDeclaration";
            try {
                if (!check$AnnotationTypeDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1424:3
    private boolean scan$Java_ccc$1424$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1424:3
            // NonTerminal ClassDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:1424:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1424, 3);
            currentLookaheadProduction = "ClassDeclaration";
            try {
                if (!check$ClassDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1426:3
    private boolean scan$Java_ccc$1426$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1426:3
            // NonTerminal InterfaceDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:1426:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1426, 3);
            currentLookaheadProduction = "InterfaceDeclaration";
            try {
                if (!check$InterfaceDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1428:3
    private boolean scan$Java_ccc$1428$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1428:3
            // NonTerminal EnumDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:1428:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1428, 3);
            currentLookaheadProduction = "EnumDeclaration";
            try {
                if (!check$EnumDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1430:3
    private boolean scan$Java_ccc$1430$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1430:3
            // NonTerminal AnnotationMethodDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:1430:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1430, 3);
            currentLookaheadProduction = "AnnotationMethodDeclaration";
            try {
                if (!check$AnnotationMethodDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1432:3
    private boolean scan$Java_ccc$1432$3() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1432:3
            // NonTerminal FieldDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:1432:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1432, 3);
            currentLookaheadProduction = "FieldDeclaration";
            try {
                if (!check$FieldDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1442:29
    private boolean scan$Java_ccc$1442$29() {
        remainingLookahead = 3;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1442:29
            // NonTerminal SimpleLambdaLHS at /Users/bnaudts/git/congo/examples/java/Java.ccc:1442:29
            pushOntoLookaheadStack("LambdaLHS", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1442, 29);
            currentLookaheadProduction = "SimpleLambdaLHS";
            try {
                if (!check$SimpleLambdaLHS(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1451:31
    private boolean scan$Java_ccc$1451$31() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1451:31
            // NonTerminal LambdaParameter at /Users/bnaudts/git/congo/examples/java/Java.ccc:1451:31
            pushOntoLookaheadStack("LambdaParameters", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1451, 31);
            currentLookaheadProduction = "LambdaParameter";
            try {
                if (!check$LambdaParameter(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1451:47
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1451$49(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1457:7
    private boolean scan$Java_ccc$1457$7() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1457:7
            // NonTerminal Type at /Users/bnaudts/git/congo/examples/java/Java.ccc:1457:7
            pushOntoLookaheadStack("LambdaParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1457, 7);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1457:12
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1457$13(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1457:26
            if (!scanToken(VAR_ARGS)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1457:42
            if (!scanToken(IDENTIFIER)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1457:13
    private boolean scan$Java_ccc$1457$13() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1457:13
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:1457:13
            pushOntoLookaheadStack("LambdaParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1457, 13);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1460:9
    private boolean scan$Java_ccc$1460$9() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (!(checkNextTokenImage("var"))) return false;
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1462:11
            if (!scanToken(VAR, IDENTIFIER)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /Users/bnaudts/git/congo/examples/java/Java.ccc:1473:23
    private boolean scan$Java_ccc$1473$23() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1473:23
            // NonTerminal Annotation at /Users/bnaudts/git/congo/examples/java/Java.ccc:1473:23
            pushOntoLookaheadStack("LambdaParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1473, 23);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // lookahead routine for lookahead at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:48:5
    private boolean check$Java_ccc$48$11(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (!scanToken(RBRACE)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:207:3
    private boolean check$Java_ccc$207$8(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:207:8
            // NonTerminal TypeDeclarationLA at /Users/bnaudts/git/congo/examples/java/Java.ccc:207:8
            pushOntoLookaheadStack("TypeDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 207, 8);
            currentLookaheadProduction = "TypeDeclarationLA";
            try {
                if (!check$TypeDeclarationLA(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:400:5
    private boolean check$Java_ccc$400$11(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (!scanToken(RBRACE)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:430:34
    private boolean check$Java_ccc$430$40(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (!scanToken(RBRACE)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:523:5
    private boolean check$Java_ccc$523$11(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (!scanToken(RBRACE)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:752:6
    private boolean check$Java_ccc$752$11(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:752:11
            if (!scanToken(GT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:752:17
            if (!scanToken(GT, RSIGNEDSHIFT)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1008:30
    private boolean check$Java_ccc$1008$36(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (!scanToken(RBRACE)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1034:4
    private boolean check$Java_ccc$1034$9(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1034:9
            // NonTerminal LocalVariableDeclarationLA at /Users/bnaudts/git/congo/examples/java/Java.ccc:1034:9
            pushOntoLookaheadStack("LocalVariableDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1034, 9);
            currentLookaheadProduction = "LocalVariableDeclarationLA";
            try {
                if (!check$LocalVariableDeclarationLA(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1116:7
    private boolean check$Java_ccc$1116$13(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (!scanToken(RPAREN)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1154:5
    private boolean check$Java_ccc$1154$10(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1154:10
            // NonTerminal NewSwitchLabel at /Users/bnaudts/git/congo/examples/java/Java.ccc:1154:10
            pushOntoLookaheadStack("SwitchStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1154, 10);
            currentLookaheadProduction = "NewSwitchLabel";
            try {
                if (!check$NewSwitchLabel(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1157:5
    private boolean check$Java_ccc$1157$10(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1157:10
            // NonTerminal ClassicSwitchLabel at /Users/bnaudts/git/congo/examples/java/Java.ccc:1157:10
            pushOntoLookaheadStack("SwitchStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1157, 10);
            currentLookaheadProduction = "ClassicSwitchLabel";
            try {
                if (!check$ClassicSwitchLabel(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1180:4
    private boolean check$Java_ccc$1180$10(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (!scanToken(CASE, _DEFAULT, RBRACE)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1214:6
    private boolean check$Java_ccc$1214$12(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (!scanToken(RBRACE)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // /Users/bnaudts/git/congo/examples/java/Java.ccc:1312:7
    private boolean check$Java_ccc$1312$45(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (!scanToken(RPAREN)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    private boolean backscan$Java_ccc$307$13() {
        ListIterator<NonTerminalCall> stackIterator = stackIteratorBackward();
        NonTerminalCall ntc = null;
        if (!stackIterator.hasNext()) return false;
        ntc = stackIterator.next();
        if (ntc.productionName != "InterfaceDeclaration") return false;
        return true;
    }

    private boolean backscan$Java_ccc$464$10() {
        ListIterator<NonTerminalCall> stackIterator = stackIteratorBackward();
        NonTerminalCall ntc = null;
        if (!stackIterator.hasNext()) {
            return false;
        }
        stackIterator.next();
        if (!stackIterator.hasNext()) return false;
        ntc = stackIterator.next();
        if (ntc.productionName != "FieldDeclaration") return false;
        return true;
    }

    private boolean backscan$Java_ccc$476$10() {
        ListIterator<NonTerminalCall> stackIterator = stackIteratorBackward();
        NonTerminalCall ntc = null;
        if (!stackIterator.hasNext()) {
            return false;
        }
        stackIterator.next();
        if (!stackIterator.hasNext()) {
            return false;
        }
        stackIterator.next();
        if (!stackIterator.hasNext()) return false;
        ntc = stackIterator.next();
        if (ntc.productionName != "InterfaceDeclaration") return false;
        return true;
    }

    private boolean backscan$Java_ccc$484$10() {
        ListIterator<NonTerminalCall> stackIterator = stackIteratorBackward();
        NonTerminalCall ntc = null;
        while (stackIterator.hasNext()) {
            ntc = stackIterator.next();
            if (ntc.productionName == "TypeDeclaration") {
                stackIterator.previous();
                break;
            }
            if (!stackIterator.hasNext()) return false;
        }
        if (!stackIterator.hasNext()) return false;
        ntc = stackIterator.next();
        if (ntc.productionName != "TypeDeclaration") return false;
        return true;
    }

    private boolean backscan$Java_ccc$1211$13() {
        ListIterator<NonTerminalCall> stackIterator = stackIteratorBackward();
        NonTerminalCall ntc = null;
        if (!stackIterator.hasNext()) return false;
        ntc = stackIterator.next();
        if (ntc.productionName != "SwitchStatement") return false;
        if (!stackIterator.hasNext()) return false;
        ntc = stackIterator.next();
        if (ntc.productionName != "SwitchExpression") return false;
        return true;
    }

    private boolean backscan$Java_ccc$1276$42() {
        ListIterator<NonTerminalCall> stackIterator = stackIteratorBackward();
        NonTerminalCall ntc = null;
        while (stackIterator.hasNext()) {
            ntc = stackIterator.next();
            if (ntc.productionName == "SwitchExpression") {
                stackIterator.previous();
                break;
            }
            if (!stackIterator.hasNext()) return false;
        }
        if (!stackIterator.hasNext()) return false;
        ntc = stackIterator.next();
        if (ntc.productionName != "SwitchExpression") return false;
        return true;
    }

    private boolean backscan$Java_ccc$1438$8() {
        ListIterator<NonTerminalCall> stackIterator = stackIteratorBackward();
        NonTerminalCall ntc = null;
        while (stackIterator.hasNext()) {
            ntc = stackIterator.next();
            if (ntc.productionName == "NewSwitchLabel") {
                stackIterator.previous();
                break;
            }
            if (!stackIterator.hasNext()) return false;
        }
        if (!stackIterator.hasNext()) return false;
        ntc = stackIterator.next();
        if (ntc.productionName != "NewSwitchLabel") return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ModularCompilationUnit(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:38:4
        boolean passedPredicate3 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token4 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$38$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token4;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate3;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:39:4
        boolean passedPredicate6 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token7 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$39$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token7;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Assertion specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:40:4
        if (!(checkNextTokenImage("open") || checkNextTokenImage("module"))) {
            hitFailure = true;
            return false;
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:42:4
        Token token10 = currentLookaheadToken;
        boolean passedPredicate10 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$43$7(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token10;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate10;
        }
        EnumSet<TokenType> previousActives12 = EnumSet.copyOf(token_source.activeTokenTypes);
        boolean somethingChanged13 = false;
        somethingChanged13 = activateTokenTypes(MODULE);
        try {
            if (!scanToken(MODULE)) return false;
        } finally {
            token_source.activeTokenTypes = previousActives12;
            if (somethingChanged13) {
                token_source.reset(currentLookaheadToken);
                nextTokenType = null;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:46:4
        // NonTerminal Name at /Users/bnaudts/git/congo/examples/java/Java.ccc:46:4
        pushOntoLookaheadStack("ModularCompilationUnit", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 46, 4);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:47:4
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:48:4
        boolean passedPredicate18 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token19 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$48$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token19;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate18;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:49:4
        if (!scanToken(RBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:50:4
        if (!scanToken(EOF)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ModuleDirective(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:54:4
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$54$4(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$56$4(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$58$4(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$60$4(false)) {
                            currentLookaheadToken = token2;
                            remainingLookahead = remainingLookahead2;
                            hitFailure = hitFailure2;
                            if (passedPredicate && !legacyGlitchyLookahead) return false;
                            passedPredicate = false;
                            if (!check$Java_ccc$62$4(false)) {
                                currentLookaheadToken = token2;
                                remainingLookahead = remainingLookahead2;
                                hitFailure = hitFailure2;
                                return false;
                            }
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$RequiresDirective(boolean scanToEnd) {
        EnumSet<TokenType> previousActives3 = EnumSet.copyOf(token_source.activeTokenTypes);
        boolean somethingChanged4 = false;
        somethingChanged4 = activateTokenTypes(REQUIRES, TRANSITIVE);
        try {
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:66:42
            if (!scanToken(REQUIRES)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:66:53
            Token token8 = currentLookaheadToken;
            boolean passedPredicate8 = passedPredicate;
            passedPredicate = false;
            try {
                if (!scanToken(STATIC, TRANSITIVE)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token8;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate8;
            }
        } finally {
            token_source.activeTokenTypes = previousActives3;
            if (somethingChanged4) {
                token_source.reset(currentLookaheadToken);
                nextTokenType = null;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:67:4
        // NonTerminal Name at /Users/bnaudts/git/congo/examples/java/Java.ccc:67:4
        pushOntoLookaheadStack("RequiresDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 67, 4);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:68:4
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ExportsDirective(boolean scanToEnd) {
        EnumSet<TokenType> previousActives3 = EnumSet.copyOf(token_source.activeTokenTypes);
        boolean somethingChanged4 = false;
        somethingChanged4 = activateTokenTypes(EXPORTS);
        try {
            if (!scanToken(EXPORTS)) return false;
        } finally {
            token_source.activeTokenTypes = previousActives3;
            if (somethingChanged4) {
                token_source.reset(currentLookaheadToken);
                nextTokenType = null;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:73:4
        // NonTerminal Name at /Users/bnaudts/git/congo/examples/java/Java.ccc:73:4
        pushOntoLookaheadStack("ExportsDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 73, 4);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:74:4
        Token token8 = currentLookaheadToken;
        boolean passedPredicate8 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$75$6(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token8;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate8;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:78:4
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$OpensDirective(boolean scanToEnd) {
        EnumSet<TokenType> previousActives3 = EnumSet.copyOf(token_source.activeTokenTypes);
        boolean somethingChanged4 = false;
        somethingChanged4 = activateTokenTypes(OPENS);
        try {
            if (!scanToken(OPENS)) return false;
        } finally {
            token_source.activeTokenTypes = previousActives3;
            if (somethingChanged4) {
                token_source.reset(currentLookaheadToken);
                nextTokenType = null;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:83:4
        // NonTerminal Name at /Users/bnaudts/git/congo/examples/java/Java.ccc:83:4
        pushOntoLookaheadStack("OpensDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 83, 4);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:84:4
        Token token8 = currentLookaheadToken;
        boolean passedPredicate8 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$85$6(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token8;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate8;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:88:4
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$UsesDirective(boolean scanToEnd) {
        EnumSet<TokenType> previousActives3 = EnumSet.copyOf(token_source.activeTokenTypes);
        boolean somethingChanged4 = false;
        somethingChanged4 = activateTokenTypes(USES);
        try {
            if (!scanToken(USES)) return false;
        } finally {
            token_source.activeTokenTypes = previousActives3;
            if (somethingChanged4) {
                token_source.reset(currentLookaheadToken);
                nextTokenType = null;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:93:5
        // NonTerminal Name at /Users/bnaudts/git/congo/examples/java/Java.ccc:93:5
        pushOntoLookaheadStack("UsesDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 93, 5);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:94:5
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ProvidesDirective(boolean scanToEnd) {
        EnumSet<TokenType> previousActives3 = EnumSet.copyOf(token_source.activeTokenTypes);
        boolean somethingChanged4 = false;
        somethingChanged4 = activateTokenTypes(PROVIDES);
        try {
            if (!scanToken(PROVIDES)) return false;
        } finally {
            token_source.activeTokenTypes = previousActives3;
            if (somethingChanged4) {
                token_source.reset(currentLookaheadToken);
                nextTokenType = null;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:99:5
        // NonTerminal Name at /Users/bnaudts/git/congo/examples/java/Java.ccc:99:5
        pushOntoLookaheadStack("ProvidesDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 99, 5);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        EnumSet<TokenType> previousActives8 = EnumSet.copyOf(token_source.activeTokenTypes);
        boolean somethingChanged9 = false;
        somethingChanged9 = activateTokenTypes(WITH);
        try {
            if (!scanToken(WITH)) return false;
        } finally {
            token_source.activeTokenTypes = previousActives8;
            if (somethingChanged9) {
                token_source.reset(currentLookaheadToken);
                nextTokenType = null;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:101:5
        // NonTerminal Name at /Users/bnaudts/git/congo/examples/java/Java.ccc:101:5
        pushOntoLookaheadStack("ProvidesDirective", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 101, 5);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:102:5
        boolean passedPredicate13 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token14 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$102$6(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token14;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate13;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:103:5
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$CompilationUnit(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:107:3
        Token token3 = currentLookaheadToken;
        boolean passedPredicate3 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$107$5(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token3;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate3;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:108:3
        boolean passedPredicate5 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token6 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$108$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token6;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:109:3
        boolean passedPredicate8 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token9 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$109$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token9;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate8;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:110:3
        Token token11 = currentLookaheadToken;
        boolean passedPredicate11 = passedPredicate;
        passedPredicate = false;
        try {
            if (!scanToken(EOF)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token11;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate11;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:115:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$PackageDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:128:5
        boolean passedPredicate3 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token4 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$128$6(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token4;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate3;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:129:5
        if (!scanToken(PACKAGE)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:131:5
        // NonTerminal Name at /Users/bnaudts/git/congo/examples/java/Java.ccc:131:5
        pushOntoLookaheadStack("PackageDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 131, 5);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:132:5
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ImportDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:142:21
        if (!scanToken(_IMPORT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:142:31
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!scanToken(STATIC)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:142:44
        // NonTerminal Name at /Users/bnaudts/git/congo/examples/java/Java.ccc:142:44
        pushOntoLookaheadStack("ImportDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 142, 44);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:142:49
        Token token7 = currentLookaheadToken;
        boolean passedPredicate7 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$142$51(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token7;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:142:66
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$Modifiers(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:145:2
        boolean passedPredicate3 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token4 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$146$3$(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token4;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate3;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:199:2
        permissibleModifiers = null;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$TypeDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:209:5
        Token token4 = currentLookaheadToken;
        int remainingLookahead4 = remainingLookahead;
        boolean hitFailure4 = hitFailure;
        boolean passedPredicate4 = passedPredicate;
        try {
            passedPredicate = false;
            if (!scanToken(SEMICOLON)) {
                currentLookaheadToken = token4;
                remainingLookahead = remainingLookahead4;
                hitFailure = hitFailure4;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$211$5(false)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$213$5(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$215$5(false)) {
                            currentLookaheadToken = token4;
                            remainingLookahead = remainingLookahead4;
                            hitFailure = hitFailure4;
                            if (passedPredicate && !legacyGlitchyLookahead) return false;
                            passedPredicate = false;
                            if (!check$Java_ccc$217$5(false)) {
                                currentLookaheadToken = token4;
                                remainingLookahead = remainingLookahead4;
                                hitFailure = hitFailure4;
                                if (passedPredicate && !legacyGlitchyLookahead) return false;
                                passedPredicate = false;
                                if (!check$Java_ccc$219$5(false)) {
                                    currentLookaheadToken = token4;
                                    remainingLookahead = remainingLookahead4;
                                    hitFailure = hitFailure4;
                                    return false;
                                }
                            }
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$TypeDeclarationLA(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:225:4
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!scanToken(SEMICOLON)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$227$4(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$TypeIdentifier(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:249:4
        if (!scanToken(IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:250:4
        String temp = tokenImage(0);
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Assertion specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:251:4
        if (!(!temp.equals("record") && !temp.equals("var") && !temp.equals("permits") && !temp.equals("sealed") && !temp.equals("yield"))) {
            hitFailure = true;
            return false;
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ClassDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:265:3
        // NonTerminal Modifiers at /Users/bnaudts/git/congo/examples/java/Java.ccc:265:3
        pushOntoLookaheadStack("ClassDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 265, 3);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:266:3
        if (!scanToken(CLASS)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:267:3
        // NonTerminal TypeIdentifier at /Users/bnaudts/git/congo/examples/java/Java.ccc:267:3
        pushOntoLookaheadStack("ClassDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 267, 3);
        currentLookaheadProduction = "TypeIdentifier";
        try {
            if (!check$TypeIdentifier(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:268:3
        Token token6 = currentLookaheadToken;
        boolean passedPredicate6 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$268$5(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token6;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:269:3
        Token token8 = currentLookaheadToken;
        boolean passedPredicate8 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$269$5(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token8;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate8;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:270:3
        Token token10 = currentLookaheadToken;
        boolean passedPredicate10 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$270$5(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token10;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate10;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:271:3
        Token token12 = currentLookaheadToken;
        boolean passedPredicate12 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$271$5(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token12;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate12;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:272:3
        // NonTerminal ClassOrInterfaceBody at /Users/bnaudts/git/congo/examples/java/Java.ccc:272:3
        pushOntoLookaheadStack("ClassDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 272, 3);
        currentLookaheadProduction = "ClassOrInterfaceBody";
        try {
            if (!check$ClassOrInterfaceBody(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$InterfaceDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:280:3
        // NonTerminal Modifiers at /Users/bnaudts/git/congo/examples/java/Java.ccc:280:3
        pushOntoLookaheadStack("InterfaceDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 280, 3);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:281:3
        if (!scanToken(INTERFACE)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:282:3
        // NonTerminal TypeIdentifier at /Users/bnaudts/git/congo/examples/java/Java.ccc:282:3
        pushOntoLookaheadStack("InterfaceDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 282, 3);
        currentLookaheadProduction = "TypeIdentifier";
        try {
            if (!check$TypeIdentifier(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:283:3
        Token token6 = currentLookaheadToken;
        boolean passedPredicate6 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$283$5(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token6;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:284:3
        Token token8 = currentLookaheadToken;
        boolean passedPredicate8 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$284$5(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token8;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate8;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:285:3
        Token token10 = currentLookaheadToken;
        boolean passedPredicate10 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$285$5(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token10;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate10;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:286:3
        // NonTerminal ClassOrInterfaceBody at /Users/bnaudts/git/congo/examples/java/Java.ccc:286:3
        pushOntoLookaheadStack("InterfaceDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 286, 3);
        currentLookaheadProduction = "ClassOrInterfaceBody";
        try {
            if (!check$ClassOrInterfaceBody(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$PermitsList(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:292:7
        if (!scanToken(PERMITS, IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:299:4
        // NonTerminal ObjectType at /Users/bnaudts/git/congo/examples/java/Java.ccc:299:4
        pushOntoLookaheadStack("PermitsList", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 299, 4);
        currentLookaheadProduction = "ObjectType";
        try {
            if (!check$ObjectType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:300:4
        boolean passedPredicate6 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token7 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$300$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token7;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ExtendsList(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:304:4
        if (!scanToken(EXTENDS)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:305:4
        // NonTerminal ObjectType at /Users/bnaudts/git/congo/examples/java/Java.ccc:305:4
        pushOntoLookaheadStack("ExtendsList", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 305, 4);
        currentLookaheadProduction = "ObjectType";
        try {
            if (!check$ObjectType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:306:4
        boolean passedPredicate5 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token6 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$307$6(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token6;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ImplementsList(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:321:4
        if (!scanToken(IMPLEMENTS)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:321:17
        // NonTerminal ObjectType at /Users/bnaudts/git/congo/examples/java/Java.ccc:321:17
        pushOntoLookaheadStack("ImplementsList", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 321, 17);
        currentLookaheadProduction = "ObjectType";
        try {
            if (!check$ObjectType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:322:4
        boolean passedPredicate5 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token6 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$323$6(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token6;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$EnumDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:332:4
        // NonTerminal Modifiers at /Users/bnaudts/git/congo/examples/java/Java.ccc:332:4
        pushOntoLookaheadStack("EnumDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 332, 4);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:333:4
        if (!scanToken(ENUM)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:334:4
        // NonTerminal TypeIdentifier at /Users/bnaudts/git/congo/examples/java/Java.ccc:334:4
        pushOntoLookaheadStack("EnumDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 334, 4);
        currentLookaheadProduction = "TypeIdentifier";
        try {
            if (!check$TypeIdentifier(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:335:4
        Token token6 = currentLookaheadToken;
        boolean passedPredicate6 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$335$5(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token6;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:336:4
        // NonTerminal EnumBody at /Users/bnaudts/git/congo/examples/java/Java.ccc:336:4
        pushOntoLookaheadStack("EnumDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 336, 4);
        currentLookaheadProduction = "EnumBody";
        try {
            if (!check$EnumBody(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$EnumBody(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:340:4
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:341:4
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$341$6(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:342:4
        Token token6 = currentLookaheadToken;
        boolean passedPredicate6 = passedPredicate;
        passedPredicate = false;
        try {
            if (!scanToken(COMMA)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token6;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:343:4
        Token token8 = currentLookaheadToken;
        boolean passedPredicate8 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$343$6(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token8;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate8;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:344:4
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$RecordDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:352:3
        // NonTerminal Modifiers at /Users/bnaudts/git/congo/examples/java/Java.ccc:352:3
        pushOntoLookaheadStack("RecordDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 352, 3);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Assertion specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:353:3
        if (!(checkNextTokenImage("record") && getTokenType(2) == IDENTIFIER)) {
            hitFailure = true;
            return false;
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:356:5
        if (!scanToken(RECORD, IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:363:3
        // NonTerminal TypeIdentifier at /Users/bnaudts/git/congo/examples/java/Java.ccc:363:3
        pushOntoLookaheadStack("RecordDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 363, 3);
        currentLookaheadProduction = "TypeIdentifier";
        try {
            if (!check$TypeIdentifier(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:364:3
        Token token8 = currentLookaheadToken;
        boolean passedPredicate8 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$364$4(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token8;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate8;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:365:3
        // NonTerminal RecordHeader at /Users/bnaudts/git/congo/examples/java/Java.ccc:365:3
        pushOntoLookaheadStack("RecordDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 365, 3);
        currentLookaheadProduction = "RecordHeader";
        try {
            if (!check$RecordHeader(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:366:3
        Token token11 = currentLookaheadToken;
        boolean passedPredicate11 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$366$4(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token11;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate11;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:367:3
        // NonTerminal RecordBody at /Users/bnaudts/git/congo/examples/java/Java.ccc:367:3
        pushOntoLookaheadStack("RecordDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 367, 3);
        currentLookaheadProduction = "RecordBody";
        try {
            if (!check$RecordBody(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$RecordHeader(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:371:4
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:372:4
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$373$6(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:376:4
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$RecordComponent(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:380:4
        boolean passedPredicate3 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token4 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$380$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token4;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate3;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:380:18
        // NonTerminal Type at /Users/bnaudts/git/congo/examples/java/Java.ccc:380:18
        pushOntoLookaheadStack("RecordComponent", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 380, 18);
        currentLookaheadProduction = "Type";
        try {
            if (!check$Type(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:380:23
        Token token7 = currentLookaheadToken;
        boolean passedPredicate7 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$380$24(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token7;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:380:50
        if (!scanToken(IDENTIFIER)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$RecordBody(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:384:3
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:385:3
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$386$4$(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:390:3
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$CompactConstructorDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:395:4
        // NonTerminal Modifiers at /Users/bnaudts/git/congo/examples/java/Java.ccc:395:4
        pushOntoLookaheadStack("CompactConstructorDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 395, 4);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:396:3
        // NonTerminal TypeIdentifier at /Users/bnaudts/git/congo/examples/java/Java.ccc:396:3
        pushOntoLookaheadStack("CompactConstructorDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 396, 3);
        currentLookaheadProduction = "TypeIdentifier";
        try {
            if (!check$TypeIdentifier(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:397:3
        if (!scanToken(LBRACE)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:399:3
        Token token8 = currentLookaheadToken;
        boolean passedPredicate8 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$399$5(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token8;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate8;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:400:3
        boolean passedPredicate10 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token11 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$400$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token11;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate10;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:401:3
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$EnumConstant(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:407:3
        boolean passedPredicate3 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token4 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$407$4(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token4;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate3;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:407:17
        if (!scanToken(IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:407:30
        Token token7 = currentLookaheadToken;
        boolean passedPredicate7 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$407$32(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token7;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:407:54
        Token token9 = currentLookaheadToken;
        boolean passedPredicate9 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$407$56(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token9;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate9;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$TypeParameters(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:411:4
        if (!scanToken(LT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:412:4
        // NonTerminal TypeParameter at /Users/bnaudts/git/congo/examples/java/Java.ccc:412:4
        pushOntoLookaheadStack("TypeParameters", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 412, 4);
        currentLookaheadProduction = "TypeParameter";
        try {
            if (!check$TypeParameter(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:412:18
        boolean passedPredicate5 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token6 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$412$20(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token6;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:413:4
        if (!scanToken(GT)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$TypeParameter(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:424:16
        boolean passedPredicate3 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token4 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$424$17(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token4;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate3;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:424:30
        // NonTerminal TypeIdentifier at /Users/bnaudts/git/congo/examples/java/Java.ccc:424:30
        pushOntoLookaheadStack("TypeParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 424, 30);
        currentLookaheadProduction = "TypeIdentifier";
        try {
            if (!check$TypeIdentifier(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:424:50
        Token token7 = currentLookaheadToken;
        boolean passedPredicate7 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$424$51(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token7;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$TypeBound(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:427:4
        if (!scanToken(EXTENDS)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:427:14
        // NonTerminal ObjectType at /Users/bnaudts/git/congo/examples/java/Java.ccc:427:14
        pushOntoLookaheadStack("TypeBound", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 427, 14);
        currentLookaheadProduction = "ObjectType";
        try {
            if (!check$ObjectType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:427:25
        boolean passedPredicate5 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token6 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$427$27(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token6;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ClassOrInterfaceBody(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:430:24
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:430:33
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$430$34(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:430:90
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ClassOrInterfaceBodyDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:433:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$433$3(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$435$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$437$3(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$439$3(false)) {
                            currentLookaheadToken = token2;
                            remainingLookahead = remainingLookahead2;
                            hitFailure = hitFailure2;
                            if (passedPredicate && !legacyGlitchyLookahead) return false;
                            passedPredicate = false;
                            if (!check$Java_ccc$441$3(false)) {
                                currentLookaheadToken = token2;
                                remainingLookahead = remainingLookahead2;
                                hitFailure = hitFailure2;
                                return false;
                            }
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$FieldDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:454:3
        // NonTerminal Modifiers at /Users/bnaudts/git/congo/examples/java/Java.ccc:454:3
        pushOntoLookaheadStack("FieldDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 454, 3);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:455:3
        // NonTerminal Type at /Users/bnaudts/git/congo/examples/java/Java.ccc:455:3
        pushOntoLookaheadStack("FieldDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 455, 3);
        currentLookaheadProduction = "Type";
        try {
            if (!check$Type(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:455:8
        // NonTerminal VariableDeclarator at /Users/bnaudts/git/congo/examples/java/Java.ccc:455:8
        pushOntoLookaheadStack("FieldDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 455, 8);
        currentLookaheadProduction = "VariableDeclarator";
        try {
            if (!check$VariableDeclarator(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:455:27
        boolean passedPredicate6 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token7 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$455$29(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token7;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:455:59
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$VariableDeclarator(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:458:23
        // NonTerminal VariableDeclaratorId at /Users/bnaudts/git/congo/examples/java/Java.ccc:458:23
        pushOntoLookaheadStack("VariableDeclarator", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 458, 23);
        currentLookaheadProduction = "VariableDeclaratorId";
        try {
            if (!check$VariableDeclaratorId(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:458:44
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$458$46(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$VariableDeclaratorId(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:461:5
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$461$5(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$464$5(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$VariableInitializer(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:468:28
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$468$28(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$468$47(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ArrayInitializer(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:471:4
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:471:13
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$471$15(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:471:77
        Token token6 = currentLookaheadToken;
        boolean passedPredicate6 = passedPredicate;
        passedPredicate = false;
        try {
            if (!scanToken(COMMA)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token6;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:471:89
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$MethodDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:476:5
        Token token4 = currentLookaheadToken;
        int remainingLookahead4 = remainingLookahead;
        boolean hitFailure4 = hitFailure;
        boolean passedPredicate4 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$476$5(false)) {
                currentLookaheadToken = token4;
                remainingLookahead = remainingLookahead4;
                hitFailure = hitFailure4;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$484$5(false)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$494$5(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        return false;
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:500:3
        // NonTerminal Modifiers at /Users/bnaudts/git/congo/examples/java/Java.ccc:500:3
        pushOntoLookaheadStack("MethodDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 500, 3);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:501:3
        Token token7 = currentLookaheadToken;
        boolean passedPredicate7 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$501$5(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token7;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:502:3
        // NonTerminal ReturnType at /Users/bnaudts/git/congo/examples/java/Java.ccc:502:3
        pushOntoLookaheadStack("MethodDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 502, 3);
        currentLookaheadProduction = "ReturnType";
        try {
            if (!check$ReturnType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:503:3
        if (!scanToken(IDENTIFIER)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 1;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead - 1;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:504:9
        // NonTerminal FormalParameters at /Users/bnaudts/git/congo/examples/java/Java.ccc:504:9
        pushOntoLookaheadStack("MethodDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 504, 9);
        currentLookaheadProduction = "FormalParameters";
        try {
            if (!check$FormalParameters(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:504:26
        boolean passedPredicate12 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token13 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$504$28(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token13;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate12;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:505:3
        Token token15 = currentLookaheadToken;
        boolean passedPredicate15 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$505$5(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token15;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate15;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:506:5
        Token token18 = currentLookaheadToken;
        int remainingLookahead18 = remainingLookahead;
        boolean hitFailure18 = hitFailure;
        boolean passedPredicate18 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$506$5(false)) {
                currentLookaheadToken = token18;
                remainingLookahead = remainingLookahead18;
                hitFailure = hitFailure18;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!scanToken(SEMICOLON)) {
                    currentLookaheadToken = token18;
                    remainingLookahead = remainingLookahead18;
                    hitFailure = hitFailure18;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate18;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:507:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$FormalParameters(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:510:20
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:510:29
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$510$31(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:510:78
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$FormalParameter(boolean scanToEnd) {
        permissibleModifiers = EnumSet.of(FINAL);
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:512:64
        // NonTerminal Modifiers at /Users/bnaudts/git/congo/examples/java/Java.ccc:512:64
        pushOntoLookaheadStack("FormalParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 512, 64);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:512:74
        // NonTerminal Type at /Users/bnaudts/git/congo/examples/java/Java.ccc:512:74
        pushOntoLookaheadStack("FormalParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 512, 74);
        currentLookaheadProduction = "Type";
        try {
            if (!check$Type(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:512:79
        Token token5 = currentLookaheadToken;
        boolean passedPredicate5 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$512$81(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token5;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:512:108
        // NonTerminal VariableDeclaratorId at /Users/bnaudts/git/congo/examples/java/Java.ccc:512:108
        pushOntoLookaheadStack("FormalParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 512, 108);
        currentLookaheadProduction = "VariableDeclaratorId";
        try {
            if (!check$VariableDeclaratorId(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ConstructorDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:516:3
        // NonTerminal Modifiers at /Users/bnaudts/git/congo/examples/java/Java.ccc:516:3
        pushOntoLookaheadStack("ConstructorDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 516, 3);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:517:3
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$517$5(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:518:3
        // NonTerminal TypeIdentifier at /Users/bnaudts/git/congo/examples/java/Java.ccc:518:3
        pushOntoLookaheadStack("ConstructorDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 518, 3);
        currentLookaheadProduction = "TypeIdentifier";
        try {
            if (!check$TypeIdentifier(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:518:18
        // NonTerminal FormalParameters at /Users/bnaudts/git/congo/examples/java/Java.ccc:518:18
        pushOntoLookaheadStack("ConstructorDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 518, 18);
        currentLookaheadProduction = "FormalParameters";
        try {
            if (!check$FormalParameters(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:519:3
        Token token8 = currentLookaheadToken;
        boolean passedPredicate8 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$519$5(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token8;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate8;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:520:3
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:522:3
        Token token11 = currentLookaheadToken;
        boolean passedPredicate11 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$522$5(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token11;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate11;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:523:3
        boolean passedPredicate13 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token14 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$523$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token14;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate13;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:524:3
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ExplicitConstructorInvocation(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:528:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$528$3(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$532$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$Initializer(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:537:3
        Token token3 = currentLookaheadToken;
        boolean passedPredicate3 = passedPredicate;
        passedPredicate = false;
        try {
            if (!scanToken(STATIC)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token3;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate3;
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 1;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead - 1;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:537:22
        // NonTerminal Block at /Users/bnaudts/git/congo/examples/java/Java.ccc:537:22
        pushOntoLookaheadStack("Initializer", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 537, 22);
        currentLookaheadProduction = "Block";
        try {
            if (!check$Block(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$Type(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:541:4
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$541$4(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$543$4(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ReferenceType(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:551:4
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$551$4(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$553$4(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ObjectType(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:557:5
        boolean passedPredicate3 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token4 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$557$6(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token4;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate3;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:558:5
        // NonTerminal TypeIdentifier at /Users/bnaudts/git/congo/examples/java/Java.ccc:558:5
        pushOntoLookaheadStack("ObjectType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 558, 5);
        currentLookaheadProduction = "TypeIdentifier";
        try {
            if (!check$TypeIdentifier(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:558:20
        Token token7 = currentLookaheadToken;
        boolean passedPredicate7 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$558$22(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token7;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:559:5
        boolean passedPredicate9 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token10 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$559$7(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token10;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate9;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$DiamondOperator(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:572:20
        if (!scanToken(LT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:572:24
        if (!scanToken(GT)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$PossiblyEmptyTypeArguments(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:575:4
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$575$4(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$577$4(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$TypeArguments(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:582:3
        if (!scanToken(LT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:582:8
        // NonTerminal TypeArgument at /Users/bnaudts/git/congo/examples/java/Java.ccc:582:8
        pushOntoLookaheadStack("TypeArguments", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 582, 8);
        currentLookaheadProduction = "TypeArgument";
        try {
            if (!check$TypeArgument(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:582:21
        boolean passedPredicate5 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token6 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$582$23(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token6;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        hitFailure = false;
        EnumSet<TokenType> previousActives8 = EnumSet.copyOf(token_source.activeTokenTypes);
        boolean somethingChanged9 = false;
        somethingChanged9 = somethingChanged9 |= deactivateTokenTypes(RSIGNEDSHIFT, RUNSIGNEDSHIFT);
        try {
            if (!scanToken(GT)) return false;
        } finally {
            token_source.activeTokenTypes = previousActives8;
            if (somethingChanged9) {
                token_source.reset(currentLookaheadToken);
                nextTokenType = null;
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$TypeArgument(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:587:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$587$3(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$589$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$WildcardBounds(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:592:19
        if (!scanToken(EXTENDS, SUPER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:592:40
        // NonTerminal ReferenceType at /Users/bnaudts/git/congo/examples/java/Java.ccc:592:40
        pushOntoLookaheadStack("WildcardBounds", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 592, 40);
        currentLookaheadProduction = "ReferenceType";
        try {
            if (!check$ReferenceType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$PrimitiveType(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:595:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$595$3(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!scanToken(CHAR)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!scanToken(BYTE)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!scanToken(SHORT)) {
                            currentLookaheadToken = token2;
                            remainingLookahead = remainingLookahead2;
                            hitFailure = hitFailure2;
                            if (passedPredicate && !legacyGlitchyLookahead) return false;
                            passedPredicate = false;
                            if (!scanToken(INT)) {
                                currentLookaheadToken = token2;
                                remainingLookahead = remainingLookahead2;
                                hitFailure = hitFailure2;
                                if (passedPredicate && !legacyGlitchyLookahead) return false;
                                passedPredicate = false;
                                if (!scanToken(LONG)) {
                                    currentLookaheadToken = token2;
                                    remainingLookahead = remainingLookahead2;
                                    hitFailure = hitFailure2;
                                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                                    passedPredicate = false;
                                    if (!scanToken(FLOAT)) {
                                        currentLookaheadToken = token2;
                                        remainingLookahead = remainingLookahead2;
                                        hitFailure = hitFailure2;
                                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                                        passedPredicate = false;
                                        if (!check$Java_ccc$596$70(false)) {
                                            currentLookaheadToken = token2;
                                            remainingLookahead = remainingLookahead2;
                                            hitFailure = hitFailure2;
                                            return false;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$PrimitiveArrayType(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:600:22
        // NonTerminal PrimitiveType at /Users/bnaudts/git/congo/examples/java/Java.ccc:600:22
        pushOntoLookaheadStack("PrimitiveArrayType", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 600, 22);
        currentLookaheadProduction = "PrimitiveType";
        try {
            if (!check$PrimitiveType(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for OneOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:600:36
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:600:37
        boolean passedPredicate6 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token7 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$600$38(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token7;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:600:51
        if (!scanToken(LBRACKET)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:600:61
        if (!scanToken(RBRACKET)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        boolean passedPredicate10 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token11 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$600$37(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token11;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate10;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ReturnType(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:602:15
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!scanToken(VOID)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$602$24(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$Name(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:604:9
        if (!scanToken(IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:604:22
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$604$23(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ThrowsList(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:606:14
        if (!scanToken(THROWS)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:606:23
        // NonTerminal ExceptionType at /Users/bnaudts/git/congo/examples/java/Java.ccc:606:23
        pushOntoLookaheadStack("ThrowsList", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 606, 23);
        currentLookaheadProduction = "ExceptionType";
        try {
            if (!check$ExceptionType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:606:37
        boolean passedPredicate5 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token6 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$606$39(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token6;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ExceptionType(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:609:5
        boolean passedPredicate3 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token4 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$609$6(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token4;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate3;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:610:5
        if (!scanToken(IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:611:5
        boolean passedPredicate7 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token8 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$612$8(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token8;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:614:5
        Token token10 = currentLookaheadToken;
        boolean passedPredicate10 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$615$7(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token10;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate10;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:619:5
        Token token12 = currentLookaheadToken;
        boolean passedPredicate12 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$619$6(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token12;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate12;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$Expression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:624:5
        // NonTerminal AssignmentExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:624:5
        pushOntoLookaheadStack("Expression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 624, 5);
        currentLookaheadProduction = "AssignmentExpression";
        try {
            if (!check$AssignmentExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:625:5
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$AssignmentExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:684:3
        // NonTerminal TernaryExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:684:3
        pushOntoLookaheadStack("AssignmentExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 684, 3);
        currentLookaheadProduction = "TernaryExpression";
        try {
            if (!check$TernaryExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:684:21
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:685:3
        Token token5 = currentLookaheadToken;
        boolean passedPredicate5 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$686$5(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token5;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$TernaryExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:696:3
        // NonTerminal ConditionalOrExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:696:3
        pushOntoLookaheadStack("TernaryExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 696, 3);
        currentLookaheadProduction = "ConditionalOrExpression";
        try {
            if (!check$ConditionalOrExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:696:27
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$696$30(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ConditionalOrExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:700:3
        // NonTerminal ConditionalAndExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:700:3
        pushOntoLookaheadStack("ConditionalOrExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 700, 3);
        currentLookaheadProduction = "ConditionalAndExpression";
        try {
            if (!check$ConditionalAndExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:700:28
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$700$30(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ConditionalAndExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:704:3
        // NonTerminal InclusiveOrExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:704:3
        pushOntoLookaheadStack("ConditionalAndExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 704, 3);
        currentLookaheadProduction = "InclusiveOrExpression";
        try {
            if (!check$InclusiveOrExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:704:25
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$704$27(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$InclusiveOrExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:708:3
        // NonTerminal ExclusiveOrExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:708:3
        pushOntoLookaheadStack("InclusiveOrExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 708, 3);
        currentLookaheadProduction = "ExclusiveOrExpression";
        try {
            if (!check$ExclusiveOrExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:708:25
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$708$27(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ExclusiveOrExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:712:3
        // NonTerminal AndExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:712:3
        pushOntoLookaheadStack("ExclusiveOrExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 712, 3);
        currentLookaheadProduction = "AndExpression";
        try {
            if (!check$AndExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:712:17
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$712$19(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$AndExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:716:3
        // NonTerminal EqualityExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:716:3
        pushOntoLookaheadStack("AndExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 716, 3);
        currentLookaheadProduction = "EqualityExpression";
        try {
            if (!check$EqualityExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:716:22
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$716$24(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$EqualityExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:720:3
        // NonTerminal InstanceOfExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:720:3
        pushOntoLookaheadStack("EqualityExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 720, 3);
        currentLookaheadProduction = "InstanceOfExpression";
        try {
            if (!check$InstanceOfExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:720:24
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$720$26(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$InstanceOfExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:724:3
        // NonTerminal RelationalExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:724:3
        pushOntoLookaheadStack("InstanceOfExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 724, 3);
        currentLookaheadProduction = "RelationalExpression";
        try {
            if (!check$RelationalExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:725:3
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$726$5(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$RelationalExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:738:3
        // NonTerminal ShiftExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:738:3
        pushOntoLookaheadStack("RelationalExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 738, 3);
        currentLookaheadProduction = "ShiftExpression";
        try {
            if (!check$ShiftExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:739:3
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$740$5(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ShiftExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:747:4
        // NonTerminal AdditiveExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:747:4
        pushOntoLookaheadStack("ShiftExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 747, 4);
        currentLookaheadProduction = "AdditiveExpression";
        try {
            if (!check$AdditiveExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:748:4
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$752$6(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:754:4
        boolean passedPredicate6 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token7 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$755$7(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token7;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$AdditiveExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:761:3
        // NonTerminal MultiplicativeExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:761:3
        pushOntoLookaheadStack("AdditiveExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 761, 3);
        currentLookaheadProduction = "MultiplicativeExpression";
        try {
            if (!check$MultiplicativeExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:761:28
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$761$31(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$MultiplicativeExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:765:3
        // NonTerminal UnaryExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:765:3
        pushOntoLookaheadStack("MultiplicativeExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 765, 3);
        currentLookaheadProduction = "UnaryExpression";
        try {
            if (!check$UnaryExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:765:19
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$765$22(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$UnaryExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:769:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$769$3(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$771$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$773$3(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$775$3(false)) {
                            currentLookaheadToken = token2;
                            remainingLookahead = remainingLookahead2;
                            hitFailure = hitFailure2;
                            return false;
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$PreIncrementExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:779:3
        if (!scanToken(INCR)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:779:10
        // NonTerminal UnaryExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:779:10
        pushOntoLookaheadStack("PreIncrementExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 779, 10);
        currentLookaheadProduction = "UnaryExpression";
        try {
            if (!check$UnaryExpression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Assertion specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:780:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$PreDecrementExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:785:3
        if (!scanToken(DECR)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:785:10
        // NonTerminal UnaryExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:785:10
        pushOntoLookaheadStack("PreDecrementExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 785, 10);
        currentLookaheadProduction = "UnaryExpression";
        try {
            if (!check$UnaryExpression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Assertion specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:786:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$UnaryExpressionNotPlusMinus(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:791:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$791$3(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$793$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$795$3(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$797$3(false)) {
                            currentLookaheadToken = token2;
                            remainingLookahead = remainingLookahead2;
                            hitFailure = hitFailure2;
                            if (passedPredicate && !legacyGlitchyLookahead) return false;
                            passedPredicate = false;
                            if (!check$Java_ccc$799$3(false)) {
                                currentLookaheadToken = token2;
                                remainingLookahead = remainingLookahead2;
                                hitFailure = hitFailure2;
                                if (passedPredicate && !legacyGlitchyLookahead) return false;
                                passedPredicate = false;
                                if (!check$Java_ccc$801$3(false)) {
                                    currentLookaheadToken = token2;
                                    remainingLookahead = remainingLookahead2;
                                    hitFailure = hitFailure2;
                                    return false;
                                }
                            }
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$PostfixExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:805:3
        // NonTerminal PrimaryExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:805:3
        pushOntoLookaheadStack("PostfixExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 805, 3);
        currentLookaheadProduction = "PrimaryExpression";
        try {
            if (!check$PrimaryExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:806:3
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$807$5$(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$SwitchExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:814:4
        // NonTerminal SwitchStatement at /Users/bnaudts/git/congo/examples/java/Java.ccc:814:4
        pushOntoLookaheadStack("SwitchExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 814, 4);
        currentLookaheadProduction = "SwitchStatement";
        try {
            if (!check$SwitchStatement(false)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$PrimitiveCastExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:818:4
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:818:13
        // NonTerminal PrimitiveType at /Users/bnaudts/git/congo/examples/java/Java.ccc:818:13
        pushOntoLookaheadStack("PrimitiveCastExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 818, 13);
        currentLookaheadProduction = "PrimitiveType";
        try {
            if (!check$PrimitiveType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:818:27
        if (!scanToken(RPAREN)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:818:41
        // NonTerminal UnaryExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:818:41
        pushOntoLookaheadStack("PrimitiveCastExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 818, 41);
        currentLookaheadProduction = "UnaryExpression";
        try {
            if (!check$UnaryExpression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ObjectCastExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:822:4
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:822:13
        // NonTerminal ReferenceType at /Users/bnaudts/git/congo/examples/java/Java.ccc:822:13
        pushOntoLookaheadStack("ObjectCastExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 822, 13);
        currentLookaheadProduction = "ReferenceType";
        try {
            if (!check$ReferenceType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:822:27
        boolean passedPredicate5 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token6 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$822$28(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token6;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:822:51
        if (!scanToken(RPAREN)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 1;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead - 1;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:822:66
        // NonTerminal UnaryExpressionNotPlusMinus at /Users/bnaudts/git/congo/examples/java/Java.ccc:822:66
        pushOntoLookaheadStack("ObjectCastExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 822, 66);
        currentLookaheadProduction = "UnaryExpressionNotPlusMinus";
        try {
            if (!check$UnaryExpressionNotPlusMinus(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$PrimaryExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:827:3
        Token token4 = currentLookaheadToken;
        int remainingLookahead4 = remainingLookahead;
        boolean hitFailure4 = hitFailure;
        boolean passedPredicate4 = passedPredicate;
        try {
            passedPredicate = false;
            if (!scanToken(first_set$Java_ccc$827$3)) {
                currentLookaheadToken = token4;
                remainingLookahead = remainingLookahead4;
                hitFailure = hitFailure4;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!scanToken(THIS)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!scanToken(SUPER)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$833$3(false)) {
                            currentLookaheadToken = token4;
                            remainingLookahead = remainingLookahead4;
                            hitFailure = hitFailure4;
                            if (passedPredicate && !legacyGlitchyLookahead) return false;
                            passedPredicate = false;
                            if (!check$Java_ccc$835$3(false)) {
                                currentLookaheadToken = token4;
                                remainingLookahead = remainingLookahead4;
                                hitFailure = hitFailure4;
                                if (passedPredicate && !legacyGlitchyLookahead) return false;
                                passedPredicate = false;
                                if (!check$Java_ccc$837$3(false)) {
                                    currentLookaheadToken = token4;
                                    remainingLookahead = remainingLookahead4;
                                    hitFailure = hitFailure4;
                                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                                    passedPredicate = false;
                                    if (!check$Java_ccc$839$3(false)) {
                                        currentLookaheadToken = token4;
                                        remainingLookahead = remainingLookahead4;
                                        hitFailure = hitFailure4;
                                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                                        passedPredicate = false;
                                        if (!check$Java_ccc$841$3(false)) {
                                            currentLookaheadToken = token4;
                                            remainingLookahead = remainingLookahead4;
                                            hitFailure = hitFailure4;
                                            return false;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:843:2
        boolean passedPredicate6 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token7 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$844$3$(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token7;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Assertion specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:866:2
        if (!(getTokenType(0) != SUPER)) {
            hitFailure = true;
            return false;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$Parentheses(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:872:5
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:873:5
        // NonTerminal Expression at /Users/bnaudts/git/congo/examples/java/Java.ccc:873:5
        pushOntoLookaheadStack("Parentheses", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 873, 5);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:873:16
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:874:5
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ClassLiteral(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:882:17
        Token token4 = currentLookaheadToken;
        int remainingLookahead4 = remainingLookahead;
        boolean hitFailure4 = hitFailure;
        boolean passedPredicate4 = passedPredicate;
        try {
            passedPredicate = false;
            if (!scanToken(VOID)) {
                currentLookaheadToken = token4;
                remainingLookahead = remainingLookahead4;
                hitFailure = hitFailure4;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$882$26(false)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:882:32
        if (!scanToken(DOT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:882:38
        if (!scanToken(CLASS)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$MethodReference(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:885:6
        Token token4 = currentLookaheadToken;
        int remainingLookahead4 = remainingLookahead;
        boolean hitFailure4 = hitFailure;
        boolean passedPredicate4 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$885$6$(false)) {
                currentLookaheadToken = token4;
                remainingLookahead = remainingLookahead4;
                hitFailure = hitFailure4;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!scanToken(SUPER)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:886:6
        if (!scanToken(DOUBLE_COLON)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:887:6
        Token token7 = currentLookaheadToken;
        boolean passedPredicate7 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$887$7(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token7;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:888:7
        if (!scanToken(NEW, IDENTIFIER)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$InvocationArguments(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:912:5
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:913:5
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$913$7(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:914:5
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$AllocationExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:918:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$918$3(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$920$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ArrayDimsAndInits(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:929:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$929$3(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$937$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$Label(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:943:9
        if (!scanToken(IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:943:21
        if (!scanToken(COLON)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$LabeledStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:945:20
        // NonTerminal Label at /Users/bnaudts/git/congo/examples/java/Java.ccc:945:20
        pushOntoLookaheadStack("LabeledStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 945, 20);
        currentLookaheadProduction = "Label";
        try {
            if (!check$Label(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:945:31
        // NonTerminal Statement at /Users/bnaudts/git/congo/examples/java/Java.ccc:945:31
        pushOntoLookaheadStack("LabeledStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 945, 31);
        currentLookaheadProduction = "Statement";
        try {
            if (!check$Statement(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$Statement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:948:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$948$3(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$950$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$952$3(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$954$3(false)) {
                            currentLookaheadToken = token2;
                            remainingLookahead = remainingLookahead2;
                            hitFailure = hitFailure2;
                            if (passedPredicate && !legacyGlitchyLookahead) return false;
                            passedPredicate = false;
                            if (!scanToken(SEMICOLON)) {
                                currentLookaheadToken = token2;
                                remainingLookahead = remainingLookahead2;
                                hitFailure = hitFailure2;
                                if (passedPredicate && !legacyGlitchyLookahead) return false;
                                passedPredicate = false;
                                if (!check$Java_ccc$958$3(false)) {
                                    currentLookaheadToken = token2;
                                    remainingLookahead = remainingLookahead2;
                                    hitFailure = hitFailure2;
                                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                                    passedPredicate = false;
                                    if (!check$Java_ccc$960$3(false)) {
                                        currentLookaheadToken = token2;
                                        remainingLookahead = remainingLookahead2;
                                        hitFailure = hitFailure2;
                                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                                        passedPredicate = false;
                                        if (!check$Java_ccc$962$3(false)) {
                                            currentLookaheadToken = token2;
                                            remainingLookahead = remainingLookahead2;
                                            hitFailure = hitFailure2;
                                            if (passedPredicate && !legacyGlitchyLookahead) return false;
                                            passedPredicate = false;
                                            if (!check$Java_ccc$964$3(false)) {
                                                currentLookaheadToken = token2;
                                                remainingLookahead = remainingLookahead2;
                                                hitFailure = hitFailure2;
                                                if (passedPredicate && !legacyGlitchyLookahead) return false;
                                                passedPredicate = false;
                                                if (!check$Java_ccc$966$3(false)) {
                                                    currentLookaheadToken = token2;
                                                    remainingLookahead = remainingLookahead2;
                                                    hitFailure = hitFailure2;
                                                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                                                    passedPredicate = false;
                                                    if (!check$Java_ccc$968$3(false)) {
                                                        currentLookaheadToken = token2;
                                                        remainingLookahead = remainingLookahead2;
                                                        hitFailure = hitFailure2;
                                                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                                                        passedPredicate = false;
                                                        if (!check$Java_ccc$970$3(false)) {
                                                            currentLookaheadToken = token2;
                                                            remainingLookahead = remainingLookahead2;
                                                            hitFailure = hitFailure2;
                                                            if (passedPredicate && !legacyGlitchyLookahead) return false;
                                                            passedPredicate = false;
                                                            if (!check$Java_ccc$972$3(false)) {
                                                                currentLookaheadToken = token2;
                                                                remainingLookahead = remainingLookahead2;
                                                                hitFailure = hitFailure2;
                                                                if (passedPredicate && !legacyGlitchyLookahead) return false;
                                                                passedPredicate = false;
                                                                if (!check$Java_ccc$974$3(false)) {
                                                                    currentLookaheadToken = token2;
                                                                    remainingLookahead = remainingLookahead2;
                                                                    hitFailure = hitFailure2;
                                                                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                                                                    passedPredicate = false;
                                                                    if (!check$Java_ccc$976$3(false)) {
                                                                        currentLookaheadToken = token2;
                                                                        remainingLookahead = remainingLookahead2;
                                                                        hitFailure = hitFailure2;
                                                                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                                                                        passedPredicate = false;
                                                                        if (!check$Java_ccc$978$3(false)) {
                                                                            currentLookaheadToken = token2;
                                                                            remainingLookahead = remainingLookahead2;
                                                                            hitFailure = hitFailure2;
                                                                            if (passedPredicate && !legacyGlitchyLookahead) return false;
                                                                            passedPredicate = false;
                                                                            if (!check$Java_ccc$980$3(false)) {
                                                                                currentLookaheadToken = token2;
                                                                                remainingLookahead = remainingLookahead2;
                                                                                hitFailure = hitFailure2;
                                                                                return false;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$AssertStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1006:19
        if (!scanToken(_ASSERT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1006:29
        // NonTerminal Expression at /Users/bnaudts/git/congo/examples/java/Java.ccc:1006:29
        pushOntoLookaheadStack("AssertStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1006, 29);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1006:40
        Token token5 = currentLookaheadToken;
        boolean passedPredicate5 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1006$42(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token5;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1006:63
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$Block(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1008:20
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1008:29
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$1008$30(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1008:68
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$BlockStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Assertion specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1011:2
        if (assert$Java_ccc$1011$11()) {
            hitFailure = true;
            return false;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1016:3
        Token token5 = currentLookaheadToken;
        int remainingLookahead5 = remainingLookahead;
        boolean hitFailure5 = hitFailure;
        boolean passedPredicate5 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1016$3(false)) {
                currentLookaheadToken = token5;
                remainingLookahead = remainingLookahead5;
                hitFailure = hitFailure5;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1018$3(false)) {
                    currentLookaheadToken = token5;
                    remainingLookahead = remainingLookahead5;
                    hitFailure = hitFailure5;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1020$3(false)) {
                        currentLookaheadToken = token5;
                        remainingLookahead = remainingLookahead5;
                        hitFailure = hitFailure5;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$1023$3(false)) {
                            currentLookaheadToken = token5;
                            remainingLookahead = remainingLookahead5;
                            hitFailure = hitFailure5;
                            if (passedPredicate && !legacyGlitchyLookahead) return false;
                            passedPredicate = false;
                            if (!check$Java_ccc$1025$3(false)) {
                                currentLookaheadToken = token5;
                                remainingLookahead = remainingLookahead5;
                                hitFailure = hitFailure5;
                                if (passedPredicate && !legacyGlitchyLookahead) return false;
                                passedPredicate = false;
                                if (!check$Java_ccc$1027$3(false)) {
                                    currentLookaheadToken = token5;
                                    remainingLookahead = remainingLookahead5;
                                    hitFailure = hitFailure5;
                                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                                    passedPredicate = false;
                                    if (!check$Java_ccc$1029$3(false)) {
                                        currentLookaheadToken = token5;
                                        remainingLookahead = remainingLookahead5;
                                        hitFailure = hitFailure5;
                                        return false;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$LocalVariableDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1037:6
        Token token4 = currentLookaheadToken;
        int remainingLookahead4 = remainingLookahead;
        boolean hitFailure4 = hitFailure;
        boolean passedPredicate4 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1037$6(false)) {
                currentLookaheadToken = token4;
                remainingLookahead = remainingLookahead4;
                hitFailure = hitFailure4;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1039$6(false)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$NoVarDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1045:4
        // NonTerminal Modifiers at /Users/bnaudts/git/congo/examples/java/Java.ccc:1045:4
        pushOntoLookaheadStack("NoVarDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1045, 4);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1046:4
        // NonTerminal Type at /Users/bnaudts/git/congo/examples/java/Java.ccc:1046:4
        pushOntoLookaheadStack("NoVarDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1046, 4);
        currentLookaheadProduction = "Type";
        try {
            if (!check$Type(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1046:14
        // NonTerminal VariableDeclarator at /Users/bnaudts/git/congo/examples/java/Java.ccc:1046:14
        pushOntoLookaheadStack("NoVarDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1046, 14);
        currentLookaheadProduction = "VariableDeclarator";
        try {
            if (!check$VariableDeclarator(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1046:33
        boolean passedPredicate6 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token7 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$1046$35(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token7;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$VarDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1051:3
        // NonTerminal Modifiers at /Users/bnaudts/git/congo/examples/java/Java.ccc:1051:3
        pushOntoLookaheadStack("VarDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1051, 3);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Assertion specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1052:3
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1055:6
        if (!scanToken(VAR, IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1062:4
        if (!scanToken(UNDERSCORE, IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1063:3
        Token token9 = currentLookaheadToken;
        boolean passedPredicate9 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1063$4(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token9;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate9;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$LocalVariableDeclarationLA(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1068:4
        // NonTerminal Modifiers at /Users/bnaudts/git/congo/examples/java/Java.ccc:1068:4
        pushOntoLookaheadStack("LocalVariableDeclarationLA", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1068, 4);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1070:6
        Token token5 = currentLookaheadToken;
        int remainingLookahead5 = remainingLookahead;
        boolean hitFailure5 = hitFailure;
        boolean passedPredicate5 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1070$6(false)) {
                currentLookaheadToken = token5;
                remainingLookahead = remainingLookahead5;
                hitFailure = hitFailure5;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!scanToken(VAR)) {
                    currentLookaheadToken = token5;
                    remainingLookahead = remainingLookahead5;
                    hitFailure = hitFailure5;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!scanToken(IDENTIFIER)) {
                        currentLookaheadToken = token5;
                        remainingLookahead = remainingLookahead5;
                        hitFailure = hitFailure5;
                        return false;
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1077:5
        if (!scanToken(UNDERSCORE, IDENTIFIER)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$StatementExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1083:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1083$3(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1085$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1087$3(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        return false;
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ExpressionStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1104:23
        // NonTerminal StatementExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:1104:23
        pushOntoLookaheadStack("ExpressionStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1104, 23);
        currentLookaheadProduction = "StatementExpression";
        try {
            if (!check$StatementExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1104:43
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$CasePattern(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1107:5
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1107$5(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1109$5(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$RecordPattern(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1113:5
        // NonTerminal ReferenceType at /Users/bnaudts/git/congo/examples/java/Java.ccc:1113:5
        pushOntoLookaheadStack("RecordPattern", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1113, 5);
        currentLookaheadProduction = "ReferenceType";
        try {
            if (!check$ReferenceType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1114:5
        if (!scanToken(LPAREN)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1115:5
        Token token5 = currentLookaheadToken;
        boolean passedPredicate5 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1116$7(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token5;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1127:5
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$TypePattern(boolean scanToEnd) {
        permissibleModifiers = EnumSet.of(FINAL);
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1133:3
        // NonTerminal Modifiers at /Users/bnaudts/git/congo/examples/java/Java.ccc:1133:3
        pushOntoLookaheadStack("TypePattern", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1133, 3);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1133:13
        // NonTerminal Type at /Users/bnaudts/git/congo/examples/java/Java.ccc:1133:13
        pushOntoLookaheadStack("TypePattern", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1133, 13);
        currentLookaheadProduction = "Type";
        try {
            if (!check$Type(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1133:19
        if (!scanToken(UNDERSCORE, IDENTIFIER)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$WhenClause(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1140:7
        if (!scanToken(WHEN, IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1147:4
        // NonTerminal Expression at /Users/bnaudts/git/congo/examples/java/Java.ccc:1147:4
        pushOntoLookaheadStack("WhenClause", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1147, 4);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$SwitchStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1151:3
        if (!scanToken(SWITCH)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1151:12
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1151:21
        // NonTerminal Expression at /Users/bnaudts/git/congo/examples/java/Java.ccc:1151:21
        pushOntoLookaheadStack("SwitchStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1151, 21);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1151:32
        if (!scanToken(RPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1152:3
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1153:3
        Token token8 = currentLookaheadToken;
        boolean passedPredicate8 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1154$5$(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token8;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate8;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1160:3
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ClassicCaseStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1179:3
        // NonTerminal ClassicSwitchLabel at /Users/bnaudts/git/congo/examples/java/Java.ccc:1179:3
        pushOntoLookaheadStack("ClassicCaseStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1179, 3);
        currentLookaheadProduction = "ClassicSwitchLabel";
        try {
            if (!check$ClassicSwitchLabel(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1180:3
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$1180$4(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$NewSwitchLabel(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1184:3
        // NonTerminal CaseOrDefault at /Users/bnaudts/git/congo/examples/java/Java.ccc:1184:3
        pushOntoLookaheadStack("NewSwitchLabel", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1184, 3);
        currentLookaheadProduction = "CaseOrDefault";
        try {
            if (!check$CaseOrDefault(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1185:3
        if (!scanToken(LAMBDA)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ClassicSwitchLabel(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1189:3
        // NonTerminal CaseOrDefault at /Users/bnaudts/git/congo/examples/java/Java.ccc:1189:3
        pushOntoLookaheadStack("ClassicSwitchLabel", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1189, 3);
        currentLookaheadProduction = "CaseOrDefault";
        try {
            if (!check$CaseOrDefault(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1190:3
        if (!scanToken(COLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$CaseOrDefault(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1195:4
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1195$4(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1197$4(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1199$4(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!scanToken(_DEFAULT)) {
                            currentLookaheadToken = token2;
                            remainingLookahead = remainingLookahead2;
                            hitFailure = hitFailure2;
                            return false;
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$NewCaseStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1205:4
        // NonTerminal NewSwitchLabel at /Users/bnaudts/git/congo/examples/java/Java.ccc:1205:4
        pushOntoLookaheadStack("NewCaseStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1205, 4);
        currentLookaheadProduction = "NewSwitchLabel";
        try {
            if (!check$NewSwitchLabel(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1207:6
        Token token5 = currentLookaheadToken;
        int remainingLookahead5 = remainingLookahead;
        boolean hitFailure5 = hitFailure;
        boolean passedPredicate5 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1207$6(false)) {
                currentLookaheadToken = token5;
                remainingLookahead = remainingLookahead5;
                hitFailure = hitFailure5;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1209$6(false)) {
                    currentLookaheadToken = token5;
                    remainingLookahead = remainingLookahead5;
                    hitFailure = hitFailure5;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1211$6(false)) {
                        currentLookaheadToken = token5;
                        remainingLookahead = remainingLookahead5;
                        hitFailure = hitFailure5;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$1214$6(false)) {
                            currentLookaheadToken = token5;
                            remainingLookahead = remainingLookahead5;
                            hitFailure = hitFailure5;
                            return false;
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$IfStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1220:3
        if (!scanToken(IF)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1220:8
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1220:17
        // NonTerminal Expression at /Users/bnaudts/git/congo/examples/java/Java.ccc:1220:17
        pushOntoLookaheadStack("IfStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1220, 17);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1220:28
        if (!scanToken(RPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1220:37
        // NonTerminal Statement at /Users/bnaudts/git/congo/examples/java/Java.ccc:1220:37
        pushOntoLookaheadStack("IfStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1220, 37);
        currentLookaheadProduction = "Statement";
        try {
            if (!check$Statement(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1220:47
        Token token8 = currentLookaheadToken;
        boolean passedPredicate8 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1220$49(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token8;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate8;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$WhileStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1238:3
        if (!scanToken(WHILE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1238:11
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1238:20
        // NonTerminal Expression at /Users/bnaudts/git/congo/examples/java/Java.ccc:1238:20
        pushOntoLookaheadStack("WhileStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1238, 20);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1238:31
        if (!scanToken(RPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1238:40
        // NonTerminal Statement at /Users/bnaudts/git/congo/examples/java/Java.ccc:1238:40
        pushOntoLookaheadStack("WhileStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1238, 40);
        currentLookaheadProduction = "Statement";
        try {
            if (!check$Statement(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$DoStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1242:3
        if (!scanToken(DO)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1242:8
        // NonTerminal Statement at /Users/bnaudts/git/congo/examples/java/Java.ccc:1242:8
        pushOntoLookaheadStack("DoStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1242, 8);
        currentLookaheadProduction = "Statement";
        try {
            if (!check$Statement(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1242:18
        if (!scanToken(WHILE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1242:26
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1242:35
        // NonTerminal Expression at /Users/bnaudts/git/congo/examples/java/Java.ccc:1242:35
        pushOntoLookaheadStack("DoStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1242, 35);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1242:46
        if (!scanToken(RPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1242:55
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ForStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1246:4
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1246$4(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1248$4(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!scanToken(FOR)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        return false;
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$BasicForStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1254:4
        if (!scanToken(FOR)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1254:10
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1254:19
        Token token5 = currentLookaheadToken;
        boolean passedPredicate5 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1254$20(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token5;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1254:29
        if (!scanToken(SEMICOLON)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1254:46
        Token token8 = currentLookaheadToken;
        boolean passedPredicate8 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1254$47(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token8;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate8;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1254:59
        if (!scanToken(SEMICOLON)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1254:71
        Token token11 = currentLookaheadToken;
        boolean passedPredicate11 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1254$72(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token11;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate11;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1254:97
        if (!scanToken(RPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1254:106
        // NonTerminal Statement at /Users/bnaudts/git/congo/examples/java/Java.ccc:1254:106
        pushOntoLookaheadStack("BasicForStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1254, 106);
        currentLookaheadProduction = "Statement";
        try {
            if (!check$Statement(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$EnhancedForStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1258:4
        if (!scanToken(FOR)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1258:10
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1258:19
        // NonTerminal LocalVariableDeclaration at /Users/bnaudts/git/congo/examples/java/Java.ccc:1258:19
        pushOntoLookaheadStack("EnhancedForStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1258, 19);
        currentLookaheadProduction = "LocalVariableDeclaration";
        try {
            if (!check$LocalVariableDeclaration(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1258:44
        if (!scanToken(COLON)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1258:57
        // NonTerminal Expression at /Users/bnaudts/git/congo/examples/java/Java.ccc:1258:57
        pushOntoLookaheadStack("EnhancedForStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1258, 57);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1258:68
        if (!scanToken(RPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1258:77
        // NonTerminal Statement at /Users/bnaudts/git/congo/examples/java/Java.ccc:1258:77
        pushOntoLookaheadStack("EnhancedForStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1258, 77);
        currentLookaheadProduction = "Statement";
        try {
            if (!check$Statement(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ForInit(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1262:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1262$3(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1264$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$StatementExpressionList(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1268:3
        // NonTerminal StatementExpression at /Users/bnaudts/git/congo/examples/java/Java.ccc:1268:3
        pushOntoLookaheadStack("StatementExpressionList", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1268, 3);
        currentLookaheadProduction = "StatementExpression";
        try {
            if (!check$StatementExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1268:23
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$1268$25(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$BreakStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1272:3
        if (!scanToken(BREAK)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1272:11
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!scanToken(IDENTIFIER)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1272:28
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$YieldStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1278:7
        if (!scanToken(YIELD, IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1285:4
        // NonTerminal Expression at /Users/bnaudts/git/congo/examples/java/Java.ccc:1285:4
        pushOntoLookaheadStack("YieldStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1285, 4);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1286:4
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ContinueStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1289:21
        if (!scanToken(CONTINUE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1289:32
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!scanToken(IDENTIFIER)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1289:49
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ReturnStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1291:19
        if (!scanToken(RETURN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1291:28
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1291$29(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1291:42
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ThrowStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1293:18
        if (!scanToken(THROW)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1293:26
        // NonTerminal Expression at /Users/bnaudts/git/congo/examples/java/Java.ccc:1293:26
        pushOntoLookaheadStack("ThrowStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1293, 26);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1293:37
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$SynchronizedStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1295:25
        if (!scanToken(SYNCHRONIZED)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1295:40
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1295:49
        // NonTerminal Expression at /Users/bnaudts/git/congo/examples/java/Java.ccc:1295:49
        pushOntoLookaheadStack("SynchronizedStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1295, 49);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1295:60
        if (!scanToken(RPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1295:69
        // NonTerminal Block at /Users/bnaudts/git/congo/examples/java/Java.ccc:1295:69
        pushOntoLookaheadStack("SynchronizedStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1295, 69);
        currentLookaheadProduction = "Block";
        try {
            if (!check$Block(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$TryStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1298:3
        if (!scanToken(TRY)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1299:3
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1299$4(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1300:3
        // NonTerminal Block at /Users/bnaudts/git/congo/examples/java/Java.ccc:1300:3
        pushOntoLookaheadStack("TryStatement", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1300, 3);
        currentLookaheadProduction = "Block";
        try {
            if (!check$Block(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Assertion specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1301:3
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1305:3
        boolean passedPredicate8 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token9 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$1305$4(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token9;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate8;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1306:3
        Token token11 = currentLookaheadToken;
        boolean passedPredicate11 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1306$4(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token11;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate11;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ResourcesInTryBlock(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1310:5
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for OneOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1311:5
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1315:10
        Token token7 = currentLookaheadToken;
        int remainingLookahead7 = remainingLookahead;
        boolean hitFailure7 = hitFailure;
        boolean passedPredicate7 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1315$10(false)) {
                currentLookaheadToken = token7;
                remainingLookahead = remainingLookahead7;
                hitFailure = hitFailure7;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1317$10(false)) {
                    currentLookaheadToken = token7;
                    remainingLookahead = remainingLookahead7;
                    hitFailure = hitFailure7;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1319$10(false)) {
                        currentLookaheadToken = token7;
                        remainingLookahead = remainingLookahead7;
                        hitFailure = hitFailure7;
                        return false;
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1322:8
        Token token9 = currentLookaheadToken;
        boolean passedPredicate9 = passedPredicate;
        passedPredicate = false;
        try {
            if (!scanToken(SEMICOLON)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token9;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate9;
        }
        boolean passedPredicate10 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token11 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$1312$7(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token11;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate10;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1324:5
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$CatchBlock(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1328:5
        if (!scanToken(CATCH)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1329:5
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1330:5
        Token token5 = currentLookaheadToken;
        boolean passedPredicate5 = passedPredicate;
        passedPredicate = false;
        try {
            if (!scanToken(FINAL)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token5;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1331:5
        // NonTerminal ObjectType at /Users/bnaudts/git/congo/examples/java/Java.ccc:1331:5
        pushOntoLookaheadStack("CatchBlock", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1331, 5);
        currentLookaheadProduction = "ObjectType";
        try {
            if (!check$ObjectType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1331:16
        boolean passedPredicate8 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token9 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$1331$17(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token9;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate8;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1331:42
        // NonTerminal VariableDeclaratorId at /Users/bnaudts/git/congo/examples/java/Java.ccc:1331:42
        pushOntoLookaheadStack("CatchBlock", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1331, 42);
        currentLookaheadProduction = "VariableDeclaratorId";
        try {
            if (!check$VariableDeclaratorId(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1332:5
        if (!scanToken(RPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1333:5
        // NonTerminal Block at /Users/bnaudts/git/congo/examples/java/Java.ccc:1333:5
        pushOntoLookaheadStack("CatchBlock", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1333, 5);
        currentLookaheadProduction = "Block";
        try {
            if (!check$Block(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$FinallyBlock(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1343:16
        if (!scanToken(FINALLY)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1343:26
        // NonTerminal Block at /Users/bnaudts/git/congo/examples/java/Java.ccc:1343:26
        pushOntoLookaheadStack("FinallyBlock", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1343, 26);
        currentLookaheadProduction = "Block";
        try {
            if (!check$Block(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$Annotation(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1355:4
        Token token4 = currentLookaheadToken;
        int remainingLookahead4 = remainingLookahead;
        boolean hitFailure4 = hitFailure;
        boolean passedPredicate4 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1355$4(false)) {
                currentLookaheadToken = token4;
                remainingLookahead = remainingLookahead4;
                hitFailure = hitFailure4;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1357$4(false)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1359$4(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        return false;
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$NormalAnnotation(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1363:20
        if (!scanToken(AT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1363:25
        // NonTerminal Name at /Users/bnaudts/git/congo/examples/java/Java.ccc:1363:25
        pushOntoLookaheadStack("NormalAnnotation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1363, 25);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1363:30
        if (!scanToken(LPAREN)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 2;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead - 2;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1363:45
        Token token6 = currentLookaheadToken;
        boolean passedPredicate6 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1363$47(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token6;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1363:66
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$MarkerAnnotation(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1365:20
        if (!scanToken(AT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1365:25
        // NonTerminal Name at /Users/bnaudts/git/congo/examples/java/Java.ccc:1365:25
        pushOntoLookaheadStack("MarkerAnnotation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1365, 25);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$SingleMemberAnnotation(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1367:26
        if (!scanToken(AT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1367:31
        // NonTerminal Name at /Users/bnaudts/git/congo/examples/java/Java.ccc:1367:31
        pushOntoLookaheadStack("SingleMemberAnnotation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1367, 31);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1367:36
        if (!scanToken(LPAREN)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1367:50
        // NonTerminal MemberValue at /Users/bnaudts/git/congo/examples/java/Java.ccc:1367:50
        pushOntoLookaheadStack("SingleMemberAnnotation", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1367, 50);
        currentLookaheadProduction = "MemberValue";
        try {
            if (!check$MemberValue(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1367:62
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$MemberValuePairs(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1379:4
        // NonTerminal MemberValuePair at /Users/bnaudts/git/congo/examples/java/Java.ccc:1379:4
        pushOntoLookaheadStack("MemberValuePairs", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1379, 4);
        currentLookaheadProduction = "MemberValuePair";
        try {
            if (!check$MemberValuePair(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1379:20
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$1379$22(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$MemberValuePair(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1382:20
        if (!scanToken(IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1382:33
        if (!scanToken(ASSIGN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1382:42
        // NonTerminal MemberValue at /Users/bnaudts/git/congo/examples/java/Java.ccc:1382:42
        pushOntoLookaheadStack("MemberValuePair", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1382, 42);
        currentLookaheadProduction = "MemberValue";
        try {
            if (!check$MemberValue(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$MemberValue(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1385:4
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1385$4(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1387$4(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1389$4(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        return false;
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$MemberValueArrayInitializer(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1393:3
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1394:3
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1395$6(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1397:3
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$AnnotationTypeDeclaration(boolean scanToEnd) {
        permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE, ABSTRACT, STATIC, STRICTFP);
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1405:3
        // NonTerminal Modifiers at /Users/bnaudts/git/congo/examples/java/Java.ccc:1405:3
        pushOntoLookaheadStack("AnnotationTypeDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1405, 3);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1406:3
        if (!scanToken(AT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1406:8
        if (!scanToken(INTERFACE)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1406:25
        // NonTerminal TypeIdentifier at /Users/bnaudts/git/congo/examples/java/Java.ccc:1406:25
        pushOntoLookaheadStack("AnnotationTypeDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1406, 25);
        currentLookaheadProduction = "TypeIdentifier";
        try {
            if (!check$TypeIdentifier(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1406:40
        // NonTerminal AnnotationTypeBody at /Users/bnaudts/git/congo/examples/java/Java.ccc:1406:40
        pushOntoLookaheadStack("AnnotationTypeDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1406, 40);
        currentLookaheadProduction = "AnnotationTypeBody";
        try {
            if (!check$AnnotationTypeBody(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$AnnotationTypeBody(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1410:3
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1410:12
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$1410$14(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1410:49
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$AnnotationMethodDeclaration(boolean scanToEnd) {
        permissibleModifiers = EnumSet.of(PUBLIC, ABSTRACT);
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1415:4
        // NonTerminal Modifiers at /Users/bnaudts/git/congo/examples/java/Java.ccc:1415:4
        pushOntoLookaheadStack("AnnotationMethodDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1415, 4);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1416:4
        // NonTerminal Type at /Users/bnaudts/git/congo/examples/java/Java.ccc:1416:4
        pushOntoLookaheadStack("AnnotationMethodDeclaration", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1416, 4);
        currentLookaheadProduction = "Type";
        try {
            if (!check$Type(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1416:9
        if (!scanToken(IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1416:22
        if (!scanToken(LPAREN)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1416:36
        if (!scanToken(RPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1416:45
        Token token8 = currentLookaheadToken;
        boolean passedPredicate8 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1416$47(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token8;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate8;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1416:62
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$AnnotationTypeMemberDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1420:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!scanToken(SEMICOLON)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1422$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1424$3(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$1426$3(false)) {
                            currentLookaheadToken = token2;
                            remainingLookahead = remainingLookahead2;
                            hitFailure = hitFailure2;
                            if (passedPredicate && !legacyGlitchyLookahead) return false;
                            passedPredicate = false;
                            if (!check$Java_ccc$1428$3(false)) {
                                currentLookaheadToken = token2;
                                remainingLookahead = remainingLookahead2;
                                hitFailure = hitFailure2;
                                if (passedPredicate && !legacyGlitchyLookahead) return false;
                                passedPredicate = false;
                                if (!check$Java_ccc$1430$3(false)) {
                                    currentLookaheadToken = token2;
                                    remainingLookahead = remainingLookahead2;
                                    hitFailure = hitFailure2;
                                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                                    passedPredicate = false;
                                    if (!check$Java_ccc$1432$3(false)) {
                                        currentLookaheadToken = token2;
                                        remainingLookahead = remainingLookahead2;
                                        hitFailure = hitFailure2;
                                        return false;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$DefaultValue(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1435:16
        if (!scanToken(_DEFAULT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1435:27
        // NonTerminal MemberValue at /Users/bnaudts/git/congo/examples/java/Java.ccc:1435:27
        pushOntoLookaheadStack("DefaultValue", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1435, 27);
        currentLookaheadProduction = "MemberValue";
        try {
            if (!check$MemberValue(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$LambdaExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1439:3
        // NonTerminal LambdaLHS at /Users/bnaudts/git/congo/examples/java/Java.ccc:1439:3
        pushOntoLookaheadStack("LambdaExpression", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1439, 3);
        currentLookaheadProduction = "LambdaLHS";
        try {
            if (!check$LambdaLHS(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1439:19
        Token token5 = currentLookaheadToken;
        int remainingLookahead5 = remainingLookahead;
        boolean hitFailure5 = hitFailure;
        boolean passedPredicate5 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1439$19(false)) {
                currentLookaheadToken = token5;
                remainingLookahead = remainingLookahead5;
                hitFailure = hitFailure5;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1439$27(false)) {
                    currentLookaheadToken = token5;
                    remainingLookahead = remainingLookahead5;
                    hitFailure = hitFailure5;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$LambdaLHS(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1442:14
        Token token4 = currentLookaheadToken;
        int remainingLookahead4 = remainingLookahead;
        boolean hitFailure4 = hitFailure;
        boolean passedPredicate4 = passedPredicate;
        try {
            passedPredicate = false;
            if (!scanToken(IDENTIFIER)) {
                currentLookaheadToken = token4;
                remainingLookahead = remainingLookahead4;
                hitFailure = hitFailure4;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1442$29(false)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1442$47(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        return false;
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1442:65
        if (!scanToken(LAMBDA)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$SimpleLambdaLHS(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1446:4
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1446:14
        if (!scanToken(UNDERSCORE, IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1447:4
        boolean passedPredicate6 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token7 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$1447$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token7;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1448:4
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$LambdaParameters(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1451:20
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1451:29
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1451$31(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1451:78
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$LambdaParameter(boolean scanToEnd) {
        permissibleModifiers = EnumSet.of(FINAL);
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1455:5
        // NonTerminal Modifiers at /Users/bnaudts/git/congo/examples/java/Java.ccc:1455:5
        pushOntoLookaheadStack("LambdaParameter", "/Users/bnaudts/git/congo/examples/java/Java.ccc", 1455, 5);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /Users/bnaudts/git/congo/examples/java/Java.ccc:1457:7
        Token token5 = currentLookaheadToken;
        int remainingLookahead5 = remainingLookahead;
        boolean hitFailure5 = hitFailure;
        boolean passedPredicate5 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1457$7(false)) {
                currentLookaheadToken = token5;
                remainingLookahead = remainingLookahead5;
                hitFailure = hitFailure5;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1459$7(false)) {
                    currentLookaheadToken = token5;
                    remainingLookahead = remainingLookahead5;
                    hitFailure = hitFailure5;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        return true;
    }

    private ArrayList<NonTerminalCall> parsingStack = new ArrayList<>();
    private final ArrayList<NonTerminalCall> lookaheadStack = new ArrayList<>();

    private void pushOntoCallStack(String methodName, String fileName, int line, int column) {
        parsingStack.add(new NonTerminalCall("JavaParser", token_source, fileName, methodName, line, column));
    }

    private void popCallStack() {
        NonTerminalCall ntc = parsingStack.remove(parsingStack.size() - 1);
        this.currentlyParsedProduction = ntc.productionName;
    }

    private void restoreCallStack(int prevSize) {
        while (parsingStack.size() > prevSize) {
            popCallStack();
        }
    }

    private ListIterator<NonTerminalCall> stackIteratorBackward() {
        final ListIterator<NonTerminalCall> parseStackIterator = parsingStack.listIterator(parsingStack.size());
        final ListIterator<NonTerminalCall> lookaheadStackIterator = lookaheadStack.listIterator(lookaheadStack.size());
        return new ListIterator<NonTerminalCall>() {

            public boolean hasNext() {
                return lookaheadStackIterator.hasPrevious() || parseStackIterator.hasPrevious();
            }

            public NonTerminalCall next() {
                return lookaheadStackIterator.hasPrevious() ? lookaheadStackIterator.previous() : parseStackIterator.previous();
            }

            public NonTerminalCall previous() {
                return parseStackIterator.hasNext() ? parseStackIterator.next() : lookaheadStackIterator.next();
            }

            public boolean hasPrevious() {
                return parseStackIterator.hasNext() || lookaheadStackIterator.hasNext();
            }

            public void add(NonTerminalCall ntc) {
                throw new UnsupportedOperationException();
            }

            public void set(NonTerminalCall ntc) {
                throw new UnsupportedOperationException();
            }

            public void remove() {
                throw new UnsupportedOperationException();
            }

            public int previousIndex() {
                throw new UnsupportedOperationException();
            }

            public int nextIndex() {
                throw new UnsupportedOperationException();
            }

        };
    }

    private void pushOntoLookaheadStack(String methodName, String fileName, int line, int column) {
        lookaheadStack.add(new NonTerminalCall("JavaParser", token_source, fileName, methodName, line, column));
    }

    private void popLookaheadStack() {
        NonTerminalCall ntc = lookaheadStack.remove(lookaheadStack.size() - 1);
        this.currentLookaheadProduction = ntc.productionName;
    }

    void dumpLookaheadStack(PrintStream ps) {
        ListIterator<NonTerminalCall> it = lookaheadStack.listIterator(lookaheadStack.size());
        while (it.hasPrevious()) {
            it.previous().dump(ps);
        }
    }

    void dumpCallStack(PrintStream ps) {
        ListIterator<NonTerminalCall> it = parsingStack.listIterator(parsingStack.size());
        while (it.hasPrevious()) {
            it.previous().dump(ps);
        }
    }

    void dumpLookaheadCallStack(PrintStream ps) {
        ps.println("Current Parser Production is: " + currentlyParsedProduction);
        ps.println("Current Lookahead Production is: " + currentLookaheadProduction);
        ps.println("---Lookahead Stack---");
        dumpLookaheadStack(ps);
        ps.println("---Call Stack---");
        dumpCallStack(ps);
    }

    public boolean isParserTolerant() {
        return false;
    }

    public void setParserTolerant(boolean tolerantParsing) {
        if (tolerantParsing) {
            throw new UnsupportedOperationException("This parser was not built with that feature!");
        }
    }

    private Token consumeToken(TokenType expectedType) {
        Token nextToken = nextToken(lastConsumedToken);
        if (nextToken.getType() != expectedType) {
            nextToken = handleUnexpectedTokenType(expectedType, nextToken);
        }
        this.lastConsumedToken = nextToken;
        this.nextTokenType = null;
        if (buildTree && tokensAreNodes) {
            lastConsumedToken.open();
            pushNode(lastConsumedToken);
            lastConsumedToken.close();
        }
        return lastConsumedToken;
    }

    private Token handleUnexpectedTokenType(TokenType expectedType, Token nextToken) {
        throw new ParseException(nextToken, EnumSet.of(expectedType), parsingStack);
    }

    private boolean buildTree = true;
    private boolean tokensAreNodes = true;
    private boolean unparsedTokensAreNodes = false;

    public boolean isTreeBuildingEnabled() {
        return buildTree;
    }

    public void setUnparsedTokensAreNodes(boolean unparsedTokensAreNodes) {
        this.unparsedTokensAreNodes = unparsedTokensAreNodes;
    }

    public void setTokensAreNodes(boolean tokensAreNodes) {
        this.tokensAreNodes = tokensAreNodes;
    }

    NodeScope currentNodeScope = new NodeScope();

    /**
    * @return the root node of the AST. It only makes sense to call
    * this after a successful parse.
    */
    public Node rootNode() {
        return currentNodeScope.rootNode();
    }

    /**
    * push a node onto the top of the node stack
    * @param n the node to push
    */
    public void pushNode(Node n) {
        currentNodeScope.add(n);
    }

    /**
    * @return the node on the top of the stack, and remove it from the
    * stack.
    */
    public Node popNode() {
        return currentNodeScope.pop();
    }

    /**
    * @return the node currently on the top of the tree-building stack.
    */
    public Node peekNode() {
        return currentNodeScope.peek();
    }

    /**
    * Puts the node on the top of the stack. However, unlike pushNode()
    * it replaces the node that is currently on the top of the stack.
    * This is effectively equivalent to popNode() followed by pushNode(n)
    * @param n the node to poke
    */
    public void pokeNode(Node n) {
        currentNodeScope.poke(n);
    }

    /**
    * Replace the type of the last consumed token and poke it onto the
    * stack.
    */
    protected void replaceTokenType(TokenType tt) {
        lastConsumedToken = lastConsumedToken.replaceType(tt);
        pokeNode(lastConsumedToken);
    }

    /**
    * @return the number of Nodes on the tree-building stack in the current node
    * scope.
    */
    public int nodeArity() {
        return currentNodeScope.size();
    }

    private void clearNodeScope() {
        currentNodeScope.clear();
    }

    private void openNodeScope(Node n) {
        new NodeScope();
        if (n != null) {
            n.setTokenSource(lastConsumedToken.getTokenSource());
            // We set the begin/end offsets based on the ending location
            // of the last consumed token. So, we start with a Node
            // of length zero. Typically this is overridden in the
            // closeNodeScope() method, unless this node has no children
            n.setBeginOffset(lastConsumedToken.getEndOffset());
            n.setEndOffset(n.getBeginOffset());
            n.setTokenSource(this.token_source);
            n.open();
        }
    }

    /* A definite node is constructed from a specified number of
    * children.  That number of nodes are popped from the stack and
    * made the children of the definite node.  Then the definite node
    * is pushed on to the stack.
    * @param n is the node whose scope is being closed
    * @param num is the number of child nodes to pop as children
    * @return @{code true}
    */
    private boolean closeNodeScope(Node n, int num) {
        n.setBeginOffset(lastConsumedToken.getEndOffset());
        n.setEndOffset(lastConsumedToken.getEndOffset());
        currentNodeScope.close();
        ArrayList<Node> nodes = new ArrayList<>();
        for (int i = 0; i < num; i++) {
            nodes.add(popNode());
        }
        Collections.reverse(nodes);
        for (Node child : nodes) {
            if (child.getInputSource() == n.getInputSource()) {
                n.setBeginOffset(child.getBeginOffset());
                break;
            }
        }
        for (Node child : nodes) {
            if (unparsedTokensAreNodes && child instanceof Token) {
                Token tok = (Token) child;
                while (tok.previousCachedToken() != null && tok.previousCachedToken().isUnparsed()) {
                    tok = tok.previousCachedToken();
                }
                boolean locationSet = false;
                while (tok.isUnparsed()) {
                    n.add(tok);
                    if (!locationSet && tok.getInputSource() == n.getInputSource() && tok.getBeginOffset() < n.getBeginOffset()) {
                        n.setBeginOffset(tok.getBeginOffset());
                        locationSet = true;
                    }
                    tok = tok.nextCachedToken();
                }
            }
            if (child.getInputSource() == n.getInputSource()) {
                n.setEndOffset(child.getEndOffset());
            }
            n.add(child);
        }
        n.close();
        pushNode(n);
        return true;
    }

    /**
    * A conditional node is constructed if the condition is true.  All
    * the nodes that have been pushed since the node was opened are
    * made children of the conditional node, which is then pushed
    * on to the stack.  If the condition is false the node is not
    * constructed and they are left on the stack.
    */
    private boolean closeNodeScope(Node n, boolean condition) {
        if (n == null || !condition) {
            currentNodeScope.close();
            return false;
        }
        return closeNodeScope(n, nodeArity());
    }

    public boolean getBuildTree() {
        return buildTree;
    }

    public void setBuildTree(boolean buildTree) {
        this.buildTree = buildTree;
    }


    @SuppressWarnings("serial")
    class NodeScope extends ArrayList<Node> {
        NodeScope parentScope;

        NodeScope() {
            this.parentScope = JavaParser.this.currentNodeScope;
            JavaParser.this.currentNodeScope = this;
        }

        boolean isRootScope() {
            return parentScope == null;
        }

        Node rootNode() {
            NodeScope ns = this;
            while (ns.parentScope != null) {
                ns = ns.parentScope;
            }
            return ns.isEmpty() ? null : ns.get(0);
        }

        Node peek() {
            if (isEmpty()) {
                return parentScope == null ? null : parentScope.peek();
            }
            return get(size() - 1);
        }

        Node pop() {
            return isEmpty() ? parentScope.pop() : remove(size() - 1);
        }

        void poke(Node n) {
            if (isEmpty()) {
                parentScope.poke(n);
            } else {
                set(size() - 1, n);
            }
        }

        void close() {
            parentScope.addAll(this);
            JavaParser.this.currentNodeScope = parentScope;
        }

        int nestingLevel() {
            int result = 0;
            NodeScope parent = this;
            while (parent.parentScope != null) {
                result++;
                parent = parent.parentScope;
            }
            return result;
        }

        public NodeScope clone() {
            NodeScope clone = (NodeScope) super.clone();
            if (parentScope != null) {
                clone.parentScope = parentScope.clone();
            }
            return clone;
        }

    }

}


