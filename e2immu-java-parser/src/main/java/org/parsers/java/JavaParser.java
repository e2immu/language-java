/* Generated by: CongoCC Parser Generator. JavaParser.java  */
package org.parsers.java;

import java.io.IOException;
import java.io.PrintStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.charset.Charset;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.ListIterator;
import java.util.concurrent.CancellationException;
import org.parsers.java.Token.TokenType;
import static org.parsers.java.Token.TokenType.*;
import org.parsers.java.ast.ModularCompilationUnit;
import org.parsers.java.ast.ModuleDirective;
import org.parsers.java.ast.RequiresDirective;
import org.parsers.java.ast.ExportsDirective;
import org.parsers.java.ast.OpensDirective;
import org.parsers.java.ast.UsesDirective;
import org.parsers.java.ast.ProvidesDirective;
import org.parsers.java.ast.CompilationUnit;
import org.parsers.java.ast.PackageDeclaration;
import org.parsers.java.ast.ImportDeclaration;
import org.parsers.java.ast.Modifiers;
import org.parsers.java.ast.EmptyDeclaration;
import org.parsers.java.ast.ClassDeclaration;
import org.parsers.java.ast.InterfaceDeclaration;
import org.parsers.java.ast.PermitsList;
import org.parsers.java.ast.ExtendsList;
import org.parsers.java.ast.ImplementsList;
import org.parsers.java.ast.EnumDeclaration;
import org.parsers.java.ast.EnumBody;
import org.parsers.java.ast.RecordDeclaration;
import org.parsers.java.ast.RecordHeader;
import org.parsers.java.ast.RecordComponent;
import org.parsers.java.ast.RecordBody;
import org.parsers.java.ast.CompactConstructorDeclaration;
import org.parsers.java.ast.EnumConstant;
import org.parsers.java.ast.TypeParameters;
import org.parsers.java.ast.TypeParameter;
import org.parsers.java.ast.TypeBound;
import org.parsers.java.ast.ClassOrInterfaceBody;
import org.parsers.java.ast.FieldDeclaration;
import org.parsers.java.ast.VariableDeclarator;
import org.parsers.java.ast.VariableDeclaratorId;
import org.parsers.java.ast.ArrayInitializer;
import org.parsers.java.ast.MethodDeclaration;
import org.parsers.java.ast.FormalParameters;
import org.parsers.java.ast.FormalParameter;
import org.parsers.java.ast.ConstructorDeclaration;
import org.parsers.java.ast.ExplicitConstructorInvocation;
import org.parsers.java.ast.Initializer;
import org.parsers.java.ast.ReferenceType;
import org.parsers.java.ast.ObjectType;
import org.parsers.java.ast.DiamondOperator;
import org.parsers.java.ast.TypeArguments;
import org.parsers.java.ast.TypeArgument;
import org.parsers.java.ast.WildcardBounds;
import org.parsers.java.ast.PrimitiveType;
import org.parsers.java.ast.PrimitiveArrayType;
import org.parsers.java.ast.ReturnType;
import org.parsers.java.ast.Name;
import org.parsers.java.ast.ThrowsList;
import org.parsers.java.ast.Expression;
import org.parsers.java.ast.TernaryExpression;
import org.parsers.java.ast.AssignmentExpression;
import org.parsers.java.ast.ConditionalOrExpression;
import org.parsers.java.ast.ConditionalAndExpression;
import org.parsers.java.ast.InclusiveOrExpression;
import org.parsers.java.ast.ExclusiveOrExpression;
import org.parsers.java.ast.AndExpression;
import org.parsers.java.ast.EqualityExpression;
import org.parsers.java.ast.InstanceOfExpression;
import org.parsers.java.ast.RelationalExpression;
import org.parsers.java.ast.ShiftExpression;
import org.parsers.java.ast.AdditiveExpression;
import org.parsers.java.ast.MultiplicativeExpression;
import org.parsers.java.ast.UnaryExpression;
import org.parsers.java.ast.PreIncrementExpression;
import org.parsers.java.ast.PreDecrementExpression;
import org.parsers.java.ast.UnaryExpressionNotPlusMinus;
import org.parsers.java.ast.PostfixExpression;
import org.parsers.java.ast.SwitchExpression;
import org.parsers.java.ast.CastExpression;
import org.parsers.java.ast.PrimitiveCastExpression;
import org.parsers.java.ast.ObjectCastExpression;
import org.parsers.java.ast.LiteralExpression;
import org.parsers.java.ast.DotThis;
import org.parsers.java.ast.DotSuper;
import org.parsers.java.ast.DotNew;
import org.parsers.java.ast.ArrayAccess;
import org.parsers.java.ast.DotName;
import org.parsers.java.ast.MethodReference;
import org.parsers.java.ast.MethodCall;
import org.parsers.java.ast.Parentheses;
import org.parsers.java.ast.ClassLiteral;
import org.parsers.java.ast.InvocationArguments;
import org.parsers.java.ast.PrimitiveArrayInitialization;
import org.parsers.java.ast.ObjectArrayInitialization;
import org.parsers.java.ast.ObjectInstantiation;
import org.parsers.java.ast.ArrayDimsAndInits;
import org.parsers.java.ast.Label;
import org.parsers.java.ast.LabeledStatement;
import org.parsers.java.ast.AssertStatement;
import org.parsers.java.ast.CodeBlock;
import org.parsers.java.ast.LocalVariableDeclaration;
import org.parsers.java.ast.EmptyStatement;
import org.parsers.java.ast.StatementExpression;
import org.parsers.java.ast.ExpressionStatement;
import org.parsers.java.ast.CasePattern;
import org.parsers.java.ast.RecordPattern;
import org.parsers.java.ast.TypePattern;
import org.parsers.java.ast.WhenClause;
import org.parsers.java.ast.SwitchStatement;
import org.parsers.java.ast.ClassicCaseStatement;
import org.parsers.java.ast.NewSwitchLabel;
import org.parsers.java.ast.ClassicSwitchLabel;
import org.parsers.java.ast.NewCaseStatement;
import org.parsers.java.ast.IfStatement;
import org.parsers.java.ast.WhileStatement;
import org.parsers.java.ast.DoStatement;
import org.parsers.java.ast.BasicForStatement;
import org.parsers.java.ast.EnhancedForStatement;
import org.parsers.java.ast.BreakStatement;
import org.parsers.java.ast.YieldStatement;
import org.parsers.java.ast.ContinueStatement;
import org.parsers.java.ast.ReturnStatement;
import org.parsers.java.ast.ThrowStatement;
import org.parsers.java.ast.SynchronizedStatement;
import org.parsers.java.ast.TryStatement;
import org.parsers.java.ast.ResourcesInTryBlock;
import org.parsers.java.ast.CatchBlock;
import org.parsers.java.ast.FinallyBlock;
import org.parsers.java.ast.NormalAnnotation;
import org.parsers.java.ast.MarkerAnnotation;
import org.parsers.java.ast.SingleMemberAnnotation;
import org.parsers.java.ast.MemberValuePairs;
import org.parsers.java.ast.MemberValuePair;
import org.parsers.java.ast.MemberValue;
import org.parsers.java.ast.MemberValueArrayInitializer;
import org.parsers.java.ast.AnnotationTypeDeclaration;
import org.parsers.java.ast.AnnotationTypeBody;
import org.parsers.java.ast.AnnotationMethodDeclaration;
import org.parsers.java.ast.AnnotationTypeMemberDeclaration;
import org.parsers.java.ast.DefaultValue;
import org.parsers.java.ast.LambdaExpression;
import org.parsers.java.ast.LambdaLHS;
import org.parsers.java.ast.LambdaParameters;
import org.parsers.java.ast.LambdaParameter;


public class JavaParser {
    // Used to hold the set of modifiers that is permissible
    // at a given point in the parse. If this is null,
    // we are in some permissive mode where we accept any
    // modifiers.
    private EnumSet<TokenType> permissibleModifiers;
    static final int UNLIMITED = Integer.MAX_VALUE;
    private final Token DUMMY_START_TOKEN = new Token();
    // The last token successfully "consumed"
    Token lastConsumedToken = DUMMY_START_TOKEN;
    private TokenType nextTokenType;
    // Normally null when parsing, populated when doing lookahead
    private Token currentLookaheadToken;
    private int remainingLookahead;
    private boolean hitFailure;
    private boolean passedPredicate;
    private int passedPredicateThreshold = -1;
    private String currentlyParsedProduction;
    private String currentLookaheadProduction;
    private int lookaheadRoutineNesting;
    private boolean cancelled;

    public void cancel() {
        cancelled = true;
    }

    public boolean isCancelled() {
        return cancelled;
    }

    public boolean getLegacyGlitchyLookahead() {
        return false;
    }

    /** Generated Lexer. */
    private JavaLexer token_source;

    public void setInputSource(String inputSource) {
        token_source.setInputSource(inputSource);
    }

    String getInputSource() {
        return token_source.getInputSource();
    }

    //=================================
    // Generated constructors
    //=================================
    public JavaParser(String inputSource, CharSequence content) {
        this(new JavaLexer(inputSource, content));
    }

    public JavaParser(CharSequence content) {
        this("input", content);
    }

    /**
    * @param inputSource just the name of the input source (typically the filename) that
    * will be used in error messages and so on.
    * @param path The location (typically the filename) from which to get the input to parse
    */
    public JavaParser(String inputSource, Path path) throws IOException {
        this(inputSource, TokenSource.stringFromBytes(Files.readAllBytes(path)));
    }

    public JavaParser(String inputSource, Path path, Charset charset) throws IOException {
        this(inputSource, TokenSource.stringFromBytes(Files.readAllBytes(path), charset));
    }

    /**
    * @param path The location (typically the filename) from which to get the input to parse
    */
    public JavaParser(Path path) throws IOException {
        this(path.toString(), path);
    }

    /** Constructor with user supplied Lexer. */
    public JavaParser(JavaLexer lexer) {
        token_source = lexer;
        lastConsumedToken.setTokenSource(lexer);
    }

    /**
    * Set the starting line/column for location reporting.
    * By default, this is 1,1.
    */
    public void setStartingPos(int startingLine, int startingColumn) {
        token_source.setStartingPos(startingLine, startingColumn);
    }

    // If the next token is cached, it returns that
    // Otherwise, it goes to the token_source, i.e. the Lexer.
    private Token nextToken(final Token tok) {
        Token result = token_source.getNextToken(tok);
        while (result.isUnparsed()) {
            result = token_source.getNextToken(result);
        }
        nextTokenType = null;
        return result;
    }

    /**
    * @return the next Token off the stream. This is the same as #getToken(1)
    */
    public final Token getNextToken() {
        return getToken(1);
    }

    /**
    * @param index how many tokens to look ahead
    * @return the specific regular (i.e. parsed) Token index ahead/behind in the stream.
    * If we are in a lookahead, it looks ahead from the currentLookaheadToken
    * Otherwise, it is the lastConsumedToken. If you pass in a negative
    * number it goes backward.
    */
    public final Token getToken(final int index) {
        Token t = currentLookaheadToken == null ? lastConsumedToken : currentLookaheadToken;
        for (int i = 0; i < index; i++) {
            t = nextToken(t);
        }
        for (int i = 0; i > index; i--) {
            t = t.getPrevious();
            if (t == null) break;
        }
        return t;
    }

    private String tokenImage(int n) {
        Token t = getToken(n);
        return t == null ? null : t.toString();
    }

    private TokenType getTokenType(int n) {
        Token t = getToken(n);
        return t == null ? null : t.getType();
    }

    boolean activateTokenTypes(TokenType...types) {
        if (token_source.activeTokenTypes == null) return false;
        boolean result = false;
        for (TokenType tt : types) {
            result |= token_source.activeTokenTypes.add(tt);
        }
        if (result) {
            token_source.reset(getToken(0));
            nextTokenType = null;
        }
        return result;
    }

    private void uncacheTokens() {
        token_source.reset(getToken(0));
    }

    boolean deactivateTokenTypes(TokenType...types) {
        boolean result = false;
        if (token_source.activeTokenTypes == null) {
            token_source.activeTokenTypes = EnumSet.allOf(TokenType.class);
        }
        for (TokenType tt : types) {
            result |= token_source.activeTokenTypes.remove(tt);
        }
        if (result) {
            token_source.reset(getToken(0));
            nextTokenType = null;
        }
        return result;
    }

    /*
    * This method generalizes the failure of an assertion, i.e. the routine
    * works both when in lookahead and in parsing. If the current lookahead
    * token is null, then we are not in a lookahead, i.e. we are parsing, so
    * it just throws the exception. If we are in a lookahead routine, we set
    * the hitFailure flag to true, so that the lookahead routine we're in will
    * fail at the first opportunity.
    */
    private void fail(String message, Node location) {
        if (currentLookaheadToken == null) {
            if (message == null) message = "";
            throw new ParseException(message, location, parsingStack);
        }
        hitFailure = true;
    }

    private static final HashMap<TokenType[], EnumSet<TokenType>> enumSetCache = new HashMap<>();

    private static EnumSet<TokenType> tokenTypeSet(TokenType first, TokenType...rest) {
        TokenType[] key = new TokenType[1 + rest.length];
        key[0] = first;
        if (rest.length > 0) {
            System.arraycopy(rest, 0, key, 1, rest.length);
        }
        Arrays.sort(key);
        if (enumSetCache.containsKey(key)) {
            return enumSetCache.get(key);
        }
        EnumSet<TokenType> result = (rest.length == 0) ? EnumSet.of(first) : EnumSet.of(first, rest);
        enumSetCache.put(key, result);
        return result;
    }

    /**
    * Are we in the production of the given name, either scanning ahead or parsing?
    */
    private boolean isInProduction(String productionName, String...prods) {
        if (currentlyParsedProduction != null) {
            if (currentlyParsedProduction.equals(productionName)) return true;
            for (String name : prods) {
                if (currentlyParsedProduction.equals(name)) return true;
            }
        }
        if (currentLookaheadProduction != null) {
            if (currentLookaheadProduction.equals(productionName)) return true;
            for (String name : prods) {
                if (currentLookaheadProduction.equals(name)) return true;
            }
        }
        Iterator<NonTerminalCall> it = stackIteratorBackward();
        while (it.hasNext()) {
            NonTerminalCall ntc = it.next();
            if (ntc.productionName.equals(productionName)) {
                return true;
            }
            for (String name : prods) {
                if (ntc.productionName.equals(name)) {
                    return true;
                }
            }
        }
        return false;
    }

    // Java.ccc:31:1
    final public Node Root() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Root";
        // Code for BNFProduction specified at Java.ccc:31:1
        // Code for ExpansionChoice specified at Java.ccc:32:4
        if (scan$Java_ccc$32$4()) {
            // Code for NonTerminal specified at Java.ccc:32:4
            pushOntoCallStack("Root", "Java.ccc", 32, 4);
            try {
                ModularCompilationUnit();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at Java.ccc:32:27
            return peekNode();
        } else {
            // Code for NonTerminal specified at Java.ccc:34:4
            pushOntoCallStack("Root", "Java.ccc", 34, 4);
            try {
                CompilationUnit();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at Java.ccc:34:20
            return peekNode();
        }
    }

    // Java.ccc:37:1
    final public void ModularCompilationUnit() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ModularCompilationUnit";
        // Code for BNFProduction specified at Java.ccc:37:1
        ModularCompilationUnit thisProduction = null;
        if (buildTree) {
            thisProduction = new ModularCompilationUnit();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ZeroOrMore specified at Java.ccc:38:4
            while (true) {
                if (!(typeMatches(_IMPORT, getToken(1)))) break;
                // Code for NonTerminal specified at Java.ccc:38:5
                pushOntoCallStack("ModularCompilationUnit", "Java.ccc", 38, 5);
                try {
                    ImportDeclaration();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrMore specified at Java.ccc:39:4
            while (true) {
                if (!(scan$Java_ccc$39$5())) break;
                // Code for NonTerminal specified at Java.ccc:39:5
                pushOntoCallStack("ModularCompilationUnit", "Java.ccc", 39, 5);
                try {
                    Annotation();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Java.ccc:40:4
            if (typeMatches(OPEN, getToken(1))) {
                // Code for Terminal specified at Java.ccc:40:5
                pushOntoCallStack("ModularCompilationUnit", "Java.ccc", 40, 5);
                try {
                    consumeToken(OPEN);
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:41:4
            pushOntoCallStack("ModularCompilationUnit", "Java.ccc", 41, 4);
            try {
                consumeToken(MODULE);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:43:4
            pushOntoCallStack("ModularCompilationUnit", "Java.ccc", 43, 4);
            try {
                Name();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:44:4
            pushOntoCallStack("ModularCompilationUnit", "Java.ccc", 44, 4);
            try {
                consumeToken(LBRACE);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:45:4
            while (true) {
                if (!(scan$Java_ccc$45$5())) break;
                // Code for NonTerminal specified at Java.ccc:45:25
                pushOntoCallStack("ModularCompilationUnit", "Java.ccc", 45, 25);
                try {
                    ModuleDirective();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:46:4
            pushOntoCallStack("ModularCompilationUnit", "Java.ccc", 46, 4);
            try {
                consumeToken(RBRACE);
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:47:4
            pushOntoCallStack("ModularCompilationUnit", "Java.ccc", 47, 4);
            try {
                consumeToken(EOF);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> ModuleDirective_FIRST_SET = tokenTypeSet(REQUIRES, EXPORTS, OPENS, USES, PROVIDES);

    // Java.ccc:50:1
    final public void ModuleDirective() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ModuleDirective";
        // Code for BNFProduction specified at Java.ccc:50:1
        ModuleDirective thisProduction = null;
        if (buildTree) {
            thisProduction = new ModuleDirective();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at Java.ccc:51:4
            if (typeMatches(REQUIRES, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:51:4
                pushOntoCallStack("ModuleDirective", "Java.ccc", 51, 4);
                try {
                    RequiresDirective();
                } finally {
                    popCallStack();
                }
            } else if (typeMatches(EXPORTS, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:53:4
                pushOntoCallStack("ModuleDirective", "Java.ccc", 53, 4);
                try {
                    ExportsDirective();
                } finally {
                    popCallStack();
                }
            } else if (typeMatches(OPENS, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:55:4
                pushOntoCallStack("ModuleDirective", "Java.ccc", 55, 4);
                try {
                    OpensDirective();
                } finally {
                    popCallStack();
                }
            } else if (typeMatches(USES, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:57:4
                pushOntoCallStack("ModuleDirective", "Java.ccc", 57, 4);
                try {
                    UsesDirective();
                } finally {
                    popCallStack();
                }
            } else if (typeMatches(PROVIDES, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:59:4
                pushOntoCallStack("ModuleDirective", "Java.ccc", 59, 4);
                try {
                    ProvidesDirective();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("ModuleDirective", "Java.ccc", 51, 4);
                throw new ParseException(getToken(1), ModuleDirective_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:62:1
    final public void RequiresDirective() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "RequiresDirective";
        // Code for BNFProduction specified at Java.ccc:62:1
        RequiresDirective thisProduction = null;
        if (buildTree) {
            thisProduction = new RequiresDirective();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:63:4
            pushOntoCallStack("RequiresDirective", "Java.ccc", 63, 4);
            try {
                consumeToken(REQUIRES);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:64:4
            while (true) {
                // Code for ExpansionChoice specified at Java.ccc:64:5
                if (typeMatches(TRANSITIVE, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:64:5
                    pushOntoCallStack("RequiresDirective", "Java.ccc", 64, 5);
                    try {
                        consumeToken(TRANSITIVE);
                    } finally {
                        popCallStack();
                    }
                } else if (typeMatches(STATIC, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:64:18
                    pushOntoCallStack("RequiresDirective", "Java.ccc", 64, 18);
                    try {
                        consumeToken(STATIC);
                    } finally {
                        popCallStack();
                    }
                } else {
                    break;
                }
            }
            // Code for NonTerminal specified at Java.ccc:65:4
            pushOntoCallStack("RequiresDirective", "Java.ccc", 65, 4);
            try {
                Name();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:66:4
            pushOntoCallStack("RequiresDirective", "Java.ccc", 66, 4);
            try {
                consumeToken(SEMICOLON);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:69:1
    final public void ExportsDirective() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ExportsDirective";
        // Code for BNFProduction specified at Java.ccc:69:1
        ExportsDirective thisProduction = null;
        if (buildTree) {
            thisProduction = new ExportsDirective();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:70:4
            pushOntoCallStack("ExportsDirective", "Java.ccc", 70, 4);
            try {
                consumeToken(EXPORTS);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:71:4
            pushOntoCallStack("ExportsDirective", "Java.ccc", 71, 4);
            try {
                Name();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:72:4
            if (typeMatches(TO, getToken(1))) {
                // Code for Terminal specified at Java.ccc:73:6
                pushOntoCallStack("ExportsDirective", "Java.ccc", 73, 6);
                try {
                    consumeToken(TO);
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Java.ccc:74:6
                pushOntoCallStack("ExportsDirective", "Java.ccc", 74, 6);
                try {
                    Name();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at Java.ccc:74:11
                while (true) {
                    if (!(typeMatches(COMMA, getToken(1)))) break;
                    // Code for Terminal specified at Java.ccc:74:12
                    pushOntoCallStack("ExportsDirective", "Java.ccc", 74, 12);
                    try {
                        consumeToken(COMMA);
                    } finally {
                        popCallStack();
                    }
                    // Code for NonTerminal specified at Java.ccc:74:20
                    pushOntoCallStack("ExportsDirective", "Java.ccc", 74, 20);
                    try {
                        Name();
                    } finally {
                        popCallStack();
                    }
                }
            }
            // Code for Terminal specified at Java.ccc:76:4
            pushOntoCallStack("ExportsDirective", "Java.ccc", 76, 4);
            try {
                consumeToken(SEMICOLON);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:79:1
    final public void OpensDirective() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "OpensDirective";
        // Code for BNFProduction specified at Java.ccc:79:1
        OpensDirective thisProduction = null;
        if (buildTree) {
            thisProduction = new OpensDirective();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:80:4
            pushOntoCallStack("OpensDirective", "Java.ccc", 80, 4);
            try {
                consumeToken(OPENS);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:81:4
            pushOntoCallStack("OpensDirective", "Java.ccc", 81, 4);
            try {
                Name();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:82:4
            if (typeMatches(TO, getToken(1))) {
                // Code for Terminal specified at Java.ccc:83:6
                pushOntoCallStack("OpensDirective", "Java.ccc", 83, 6);
                try {
                    consumeToken(TO);
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Java.ccc:84:6
                pushOntoCallStack("OpensDirective", "Java.ccc", 84, 6);
                try {
                    Name();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at Java.ccc:84:11
                while (true) {
                    if (!(typeMatches(COMMA, getToken(1)))) break;
                    // Code for Terminal specified at Java.ccc:84:12
                    pushOntoCallStack("OpensDirective", "Java.ccc", 84, 12);
                    try {
                        consumeToken(COMMA);
                    } finally {
                        popCallStack();
                    }
                    // Code for NonTerminal specified at Java.ccc:84:20
                    pushOntoCallStack("OpensDirective", "Java.ccc", 84, 20);
                    try {
                        Name();
                    } finally {
                        popCallStack();
                    }
                }
            }
            // Code for Terminal specified at Java.ccc:86:4
            pushOntoCallStack("OpensDirective", "Java.ccc", 86, 4);
            try {
                consumeToken(SEMICOLON);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:89:1
    final public void UsesDirective() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "UsesDirective";
        // Code for BNFProduction specified at Java.ccc:89:1
        UsesDirective thisProduction = null;
        if (buildTree) {
            thisProduction = new UsesDirective();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:90:5
            pushOntoCallStack("UsesDirective", "Java.ccc", 90, 5);
            try {
                consumeToken(USES);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:91:5
            pushOntoCallStack("UsesDirective", "Java.ccc", 91, 5);
            try {
                Name();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:92:5
            pushOntoCallStack("UsesDirective", "Java.ccc", 92, 5);
            try {
                consumeToken(SEMICOLON);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:95:1
    final public void ProvidesDirective() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ProvidesDirective";
        // Code for BNFProduction specified at Java.ccc:95:1
        ProvidesDirective thisProduction = null;
        if (buildTree) {
            thisProduction = new ProvidesDirective();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:96:5
            pushOntoCallStack("ProvidesDirective", "Java.ccc", 96, 5);
            try {
                consumeToken(PROVIDES);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:97:5
            pushOntoCallStack("ProvidesDirective", "Java.ccc", 97, 5);
            try {
                Name();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:98:5
            pushOntoCallStack("ProvidesDirective", "Java.ccc", 98, 5);
            try {
                consumeToken(WITH);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:99:5
            pushOntoCallStack("ProvidesDirective", "Java.ccc", 99, 5);
            try {
                Name();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:100:5
            while (true) {
                if (!(typeMatches(COMMA, getToken(1)))) break;
                // Code for Terminal specified at Java.ccc:100:6
                pushOntoCallStack("ProvidesDirective", "Java.ccc", 100, 6);
                try {
                    consumeToken(COMMA);
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Java.ccc:100:14
                pushOntoCallStack("ProvidesDirective", "Java.ccc", 100, 14);
                try {
                    Name();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:101:5
            pushOntoCallStack("ProvidesDirective", "Java.ccc", 101, 5);
            try {
                consumeToken(SEMICOLON);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:104:1
    final public CompilationUnit CompilationUnit() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "CompilationUnit";
        // Code for BNFProduction specified at Java.ccc:104:1
        CompilationUnit thisProduction = null;
        if (buildTree) {
            thisProduction = new CompilationUnit();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ZeroOrOne specified at Java.ccc:105:3
            if (scan$Java_ccc$105$5()) {
                // Code for NonTerminal specified at Java.ccc:105:5
                pushOntoCallStack("CompilationUnit", "Java.ccc", 105, 5);
                try {
                    PackageDeclaration();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrMore specified at Java.ccc:106:3
            while (true) {
                if (!(typeMatches(_IMPORT, getToken(1)))) break;
                // Code for NonTerminal specified at Java.ccc:106:5
                pushOntoCallStack("CompilationUnit", "Java.ccc", 106, 5);
                try {
                    ImportDeclaration();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrMore specified at Java.ccc:107:3
            while (true) {
                if (!(scan$Java_ccc$107$5())) break;
                // Code for NonTerminal specified at Java.ccc:107:5
                pushOntoCallStack("CompilationUnit", "Java.ccc", 107, 5);
                try {
                    TypeDeclaration();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Java.ccc:108:3
            if (scan$Java_ccc$110$5()) {
                // Code for Assertion specified at Java.ccc:110:5
                // Code for Terminal specified at Java.ccc:111:5
                pushOntoCallStack("CompilationUnit", "Java.ccc", 111, 5);
                try {
                    consumeToken(EOF);
                } finally {
                    popCallStack();
                }
            }
            // Code for CodeBlock specified at Java.ccc:113:3
            return thisProduction;
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:125:1
    final public void PackageDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "PackageDeclaration";
        // Code for BNFProduction specified at Java.ccc:125:1
        PackageDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new PackageDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ZeroOrMore specified at Java.ccc:126:5
            while (true) {
                if (!(scan$Java_ccc$126$6())) break;
                // Code for NonTerminal specified at Java.ccc:126:6
                pushOntoCallStack("PackageDeclaration", "Java.ccc", 126, 6);
                try {
                    Annotation();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:127:5
            pushOntoCallStack("PackageDeclaration", "Java.ccc", 127, 5);
            try {
                consumeToken(PACKAGE);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:129:5
            pushOntoCallStack("PackageDeclaration", "Java.ccc", 129, 5);
            try {
                Name();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:130:5
            pushOntoCallStack("PackageDeclaration", "Java.ccc", 130, 5);
            try {
                consumeToken(SEMICOLON);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:140:1
    final public void ImportDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ImportDeclaration";
        // Code for BNFProduction specified at Java.ccc:140:1
        ImportDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new ImportDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:140:21
            pushOntoCallStack("ImportDeclaration", "Java.ccc", 140, 21);
            try {
                consumeToken(_IMPORT);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:140:31
            // Code for ExpansionChoice specified at Java.ccc:140:33
            if (typeMatches(STATIC, getToken(1))) {
                // Code for Terminal specified at Java.ccc:140:33
                pushOntoCallStack("ImportDeclaration", "Java.ccc", 140, 33);
                try {
                    consumeToken(STATIC);
                } finally {
                    popCallStack();
                }
            } else if (typeMatches(MODULE, getToken(1))) {
                // Code for Terminal specified at Java.ccc:140:44
                pushOntoCallStack("ImportDeclaration", "Java.ccc", 140, 44);
                try {
                    consumeToken(MODULE);
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at Java.ccc:140:55
            pushOntoCallStack("ImportDeclaration", "Java.ccc", 140, 55);
            try {
                Name();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:140:60
            if (typeMatches(DOT, getToken(1))) {
                // Code for Terminal specified at Java.ccc:140:62
                pushOntoCallStack("ImportDeclaration", "Java.ccc", 140, 62);
                try {
                    consumeToken(DOT);
                } finally {
                    popCallStack();
                }
                // Code for Terminal specified at Java.ccc:140:68
                pushOntoCallStack("ImportDeclaration", "Java.ccc", 140, 68);
                try {
                    consumeToken(STAR);
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:140:77
            pushOntoCallStack("ImportDeclaration", "Java.ccc", 140, 77);
            try {
                consumeToken(SEMICOLON);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:142:1
    final public void Modifiers() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Modifiers";
        // Code for BNFProduction specified at Java.ccc:142:1
        Modifiers thisProduction = null;
        if (buildTree) {
            thisProduction = new Modifiers();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ZeroOrMore specified at Java.ccc:143:2
            while (true) {
                // Code for ExpansionChoice specified at Java.ccc:144:3
                if (scan$Java_ccc$144$3()) {
                    // Code for NonTerminal specified at Java.ccc:144:3
                    pushOntoCallStack("Modifiers", "Java.ccc", 144, 3);
                    try {
                        Annotation();
                    } finally {
                        popCallStack();
                    }
                } else if (hasMatch(first_set$Java_ccc$146$3, getToken(1))) {
                    if (typeMatches(PUBLIC, getToken(1))) {
                        // Code for Terminal specified at Java.ccc:147:4
                        pushOntoCallStack("Modifiers", "Java.ccc", 147, 4);
                        try {
                            consumeToken(PUBLIC);
                        } finally {
                            popCallStack();
                        }
                    } else if (typeMatches(STATIC, getToken(1))) {
                        // Code for Terminal specified at Java.ccc:147:13
                        pushOntoCallStack("Modifiers", "Java.ccc", 147, 13);
                        try {
                            consumeToken(STATIC);
                        } finally {
                            popCallStack();
                        }
                    } else if (typeMatches(PROTECTED, getToken(1))) {
                        // Code for Terminal specified at Java.ccc:147:22
                        pushOntoCallStack("Modifiers", "Java.ccc", 147, 22);
                        try {
                            consumeToken(PROTECTED);
                        } finally {
                            popCallStack();
                        }
                    } else if (typeMatches(PRIVATE, getToken(1))) {
                        // Code for Terminal specified at Java.ccc:147:34
                        pushOntoCallStack("Modifiers", "Java.ccc", 147, 34);
                        try {
                            consumeToken(PRIVATE);
                        } finally {
                            popCallStack();
                        }
                    } else if (typeMatches(FINAL, getToken(1))) {
                        // Code for Terminal specified at Java.ccc:147:45
                        pushOntoCallStack("Modifiers", "Java.ccc", 147, 45);
                        try {
                            consumeToken(FINAL);
                        } finally {
                            popCallStack();
                        }
                    } else if (typeMatches(ABSTRACT, getToken(1))) {
                        // Code for Terminal specified at Java.ccc:147:53
                        pushOntoCallStack("Modifiers", "Java.ccc", 147, 53);
                        try {
                            consumeToken(ABSTRACT);
                        } finally {
                            popCallStack();
                        }
                    } else if (typeMatches(SYNCHRONIZED, getToken(1))) {
                        // Code for Terminal specified at Java.ccc:148:5
                        pushOntoCallStack("Modifiers", "Java.ccc", 148, 5);
                        try {
                            consumeToken(SYNCHRONIZED);
                        } finally {
                            popCallStack();
                        }
                    } else if (typeMatches(NATIVE, getToken(1))) {
                        // Code for Terminal specified at Java.ccc:148:20
                        pushOntoCallStack("Modifiers", "Java.ccc", 148, 20);
                        try {
                            consumeToken(NATIVE);
                        } finally {
                            popCallStack();
                        }
                    } else if (typeMatches(TRANSIENT, getToken(1))) {
                        // Code for Terminal specified at Java.ccc:148:29
                        pushOntoCallStack("Modifiers", "Java.ccc", 148, 29);
                        try {
                            consumeToken(TRANSIENT);
                        } finally {
                            popCallStack();
                        }
                    } else if (typeMatches(VOLATILE, getToken(1))) {
                        // Code for Terminal specified at Java.ccc:148:41
                        pushOntoCallStack("Modifiers", "Java.ccc", 148, 41);
                        try {
                            consumeToken(VOLATILE);
                        } finally {
                            popCallStack();
                        }
                    } else if (typeMatches(STRICTFP, getToken(1))) {
                        // Code for Terminal specified at Java.ccc:148:52
                        pushOntoCallStack("Modifiers", "Java.ccc", 148, 52);
                        try {
                            consumeToken(STRICTFP);
                        } finally {
                            popCallStack();
                        }
                    } else if (typeMatches(_DEFAULT, getToken(1))) {
                        // Code for Terminal specified at Java.ccc:148:64
                        pushOntoCallStack("Modifiers", "Java.ccc", 148, 64);
                        try {
                            consumeToken(_DEFAULT);
                        } finally {
                            popCallStack();
                        }
                    } else if (typeMatches(SEALED, getToken(1))) {
                        // Code for Terminal specified at Java.ccc:149:5
                        pushOntoCallStack("Modifiers", "Java.ccc", 149, 5);
                        try {
                            consumeToken(SEALED);
                        } finally {
                            popCallStack();
                        }
                    } else if (typeMatches(NON_SEALED, getToken(1))) {
                        // Code for Terminal specified at Java.ccc:149:14
                        pushOntoCallStack("Modifiers", "Java.ccc", 149, 14);
                        try {
                            consumeToken(NON_SEALED);
                        } finally {
                            popCallStack();
                        }
                    } else {
                        pushOntoCallStack("Modifiers", "Java.ccc", 147, 4);
                        throw new ParseException(getToken(1), first_set$Java_ccc$147$4, parsingStack);
                    }
                    // Code for Assertion specified at Java.ccc:154:3
                    if (!(permissibleModifiers == null || hasMatch(permissibleModifiers, lastConsumedToken))) {
                        pushOntoCallStack("Modifiers", "Java.ccc", 154, 3);
                        fail("Assertion at: Java.ccc:154:3 failed. " + "Modifier " + lastConsumedToken + " not permitted here.", lastConsumedToken);
                    }
                    // Code for CodeBlock specified at Java.ccc:158:3
                    if (permissibleModifiers != null) {
                        TokenType tt = getTokenType(0);
                        switch(tt) {
                            case ABSTRACT : 
                            case FINAL : 
                                permissibleModifiers.remove(ABSTRACT);
                                permissibleModifiers.remove(FINAL);
                                break;
                            case PRIVATE : 
                            case PROTECTED : 
                            case PUBLIC : 
                                permissibleModifiers.remove(PRIVATE);
                                permissibleModifiers.remove(PROTECTED);
                                permissibleModifiers.remove(PUBLIC);
                                break;
                            case SEALED : 
                            case NON_SEALED : 
                                permissibleModifiers.remove(SEALED);
                                permissibleModifiers.remove(NON_SEALED);
                                break;
                            default : 
                                permissibleModifiers.remove(lastConsumedToken.getType());
                        }
                    }
                } else if (scan$Java_ccc$189$3()) {
                    // Code for Assertion specified at Java.ccc:189:3
                    EnumSet<TokenType> previousActives159 = EnumSet.copyOf(token_source.activeTokenTypes);
                    boolean somethingChanged160 = false;
                    somethingChanged160 = activateTokenTypes(NON_SEALED);
                    try {
                        // Code for Terminal specified at Java.ccc:193:32
                        pushOntoCallStack("Modifiers", "Java.ccc", 193, 32);
                        try {
                            consumeToken(NON_SEALED);
                        } finally {
                            popCallStack();
                        }
                    } finally {
                        token_source.activeTokenTypes = previousActives159;
                        if (somethingChanged160) {
                            token_source.reset(lastConsumedToken);
                            nextTokenType = null;
                        }
                    }
                    // Code for Assertion specified at Java.ccc:195:4
                    if (!(permissibleModifiers == null || permissibleModifiers.contains(NON_SEALED))) {
                        pushOntoCallStack("Modifiers", "Java.ccc", 195, 4);
                        fail("Assertion at: Java.ccc:195:4 failed. " + "Modifier non-sealed not expected here.", lastConsumedToken);
                    }
                    // Code for CodeBlock specified at Java.ccc:197:4
                    if (permissibleModifiers != null) {
                        permissibleModifiers.remove(SEALED);
                        permissibleModifiers.remove(NON_SEALED);
                    }
                } else {
                    break;
                }
            }
            // Code for CodeBlock specified at Java.ccc:204:2
            permissibleModifiers = null;
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:215:1
    final public void TypeDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "TypeDeclaration";
        // Code for BNFProduction specified at Java.ccc:215:1
        if (typeMatches(SEMICOLON, getToken(1))) {
            // Code for NonTerminal specified at Java.ccc:218:5
            pushOntoCallStack("TypeDeclaration", "Java.ccc", 218, 5);
            try {
                EmptyDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$220$5()) {
            // Code for NonTerminal specified at Java.ccc:220:5
            pushOntoCallStack("TypeDeclaration", "Java.ccc", 220, 5);
            try {
                AnnotationTypeDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$222$5()) {
            // Code for NonTerminal specified at Java.ccc:222:5
            pushOntoCallStack("TypeDeclaration", "Java.ccc", 222, 5);
            try {
                ClassDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$224$5()) {
            // Code for NonTerminal specified at Java.ccc:224:5
            pushOntoCallStack("TypeDeclaration", "Java.ccc", 224, 5);
            try {
                InterfaceDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$226$5()) {
            // Code for NonTerminal specified at Java.ccc:226:5
            pushOntoCallStack("TypeDeclaration", "Java.ccc", 226, 5);
            try {
                EnumDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$228$5()) {
            // Code for NonTerminal specified at Java.ccc:228:5
            pushOntoCallStack("TypeDeclaration", "Java.ccc", 228, 5);
            try {
                RecordDeclaration();
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("TypeDeclaration", "Java.ccc", 218, 5);
            throw new ParseException(getToken(1), first_set$Java_ccc$218$5, parsingStack);
        }
    }

    // Java.ccc:253:1
    final public void EmptyDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "EmptyDeclaration";
        // Code for BNFProduction specified at Java.ccc:253:1
        EmptyDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new EmptyDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:253:21
            pushOntoCallStack("EmptyDeclaration", "Java.ccc", 253, 21);
            try {
                consumeToken(SEMICOLON);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:255:1
    final public void TypeIdentifier() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "TypeIdentifier";
        // Code for BNFProduction specified at Java.ccc:255:1
        // Code for Terminal specified at Java.ccc:256:4
        pushOntoCallStack("TypeIdentifier", "Java.ccc", 256, 4);
        try {
            consumeToken(IDENTIFIER);
        } finally {
            popCallStack();
        }
        // Code for CodeBlock specified at Java.ccc:257:4
        String temp = tokenImage(0);
        // Code for Assertion specified at Java.ccc:258:4
        if (!(!temp.equals("record") && !temp.equals("var") && !temp.equals("permits") && !temp.equals("sealed") && !temp.equals("yield"))) {
            pushOntoCallStack("TypeIdentifier", "Java.ccc", 258, 4);
            fail("Assertion at: Java.ccc:258:4 failed. " + "Illegal type name " + temp, lastConsumedToken);
        }
    }

    // Java.ccc:268:1
    final public void ClassDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ClassDeclaration";
        // Code for BNFProduction specified at Java.ccc:268:1
        ClassDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new ClassDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for CodeBlock specified at Java.ccc:269:3
            permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE, ABSTRACT, FINAL, STATIC, STRICTFP, SEALED, NON_SEALED);
            // Code for NonTerminal specified at Java.ccc:273:3
            pushOntoCallStack("ClassDeclaration", "Java.ccc", 273, 3);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:274:3
            pushOntoCallStack("ClassDeclaration", "Java.ccc", 274, 3);
            try {
                consumeToken(CLASS);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:275:3
            pushOntoCallStack("ClassDeclaration", "Java.ccc", 275, 3);
            try {
                TypeIdentifier();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:276:3
            if (typeMatches(LT, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:276:5
                pushOntoCallStack("ClassDeclaration", "Java.ccc", 276, 5);
                try {
                    TypeParameters();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Java.ccc:277:3
            if (typeMatches(EXTENDS, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:277:5
                pushOntoCallStack("ClassDeclaration", "Java.ccc", 277, 5);
                try {
                    ExtendsList();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Java.ccc:278:3
            if (typeMatches(IMPLEMENTS, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:278:5
                pushOntoCallStack("ClassDeclaration", "Java.ccc", 278, 5);
                try {
                    ImplementsList();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Java.ccc:279:3
            if (typeMatches(PERMITS, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:279:5
                pushOntoCallStack("ClassDeclaration", "Java.ccc", 279, 5);
                try {
                    PermitsList();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at Java.ccc:280:3
            pushOntoCallStack("ClassDeclaration", "Java.ccc", 280, 3);
            try {
                ClassOrInterfaceBody();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:283:1
    final public void InterfaceDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "InterfaceDeclaration";
        // Code for BNFProduction specified at Java.ccc:283:1
        InterfaceDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new InterfaceDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for CodeBlock specified at Java.ccc:284:3
            permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE, ABSTRACT, STATIC, STRICTFP, SEALED, NON_SEALED);
            // Code for NonTerminal specified at Java.ccc:288:3
            pushOntoCallStack("InterfaceDeclaration", "Java.ccc", 288, 3);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:289:3
            pushOntoCallStack("InterfaceDeclaration", "Java.ccc", 289, 3);
            try {
                consumeToken(INTERFACE);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:290:3
            pushOntoCallStack("InterfaceDeclaration", "Java.ccc", 290, 3);
            try {
                TypeIdentifier();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:291:3
            if (typeMatches(LT, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:291:5
                pushOntoCallStack("InterfaceDeclaration", "Java.ccc", 291, 5);
                try {
                    TypeParameters();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Java.ccc:292:3
            if (typeMatches(EXTENDS, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:292:5
                pushOntoCallStack("InterfaceDeclaration", "Java.ccc", 292, 5);
                try {
                    ExtendsList();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Java.ccc:293:3
            if (typeMatches(PERMITS, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:293:5
                pushOntoCallStack("InterfaceDeclaration", "Java.ccc", 293, 5);
                try {
                    PermitsList();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at Java.ccc:294:3
            pushOntoCallStack("InterfaceDeclaration", "Java.ccc", 294, 3);
            try {
                ClassOrInterfaceBody();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:297:1
    final public void PermitsList() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "PermitsList";
        // Code for BNFProduction specified at Java.ccc:297:1
        PermitsList thisProduction = null;
        if (buildTree) {
            thisProduction = new PermitsList();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:298:4
            pushOntoCallStack("PermitsList", "Java.ccc", 298, 4);
            try {
                consumeToken(PERMITS);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:299:4
            pushOntoCallStack("PermitsList", "Java.ccc", 299, 4);
            try {
                Name();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:300:4
            while (true) {
                if (!(typeMatches(COMMA, getToken(1)))) break;
                // Code for Terminal specified at Java.ccc:300:5
                pushOntoCallStack("PermitsList", "Java.ccc", 300, 5);
                try {
                    consumeToken(COMMA);
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Java.ccc:300:13
                pushOntoCallStack("PermitsList", "Java.ccc", 300, 13);
                try {
                    Name();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:303:1
    final public void ExtendsList() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ExtendsList";
        // Code for BNFProduction specified at Java.ccc:303:1
        ExtendsList thisProduction = null;
        if (buildTree) {
            thisProduction = new ExtendsList();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:304:4
            pushOntoCallStack("ExtendsList", "Java.ccc", 304, 4);
            try {
                consumeToken(EXTENDS);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:305:4
            pushOntoCallStack("ExtendsList", "Java.ccc", 305, 4);
            try {
                ObjectType();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:306:4
            while (true) {
                if (!(scan$Java_ccc$307$6())) break;
                // Code for Terminal specified at Java.ccc:308:6
                pushOntoCallStack("ExtendsList", "Java.ccc", 308, 6);
                try {
                    consumeToken(COMMA);
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Java.ccc:308:14
                pushOntoCallStack("ExtendsList", "Java.ccc", 308, 14);
                try {
                    ObjectType();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:320:1
    final public void ImplementsList() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ImplementsList";
        // Code for BNFProduction specified at Java.ccc:320:1
        ImplementsList thisProduction = null;
        if (buildTree) {
            thisProduction = new ImplementsList();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:321:4
            pushOntoCallStack("ImplementsList", "Java.ccc", 321, 4);
            try {
                consumeToken(IMPLEMENTS);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:321:17
            pushOntoCallStack("ImplementsList", "Java.ccc", 321, 17);
            try {
                ObjectType();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:322:4
            while (true) {
                if (!(typeMatches(COMMA, getToken(1)))) break;
                // Code for Terminal specified at Java.ccc:323:6
                pushOntoCallStack("ImplementsList", "Java.ccc", 323, 6);
                try {
                    consumeToken(COMMA);
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Java.ccc:323:14
                pushOntoCallStack("ImplementsList", "Java.ccc", 323, 14);
                try {
                    ObjectType();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:328:1
    final public void EnumDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "EnumDeclaration";
        // Code for BNFProduction specified at Java.ccc:328:1
        EnumDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new EnumDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for CodeBlock specified at Java.ccc:329:4
            permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE, ABSTRACT, FINAL, STATIC, STRICTFP);
            // Code for NonTerminal specified at Java.ccc:332:4
            pushOntoCallStack("EnumDeclaration", "Java.ccc", 332, 4);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:333:4
            pushOntoCallStack("EnumDeclaration", "Java.ccc", 333, 4);
            try {
                consumeToken(ENUM);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:334:4
            pushOntoCallStack("EnumDeclaration", "Java.ccc", 334, 4);
            try {
                TypeIdentifier();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:335:4
            if (typeMatches(IMPLEMENTS, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:335:5
                pushOntoCallStack("EnumDeclaration", "Java.ccc", 335, 5);
                try {
                    ImplementsList();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at Java.ccc:336:4
            pushOntoCallStack("EnumDeclaration", "Java.ccc", 336, 4);
            try {
                EnumBody();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:339:1
    final public void EnumBody() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "EnumBody";
        // Code for BNFProduction specified at Java.ccc:339:1
        EnumBody thisProduction = null;
        if (buildTree) {
            thisProduction = new EnumBody();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:340:4
            pushOntoCallStack("EnumBody", "Java.ccc", 340, 4);
            try {
                consumeToken(LBRACE);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:341:4
            if (typeMatches(AT, getToken(1)) || typeMatches(IDENTIFIER, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:341:6
                pushOntoCallStack("EnumBody", "Java.ccc", 341, 6);
                try {
                    EnumConstant();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at Java.ccc:341:19
                while (true) {
                    if (!(scan$Java_ccc$341$21())) break;
                    // Code for Terminal specified at Java.ccc:341:28
                    pushOntoCallStack("EnumBody", "Java.ccc", 341, 28);
                    try {
                        consumeToken(COMMA);
                    } finally {
                        popCallStack();
                    }
                    // Code for NonTerminal specified at Java.ccc:341:36
                    pushOntoCallStack("EnumBody", "Java.ccc", 341, 36);
                    try {
                        EnumConstant();
                    } finally {
                        popCallStack();
                    }
                }
            }
            // Code for ZeroOrOne specified at Java.ccc:342:4
            if (typeMatches(COMMA, getToken(1))) {
                // Code for Terminal specified at Java.ccc:342:6
                pushOntoCallStack("EnumBody", "Java.ccc", 342, 6);
                try {
                    consumeToken(COMMA);
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Java.ccc:343:4
            if (typeMatches(SEMICOLON, getToken(1))) {
                // Code for Terminal specified at Java.ccc:343:6
                pushOntoCallStack("EnumBody", "Java.ccc", 343, 6);
                try {
                    consumeToken(SEMICOLON);
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at Java.ccc:343:18
                while (true) {
                    if (!(hasMatch(first_set$Java_ccc$343$20, getToken(1)))) break;
                    // Code for NonTerminal specified at Java.ccc:343:20
                    pushOntoCallStack("EnumBody", "Java.ccc", 343, 20);
                    try {
                        ClassOrInterfaceBodyDeclaration();
                    } finally {
                        popCallStack();
                    }
                }
            }
            // Code for Terminal specified at Java.ccc:344:4
            pushOntoCallStack("EnumBody", "Java.ccc", 344, 4);
            try {
                consumeToken(RBRACE);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:347:1
    final public void RecordDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "RecordDeclaration";
        // Code for BNFProduction specified at Java.ccc:347:1
        RecordDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new RecordDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for CodeBlock specified at Java.ccc:348:3
            permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE, ABSTRACT, FINAL, STATIC, STRICTFP);
            // Code for NonTerminal specified at Java.ccc:352:3
            pushOntoCallStack("RecordDeclaration", "Java.ccc", 352, 3);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:353:3
            pushOntoCallStack("RecordDeclaration", "Java.ccc", 353, 3);
            try {
                consumeToken(RECORD);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:354:3
            pushOntoCallStack("RecordDeclaration", "Java.ccc", 354, 3);
            try {
                TypeIdentifier();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:356:3
            if (typeMatches(LT, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:356:4
                pushOntoCallStack("RecordDeclaration", "Java.ccc", 356, 4);
                try {
                    TypeParameters();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at Java.ccc:357:3
            pushOntoCallStack("RecordDeclaration", "Java.ccc", 357, 3);
            try {
                RecordHeader();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:358:3
            if (typeMatches(IMPLEMENTS, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:358:4
                pushOntoCallStack("RecordDeclaration", "Java.ccc", 358, 4);
                try {
                    ImplementsList();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at Java.ccc:359:3
            pushOntoCallStack("RecordDeclaration", "Java.ccc", 359, 3);
            try {
                RecordBody();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:362:1
    final public void RecordHeader() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "RecordHeader";
        // Code for BNFProduction specified at Java.ccc:362:1
        RecordHeader thisProduction = null;
        if (buildTree) {
            thisProduction = new RecordHeader();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:362:16
            pushOntoCallStack("RecordHeader", "Java.ccc", 362, 16);
            try {
                consumeToken(LPAREN);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:362:25
            if (hasMatch(first_set$Java_ccc$362$27, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:362:27
                pushOntoCallStack("RecordHeader", "Java.ccc", 362, 27);
                try {
                    RecordComponent();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at Java.ccc:362:43
                while (true) {
                    if (!(typeMatches(COMMA, getToken(1)))) break;
                    // Code for Terminal specified at Java.ccc:362:45
                    pushOntoCallStack("RecordHeader", "Java.ccc", 362, 45);
                    try {
                        consumeToken(COMMA);
                    } finally {
                        popCallStack();
                    }
                    // Code for NonTerminal specified at Java.ccc:362:53
                    pushOntoCallStack("RecordHeader", "Java.ccc", 362, 53);
                    try {
                        RecordComponent();
                    } finally {
                        popCallStack();
                    }
                }
            }
            // Code for Terminal specified at Java.ccc:362:73
            pushOntoCallStack("RecordHeader", "Java.ccc", 362, 73);
            try {
                consumeToken(RPAREN);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:364:1
    final public void RecordComponent() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "RecordComponent";
        // Code for BNFProduction specified at Java.ccc:364:1
        RecordComponent thisProduction = null;
        if (buildTree) {
            thisProduction = new RecordComponent();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ZeroOrMore specified at Java.ccc:365:4
            while (true) {
                if (!(scan$Java_ccc$365$5())) break;
                // Code for NonTerminal specified at Java.ccc:365:5
                pushOntoCallStack("RecordComponent", "Java.ccc", 365, 5);
                try {
                    Annotation();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at Java.ccc:365:18
            pushOntoCallStack("RecordComponent", "Java.ccc", 365, 18);
            try {
                Type();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:365:23
            if (typeMatches(VAR_ARGS, getToken(1)) || typeMatches(AT, getToken(1))) {
                // Code for ZeroOrMore specified at Java.ccc:365:24
                while (true) {
                    if (!(scan$Java_ccc$365$25())) break;
                    // Code for NonTerminal specified at Java.ccc:365:25
                    pushOntoCallStack("RecordComponent", "Java.ccc", 365, 25);
                    try {
                        Annotation();
                    } finally {
                        popCallStack();
                    }
                }
                // Code for Terminal specified at Java.ccc:365:38
                pushOntoCallStack("RecordComponent", "Java.ccc", 365, 38);
                try {
                    consumeToken(VAR_ARGS);
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:365:51
            pushOntoCallStack("RecordComponent", "Java.ccc", 365, 51);
            try {
                consumeToken(IDENTIFIER);
            } finally {
                popCallStack();
            }
            // Code for Assertion specified at Java.ccc:366:4
            if (!(getTokenType(- 1) != VAR_ARGS || getTokenType(1) != COMMA)) {
                pushOntoCallStack("RecordComponent", "Java.ccc", 366, 4);
                fail("Assertion at: Java.ccc:366:4 failed. " + "The varargs (...) component must be the last one specified.", getToken(1));
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:369:1
    final public void RecordBody() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "RecordBody";
        // Code for BNFProduction specified at Java.ccc:369:1
        RecordBody thisProduction = null;
        if (buildTree) {
            thisProduction = new RecordBody();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:370:3
            pushOntoCallStack("RecordBody", "Java.ccc", 370, 3);
            try {
                consumeToken(LBRACE);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:371:3
            while (true) {
                // Code for ExpansionChoice specified at Java.ccc:372:4
                if (scan$Java_ccc$372$4()) {
                    // Code for NonTerminal specified at Java.ccc:372:4
                    pushOntoCallStack("RecordBody", "Java.ccc", 372, 4);
                    try {
                        CompactConstructorDeclaration();
                    } finally {
                        popCallStack();
                    }
                } else if (hasMatch(first_set$Java_ccc$374$4, getToken(1))) {
                    // Code for NonTerminal specified at Java.ccc:374:4
                    pushOntoCallStack("RecordBody", "Java.ccc", 374, 4);
                    try {
                        ClassOrInterfaceBodyDeclaration();
                    } finally {
                        popCallStack();
                    }
                } else {
                    break;
                }
            }
            // Code for Terminal specified at Java.ccc:376:3
            pushOntoCallStack("RecordBody", "Java.ccc", 376, 3);
            try {
                consumeToken(RBRACE);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:379:1
    final public void CompactConstructorDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "CompactConstructorDeclaration";
        // Code for BNFProduction specified at Java.ccc:379:1
        CompactConstructorDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new CompactConstructorDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for CodeBlock specified at Java.ccc:380:3
            permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE);
            // Code for NonTerminal specified at Java.ccc:381:4
            pushOntoCallStack("CompactConstructorDeclaration", "Java.ccc", 381, 4);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:382:3
            pushOntoCallStack("CompactConstructorDeclaration", "Java.ccc", 382, 3);
            try {
                TypeIdentifier();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:383:3
            pushOntoCallStack("CompactConstructorDeclaration", "Java.ccc", 383, 3);
            try {
                consumeToken(LBRACE);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:384:3
            while (true) {
                if (!(scan$Java_ccc$384$4())) break;
                // Code for NonTerminal specified at Java.ccc:384:54
                pushOntoCallStack("CompactConstructorDeclaration", "Java.ccc", 384, 54);
                try {
                    BlockStatement();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Java.ccc:385:3
            if (scan$Java_ccc$385$5()) {
                // Code for NonTerminal specified at Java.ccc:385:5
                pushOntoCallStack("CompactConstructorDeclaration", "Java.ccc", 385, 5);
                try {
                    ExplicitConstructorInvocation();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrMore specified at Java.ccc:386:3
            while (true) {
                if (!(scan$Java_ccc$386$5())) break;
                // Code for NonTerminal specified at Java.ccc:386:25
                pushOntoCallStack("CompactConstructorDeclaration", "Java.ccc", 386, 25);
                try {
                    BlockStatement();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:387:3
            pushOntoCallStack("CompactConstructorDeclaration", "Java.ccc", 387, 3);
            try {
                consumeToken(RBRACE);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:392:1
    final public void EnumConstant() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "EnumConstant";
        // Code for BNFProduction specified at Java.ccc:392:1
        EnumConstant thisProduction = null;
        if (buildTree) {
            thisProduction = new EnumConstant();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ZeroOrMore specified at Java.ccc:393:3
            while (true) {
                if (!(scan$Java_ccc$393$4())) break;
                // Code for NonTerminal specified at Java.ccc:393:4
                pushOntoCallStack("EnumConstant", "Java.ccc", 393, 4);
                try {
                    Annotation();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:393:17
            pushOntoCallStack("EnumConstant", "Java.ccc", 393, 17);
            try {
                consumeToken(IDENTIFIER);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:393:30
            if (typeMatches(LPAREN, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:393:32
                pushOntoCallStack("EnumConstant", "Java.ccc", 393, 32);
                try {
                    InvocationArguments();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Java.ccc:393:54
            if (typeMatches(LBRACE, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:393:56
                pushOntoCallStack("EnumConstant", "Java.ccc", 393, 56);
                try {
                    ClassOrInterfaceBody();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:396:1
    final public void TypeParameters() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "TypeParameters";
        // Code for BNFProduction specified at Java.ccc:396:1
        TypeParameters thisProduction = null;
        if (buildTree) {
            thisProduction = new TypeParameters();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:397:4
            pushOntoCallStack("TypeParameters", "Java.ccc", 397, 4);
            try {
                consumeToken(LT);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:398:4
            pushOntoCallStack("TypeParameters", "Java.ccc", 398, 4);
            try {
                TypeParameter();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:398:18
            while (true) {
                if (!(typeMatches(COMMA, getToken(1)))) break;
                // Code for Terminal specified at Java.ccc:398:20
                pushOntoCallStack("TypeParameters", "Java.ccc", 398, 20);
                try {
                    consumeToken(COMMA);
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Java.ccc:398:28
                pushOntoCallStack("TypeParameters", "Java.ccc", 398, 28);
                try {
                    TypeParameter();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:399:4
            pushOntoCallStack("TypeParameters", "Java.ccc", 399, 4);
            try {
                consumeToken(GT);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:410:1
    final public void TypeParameter() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "TypeParameter";
        // Code for BNFProduction specified at Java.ccc:410:1
        TypeParameter thisProduction = null;
        if (buildTree) {
            thisProduction = new TypeParameter();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ZeroOrMore specified at Java.ccc:410:16
            while (true) {
                if (!(scan$Java_ccc$410$17())) break;
                // Code for NonTerminal specified at Java.ccc:410:17
                pushOntoCallStack("TypeParameter", "Java.ccc", 410, 17);
                try {
                    Annotation();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at Java.ccc:410:30
            pushOntoCallStack("TypeParameter", "Java.ccc", 410, 30);
            try {
                TypeIdentifier();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:410:50
            if (typeMatches(EXTENDS, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:410:51
                pushOntoCallStack("TypeParameter", "Java.ccc", 410, 51);
                try {
                    TypeBound();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:412:1
    final public void TypeBound() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "TypeBound";
        // Code for BNFProduction specified at Java.ccc:412:1
        TypeBound thisProduction = null;
        if (buildTree) {
            thisProduction = new TypeBound();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:413:4
            pushOntoCallStack("TypeBound", "Java.ccc", 413, 4);
            try {
                consumeToken(EXTENDS);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:413:14
            pushOntoCallStack("TypeBound", "Java.ccc", 413, 14);
            try {
                ObjectType();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:413:25
            while (true) {
                if (!(typeMatches(BIT_AND, getToken(1)))) break;
                // Code for Terminal specified at Java.ccc:413:27
                pushOntoCallStack("TypeBound", "Java.ccc", 413, 27);
                try {
                    consumeToken(BIT_AND);
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Java.ccc:413:37
                pushOntoCallStack("TypeBound", "Java.ccc", 413, 37);
                try {
                    ObjectType();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:416:1
    final public void ClassOrInterfaceBody() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ClassOrInterfaceBody";
        // Code for BNFProduction specified at Java.ccc:416:1
        ClassOrInterfaceBody thisProduction = null;
        if (buildTree) {
            thisProduction = new ClassOrInterfaceBody();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:416:24
            pushOntoCallStack("ClassOrInterfaceBody", "Java.ccc", 416, 24);
            try {
                consumeToken(LBRACE);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:416:33
            while (true) {
                if (!(scan$Java_ccc$416$34())) break;
                // Code for NonTerminal specified at Java.ccc:416:54
                pushOntoCallStack("ClassOrInterfaceBody", "Java.ccc", 416, 54);
                try {
                    ClassOrInterfaceBodyDeclaration();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:416:90
            pushOntoCallStack("ClassOrInterfaceBody", "Java.ccc", 416, 90);
            try {
                consumeToken(RBRACE);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:418:1
    final public void ClassOrInterfaceBodyDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ClassOrInterfaceBodyDeclaration";
        // Code for BNFProduction specified at Java.ccc:418:1
        // Code for ExpansionChoice specified at Java.ccc:419:3
        if (scan$Java_ccc$419$3()) {
            // Code for NonTerminal specified at Java.ccc:419:3
            pushOntoCallStack("ClassOrInterfaceBodyDeclaration", "Java.ccc", 419, 3);
            try {
                Initializer();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$421$3()) {
            // Code for NonTerminal specified at Java.ccc:421:3
            pushOntoCallStack("ClassOrInterfaceBodyDeclaration", "Java.ccc", 421, 3);
            try {
                TypeDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$423$3()) {
            // Code for NonTerminal specified at Java.ccc:423:3
            pushOntoCallStack("ClassOrInterfaceBodyDeclaration", "Java.ccc", 423, 3);
            try {
                ConstructorDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$425$3()) {
            // Code for NonTerminal specified at Java.ccc:425:3
            pushOntoCallStack("ClassOrInterfaceBodyDeclaration", "Java.ccc", 425, 3);
            try {
                MethodDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$427$3()) {
            // Code for NonTerminal specified at Java.ccc:427:3
            pushOntoCallStack("ClassOrInterfaceBodyDeclaration", "Java.ccc", 427, 3);
            try {
                FieldDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$429$3()) {
            // Code for Failure specified at Java.ccc:430:3
            pushOntoCallStack("ClassOrInterfaceBodyDeclaration", "Java.ccc", 430, 3);
            fail("Failure: " + "Not a valid interface body declaration.", getToken(1));
        } else {
            // Code for Failure specified at Java.ccc:432:3
            pushOntoCallStack("ClassOrInterfaceBodyDeclaration", "Java.ccc", 432, 3);
            fail("Failure: " + "Not a valid class body declaration.", getToken(1));
        }
    }

    // Java.ccc:441:1
    final public void FieldDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "FieldDeclaration";
        // Code for BNFProduction specified at Java.ccc:441:1
        FieldDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new FieldDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for CodeBlock specified at Java.ccc:442:3
            permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE, STATIC, FINAL, TRANSIENT, VOLATILE);
            // Code for NonTerminal specified at Java.ccc:445:3
            pushOntoCallStack("FieldDeclaration", "Java.ccc", 445, 3);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:446:3
            pushOntoCallStack("FieldDeclaration", "Java.ccc", 446, 3);
            try {
                Type();
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:447:3
            pushOntoCallStack("FieldDeclaration", "Java.ccc", 447, 3);
            try {
                VariableDeclarator();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:447:22
            while (true) {
                if (!(typeMatches(COMMA, getToken(1)))) break;
                // Code for Terminal specified at Java.ccc:447:24
                pushOntoCallStack("FieldDeclaration", "Java.ccc", 447, 24);
                try {
                    consumeToken(COMMA);
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Java.ccc:447:32
                pushOntoCallStack("FieldDeclaration", "Java.ccc", 447, 32);
                try {
                    VariableDeclarator();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:447:54
            pushOntoCallStack("FieldDeclaration", "Java.ccc", 447, 54);
            try {
                consumeToken(SEMICOLON);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:450:1
    final public void VariableDeclarator() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "VariableDeclarator";
        // Code for BNFProduction specified at Java.ccc:450:1
        VariableDeclarator thisProduction = null;
        if (buildTree) {
            thisProduction = new VariableDeclarator();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:450:23
            pushOntoCallStack("VariableDeclarator", "Java.ccc", 450, 23);
            try {
                VariableDeclaratorId();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:450:44
            if (typeMatches(ASSIGN, getToken(1))) {
                // Code for Terminal specified at Java.ccc:450:46
                pushOntoCallStack("VariableDeclarator", "Java.ccc", 450, 46);
                try {
                    consumeToken(ASSIGN);
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Java.ccc:450:55
                pushOntoCallStack("VariableDeclarator", "Java.ccc", 450, 55);
                try {
                    VariableInitializer();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> VariableDeclaratorId_FIRST_SET = tokenTypeSet(UNDERSCORE, IDENTIFIER);

    // Java.ccc:452:1
    final public void VariableDeclaratorId() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "VariableDeclaratorId";
        // Code for BNFProduction specified at Java.ccc:452:1
        VariableDeclaratorId thisProduction = null;
        if (buildTree) {
            thisProduction = new VariableDeclaratorId();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at Java.ccc:453:5
            if (typeMatches(IDENTIFIER, getToken(1))) {
                // Code for Terminal specified at Java.ccc:453:5
                pushOntoCallStack("VariableDeclaratorId", "Java.ccc", 453, 5);
                try {
                    consumeToken(IDENTIFIER);
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at Java.ccc:454:5
                while (true) {
                    if (!(typeMatches(LBRACKET, getToken(1)) || typeMatches(AT, getToken(1)))) break;
                    // Code for ZeroOrMore specified at Java.ccc:454:7
                    while (true) {
                        if (!(scan$Java_ccc$454$8())) break;
                        // Code for NonTerminal specified at Java.ccc:454:8
                        pushOntoCallStack("VariableDeclaratorId", "Java.ccc", 454, 8);
                        try {
                            Annotation();
                        } finally {
                            popCallStack();
                        }
                    }
                    // Code for Terminal specified at Java.ccc:454:21
                    pushOntoCallStack("VariableDeclaratorId", "Java.ccc", 454, 21);
                    try {
                        consumeToken(LBRACKET);
                    } finally {
                        popCallStack();
                    }
                    // Code for Terminal specified at Java.ccc:454:32
                    pushOntoCallStack("VariableDeclaratorId", "Java.ccc", 454, 32);
                    try {
                        consumeToken(RBRACKET);
                    } finally {
                        popCallStack();
                    }
                }
            } else if (scan$Java_ccc$456$5()) {
                // Code for Terminal specified at Java.ccc:457:5
                pushOntoCallStack("VariableDeclaratorId", "Java.ccc", 457, 5);
                try {
                    consumeToken(UNDERSCORE);
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("VariableDeclaratorId", "Java.ccc", 453, 5);
                throw new ParseException(getToken(1), VariableDeclaratorId_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> VariableInitializer_FIRST_SET = VariableInitializer_FIRST_SET_init();

    private static EnumSet<TokenType> VariableInitializer_FIRST_SET_init() {
        return tokenTypeSet(UNDERSCORE, BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, LBRACE, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    // Java.ccc:460:1
    final public void VariableInitializer() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "VariableInitializer";
        // Code for BNFProduction specified at Java.ccc:460:1
        // Code for ExpansionChoice specified at Java.ccc:460:28
        if (typeMatches(LBRACE, getToken(1))) {
            // Code for NonTerminal specified at Java.ccc:460:28
            pushOntoCallStack("VariableInitializer", "Java.ccc", 460, 28);
            try {
                ArrayInitializer();
            } finally {
                popCallStack();
            }
        } else if (hasMatch(first_set$Java_ccc$460$47, getToken(1))) {
            // Code for NonTerminal specified at Java.ccc:460:47
            pushOntoCallStack("VariableInitializer", "Java.ccc", 460, 47);
            try {
                Expression();
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("VariableInitializer", "Java.ccc", 460, 28);
            throw new ParseException(getToken(1), VariableInitializer_FIRST_SET, parsingStack);
        }
    }

    // Java.ccc:462:1
    final public void ArrayInitializer() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ArrayInitializer";
        // Code for BNFProduction specified at Java.ccc:462:1
        ArrayInitializer thisProduction = null;
        if (buildTree) {
            thisProduction = new ArrayInitializer();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:463:4
            pushOntoCallStack("ArrayInitializer", "Java.ccc", 463, 4);
            try {
                consumeToken(LBRACE);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:463:13
            if (hasMatch(first_set$Java_ccc$463$15, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:463:15
                pushOntoCallStack("ArrayInitializer", "Java.ccc", 463, 15);
                try {
                    VariableInitializer();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at Java.ccc:463:35
                while (true) {
                    if (!(scan$Java_ccc$463$37())) break;
                    // Code for Terminal specified at Java.ccc:463:44
                    pushOntoCallStack("ArrayInitializer", "Java.ccc", 463, 44);
                    try {
                        consumeToken(COMMA);
                    } finally {
                        popCallStack();
                    }
                    // Code for NonTerminal specified at Java.ccc:463:52
                    pushOntoCallStack("ArrayInitializer", "Java.ccc", 463, 52);
                    try {
                        VariableInitializer();
                    } finally {
                        popCallStack();
                    }
                }
            }
            // Code for ZeroOrOne specified at Java.ccc:463:77
            if (typeMatches(COMMA, getToken(1))) {
                // Code for Terminal specified at Java.ccc:463:79
                pushOntoCallStack("ArrayInitializer", "Java.ccc", 463, 79);
                try {
                    consumeToken(COMMA);
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:463:89
            pushOntoCallStack("ArrayInitializer", "Java.ccc", 463, 89);
            try {
                consumeToken(RBRACE);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:466:1
    final public MethodDeclaration MethodDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "MethodDeclaration";
        // Code for BNFProduction specified at Java.ccc:466:1
        MethodDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new MethodDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            if (scan$Java_ccc$468$5()) {
                // Code for CodeBlock specified at Java.ccc:470:5
                permissibleModifiers = EnumSet.of(PUBLIC, PRIVATE, ABSTRACT, STATIC, SYNCHRONIZED, NATIVE, STRICTFP, _DEFAULT);
            } else if (scan$Java_ccc$476$5()) {
                // Code for CodeBlock specified at Java.ccc:480:5
                permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE, ABSTRACT, STATIC, SYNCHRONIZED, FINAL, NATIVE, STRICTFP, _DEFAULT);
            } else {
                // Code for CodeBlock specified at Java.ccc:486:5
                permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE, ABSTRACT, STATIC, FINAL, SYNCHRONIZED, NATIVE, STRICTFP);
            }
            // Code for NonTerminal specified at Java.ccc:492:3
            pushOntoCallStack("MethodDeclaration", "Java.ccc", 492, 3);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:493:3
            if (typeMatches(LT, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:493:5
                pushOntoCallStack("MethodDeclaration", "Java.ccc", 493, 5);
                try {
                    TypeParameters();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at Java.ccc:494:3
            pushOntoCallStack("MethodDeclaration", "Java.ccc", 494, 3);
            try {
                ReturnType();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:495:3
            pushOntoCallStack("MethodDeclaration", "Java.ccc", 495, 3);
            try {
                consumeToken(IDENTIFIER);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:496:9
            pushOntoCallStack("MethodDeclaration", "Java.ccc", 496, 9);
            try {
                FormalParameters();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:496:26
            while (true) {
                if (!(typeMatches(LBRACKET, getToken(1)) || typeMatches(AT, getToken(1)))) break;
                // Code for ZeroOrMore specified at Java.ccc:496:28
                while (true) {
                    if (!(scan$Java_ccc$496$29())) break;
                    // Code for NonTerminal specified at Java.ccc:496:29
                    pushOntoCallStack("MethodDeclaration", "Java.ccc", 496, 29);
                    try {
                        Annotation();
                    } finally {
                        popCallStack();
                    }
                }
                // Code for Terminal specified at Java.ccc:496:42
                pushOntoCallStack("MethodDeclaration", "Java.ccc", 496, 42);
                try {
                    consumeToken(LBRACKET);
                } finally {
                    popCallStack();
                }
                // Code for Terminal specified at Java.ccc:496:52
                pushOntoCallStack("MethodDeclaration", "Java.ccc", 496, 52);
                try {
                    consumeToken(RBRACKET);
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Java.ccc:497:3
            if (typeMatches(THROWS, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:497:5
                pushOntoCallStack("MethodDeclaration", "Java.ccc", 497, 5);
                try {
                    ThrowsList();
                } finally {
                    popCallStack();
                }
            }
            if (typeMatches(LBRACE, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:498:5
                pushOntoCallStack("MethodDeclaration", "Java.ccc", 498, 5);
                try {
                    Block();
                } finally {
                    popCallStack();
                }
            } else if (typeMatches(SEMICOLON, getToken(1))) {
                // Code for Terminal specified at Java.ccc:498:13
                pushOntoCallStack("MethodDeclaration", "Java.ccc", 498, 13);
                try {
                    consumeToken(SEMICOLON);
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("MethodDeclaration", "Java.ccc", 498, 5);
                throw new ParseException(getToken(1), first_set$Java_ccc$498$5, parsingStack);
            }
            // Code for CodeBlock specified at Java.ccc:499:3
            return thisProduction;
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:502:1
    final public void FormalParameters() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "FormalParameters";
        // Code for BNFProduction specified at Java.ccc:502:1
        FormalParameters thisProduction = null;
        if (buildTree) {
            thisProduction = new FormalParameters();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:502:20
            pushOntoCallStack("FormalParameters", "Java.ccc", 502, 20);
            try {
                consumeToken(LPAREN);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:502:29
            if (scan$Java_ccc$502$31()) {
                // Code for NonTerminal specified at Java.ccc:502:31
                pushOntoCallStack("FormalParameters", "Java.ccc", 502, 31);
                try {
                    FormalParameter();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at Java.ccc:502:47
                while (true) {
                    if (!(typeMatches(COMMA, getToken(1)))) break;
                    // Code for Terminal specified at Java.ccc:502:49
                    pushOntoCallStack("FormalParameters", "Java.ccc", 502, 49);
                    try {
                        consumeToken(COMMA);
                    } finally {
                        popCallStack();
                    }
                    // Code for NonTerminal specified at Java.ccc:502:57
                    pushOntoCallStack("FormalParameters", "Java.ccc", 502, 57);
                    try {
                        FormalParameter();
                    } finally {
                        popCallStack();
                    }
                }
            }
            // Code for Terminal specified at Java.ccc:502:77
            pushOntoCallStack("FormalParameters", "Java.ccc", 502, 77);
            try {
                consumeToken(RPAREN);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:504:1
    final public void FormalParameter() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "FormalParameter";
        // Code for BNFProduction specified at Java.ccc:504:1
        FormalParameter thisProduction = null;
        if (buildTree) {
            thisProduction = new FormalParameter();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for CodeBlock specified at Java.ccc:505:4
            permissibleModifiers = EnumSet.of(FINAL);
            // Code for NonTerminal specified at Java.ccc:506:4
            pushOntoCallStack("FormalParameter", "Java.ccc", 506, 4);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:506:14
            pushOntoCallStack("FormalParameter", "Java.ccc", 506, 14);
            try {
                Type();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at Java.ccc:507:4
            boolean hasVarArgs = false;
            // Code for ZeroOrOne specified at Java.ccc:508:4
            if (typeMatches(VAR_ARGS, getToken(1)) || typeMatches(AT, getToken(1))) {
                // Code for ZeroOrMore specified at Java.ccc:508:6
                while (true) {
                    if (!(scan$Java_ccc$508$7())) break;
                    // Code for NonTerminal specified at Java.ccc:508:7
                    pushOntoCallStack("FormalParameter", "Java.ccc", 508, 7);
                    try {
                        Annotation();
                    } finally {
                        popCallStack();
                    }
                }
                // Code for Terminal specified at Java.ccc:508:20
                pushOntoCallStack("FormalParameter", "Java.ccc", 508, 20);
                try {
                    consumeToken(VAR_ARGS);
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at Java.ccc:508:31
                hasVarArgs = true;
            }
            // Code for NonTerminal specified at Java.ccc:509:4
            pushOntoCallStack("FormalParameter", "Java.ccc", 509, 4);
            try {
                VariableDeclaratorId();
            } finally {
                popCallStack();
            }
            // Code for Assertion specified at Java.ccc:510:4
            if (!(!hasVarArgs || getTokenType(1) != COMMA)) {
                pushOntoCallStack("FormalParameter", "Java.ccc", 510, 4);
                fail("Assertion at: Java.ccc:510:4 failed. " + "The varargs (...) parameter must be the last one specified.", getToken(1));
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:513:1
    final public void ConstructorDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ConstructorDeclaration";
        // Code for BNFProduction specified at Java.ccc:513:1
        ConstructorDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new ConstructorDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for CodeBlock specified at Java.ccc:514:3
            permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE);
            // Code for NonTerminal specified at Java.ccc:515:3
            pushOntoCallStack("ConstructorDeclaration", "Java.ccc", 515, 3);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:516:3
            if (typeMatches(LT, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:516:5
                pushOntoCallStack("ConstructorDeclaration", "Java.ccc", 516, 5);
                try {
                    TypeParameters();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at Java.ccc:517:3
            pushOntoCallStack("ConstructorDeclaration", "Java.ccc", 517, 3);
            try {
                TypeIdentifier();
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:517:24
            pushOntoCallStack("ConstructorDeclaration", "Java.ccc", 517, 24);
            try {
                FormalParameters();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:518:3
            if (typeMatches(THROWS, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:518:5
                pushOntoCallStack("ConstructorDeclaration", "Java.ccc", 518, 5);
                try {
                    ThrowsList();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:519:3
            pushOntoCallStack("ConstructorDeclaration", "Java.ccc", 519, 3);
            try {
                consumeToken(LBRACE);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:520:3
            while (true) {
                if (!(scan$Java_ccc$520$4())) break;
                // Code for NonTerminal specified at Java.ccc:520:54
                pushOntoCallStack("ConstructorDeclaration", "Java.ccc", 520, 54);
                try {
                    BlockStatement();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Java.ccc:521:3
            if (scan$Java_ccc$521$5()) {
                // Code for NonTerminal specified at Java.ccc:521:5
                pushOntoCallStack("ConstructorDeclaration", "Java.ccc", 521, 5);
                try {
                    ExplicitConstructorInvocation();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrMore specified at Java.ccc:522:3
            while (true) {
                if (!(scan$Java_ccc$522$5())) break;
                // Code for NonTerminal specified at Java.ccc:522:25
                pushOntoCallStack("ConstructorDeclaration", "Java.ccc", 522, 25);
                try {
                    BlockStatement();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:523:3
            pushOntoCallStack("ConstructorDeclaration", "Java.ccc", 523, 3);
            try {
                consumeToken(RBRACE);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> ExplicitConstructorInvocation_FIRST_SET = tokenTypeSet(SUPER, THIS, LPAREN, LT, IDENTIFIER);

    // Java.ccc:526:1
    final public void ExplicitConstructorInvocation() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ExplicitConstructorInvocation";
        // Code for BNFProduction specified at Java.ccc:526:1
        ExplicitConstructorInvocation thisProduction = null;
        if (buildTree) {
            thisProduction = new ExplicitConstructorInvocation();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at Java.ccc:527:3
            if (scan$Java_ccc$527$3()) {
                // Code for ZeroOrOne specified at Java.ccc:527:3
                if (scan$Java_ccc$527$4()) {
                    // Code for NonTerminal specified at Java.ccc:527:4
                    pushOntoCallStack("ExplicitConstructorInvocation", "Java.ccc", 527, 4);
                    try {
                        TypeArguments();
                    } finally {
                        popCallStack();
                    }
                }
                if (typeMatches(THIS, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:527:20
                    pushOntoCallStack("ExplicitConstructorInvocation", "Java.ccc", 527, 20);
                    try {
                        consumeToken(THIS);
                    } finally {
                        popCallStack();
                    }
                } else if (typeMatches(SUPER, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:527:29
                    pushOntoCallStack("ExplicitConstructorInvocation", "Java.ccc", 527, 29);
                    try {
                        consumeToken(SUPER);
                    } finally {
                        popCallStack();
                    }
                } else {
                    pushOntoCallStack("ExplicitConstructorInvocation", "Java.ccc", 527, 20);
                    throw new ParseException(getToken(1), first_set$Java_ccc$527$20, parsingStack);
                }
                // Code for NonTerminal specified at Java.ccc:527:44
                pushOntoCallStack("ExplicitConstructorInvocation", "Java.ccc", 527, 44);
                try {
                    InvocationArguments();
                } finally {
                    popCallStack();
                }
                // Code for Terminal specified at Java.ccc:527:64
                pushOntoCallStack("ExplicitConstructorInvocation", "Java.ccc", 527, 64);
                try {
                    consumeToken(SEMICOLON);
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$531$3()) {
                if (typeMatches(IDENTIFIER, getToken(1))) {
                    // Code for NonTerminal specified at Java.ccc:531:4
                    pushOntoCallStack("ExplicitConstructorInvocation", "Java.ccc", 531, 4);
                    try {
                        Name();
                    } finally {
                        popCallStack();
                    }
                    // Code for ZeroOrOne specified at Java.ccc:531:9
                    if (scan$Java_ccc$531$10()) {
                        // Code for Terminal specified at Java.ccc:531:10
                        pushOntoCallStack("ExplicitConstructorInvocation", "Java.ccc", 531, 10);
                        try {
                            consumeToken(DOT);
                        } finally {
                            popCallStack();
                        }
                        // Code for Terminal specified at Java.ccc:531:15
                        pushOntoCallStack("ExplicitConstructorInvocation", "Java.ccc", 531, 15);
                        try {
                            consumeToken(THIS);
                        } finally {
                            popCallStack();
                        }
                    }
                } else if (typeMatches(LPAREN, getToken(1))) {
                    // Code for NonTerminal specified at Java.ccc:531:30
                    pushOntoCallStack("ExplicitConstructorInvocation", "Java.ccc", 531, 30);
                    try {
                        Parentheses();
                    } finally {
                        popCallStack();
                    }
                    // Code for ZeroOrOne specified at Java.ccc:531:42
                    if (scan$Java_ccc$531$43()) {
                        // Code for Terminal specified at Java.ccc:531:43
                        pushOntoCallStack("ExplicitConstructorInvocation", "Java.ccc", 531, 43);
                        try {
                            consumeToken(DOT);
                        } finally {
                            popCallStack();
                        }
                        // Code for NonTerminal specified at Java.ccc:531:55
                        pushOntoCallStack("ExplicitConstructorInvocation", "Java.ccc", 531, 55);
                        try {
                            Name();
                        } finally {
                            popCallStack();
                        }
                    }
                    // Code for ZeroOrOne specified at Java.ccc:531:60
                    if (scan$Java_ccc$531$61()) {
                        // Code for Terminal specified at Java.ccc:531:61
                        pushOntoCallStack("ExplicitConstructorInvocation", "Java.ccc", 531, 61);
                        try {
                            consumeToken(DOT);
                        } finally {
                            popCallStack();
                        }
                        // Code for Terminal specified at Java.ccc:531:66
                        pushOntoCallStack("ExplicitConstructorInvocation", "Java.ccc", 531, 66);
                        try {
                            consumeToken(THIS);
                        } finally {
                            popCallStack();
                        }
                    }
                } else {
                    pushOntoCallStack("ExplicitConstructorInvocation", "Java.ccc", 531, 4);
                    throw new ParseException(getToken(1), first_set$Java_ccc$531$4, parsingStack);
                }
                // Code for Terminal specified at Java.ccc:532:3
                pushOntoCallStack("ExplicitConstructorInvocation", "Java.ccc", 532, 3);
                try {
                    consumeToken(DOT);
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrOne specified at Java.ccc:532:9
                if (scan$Java_ccc$532$10()) {
                    // Code for NonTerminal specified at Java.ccc:532:10
                    pushOntoCallStack("ExplicitConstructorInvocation", "Java.ccc", 532, 10);
                    try {
                        TypeArguments();
                    } finally {
                        popCallStack();
                    }
                }
                // Code for Terminal specified at Java.ccc:532:25
                pushOntoCallStack("ExplicitConstructorInvocation", "Java.ccc", 532, 25);
                try {
                    consumeToken(SUPER);
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Java.ccc:532:39
                pushOntoCallStack("ExplicitConstructorInvocation", "Java.ccc", 532, 39);
                try {
                    InvocationArguments();
                } finally {
                    popCallStack();
                }
                // Code for Terminal specified at Java.ccc:532:59
                pushOntoCallStack("ExplicitConstructorInvocation", "Java.ccc", 532, 59);
                try {
                    consumeToken(SEMICOLON);
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("ExplicitConstructorInvocation", "Java.ccc", 527, 3);
                throw new ParseException(getToken(1), ExplicitConstructorInvocation_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:535:1
    final public void Initializer() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Initializer";
        // Code for BNFProduction specified at Java.ccc:535:1
        Initializer thisProduction = null;
        if (buildTree) {
            thisProduction = new Initializer();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ZeroOrOne specified at Java.ccc:536:3
            if (typeMatches(STATIC, getToken(1))) {
                // Code for Terminal specified at Java.ccc:536:5
                pushOntoCallStack("Initializer", "Java.ccc", 536, 5);
                try {
                    consumeToken(STATIC);
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at Java.ccc:536:22
            pushOntoCallStack("Initializer", "Java.ccc", 536, 22);
            try {
                Block();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:539:1
    final public void Type() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Type";
        // Code for BNFProduction specified at Java.ccc:539:1
        if (scan$Java_ccc$541$4()) {
            // Code for NonTerminal specified at Java.ccc:541:4
            pushOntoCallStack("Type", "Java.ccc", 541, 4);
            try {
                PrimitiveType();
            } finally {
                popCallStack();
            }
            // Code for Assertion specified at Java.ccc:541:18
        } else if (hasMatch(first_set$Java_ccc$543$4, getToken(1))) {
            // Code for NonTerminal specified at Java.ccc:543:4
            pushOntoCallStack("Type", "Java.ccc", 543, 4);
            try {
                ReferenceType();
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("Type", "Java.ccc", 541, 4);
            throw new ParseException(getToken(1), first_set$Java_ccc$541$4, parsingStack);
        }
    }

    private static final EnumSet<TokenType> ReferenceType_FIRST_SET = ReferenceType_FIRST_SET_init();

    private static EnumSet<TokenType> ReferenceType_FIRST_SET_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, AT, IDENTIFIER);
    }

    // Java.ccc:552:1
    final public void ReferenceType() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ReferenceType";
        // Code for BNFProduction specified at Java.ccc:552:1
        ReferenceType thisProduction = null;
        if (buildTree) {
            thisProduction = new ReferenceType();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at Java.ccc:553:4
            if (scan$Java_ccc$553$4()) {
                // Code for NonTerminal specified at Java.ccc:553:4
                pushOntoCallStack("ReferenceType", "Java.ccc", 553, 4);
                try {
                    PrimitiveArrayType();
                } finally {
                    popCallStack();
                }
            } else if (typeMatches(AT, getToken(1)) || typeMatches(IDENTIFIER, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:555:4
                pushOntoCallStack("ReferenceType", "Java.ccc", 555, 4);
                try {
                    ObjectType();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at Java.ccc:555:15
                while (true) {
                    if (!(scan$Java_ccc$555$16())) break;
                    // Code for ZeroOrMore specified at Java.ccc:555:16
                    while (true) {
                        if (!(scan$Java_ccc$555$17())) break;
                        // Code for NonTerminal specified at Java.ccc:555:17
                        pushOntoCallStack("ReferenceType", "Java.ccc", 555, 17);
                        try {
                            Annotation();
                        } finally {
                            popCallStack();
                        }
                    }
                    // Code for Terminal specified at Java.ccc:555:30
                    pushOntoCallStack("ReferenceType", "Java.ccc", 555, 30);
                    try {
                        consumeToken(LBRACKET);
                    } finally {
                        popCallStack();
                    }
                    // Code for Terminal specified at Java.ccc:555:40
                    pushOntoCallStack("ReferenceType", "Java.ccc", 555, 40);
                    try {
                        consumeToken(RBRACKET);
                    } finally {
                        popCallStack();
                    }
                }
            } else {
                pushOntoCallStack("ReferenceType", "Java.ccc", 553, 4);
                throw new ParseException(getToken(1), ReferenceType_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:558:1
    final public void ObjectType() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ObjectType";
        // Code for BNFProduction specified at Java.ccc:558:1
        ObjectType thisProduction = null;
        if (buildTree) {
            thisProduction = new ObjectType();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ZeroOrMore specified at Java.ccc:559:5
            while (true) {
                if (!(scan$Java_ccc$559$6())) break;
                // Code for NonTerminal specified at Java.ccc:559:6
                pushOntoCallStack("ObjectType", "Java.ccc", 559, 6);
                try {
                    Annotation();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at Java.ccc:560:5
            pushOntoCallStack("ObjectType", "Java.ccc", 560, 5);
            try {
                TypeIdentifier();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:560:20
            if (scan$Java_ccc$560$22()) {
                // Code for NonTerminal specified at Java.ccc:560:22
                pushOntoCallStack("ObjectType", "Java.ccc", 560, 22);
                try {
                    TypeArguments();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrMore specified at Java.ccc:561:5
            while (true) {
                if (!(scan$Java_ccc$561$7())) break;
                // Code for Terminal specified at Java.ccc:561:7
                pushOntoCallStack("ObjectType", "Java.ccc", 561, 7);
                try {
                    consumeToken(DOT);
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at Java.ccc:561:13
                while (true) {
                    if (!(scan$Java_ccc$561$14())) break;
                    // Code for NonTerminal specified at Java.ccc:561:14
                    pushOntoCallStack("ObjectType", "Java.ccc", 561, 14);
                    try {
                        Annotation();
                    } finally {
                        popCallStack();
                    }
                }
                // Code for Terminal specified at Java.ccc:561:27
                pushOntoCallStack("ObjectType", "Java.ccc", 561, 27);
                try {
                    consumeToken(IDENTIFIER);
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrOne specified at Java.ccc:561:45
                if (scan$Java_ccc$561$47()) {
                    // Code for NonTerminal specified at Java.ccc:561:47
                    pushOntoCallStack("ObjectType", "Java.ccc", 561, 47);
                    try {
                        TypeArguments();
                    } finally {
                        popCallStack();
                    }
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:574:1
    final public void DiamondOperator() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "DiamondOperator";
        // Code for BNFProduction specified at Java.ccc:574:1
        DiamondOperator thisProduction = null;
        if (buildTree) {
            thisProduction = new DiamondOperator();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:574:20
            pushOntoCallStack("DiamondOperator", "Java.ccc", 574, 20);
            try {
                consumeToken(LT);
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:574:24
            pushOntoCallStack("DiamondOperator", "Java.ccc", 574, 24);
            try {
                consumeToken(GT);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> PossiblyEmptyTypeArguments_FIRST_SET = tokenTypeSet(LT);

    // Java.ccc:576:1
    final public void PossiblyEmptyTypeArguments() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "PossiblyEmptyTypeArguments";
        // Code for BNFProduction specified at Java.ccc:576:1
        // Code for ExpansionChoice specified at Java.ccc:577:4
        if (scan$Java_ccc$577$4()) {
            // Code for NonTerminal specified at Java.ccc:577:4
            pushOntoCallStack("PossiblyEmptyTypeArguments", "Java.ccc", 577, 4);
            try {
                DiamondOperator();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$579$4()) {
            // Code for NonTerminal specified at Java.ccc:579:4
            pushOntoCallStack("PossiblyEmptyTypeArguments", "Java.ccc", 579, 4);
            try {
                TypeArguments();
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("PossiblyEmptyTypeArguments", "Java.ccc", 577, 4);
            throw new ParseException(getToken(1), PossiblyEmptyTypeArguments_FIRST_SET, parsingStack);
        }
    }

    // Java.ccc:582:1
    final public void TypeArguments() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "TypeArguments";
        // Code for BNFProduction specified at Java.ccc:582:1
        TypeArguments thisProduction = null;
        if (buildTree) {
            thisProduction = new TypeArguments();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:584:3
            pushOntoCallStack("TypeArguments", "Java.ccc", 584, 3);
            try {
                consumeToken(LT);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:584:8
            pushOntoCallStack("TypeArguments", "Java.ccc", 584, 8);
            try {
                TypeArgument();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:584:21
            while (true) {
                if (!(typeMatches(COMMA, getToken(1)))) break;
                // Code for Terminal specified at Java.ccc:584:23
                pushOntoCallStack("TypeArguments", "Java.ccc", 584, 23);
                try {
                    consumeToken(COMMA);
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Java.ccc:584:31
                pushOntoCallStack("TypeArguments", "Java.ccc", 584, 31);
                try {
                    TypeArgument();
                } finally {
                    popCallStack();
                }
            }
            EnumSet<TokenType> previousActives34 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged35 = false;
            somethingChanged35 = somethingChanged35 |= deactivateTokenTypes(RSIGNEDSHIFT, RUNSIGNEDSHIFT);
            try {
                // Code for Terminal specified at Java.ccc:585:52
                pushOntoCallStack("TypeArguments", "Java.ccc", 585, 52);
                try {
                    consumeToken(GT);
                } finally {
                    popCallStack();
                }
            } finally {
                token_source.activeTokenTypes = previousActives34;
                if (somethingChanged35) {
                    token_source.reset(lastConsumedToken);
                    nextTokenType = null;
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> TypeArgument_FIRST_SET = TypeArgument_FIRST_SET_init();

    private static EnumSet<TokenType> TypeArgument_FIRST_SET_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, AT, HOOK, IDENTIFIER);
    }

    // Java.ccc:588:1
    final public void TypeArgument() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "TypeArgument";
        // Code for BNFProduction specified at Java.ccc:588:1
        TypeArgument thisProduction = null;
        if (buildTree) {
            thisProduction = new TypeArgument();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at Java.ccc:589:3
            if (scan$Java_ccc$589$3()) {
                // Code for ZeroOrMore specified at Java.ccc:589:3
                while (true) {
                    if (!(scan$Java_ccc$589$4())) break;
                    // Code for NonTerminal specified at Java.ccc:589:4
                    pushOntoCallStack("TypeArgument", "Java.ccc", 589, 4);
                    try {
                        Annotation();
                    } finally {
                        popCallStack();
                    }
                }
                // Code for Terminal specified at Java.ccc:589:17
                pushOntoCallStack("TypeArgument", "Java.ccc", 589, 17);
                try {
                    consumeToken(HOOK);
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrOne specified at Java.ccc:589:29
                if (typeMatches(EXTENDS, getToken(1)) || typeMatches(SUPER, getToken(1))) {
                    // Code for NonTerminal specified at Java.ccc:589:31
                    pushOntoCallStack("TypeArgument", "Java.ccc", 589, 31);
                    try {
                        WildcardBounds();
                    } finally {
                        popCallStack();
                    }
                }
            } else if (hasMatch(first_set$Java_ccc$591$3, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:591:3
                pushOntoCallStack("TypeArgument", "Java.ccc", 591, 3);
                try {
                    ReferenceType();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("TypeArgument", "Java.ccc", 589, 3);
                throw new ParseException(getToken(1), TypeArgument_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:594:1
    final public void WildcardBounds() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "WildcardBounds";
        // Code for BNFProduction specified at Java.ccc:594:1
        WildcardBounds thisProduction = null;
        if (buildTree) {
            thisProduction = new WildcardBounds();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            if (typeMatches(EXTENDS, getToken(1))) {
                // Code for Terminal specified at Java.ccc:594:19
                pushOntoCallStack("WildcardBounds", "Java.ccc", 594, 19);
                try {
                    consumeToken(EXTENDS);
                } finally {
                    popCallStack();
                }
            } else if (typeMatches(SUPER, getToken(1))) {
                // Code for Terminal specified at Java.ccc:594:31
                pushOntoCallStack("WildcardBounds", "Java.ccc", 594, 31);
                try {
                    consumeToken(SUPER);
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("WildcardBounds", "Java.ccc", 594, 19);
                throw new ParseException(getToken(1), first_set$Java_ccc$594$19, parsingStack);
            }
            // Code for NonTerminal specified at Java.ccc:594:40
            pushOntoCallStack("WildcardBounds", "Java.ccc", 594, 40);
            try {
                ReferenceType();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:596:1
    final public void PrimitiveType() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "PrimitiveType";
        // Code for BNFProduction specified at Java.ccc:596:1
        PrimitiveType thisProduction = null;
        if (buildTree) {
            thisProduction = new PrimitiveType();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ZeroOrMore specified at Java.ccc:597:3
            while (true) {
                if (!(scan$Java_ccc$597$4())) break;
                // Code for NonTerminal specified at Java.ccc:597:4
                pushOntoCallStack("PrimitiveType", "Java.ccc", 597, 4);
                try {
                    Annotation();
                } finally {
                    popCallStack();
                }
            }
            if (typeMatches(BOOLEAN, getToken(1))) {
                // Code for Terminal specified at Java.ccc:598:4
                pushOntoCallStack("PrimitiveType", "Java.ccc", 598, 4);
                try {
                    consumeToken(BOOLEAN);
                } finally {
                    popCallStack();
                }
            } else if (hasMatch(first_set$Java_ccc$598$16, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:598:16
                pushOntoCallStack("PrimitiveType", "Java.ccc", 598, 16);
                try {
                    NumericType();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("PrimitiveType", "Java.ccc", 598, 4);
                throw new ParseException(getToken(1), first_set$Java_ccc$598$4, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> NumericType_FIRST_SET = tokenTypeSet(BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT);

    // Java.ccc:602:1
    final public void NumericType() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "NumericType";
        // Code for BNFProduction specified at Java.ccc:602:1
        // Code for ExpansionChoice specified at Java.ccc:603:2
        if (typeMatches(CHAR, getToken(1))) {
            // Code for Terminal specified at Java.ccc:603:2
            pushOntoCallStack("NumericType", "Java.ccc", 603, 2);
            try {
                consumeToken(CHAR);
            } finally {
                popCallStack();
            }
        } else if (typeMatches(BYTE, getToken(1))) {
            // Code for Terminal specified at Java.ccc:603:11
            pushOntoCallStack("NumericType", "Java.ccc", 603, 11);
            try {
                consumeToken(BYTE);
            } finally {
                popCallStack();
            }
        } else if (typeMatches(SHORT, getToken(1))) {
            // Code for Terminal specified at Java.ccc:603:20
            pushOntoCallStack("NumericType", "Java.ccc", 603, 20);
            try {
                consumeToken(SHORT);
            } finally {
                popCallStack();
            }
        } else if (typeMatches(INT, getToken(1))) {
            // Code for Terminal specified at Java.ccc:603:30
            pushOntoCallStack("NumericType", "Java.ccc", 603, 30);
            try {
                consumeToken(INT);
            } finally {
                popCallStack();
            }
        } else if (typeMatches(LONG, getToken(1))) {
            // Code for Terminal specified at Java.ccc:604:6
            pushOntoCallStack("NumericType", "Java.ccc", 604, 6);
            try {
                consumeToken(LONG);
            } finally {
                popCallStack();
            }
        } else if (typeMatches(FLOAT, getToken(1))) {
            // Code for Terminal specified at Java.ccc:604:15
            pushOntoCallStack("NumericType", "Java.ccc", 604, 15);
            try {
                consumeToken(FLOAT);
            } finally {
                popCallStack();
            }
        } else if (typeMatches(DOUBLE, getToken(1))) {
            // Code for Terminal specified at Java.ccc:604:25
            pushOntoCallStack("NumericType", "Java.ccc", 604, 25);
            try {
                consumeToken(DOUBLE);
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("NumericType", "Java.ccc", 603, 2);
            throw new ParseException(getToken(1), NumericType_FIRST_SET, parsingStack);
        }
    }

    // Java.ccc:607:1
    final public void PrimitiveArrayType() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "PrimitiveArrayType";
        // Code for BNFProduction specified at Java.ccc:607:1
        PrimitiveArrayType thisProduction = null;
        if (buildTree) {
            thisProduction = new PrimitiveArrayType();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:607:22
            pushOntoCallStack("PrimitiveArrayType", "Java.ccc", 607, 22);
            try {
                PrimitiveType();
            } finally {
                popCallStack();
            }
            // Code for OneOrMore specified at Java.ccc:607:36
            while (true) {
                // Code for ZeroOrMore specified at Java.ccc:607:37
                while (true) {
                    if (!(scan$Java_ccc$607$38())) break;
                    // Code for NonTerminal specified at Java.ccc:607:38
                    pushOntoCallStack("PrimitiveArrayType", "Java.ccc", 607, 38);
                    try {
                        Annotation();
                    } finally {
                        popCallStack();
                    }
                }
                // Code for Terminal specified at Java.ccc:607:51
                pushOntoCallStack("PrimitiveArrayType", "Java.ccc", 607, 51);
                try {
                    consumeToken(LBRACKET);
                } finally {
                    popCallStack();
                }
                // Code for Terminal specified at Java.ccc:607:67
                pushOntoCallStack("PrimitiveArrayType", "Java.ccc", 607, 67);
                try {
                    consumeToken(RBRACKET);
                } finally {
                    popCallStack();
                }
                if (!(scan$Java_ccc$607$37())) break;
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> ReturnType_FIRST_SET = ReturnType_FIRST_SET_init();

    private static EnumSet<TokenType> ReturnType_FIRST_SET_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, VOID, AT, IDENTIFIER);
    }

    // Java.ccc:609:1
    final public void ReturnType() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ReturnType";
        // Code for BNFProduction specified at Java.ccc:609:1
        ReturnType thisProduction = null;
        if (buildTree) {
            thisProduction = new ReturnType();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at Java.ccc:609:15
            if (typeMatches(VOID, getToken(1))) {
                // Code for Terminal specified at Java.ccc:609:15
                pushOntoCallStack("ReturnType", "Java.ccc", 609, 15);
                try {
                    consumeToken(VOID);
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$609$24()) {
                // Code for NonTerminal specified at Java.ccc:609:24
                pushOntoCallStack("ReturnType", "Java.ccc", 609, 24);
                try {
                    Type();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("ReturnType", "Java.ccc", 609, 15);
                throw new ParseException(getToken(1), ReturnType_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:611:1
    final public void Name() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Name";
        // Code for BNFProduction specified at Java.ccc:611:1
        Name thisProduction = null;
        if (buildTree) {
            thisProduction = new Name();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:611:9
            pushOntoCallStack("Name", "Java.ccc", 611, 9);
            try {
                consumeToken(IDENTIFIER);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:611:22
            while (true) {
                if (!(scan$Java_ccc$611$23())) break;
                // Code for Terminal specified at Java.ccc:611:23
                pushOntoCallStack("Name", "Java.ccc", 611, 23);
                try {
                    consumeToken(DOT);
                } finally {
                    popCallStack();
                }
                // Code for Terminal specified at Java.ccc:611:29
                pushOntoCallStack("Name", "Java.ccc", 611, 29);
                try {
                    consumeToken(IDENTIFIER);
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:613:1
    final public void ThrowsList() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ThrowsList";
        // Code for BNFProduction specified at Java.ccc:613:1
        ThrowsList thisProduction = null;
        if (buildTree) {
            thisProduction = new ThrowsList();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:613:14
            pushOntoCallStack("ThrowsList", "Java.ccc", 613, 14);
            try {
                consumeToken(THROWS);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:613:23
            pushOntoCallStack("ThrowsList", "Java.ccc", 613, 23);
            try {
                ExceptionType();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:613:37
            while (true) {
                if (!(typeMatches(COMMA, getToken(1)))) break;
                // Code for Terminal specified at Java.ccc:613:39
                pushOntoCallStack("ThrowsList", "Java.ccc", 613, 39);
                try {
                    consumeToken(COMMA);
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Java.ccc:613:47
                pushOntoCallStack("ThrowsList", "Java.ccc", 613, 47);
                try {
                    ExceptionType();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:615:1
    final public void ExceptionType() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ExceptionType";
        // Code for BNFProduction specified at Java.ccc:615:1
        ObjectType thisProduction = null;
        if (buildTree) {
            thisProduction = new ObjectType();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ZeroOrMore specified at Java.ccc:616:5
            while (true) {
                if (!(scan$Java_ccc$616$6())) break;
                // Code for NonTerminal specified at Java.ccc:616:6
                pushOntoCallStack("ExceptionType", "Java.ccc", 616, 6);
                try {
                    Annotation();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:617:5
            pushOntoCallStack("ExceptionType", "Java.ccc", 617, 5);
            try {
                consumeToken(IDENTIFIER);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:618:5
            while (true) {
                if (!(scan$Java_ccc$619$8())) break;
                // Code for Terminal specified at Java.ccc:619:8
                pushOntoCallStack("ExceptionType", "Java.ccc", 619, 8);
                try {
                    consumeToken(DOT);
                } finally {
                    popCallStack();
                }
                // Code for Terminal specified at Java.ccc:619:14
                pushOntoCallStack("ExceptionType", "Java.ccc", 619, 14);
                try {
                    consumeToken(IDENTIFIER);
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Java.ccc:621:5
            if (scan$Java_ccc$622$7()) {
                // Code for Terminal specified at Java.ccc:622:7
                pushOntoCallStack("ExceptionType", "Java.ccc", 622, 7);
                try {
                    consumeToken(DOT);
                } finally {
                    popCallStack();
                }
                // Code for OneOrMore specified at Java.ccc:623:7
                while (true) {
                    // Code for NonTerminal specified at Java.ccc:623:8
                    pushOntoCallStack("ExceptionType", "Java.ccc", 623, 8);
                    try {
                        Annotation();
                    } finally {
                        popCallStack();
                    }
                    if (!(scan$Java_ccc$623$8())) break;
                }
                // Code for Terminal specified at Java.ccc:624:7
                pushOntoCallStack("ExceptionType", "Java.ccc", 624, 7);
                try {
                    consumeToken(IDENTIFIER);
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Java.ccc:626:5
            if (scan$Java_ccc$626$6()) {
                // Code for NonTerminal specified at Java.ccc:626:6
                pushOntoCallStack("ExceptionType", "Java.ccc", 626, 6);
                try {
                    TypeArguments();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:706:1
    final public Expression Expression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Expression";
        // Code for BNFProduction specified at Java.ccc:706:1
        // Code for NonTerminal specified at Java.ccc:707:5
        pushOntoCallStack("Expression", "Java.ccc", 707, 5);
        try {
            ConditionalOrExpression();
        } finally {
            popCallStack();
        }
        // Code for ZeroOrOne specified at Java.ccc:708:5
        // Code for ExpansionChoice specified at Java.ccc:709:7
        if (typeMatches(HOOK, getToken(1))) {
            TernaryExpression Expression1 = null;
            if (buildTree) {
                Expression1 = new TernaryExpression();
                openNodeScope(Expression1);
            }
            ParseException parseException27 = null;
            int callStackSize28 = parsingStack.size();
            try {
                // Code for Terminal specified at Java.ccc:709:8
                pushOntoCallStack("Expression", "Java.ccc", 709, 8);
                try {
                    consumeToken(HOOK);
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Java.ccc:709:15
                pushOntoCallStack("Expression", "Java.ccc", 709, 15);
                try {
                    Expression();
                } finally {
                    popCallStack();
                }
                // Code for Terminal specified at Java.ccc:709:26
                pushOntoCallStack("Expression", "Java.ccc", 709, 26);
                try {
                    consumeToken(COLON);
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Java.ccc:709:34
                pushOntoCallStack("Expression", "Java.ccc", 709, 34);
                try {
                    Expression();
                } finally {
                    popCallStack();
                }
            } catch (ParseException e) {
                parseException27 = e;
                throw e;
            } finally {
                restoreCallStack(callStackSize28);
                if (Expression1 != null) {
                    if (parseException27 == null) {
                        closeNodeScope(Expression1, nodeArity() + 1);
                    } else {
                        clearNodeScope();
                    }
                }
            }
        } else if (hasMatch(first_set$Java_ccc$711$7, getToken(1))) {
            // Code for CodeBlock specified at Java.ccc:711:7
            Expression lhs = (Expression) peekNode();
            AssignmentExpression Expression2 = null;
            if (buildTree) {
                Expression2 = new AssignmentExpression();
                openNodeScope(Expression2);
            }
            ParseException parseException56 = null;
            int callStackSize57 = parsingStack.size();
            try {
                // Code for NonTerminal specified at Java.ccc:712:8
                pushOntoCallStack("Expression", "Java.ccc", 712, 8);
                try {
                    AssignmentOperator();
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Java.ccc:712:27
                pushOntoCallStack("Expression", "Java.ccc", 712, 27);
                try {
                    Expression();
                } finally {
                    popCallStack();
                }
            } catch (ParseException e) {
                parseException56 = e;
                throw e;
            } finally {
                restoreCallStack(callStackSize57);
                if (Expression2 != null) {
                    if (parseException56 == null) {
                        closeNodeScope(Expression2, nodeArity() + 1);
                    } else {
                        clearNodeScope();
                    }
                }
            }
            // Code for Assertion specified at Java.ccc:713:7
            if (!(lhs.canBeAssignedTo())) {
                pushOntoCallStack("Expression", "Java.ccc", 713, 7);
                fail("Assertion at: Java.ccc:713:7 failed. " + "The expression " + lhs + " cannot be assigned to.", lhs);
            }
        }
        // Code for CodeBlock specified at Java.ccc:716:5
        return (Expression) peekNode();
    }

    private static final EnumSet<TokenType> AssignmentOperator_FIRST_SET = AssignmentOperator_FIRST_SET_init();

    private static EnumSet<TokenType> AssignmentOperator_FIRST_SET_init() {
        return tokenTypeSet(ASSIGN, PLUSASSIGN, MINUSASSIGN, STARASSIGN, SLASHASSIGN, ANDASSIGN, ORASSIGN, XORASSIGN, REMASSIGN, LSHIFTASSIGN, RSIGNEDSHIFTASSIGN, RUNSIGNEDSHIFTASSIGN);
    }

    // Java.ccc:719:1
    final public void AssignmentOperator() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "AssignmentOperator";
        // Code for BNFProduction specified at Java.ccc:719:1
        // Code for ExpansionChoice specified at Java.ccc:720:3
        if (typeMatches(ASSIGN, getToken(1))) {
            // Code for Terminal specified at Java.ccc:720:3
            pushOntoCallStack("AssignmentOperator", "Java.ccc", 720, 3);
            try {
                consumeToken(ASSIGN);
            } finally {
                popCallStack();
            }
        } else if (typeMatches(STARASSIGN, getToken(1))) {
            // Code for Terminal specified at Java.ccc:720:14
            pushOntoCallStack("AssignmentOperator", "Java.ccc", 720, 14);
            try {
                consumeToken(STARASSIGN);
            } finally {
                popCallStack();
            }
        } else if (typeMatches(SLASHASSIGN, getToken(1))) {
            // Code for Terminal specified at Java.ccc:720:29
            pushOntoCallStack("AssignmentOperator", "Java.ccc", 720, 29);
            try {
                consumeToken(SLASHASSIGN);
            } finally {
                popCallStack();
            }
        } else if (typeMatches(REMASSIGN, getToken(1))) {
            // Code for Terminal specified at Java.ccc:720:45
            pushOntoCallStack("AssignmentOperator", "Java.ccc", 720, 45);
            try {
                consumeToken(REMASSIGN);
            } finally {
                popCallStack();
            }
        } else if (typeMatches(PLUSASSIGN, getToken(1))) {
            // Code for Terminal specified at Java.ccc:720:59
            pushOntoCallStack("AssignmentOperator", "Java.ccc", 720, 59);
            try {
                consumeToken(PLUSASSIGN);
            } finally {
                popCallStack();
            }
        } else if (typeMatches(MINUSASSIGN, getToken(1))) {
            // Code for Terminal specified at Java.ccc:721:5
            pushOntoCallStack("AssignmentOperator", "Java.ccc", 721, 5);
            try {
                consumeToken(MINUSASSIGN);
            } finally {
                popCallStack();
            }
        } else if (typeMatches(LSHIFTASSIGN, getToken(1))) {
            // Code for Terminal specified at Java.ccc:721:21
            pushOntoCallStack("AssignmentOperator", "Java.ccc", 721, 21);
            try {
                consumeToken(LSHIFTASSIGN);
            } finally {
                popCallStack();
            }
        } else if (typeMatches(RSIGNEDSHIFTASSIGN, getToken(1))) {
            // Code for Terminal specified at Java.ccc:721:38
            pushOntoCallStack("AssignmentOperator", "Java.ccc", 721, 38);
            try {
                consumeToken(RSIGNEDSHIFTASSIGN);
            } finally {
                popCallStack();
            }
        } else if (typeMatches(RUNSIGNEDSHIFTASSIGN, getToken(1))) {
            // Code for Terminal specified at Java.ccc:722:5
            pushOntoCallStack("AssignmentOperator", "Java.ccc", 722, 5);
            try {
                consumeToken(RUNSIGNEDSHIFTASSIGN);
            } finally {
                popCallStack();
            }
        } else if (typeMatches(ANDASSIGN, getToken(1))) {
            // Code for Terminal specified at Java.ccc:722:30
            pushOntoCallStack("AssignmentOperator", "Java.ccc", 722, 30);
            try {
                consumeToken(ANDASSIGN);
            } finally {
                popCallStack();
            }
        } else if (typeMatches(XORASSIGN, getToken(1))) {
            // Code for Terminal specified at Java.ccc:722:44
            pushOntoCallStack("AssignmentOperator", "Java.ccc", 722, 44);
            try {
                consumeToken(XORASSIGN);
            } finally {
                popCallStack();
            }
        } else if (typeMatches(ORASSIGN, getToken(1))) {
            // Code for Terminal specified at Java.ccc:722:58
            pushOntoCallStack("AssignmentOperator", "Java.ccc", 722, 58);
            try {
                consumeToken(ORASSIGN);
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("AssignmentOperator", "Java.ccc", 720, 3);
            throw new ParseException(getToken(1), AssignmentOperator_FIRST_SET, parsingStack);
        }
    }

    // Java.ccc:725:1
    final public void ConditionalOrExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ConditionalOrExpression";
        // Code for BNFProduction specified at Java.ccc:725:1
        ConditionalOrExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new ConditionalOrExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:726:3
            pushOntoCallStack("ConditionalOrExpression", "Java.ccc", 726, 3);
            try {
                ConditionalAndExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:726:28
            while (true) {
                if (!(typeMatches(SC_OR, getToken(1)))) break;
                // Code for Terminal specified at Java.ccc:726:30
                pushOntoCallStack("ConditionalOrExpression", "Java.ccc", 726, 30);
                try {
                    consumeToken(SC_OR);
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Java.ccc:726:38
                pushOntoCallStack("ConditionalOrExpression", "Java.ccc", 726, 38);
                try {
                    ConditionalAndExpression();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:729:1
    final public void ConditionalAndExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ConditionalAndExpression";
        // Code for BNFProduction specified at Java.ccc:729:1
        ConditionalAndExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new ConditionalAndExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:730:3
            pushOntoCallStack("ConditionalAndExpression", "Java.ccc", 730, 3);
            try {
                InclusiveOrExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:730:25
            while (true) {
                if (!(typeMatches(SC_AND, getToken(1)))) break;
                // Code for Terminal specified at Java.ccc:730:27
                pushOntoCallStack("ConditionalAndExpression", "Java.ccc", 730, 27);
                try {
                    consumeToken(SC_AND);
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Java.ccc:730:36
                pushOntoCallStack("ConditionalAndExpression", "Java.ccc", 730, 36);
                try {
                    InclusiveOrExpression();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:733:1
    final public void InclusiveOrExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "InclusiveOrExpression";
        // Code for BNFProduction specified at Java.ccc:733:1
        InclusiveOrExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new InclusiveOrExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:734:3
            pushOntoCallStack("InclusiveOrExpression", "Java.ccc", 734, 3);
            try {
                ExclusiveOrExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:734:25
            while (true) {
                if (!(typeMatches(BIT_OR, getToken(1)))) break;
                // Code for Terminal specified at Java.ccc:734:27
                pushOntoCallStack("InclusiveOrExpression", "Java.ccc", 734, 27);
                try {
                    consumeToken(BIT_OR);
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Java.ccc:734:36
                pushOntoCallStack("InclusiveOrExpression", "Java.ccc", 734, 36);
                try {
                    ExclusiveOrExpression();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:737:1
    final public void ExclusiveOrExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ExclusiveOrExpression";
        // Code for BNFProduction specified at Java.ccc:737:1
        ExclusiveOrExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new ExclusiveOrExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:738:3
            pushOntoCallStack("ExclusiveOrExpression", "Java.ccc", 738, 3);
            try {
                AndExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:738:17
            while (true) {
                if (!(typeMatches(XOR, getToken(1)))) break;
                // Code for Terminal specified at Java.ccc:738:19
                pushOntoCallStack("ExclusiveOrExpression", "Java.ccc", 738, 19);
                try {
                    consumeToken(XOR);
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Java.ccc:738:25
                pushOntoCallStack("ExclusiveOrExpression", "Java.ccc", 738, 25);
                try {
                    AndExpression();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:741:1
    final public void AndExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "AndExpression";
        // Code for BNFProduction specified at Java.ccc:741:1
        AndExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new AndExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:742:3
            pushOntoCallStack("AndExpression", "Java.ccc", 742, 3);
            try {
                EqualityExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:742:22
            while (true) {
                if (!(typeMatches(BIT_AND, getToken(1)))) break;
                // Code for Terminal specified at Java.ccc:742:24
                pushOntoCallStack("AndExpression", "Java.ccc", 742, 24);
                try {
                    consumeToken(BIT_AND);
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Java.ccc:742:34
                pushOntoCallStack("AndExpression", "Java.ccc", 742, 34);
                try {
                    EqualityExpression();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:745:1
    final public void EqualityExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "EqualityExpression";
        // Code for BNFProduction specified at Java.ccc:745:1
        EqualityExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new EqualityExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:746:3
            pushOntoCallStack("EqualityExpression", "Java.ccc", 746, 3);
            try {
                InstanceOfExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:746:24
            while (true) {
                if (!(typeMatches(EQ, getToken(1)) || typeMatches(NE, getToken(1)))) break;
                if (typeMatches(EQ, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:746:28
                    pushOntoCallStack("EqualityExpression", "Java.ccc", 746, 28);
                    try {
                        consumeToken(EQ);
                    } finally {
                        popCallStack();
                    }
                } else if (typeMatches(NE, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:746:35
                    pushOntoCallStack("EqualityExpression", "Java.ccc", 746, 35);
                    try {
                        consumeToken(NE);
                    } finally {
                        popCallStack();
                    }
                } else {
                    pushOntoCallStack("EqualityExpression", "Java.ccc", 746, 28);
                    throw new ParseException(getToken(1), first_set$Java_ccc$746$28, parsingStack);
                }
                // Code for NonTerminal specified at Java.ccc:746:42
                EqualityExpression EqualityExpression1 = null;
                if (buildTree) {
                    EqualityExpression1 = new EqualityExpression();
                    openNodeScope(EqualityExpression1);
                }
                ParseException parseException46 = null;
                int callStackSize47 = parsingStack.size();
                try {
                    pushOntoCallStack("EqualityExpression", "Java.ccc", 746, 42);
                    try {
                        InstanceOfExpression();
                    } finally {
                        popCallStack();
                    }
                } catch (ParseException e) {
                    parseException46 = e;
                    throw e;
                } finally {
                    restoreCallStack(callStackSize47);
                    if (EqualityExpression1 != null) {
                        if (parseException46 == null) {
                            closeNodeScope(EqualityExpression1, 3);
                        } else {
                            clearNodeScope();
                        }
                    }
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:749:1
    final public void InstanceOfExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "InstanceOfExpression";
        // Code for BNFProduction specified at Java.ccc:749:1
        InstanceOfExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new InstanceOfExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:750:3
            pushOntoCallStack("InstanceOfExpression", "Java.ccc", 750, 3);
            try {
                RelationalExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:751:3
            if (typeMatches(INSTANCEOF, getToken(1))) {
                // Code for Terminal specified at Java.ccc:752:5
                pushOntoCallStack("InstanceOfExpression", "Java.ccc", 752, 5);
                try {
                    consumeToken(INSTANCEOF);
                } finally {
                    popCallStack();
                }
                if (scan$Java_ccc$754$7()) {
                    // Code for NonTerminal specified at Java.ccc:754:7
                    pushOntoCallStack("InstanceOfExpression", "Java.ccc", 754, 7);
                    try {
                        LocalVariableDeclaration();
                    } finally {
                        popCallStack();
                    }
                } else if (scan$Java_ccc$756$7()) {
                    // Code for NonTerminal specified at Java.ccc:756:7
                    pushOntoCallStack("InstanceOfExpression", "Java.ccc", 756, 7);
                    try {
                        RecordPattern();
                    } finally {
                        popCallStack();
                    }
                } else if (hasMatch(first_set$Java_ccc$758$7, getToken(1))) {
                    // Code for NonTerminal specified at Java.ccc:758:7
                    pushOntoCallStack("InstanceOfExpression", "Java.ccc", 758, 7);
                    try {
                        ReferenceType();
                    } finally {
                        popCallStack();
                    }
                } else {
                    pushOntoCallStack("InstanceOfExpression", "Java.ccc", 754, 7);
                    throw new ParseException(getToken(1), first_set$Java_ccc$754$7, parsingStack);
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:763:1
    final public void RelationalExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "RelationalExpression";
        // Code for BNFProduction specified at Java.ccc:763:1
        RelationalExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new RelationalExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:764:3
            pushOntoCallStack("RelationalExpression", "Java.ccc", 764, 3);
            try {
                ShiftExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:765:3
            if (typeMatches(GT, getToken(1)) || typeMatches(LT, getToken(1)) || typeMatches(LE, getToken(1)) || typeMatches(GE, getToken(1))) {
                if (typeMatches(LT, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:766:7
                    pushOntoCallStack("RelationalExpression", "Java.ccc", 766, 7);
                    try {
                        consumeToken(LT);
                    } finally {
                        popCallStack();
                    }
                } else if (typeMatches(GT, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:766:14
                    pushOntoCallStack("RelationalExpression", "Java.ccc", 766, 14);
                    try {
                        consumeToken(GT);
                    } finally {
                        popCallStack();
                    }
                } else if (typeMatches(LE, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:766:21
                    pushOntoCallStack("RelationalExpression", "Java.ccc", 766, 21);
                    try {
                        consumeToken(LE);
                    } finally {
                        popCallStack();
                    }
                } else if (typeMatches(GE, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:766:28
                    pushOntoCallStack("RelationalExpression", "Java.ccc", 766, 28);
                    try {
                        consumeToken(GE);
                    } finally {
                        popCallStack();
                    }
                } else {
                    pushOntoCallStack("RelationalExpression", "Java.ccc", 766, 7);
                    throw new ParseException(getToken(1), first_set$Java_ccc$766$7, parsingStack);
                }
                // Code for NonTerminal specified at Java.ccc:767:5
                pushOntoCallStack("RelationalExpression", "Java.ccc", 767, 5);
                try {
                    ShiftExpression();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:772:1
    final public void ShiftExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ShiftExpression";
        // Code for BNFProduction specified at Java.ccc:772:1
        ShiftExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new ShiftExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:773:4
            pushOntoCallStack("ShiftExpression", "Java.ccc", 773, 4);
            try {
                AdditiveExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:774:4
            if (scan$Java_ccc$778$6()) {
                // Code for UncacheTokens specified at Java.ccc:778:41
                uncacheTokens();
            }
            // Code for ZeroOrMore specified at Java.ccc:780:4
            while (true) {
                if (!(typeMatches(LSHIFT, getToken(1)) || typeMatches(RSIGNEDSHIFT, getToken(1)) || typeMatches(RUNSIGNEDSHIFT, getToken(1)))) break;
                if (typeMatches(LSHIFT, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:781:8
                    pushOntoCallStack("ShiftExpression", "Java.ccc", 781, 8);
                    try {
                        consumeToken(LSHIFT);
                    } finally {
                        popCallStack();
                    }
                } else if (typeMatches(RSIGNEDSHIFT, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:781:19
                    pushOntoCallStack("ShiftExpression", "Java.ccc", 781, 19);
                    try {
                        consumeToken(RSIGNEDSHIFT);
                    } finally {
                        popCallStack();
                    }
                } else if (typeMatches(RUNSIGNEDSHIFT, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:781:36
                    pushOntoCallStack("ShiftExpression", "Java.ccc", 781, 36);
                    try {
                        consumeToken(RUNSIGNEDSHIFT);
                    } finally {
                        popCallStack();
                    }
                } else {
                    pushOntoCallStack("ShiftExpression", "Java.ccc", 781, 8);
                    throw new ParseException(getToken(1), first_set$Java_ccc$781$8, parsingStack);
                }
                // Code for NonTerminal specified at Java.ccc:782:7
                ShiftExpression ShiftExpression1 = null;
                if (buildTree) {
                    ShiftExpression1 = new ShiftExpression();
                    openNodeScope(ShiftExpression1);
                }
                ParseException parseException64 = null;
                int callStackSize65 = parsingStack.size();
                try {
                    pushOntoCallStack("ShiftExpression", "Java.ccc", 782, 7);
                    try {
                        AdditiveExpression();
                    } finally {
                        popCallStack();
                    }
                } catch (ParseException e) {
                    parseException64 = e;
                    throw e;
                } finally {
                    restoreCallStack(callStackSize65);
                    if (ShiftExpression1 != null) {
                        if (parseException64 == null) {
                            closeNodeScope(ShiftExpression1, 3);
                        } else {
                            clearNodeScope();
                        }
                    }
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:786:1
    final public void AdditiveExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "AdditiveExpression";
        // Code for BNFProduction specified at Java.ccc:786:1
        AdditiveExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new AdditiveExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:787:3
            pushOntoCallStack("AdditiveExpression", "Java.ccc", 787, 3);
            try {
                MultiplicativeExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:787:28
            while (true) {
                if (!(typeMatches(PLUS, getToken(1)) || typeMatches(MINUS, getToken(1)))) break;
                if (typeMatches(PLUS, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:787:33
                    pushOntoCallStack("AdditiveExpression", "Java.ccc", 787, 33);
                    try {
                        consumeToken(PLUS);
                    } finally {
                        popCallStack();
                    }
                } else if (typeMatches(MINUS, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:787:42
                    pushOntoCallStack("AdditiveExpression", "Java.ccc", 787, 42);
                    try {
                        consumeToken(MINUS);
                    } finally {
                        popCallStack();
                    }
                } else {
                    pushOntoCallStack("AdditiveExpression", "Java.ccc", 787, 33);
                    throw new ParseException(getToken(1), first_set$Java_ccc$787$33, parsingStack);
                }
                // Code for NonTerminal specified at Java.ccc:787:52
                pushOntoCallStack("AdditiveExpression", "Java.ccc", 787, 52);
                try {
                    MultiplicativeExpression();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:790:1
    final public void MultiplicativeExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "MultiplicativeExpression";
        // Code for BNFProduction specified at Java.ccc:790:1
        MultiplicativeExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new MultiplicativeExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:791:3
            pushOntoCallStack("MultiplicativeExpression", "Java.ccc", 791, 3);
            try {
                UnaryExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:791:19
            while (true) {
                if (!(typeMatches(STAR, getToken(1)) || typeMatches(SLASH, getToken(1)) || typeMatches(REM, getToken(1)))) break;
                if (typeMatches(STAR, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:791:24
                    pushOntoCallStack("MultiplicativeExpression", "Java.ccc", 791, 24);
                    try {
                        consumeToken(STAR);
                    } finally {
                        popCallStack();
                    }
                } else if (typeMatches(SLASH, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:791:33
                    pushOntoCallStack("MultiplicativeExpression", "Java.ccc", 791, 33);
                    try {
                        consumeToken(SLASH);
                    } finally {
                        popCallStack();
                    }
                } else if (typeMatches(REM, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:791:42
                    pushOntoCallStack("MultiplicativeExpression", "Java.ccc", 791, 42);
                    try {
                        consumeToken(REM);
                    } finally {
                        popCallStack();
                    }
                } else {
                    pushOntoCallStack("MultiplicativeExpression", "Java.ccc", 791, 24);
                    throw new ParseException(getToken(1), first_set$Java_ccc$791$24, parsingStack);
                }
                // Code for NonTerminal specified at Java.ccc:791:50
                pushOntoCallStack("MultiplicativeExpression", "Java.ccc", 791, 50);
                try {
                    UnaryExpression();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> UnaryExpression_FIRST_SET = UnaryExpression_FIRST_SET_init();

    private static EnumSet<TokenType> UnaryExpression_FIRST_SET_init() {
        return tokenTypeSet(UNDERSCORE, BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    // Java.ccc:794:1
    final public void UnaryExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "UnaryExpression";
        // Code for BNFProduction specified at Java.ccc:794:1
        UnaryExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new UnaryExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at Java.ccc:795:3
            if (typeMatches(PLUS, getToken(1)) || typeMatches(MINUS, getToken(1))) {
                if (typeMatches(PLUS, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:795:5
                    pushOntoCallStack("UnaryExpression", "Java.ccc", 795, 5);
                    try {
                        consumeToken(PLUS);
                    } finally {
                        popCallStack();
                    }
                } else if (typeMatches(MINUS, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:795:14
                    pushOntoCallStack("UnaryExpression", "Java.ccc", 795, 14);
                    try {
                        consumeToken(MINUS);
                    } finally {
                        popCallStack();
                    }
                } else {
                    pushOntoCallStack("UnaryExpression", "Java.ccc", 795, 5);
                    throw new ParseException(getToken(1), first_set$Java_ccc$795$5, parsingStack);
                }
                // Code for NonTerminal specified at Java.ccc:795:24
                pushOntoCallStack("UnaryExpression", "Java.ccc", 795, 24);
                try {
                    UnaryExpression();
                } finally {
                    popCallStack();
                }
            } else if (typeMatches(INCR, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:797:3
                pushOntoCallStack("UnaryExpression", "Java.ccc", 797, 3);
                try {
                    PreIncrementExpression();
                } finally {
                    popCallStack();
                }
            } else if (typeMatches(DECR, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:799:3
                pushOntoCallStack("UnaryExpression", "Java.ccc", 799, 3);
                try {
                    PreDecrementExpression();
                } finally {
                    popCallStack();
                }
            } else if (hasMatch(first_set$Java_ccc$801$3, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:801:3
                pushOntoCallStack("UnaryExpression", "Java.ccc", 801, 3);
                try {
                    UnaryExpressionNotPlusMinus();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("UnaryExpression", "Java.ccc", 795, 3);
                throw new ParseException(getToken(1), UnaryExpression_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:804:1
    final public void PreIncrementExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "PreIncrementExpression";
        // Code for BNFProduction specified at Java.ccc:804:1
        PreIncrementExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new PreIncrementExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:805:3
            pushOntoCallStack("PreIncrementExpression", "Java.ccc", 805, 3);
            try {
                consumeToken(INCR);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:805:10
            pushOntoCallStack("PreIncrementExpression", "Java.ccc", 805, 10);
            try {
                UnaryExpression();
            } finally {
                popCallStack();
            }
            // Code for Assertion specified at Java.ccc:806:3
            if (!(((Expression) peekNode()).canBeAssignedTo())) {
                pushOntoCallStack("PreIncrementExpression", "Java.ccc", 806, 3);
                fail("Assertion at: Java.ccc:806:3 failed. " + "Expression " + peekNode() + " is not an assignable variable.", peekNode());
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:810:1
    final public void PreDecrementExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "PreDecrementExpression";
        // Code for BNFProduction specified at Java.ccc:810:1
        PreDecrementExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new PreDecrementExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:811:3
            pushOntoCallStack("PreDecrementExpression", "Java.ccc", 811, 3);
            try {
                consumeToken(DECR);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:811:10
            pushOntoCallStack("PreDecrementExpression", "Java.ccc", 811, 10);
            try {
                UnaryExpression();
            } finally {
                popCallStack();
            }
            // Code for Assertion specified at Java.ccc:812:3
            if (!(((Expression) peekNode()).canBeAssignedTo())) {
                pushOntoCallStack("PreDecrementExpression", "Java.ccc", 812, 3);
                fail("Assertion at: Java.ccc:812:3 failed. " + "Expression " + peekNode() + " is not an assignable variable.", peekNode());
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> UnaryExpressionNotPlusMinus_FIRST_SET = UnaryExpressionNotPlusMinus_FIRST_SET_init();

    private static EnumSet<TokenType> UnaryExpressionNotPlusMinus_FIRST_SET_init() {
        return tokenTypeSet(UNDERSCORE, BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, AT, BANG, TILDE, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    // Java.ccc:816:1
    final public void UnaryExpressionNotPlusMinus() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "UnaryExpressionNotPlusMinus";
        // Code for BNFProduction specified at Java.ccc:816:1
        UnaryExpressionNotPlusMinus thisProduction = null;
        if (buildTree) {
            thisProduction = new UnaryExpressionNotPlusMinus();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at Java.ccc:817:3
            if (typeMatches(BANG, getToken(1)) || typeMatches(TILDE, getToken(1))) {
                if (typeMatches(TILDE, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:817:5
                    pushOntoCallStack("UnaryExpressionNotPlusMinus", "Java.ccc", 817, 5);
                    try {
                        consumeToken(TILDE);
                    } finally {
                        popCallStack();
                    }
                } else if (typeMatches(BANG, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:817:15
                    pushOntoCallStack("UnaryExpressionNotPlusMinus", "Java.ccc", 817, 15);
                    try {
                        consumeToken(BANG);
                    } finally {
                        popCallStack();
                    }
                } else {
                    pushOntoCallStack("UnaryExpressionNotPlusMinus", "Java.ccc", 817, 5);
                    throw new ParseException(getToken(1), first_set$Java_ccc$817$5, parsingStack);
                }
                // Code for NonTerminal specified at Java.ccc:817:24
                pushOntoCallStack("UnaryExpressionNotPlusMinus", "Java.ccc", 817, 24);
                try {
                    UnaryExpression();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$819$3()) {
                // Code for NonTerminal specified at Java.ccc:819:3
                pushOntoCallStack("UnaryExpressionNotPlusMinus", "Java.ccc", 819, 3);
                try {
                    LambdaExpression();
                } finally {
                    popCallStack();
                }
            } else if (typeMatches(SWITCH, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:821:3
                pushOntoCallStack("UnaryExpressionNotPlusMinus", "Java.ccc", 821, 3);
                try {
                    SwitchExpression();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$823$3()) {
                // Code for NonTerminal specified at Java.ccc:823:3
                pushOntoCallStack("UnaryExpressionNotPlusMinus", "Java.ccc", 823, 3);
                try {
                    PrimitiveCastExpression();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$825$3()) {
                // Code for NonTerminal specified at Java.ccc:825:3
                pushOntoCallStack("UnaryExpressionNotPlusMinus", "Java.ccc", 825, 3);
                try {
                    ObjectCastExpression();
                } finally {
                    popCallStack();
                }
            } else if (hasMatch(first_set$Java_ccc$827$3, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:827:3
                pushOntoCallStack("UnaryExpressionNotPlusMinus", "Java.ccc", 827, 3);
                try {
                    PostfixExpression();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("UnaryExpressionNotPlusMinus", "Java.ccc", 817, 3);
                throw new ParseException(getToken(1), UnaryExpressionNotPlusMinus_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:830:1
    final public void PostfixExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "PostfixExpression";
        // Code for BNFProduction specified at Java.ccc:830:1
        PostfixExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new PostfixExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:831:3
            pushOntoCallStack("PostfixExpression", "Java.ccc", 831, 3);
            try {
                PrimaryExpression();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at Java.ccc:832:3
            Expression lhs = (Expression) peekNode();
            // Code for ZeroOrOne specified at Java.ccc:833:3
            if (typeMatches(INCR, getToken(1)) || typeMatches(DECR, getToken(1))) {
                if (typeMatches(INCR, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:834:6
                    pushOntoCallStack("PostfixExpression", "Java.ccc", 834, 6);
                    try {
                        consumeToken(INCR);
                    } finally {
                        popCallStack();
                    }
                } else if (typeMatches(DECR, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:834:15
                    pushOntoCallStack("PostfixExpression", "Java.ccc", 834, 15);
                    try {
                        consumeToken(DECR);
                    } finally {
                        popCallStack();
                    }
                } else {
                    pushOntoCallStack("PostfixExpression", "Java.ccc", 834, 6);
                    throw new ParseException(getToken(1), first_set$Java_ccc$834$6, parsingStack);
                }
                // Code for Assertion specified at Java.ccc:835:5
                if (!(lhs.canBeAssignedTo())) {
                    pushOntoCallStack("PostfixExpression", "Java.ccc", 835, 5);
                    fail("Assertion at: Java.ccc:835:5 failed. " + "Expression " + lhs + " cannot be assigned to.", lhs);
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:839:1
    final public void SwitchExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "SwitchExpression";
        // Code for BNFProduction specified at Java.ccc:839:1
        SwitchExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new SwitchExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:840:4
            pushOntoCallStack("SwitchExpression", "Java.ccc", 840, 4);
            try {
                SwitchStatement();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> CastExpression_FIRST_SET = tokenTypeSet(LPAREN);

    // Java.ccc:855:1
    final public void CastExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "CastExpression";
        // Code for BNFProduction specified at Java.ccc:855:1
        CastExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new CastExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at Java.ccc:856:4
            if (scan$Java_ccc$856$4()) {
                // Code for NonTerminal specified at Java.ccc:856:4
                pushOntoCallStack("CastExpression", "Java.ccc", 856, 4);
                try {
                    PrimitiveCastExpression();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$858$4()) {
                // Code for NonTerminal specified at Java.ccc:858:4
                pushOntoCallStack("CastExpression", "Java.ccc", 858, 4);
                try {
                    ObjectCastExpression();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("CastExpression", "Java.ccc", 856, 4);
                throw new ParseException(getToken(1), CastExpression_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:861:1
    final public void PrimitiveCastExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "PrimitiveCastExpression";
        // Code for BNFProduction specified at Java.ccc:861:1
        PrimitiveCastExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new PrimitiveCastExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:862:4
            pushOntoCallStack("PrimitiveCastExpression", "Java.ccc", 862, 4);
            try {
                consumeToken(LPAREN);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:862:13
            pushOntoCallStack("PrimitiveCastExpression", "Java.ccc", 862, 13);
            try {
                PrimitiveType();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:862:27
            pushOntoCallStack("PrimitiveCastExpression", "Java.ccc", 862, 27);
            try {
                consumeToken(RPAREN);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:862:41
            pushOntoCallStack("PrimitiveCastExpression", "Java.ccc", 862, 41);
            try {
                UnaryExpression();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:866:1
    final public void ObjectCastExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ObjectCastExpression";
        // Code for BNFProduction specified at Java.ccc:866:1
        ObjectCastExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new ObjectCastExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:867:4
            pushOntoCallStack("ObjectCastExpression", "Java.ccc", 867, 4);
            try {
                consumeToken(LPAREN);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:868:4
            pushOntoCallStack("ObjectCastExpression", "Java.ccc", 868, 4);
            try {
                ReferenceType();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:869:4
            while (true) {
                if (!(typeMatches(BIT_AND, getToken(1)))) break;
                // Code for Terminal specified at Java.ccc:869:5
                pushOntoCallStack("ObjectCastExpression", "Java.ccc", 869, 5);
                try {
                    consumeToken(BIT_AND);
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Java.ccc:869:15
                pushOntoCallStack("ObjectCastExpression", "Java.ccc", 869, 15);
                try {
                    ObjectType();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:870:4
            pushOntoCallStack("ObjectCastExpression", "Java.ccc", 870, 4);
            try {
                consumeToken(RPAREN);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:872:4
            pushOntoCallStack("ObjectCastExpression", "Java.ccc", 872, 4);
            try {
                UnaryExpressionNotPlusMinus();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:875:1
    final public void PrimaryExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "PrimaryExpression";
        // Code for BNFProduction specified at Java.ccc:875:1
        if (hasMatch(first_set$Java_ccc$877$3, getToken(1))) {
            // Code for NonTerminal specified at Java.ccc:877:3
            pushOntoCallStack("PrimaryExpression", "Java.ccc", 877, 3);
            try {
                LiteralExpression();
            } finally {
                popCallStack();
            }
        } else if (typeMatches(THIS, getToken(1))) {
            // Code for Terminal specified at Java.ccc:879:3
            LiteralExpression PrimaryExpression1 = null;
            if (buildTree) {
                PrimaryExpression1 = new LiteralExpression();
                openNodeScope(PrimaryExpression1);
            }
            ParseException parseException30 = null;
            int callStackSize31 = parsingStack.size();
            try {
                pushOntoCallStack("PrimaryExpression", "Java.ccc", 879, 3);
                try {
                    consumeToken(THIS);
                } finally {
                    popCallStack();
                }
            } catch (ParseException e) {
                parseException30 = e;
                throw e;
            } finally {
                restoreCallStack(callStackSize31);
                if (PrimaryExpression1 != null) {
                    if (parseException30 == null) {
                        closeNodeScope(PrimaryExpression1, true);
                    } else {
                        clearNodeScope();
                    }
                }
            }
        } else if (typeMatches(SUPER, getToken(1))) {
            // Code for Terminal specified at Java.ccc:881:3
            LiteralExpression PrimaryExpression2 = null;
            if (buildTree) {
                PrimaryExpression2 = new LiteralExpression();
                openNodeScope(PrimaryExpression2);
            }
            ParseException parseException38 = null;
            int callStackSize39 = parsingStack.size();
            try {
                pushOntoCallStack("PrimaryExpression", "Java.ccc", 881, 3);
                try {
                    consumeToken(SUPER);
                } finally {
                    popCallStack();
                }
            } catch (ParseException e) {
                parseException38 = e;
                throw e;
            } finally {
                restoreCallStack(callStackSize39);
                if (PrimaryExpression2 != null) {
                    if (parseException38 == null) {
                        closeNodeScope(PrimaryExpression2, true);
                    } else {
                        clearNodeScope();
                    }
                }
            }
        } else if (typeMatches(LPAREN, getToken(1))) {
            // Code for NonTerminal specified at Java.ccc:883:3
            pushOntoCallStack("PrimaryExpression", "Java.ccc", 883, 3);
            try {
                Parentheses();
            } finally {
                popCallStack();
            }
        } else if (typeMatches(NEW, getToken(1))) {
            // Code for NonTerminal specified at Java.ccc:885:3
            pushOntoCallStack("PrimaryExpression", "Java.ccc", 885, 3);
            try {
                AllocationExpression();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$887$3()) {
            // Code for NonTerminal specified at Java.ccc:887:3
            pushOntoCallStack("PrimaryExpression", "Java.ccc", 887, 3);
            try {
                ClassLiteral();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$889$3()) {
            // Code for NonTerminal specified at Java.ccc:889:3
            pushOntoCallStack("PrimaryExpression", "Java.ccc", 889, 3);
            try {
                MethodReference();
            } finally {
                popCallStack();
            }
        } else if (typeMatches(IDENTIFIER, getToken(1))) {
            // Code for NonTerminal specified at Java.ccc:891:3
            pushOntoCallStack("PrimaryExpression", "Java.ccc", 891, 3);
            try {
                Name();
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("PrimaryExpression", "Java.ccc", 877, 3);
            throw new ParseException(getToken(1), first_set$Java_ccc$877$3$, parsingStack);
        }
        // Code for ZeroOrMore specified at Java.ccc:893:2
        while (true) {
            if (!(typeMatches(LPAREN, getToken(1)) || typeMatches(LBRACKET, getToken(1)) || typeMatches(DOT, getToken(1)) || typeMatches(DOUBLE_COLON, getToken(1)))) break;
            // Code for Assertion specified at Java.ccc:894:4
            if (!(!(peekNode() instanceof MethodReference))) {
                pushOntoCallStack("PrimaryExpression", "Java.ccc", 894, 4);
                fail("Assertion at: Java.ccc:894:4 failed. " + "A method reference cannot be derereferenced.", getToken(1));
            }
            // Code for Assertion specified at Java.ccc:895:4
            if (!(!(getToken(0) instanceof org.parsers.java.ast.NumericalLiteral))) {
                pushOntoCallStack("PrimaryExpression", "Java.ccc", 895, 4);
                fail("Assertion at: Java.ccc:895:4 failed. " + "A numerical literal cannot be derereferenced.", getToken(1));
            }
            // Code for Assertion specified at Java.ccc:896:4
            if (!(!(getToken(0) instanceof org.parsers.java.ast.BooleanLiteral))) {
                pushOntoCallStack("PrimaryExpression", "Java.ccc", 896, 4);
                fail("Assertion at: Java.ccc:896:4 failed. " + "A boolean literal cannot be derereferenced.", getToken(1));
            }
            if (scan$Java_ccc$898$5()) {
                DotThis PrimaryExpression3 = null;
                if (buildTree) {
                    PrimaryExpression3 = new DotThis();
                    openNodeScope(PrimaryExpression3);
                }
                ParseException parseException107 = null;
                int callStackSize108 = parsingStack.size();
                try {
                    // Code for Terminal specified at Java.ccc:898:6
                    pushOntoCallStack("PrimaryExpression", "Java.ccc", 898, 6);
                    try {
                        consumeToken(DOT);
                    } finally {
                        popCallStack();
                    }
                    // Code for Terminal specified at Java.ccc:898:12
                    pushOntoCallStack("PrimaryExpression", "Java.ccc", 898, 12);
                    try {
                        consumeToken(THIS);
                    } finally {
                        popCallStack();
                    }
                } catch (ParseException e) {
                    parseException107 = e;
                    throw e;
                } finally {
                    restoreCallStack(callStackSize108);
                    if (PrimaryExpression3 != null) {
                        if (parseException107 == null) {
                            closeNodeScope(PrimaryExpression3, nodeArity() + 1);
                        } else {
                            clearNodeScope();
                        }
                    }
                }
            } else if (scan$Java_ccc$900$5()) {
                DotSuper PrimaryExpression4 = null;
                if (buildTree) {
                    PrimaryExpression4 = new DotSuper();
                    openNodeScope(PrimaryExpression4);
                }
                ParseException parseException126 = null;
                int callStackSize127 = parsingStack.size();
                try {
                    // Code for Terminal specified at Java.ccc:900:6
                    pushOntoCallStack("PrimaryExpression", "Java.ccc", 900, 6);
                    try {
                        consumeToken(DOT);
                    } finally {
                        popCallStack();
                    }
                    // Code for Terminal specified at Java.ccc:900:12
                    pushOntoCallStack("PrimaryExpression", "Java.ccc", 900, 12);
                    try {
                        consumeToken(SUPER);
                    } finally {
                        popCallStack();
                    }
                } catch (ParseException e) {
                    parseException126 = e;
                    throw e;
                } finally {
                    restoreCallStack(callStackSize127);
                    if (PrimaryExpression4 != null) {
                        if (parseException126 == null) {
                            closeNodeScope(PrimaryExpression4, nodeArity() + 1);
                        } else {
                            clearNodeScope();
                        }
                    }
                }
            } else if (scan$Java_ccc$902$5()) {
                DotNew PrimaryExpression5 = null;
                if (buildTree) {
                    PrimaryExpression5 = new DotNew();
                    openNodeScope(PrimaryExpression5);
                }
                ParseException parseException145 = null;
                int callStackSize146 = parsingStack.size();
                try {
                    // Code for Terminal specified at Java.ccc:902:6
                    pushOntoCallStack("PrimaryExpression", "Java.ccc", 902, 6);
                    try {
                        consumeToken(DOT);
                    } finally {
                        popCallStack();
                    }
                    // Code for NonTerminal specified at Java.ccc:902:18
                    pushOntoCallStack("PrimaryExpression", "Java.ccc", 902, 18);
                    try {
                        AllocationExpression();
                    } finally {
                        popCallStack();
                    }
                } catch (ParseException e) {
                    parseException145 = e;
                    throw e;
                } finally {
                    restoreCallStack(callStackSize146);
                    if (PrimaryExpression5 != null) {
                        if (parseException145 == null) {
                            closeNodeScope(PrimaryExpression5, nodeArity() + 1);
                        } else {
                            clearNodeScope();
                        }
                    }
                }
            } else if (typeMatches(LBRACKET, getToken(1))) {
                ArrayAccess PrimaryExpression6 = null;
                if (buildTree) {
                    PrimaryExpression6 = new ArrayAccess();
                    openNodeScope(PrimaryExpression6);
                }
                ParseException parseException164 = null;
                int callStackSize165 = parsingStack.size();
                try {
                    // Code for Terminal specified at Java.ccc:904:6
                    pushOntoCallStack("PrimaryExpression", "Java.ccc", 904, 6);
                    try {
                        consumeToken(LBRACKET);
                    } finally {
                        popCallStack();
                    }
                    // Code for NonTerminal specified at Java.ccc:904:17
                    pushOntoCallStack("PrimaryExpression", "Java.ccc", 904, 17);
                    try {
                        Expression();
                    } finally {
                        popCallStack();
                    }
                    // Code for Terminal specified at Java.ccc:904:28
                    pushOntoCallStack("PrimaryExpression", "Java.ccc", 904, 28);
                    try {
                        consumeToken(RBRACKET);
                    } finally {
                        popCallStack();
                    }
                } catch (ParseException e) {
                    parseException164 = e;
                    throw e;
                } finally {
                    restoreCallStack(callStackSize165);
                    if (PrimaryExpression6 != null) {
                        if (parseException164 == null) {
                            closeNodeScope(PrimaryExpression6, nodeArity() + 1);
                        } else {
                            clearNodeScope();
                        }
                    }
                }
            } else if (typeMatches(DOT, getToken(1))) {
                DotName PrimaryExpression7 = null;
                if (buildTree) {
                    PrimaryExpression7 = new DotName();
                    openNodeScope(PrimaryExpression7);
                }
                ParseException parseException187 = null;
                int callStackSize188 = parsingStack.size();
                try {
                    // Code for Terminal specified at Java.ccc:906:6
                    pushOntoCallStack("PrimaryExpression", "Java.ccc", 906, 6);
                    try {
                        consumeToken(DOT);
                    } finally {
                        popCallStack();
                    }
                    // Code for ZeroOrOne specified at Java.ccc:906:12
                    if (scan$Java_ccc$906$13()) {
                        // Code for NonTerminal specified at Java.ccc:906:13
                        pushOntoCallStack("PrimaryExpression", "Java.ccc", 906, 13);
                        try {
                            TypeArguments();
                        } finally {
                            popCallStack();
                        }
                    }
                    // Code for Terminal specified at Java.ccc:906:28
                    pushOntoCallStack("PrimaryExpression", "Java.ccc", 906, 28);
                    try {
                        consumeToken(IDENTIFIER);
                    } finally {
                        popCallStack();
                    }
                } catch (ParseException e) {
                    parseException187 = e;
                    throw e;
                } finally {
                    restoreCallStack(callStackSize188);
                    if (PrimaryExpression7 != null) {
                        if (parseException187 == null) {
                            closeNodeScope(PrimaryExpression7, nodeArity() + 1);
                        } else {
                            clearNodeScope();
                        }
                    }
                }
            } else if (typeMatches(DOUBLE_COLON, getToken(1))) {
                MethodReference PrimaryExpression8 = null;
                if (buildTree) {
                    PrimaryExpression8 = new MethodReference();
                    openNodeScope(PrimaryExpression8);
                }
                ParseException parseException218 = null;
                int callStackSize219 = parsingStack.size();
                try {
                    // Code for Terminal specified at Java.ccc:908:6
                    pushOntoCallStack("PrimaryExpression", "Java.ccc", 908, 6);
                    try {
                        consumeToken(DOUBLE_COLON);
                    } finally {
                        popCallStack();
                    }
                    // Code for ZeroOrOne specified at Java.ccc:908:21
                    if (scan$Java_ccc$908$22()) {
                        // Code for NonTerminal specified at Java.ccc:908:22
                        pushOntoCallStack("PrimaryExpression", "Java.ccc", 908, 22);
                        try {
                            TypeArguments();
                        } finally {
                            popCallStack();
                        }
                    }
                    if (typeMatches(IDENTIFIER, getToken(1))) {
                        // Code for Terminal specified at Java.ccc:908:38
                        pushOntoCallStack("PrimaryExpression", "Java.ccc", 908, 38);
                        try {
                            consumeToken(IDENTIFIER);
                        } finally {
                            popCallStack();
                        }
                    } else if (typeMatches(NEW, getToken(1))) {
                        // Code for Terminal specified at Java.ccc:908:51
                        pushOntoCallStack("PrimaryExpression", "Java.ccc", 908, 51);
                        try {
                            consumeToken(NEW);
                        } finally {
                            popCallStack();
                        }
                    } else {
                        pushOntoCallStack("PrimaryExpression", "Java.ccc", 908, 38);
                        throw new ParseException(getToken(1), first_set$Java_ccc$908$38, parsingStack);
                    }
                } catch (ParseException e) {
                    parseException218 = e;
                    throw e;
                } finally {
                    restoreCallStack(callStackSize219);
                    if (PrimaryExpression8 != null) {
                        if (parseException218 == null) {
                            closeNodeScope(PrimaryExpression8, nodeArity() + 1);
                        } else {
                            clearNodeScope();
                        }
                    }
                }
            } else if (scan$Java_ccc$910$5()) {
                // Code for Assertion specified at Java.ccc:910:5
                // Code for NonTerminal specified at Java.ccc:911:5
                MethodCall PrimaryExpression9 = null;
                if (buildTree) {
                    PrimaryExpression9 = new MethodCall();
                    openNodeScope(PrimaryExpression9);
                }
                ParseException parseException270 = null;
                int callStackSize271 = parsingStack.size();
                try {
                    pushOntoCallStack("PrimaryExpression", "Java.ccc", 911, 5);
                    try {
                        InvocationArguments();
                    } finally {
                        popCallStack();
                    }
                } catch (ParseException e) {
                    parseException270 = e;
                    throw e;
                } finally {
                    restoreCallStack(callStackSize271);
                    if (PrimaryExpression9 != null) {
                        if (parseException270 == null) {
                            closeNodeScope(PrimaryExpression9, nodeArity() + 1);
                        } else {
                            clearNodeScope();
                        }
                    }
                }
            } else {
                pushOntoCallStack("PrimaryExpression", "Java.ccc", 898, 5);
                throw new ParseException(getToken(1), first_set$Java_ccc$898$5, parsingStack);
            }
        }
        // Code for Assertion specified at Java.ccc:914:2
        if (!(getTokenType(0) != SUPER)) {
            pushOntoCallStack("PrimaryExpression", "Java.ccc", 914, 2);
            fail("Assertion at: Java.ccc:914:2 failed. " + "Not a valid expression here " + getToken(0).getLocation(), getToken(0));
        }
    }

    // Java.ccc:917:1
    final public void LiteralExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "LiteralExpression";
        // Code for BNFProduction specified at Java.ccc:917:1
        LiteralExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new LiteralExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:917:22
            pushOntoCallStack("LiteralExpression", "Java.ccc", 917, 22);
            try {
                Literal();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:919:1
    final public void Parentheses() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Parentheses";
        // Code for BNFProduction specified at Java.ccc:919:1
        Parentheses thisProduction = null;
        if (buildTree) {
            thisProduction = new Parentheses();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:920:5
            pushOntoCallStack("Parentheses", "Java.ccc", 920, 5);
            try {
                consumeToken(LPAREN);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:921:5
            pushOntoCallStack("Parentheses", "Java.ccc", 921, 5);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at Java.ccc:921:16
            thisProduction.setNestedExpression((Expression) peekNode());
            // Code for Terminal specified at Java.ccc:922:5
            pushOntoCallStack("Parentheses", "Java.ccc", 922, 5);
            try {
                consumeToken(RPAREN);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:931:1
    final public void ClassLiteral() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ClassLiteral";
        // Code for BNFProduction specified at Java.ccc:931:1
        ClassLiteral thisProduction = null;
        if (buildTree) {
            thisProduction = new ClassLiteral();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            if (typeMatches(VOID, getToken(1))) {
                // Code for Terminal specified at Java.ccc:933:4
                pushOntoCallStack("ClassLiteral", "Java.ccc", 933, 4);
                try {
                    consumeToken(VOID);
                } finally {
                    popCallStack();
                }
                // Code for Terminal specified at Java.ccc:933:10
                pushOntoCallStack("ClassLiteral", "Java.ccc", 933, 10);
                try {
                    consumeToken(DOT);
                } finally {
                    popCallStack();
                }
                // Code for Terminal specified at Java.ccc:933:15
                pushOntoCallStack("ClassLiteral", "Java.ccc", 933, 15);
                try {
                    consumeToken(CLASS);
                } finally {
                    popCallStack();
                }
            } else if (hasMatch(first_set$Java_ccc$935$4, getToken(1))) {
                if (typeMatches(BOOLEAN, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:936:6
                    pushOntoCallStack("ClassLiteral", "Java.ccc", 936, 6);
                    try {
                        consumeToken(BOOLEAN);
                    } finally {
                        popCallStack();
                    }
                } else if (hasMatch(first_set$Java_ccc$938$6, getToken(1))) {
                    // Code for NonTerminal specified at Java.ccc:938:6
                    pushOntoCallStack("ClassLiteral", "Java.ccc", 938, 6);
                    try {
                        NumericType();
                    } finally {
                        popCallStack();
                    }
                } else if (typeMatches(IDENTIFIER, getToken(1))) {
                    // Code for NonTerminal specified at Java.ccc:940:6
                    pushOntoCallStack("ClassLiteral", "Java.ccc", 940, 6);
                    try {
                        Name();
                    } finally {
                        popCallStack();
                    }
                } else {
                    pushOntoCallStack("ClassLiteral", "Java.ccc", 936, 6);
                    throw new ParseException(getToken(1), first_set$Java_ccc$936$6, parsingStack);
                }
                // Code for ZeroOrMore specified at Java.ccc:942:4
                while (true) {
                    if (!(typeMatches(LBRACKET, getToken(1)))) break;
                    // Code for Terminal specified at Java.ccc:942:5
                    pushOntoCallStack("ClassLiteral", "Java.ccc", 942, 5);
                    try {
                        consumeToken(LBRACKET);
                    } finally {
                        popCallStack();
                    }
                    // Code for Terminal specified at Java.ccc:942:15
                    pushOntoCallStack("ClassLiteral", "Java.ccc", 942, 15);
                    try {
                        consumeToken(RBRACKET);
                    } finally {
                        popCallStack();
                    }
                }
                // Code for Terminal specified at Java.ccc:943:4
                pushOntoCallStack("ClassLiteral", "Java.ccc", 943, 4);
                try {
                    consumeToken(DOT);
                } finally {
                    popCallStack();
                }
                // Code for Terminal specified at Java.ccc:944:4
                pushOntoCallStack("ClassLiteral", "Java.ccc", 944, 4);
                try {
                    consumeToken(CLASS);
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("ClassLiteral", "Java.ccc", 933, 4);
                throw new ParseException(getToken(1), first_set$Java_ccc$933$4, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:949:1
    final public void MethodReference() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "MethodReference";
        // Code for BNFProduction specified at Java.ccc:949:1
        MethodReference thisProduction = null;
        if (buildTree) {
            thisProduction = new MethodReference();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            if (scan$Java_ccc$950$6()) {
                // Code for NonTerminal specified at Java.ccc:950:6
                pushOntoCallStack("MethodReference", "Java.ccc", 950, 6);
                try {
                    Type();
                } finally {
                    popCallStack();
                }
            } else if (typeMatches(SUPER, getToken(1))) {
                // Code for Terminal specified at Java.ccc:950:13
                pushOntoCallStack("MethodReference", "Java.ccc", 950, 13);
                try {
                    consumeToken(SUPER);
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("MethodReference", "Java.ccc", 950, 6);
                throw new ParseException(getToken(1), first_set$Java_ccc$950$6, parsingStack);
            }
            // Code for Terminal specified at Java.ccc:951:6
            pushOntoCallStack("MethodReference", "Java.ccc", 951, 6);
            try {
                consumeToken(DOUBLE_COLON);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:952:6
            if (scan$Java_ccc$952$7()) {
                // Code for NonTerminal specified at Java.ccc:952:7
                pushOntoCallStack("MethodReference", "Java.ccc", 952, 7);
                try {
                    TypeArguments();
                } finally {
                    popCallStack();
                }
            }
            if (typeMatches(IDENTIFIER, getToken(1))) {
                // Code for Terminal specified at Java.ccc:953:7
                pushOntoCallStack("MethodReference", "Java.ccc", 953, 7);
                try {
                    consumeToken(IDENTIFIER);
                } finally {
                    popCallStack();
                }
            } else if (typeMatches(NEW, getToken(1))) {
                // Code for Terminal specified at Java.ccc:953:20
                pushOntoCallStack("MethodReference", "Java.ccc", 953, 20);
                try {
                    consumeToken(NEW);
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("MethodReference", "Java.ccc", 953, 7);
                throw new ParseException(getToken(1), first_set$Java_ccc$953$7, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> Literal_FIRST_SET = Literal_FIRST_SET_init();

    private static EnumSet<TokenType> Literal_FIRST_SET_init() {
        return tokenTypeSet(FALSE, NULL, TRUE, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL);
    }

    // Java.ccc:956:1
    final public void Literal() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Literal";
        // Code for BNFProduction specified at Java.ccc:956:1
        // Code for ExpansionChoice specified at Java.ccc:957:3
        if (typeMatches(INTEGER_LITERAL, getToken(1))) {
            // Code for Terminal specified at Java.ccc:957:3
            pushOntoCallStack("Literal", "Java.ccc", 957, 3);
            try {
                consumeToken(INTEGER_LITERAL);
            } finally {
                popCallStack();
            }
        } else if (typeMatches(LONG_LITERAL, getToken(1))) {
            // Code for Terminal specified at Java.ccc:959:3
            pushOntoCallStack("Literal", "Java.ccc", 959, 3);
            try {
                consumeToken(LONG_LITERAL);
            } finally {
                popCallStack();
            }
        } else if (typeMatches(FLOATING_POINT_LITERAL, getToken(1))) {
            // Code for Terminal specified at Java.ccc:961:3
            pushOntoCallStack("Literal", "Java.ccc", 961, 3);
            try {
                consumeToken(FLOATING_POINT_LITERAL);
            } finally {
                popCallStack();
            }
        } else if (typeMatches(CHARACTER_LITERAL, getToken(1))) {
            // Code for Terminal specified at Java.ccc:963:3
            pushOntoCallStack("Literal", "Java.ccc", 963, 3);
            try {
                consumeToken(CHARACTER_LITERAL);
            } finally {
                popCallStack();
            }
        } else if (typeMatches(STRING_LITERAL, getToken(1))) {
            // Code for Terminal specified at Java.ccc:965:3
            pushOntoCallStack("Literal", "Java.ccc", 965, 3);
            try {
                consumeToken(STRING_LITERAL);
            } finally {
                popCallStack();
            }
        } else if (typeMatches(TEXT_BLOCK_LITERAL, getToken(1))) {
            // Code for Terminal specified at Java.ccc:967:3
            pushOntoCallStack("Literal", "Java.ccc", 967, 3);
            try {
                consumeToken(TEXT_BLOCK_LITERAL);
            } finally {
                popCallStack();
            }
        } else if (typeMatches(TRUE, getToken(1))) {
            // Code for Terminal specified at Java.ccc:969:3
            pushOntoCallStack("Literal", "Java.ccc", 969, 3);
            try {
                consumeToken(TRUE);
            } finally {
                popCallStack();
            }
        } else if (typeMatches(FALSE, getToken(1))) {
            // Code for Terminal specified at Java.ccc:971:3
            pushOntoCallStack("Literal", "Java.ccc", 971, 3);
            try {
                consumeToken(FALSE);
            } finally {
                popCallStack();
            }
        } else if (typeMatches(NULL, getToken(1))) {
            // Code for Terminal specified at Java.ccc:973:3
            pushOntoCallStack("Literal", "Java.ccc", 973, 3);
            try {
                consumeToken(NULL);
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("Literal", "Java.ccc", 957, 3);
            throw new ParseException(getToken(1), Literal_FIRST_SET, parsingStack);
        }
    }

    // Java.ccc:976:1
    final public void InvocationArguments() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "InvocationArguments";
        // Code for BNFProduction specified at Java.ccc:976:1
        InvocationArguments thisProduction = null;
        if (buildTree) {
            thisProduction = new InvocationArguments();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:977:5
            pushOntoCallStack("InvocationArguments", "Java.ccc", 977, 5);
            try {
                consumeToken(LPAREN);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:978:5
            if (hasMatch(first_set$Java_ccc$978$7, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:978:7
                pushOntoCallStack("InvocationArguments", "Java.ccc", 978, 7);
                try {
                    Expression();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at Java.ccc:978:18
                while (true) {
                    if (!(typeMatches(COMMA, getToken(1)))) break;
                    // Code for Terminal specified at Java.ccc:978:19
                    pushOntoCallStack("InvocationArguments", "Java.ccc", 978, 19);
                    try {
                        consumeToken(COMMA);
                    } finally {
                        popCallStack();
                    }
                    // Code for NonTerminal specified at Java.ccc:978:27
                    pushOntoCallStack("InvocationArguments", "Java.ccc", 978, 27);
                    try {
                        Expression();
                    } finally {
                        popCallStack();
                    }
                }
            }
            // Code for Terminal specified at Java.ccc:979:5
            pushOntoCallStack("InvocationArguments", "Java.ccc", 979, 5);
            try {
                consumeToken(RPAREN);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> AllocationExpression_FIRST_SET = tokenTypeSet(NEW);

    // Java.ccc:990:1
    final public void AllocationExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "AllocationExpression";
        // Code for BNFProduction specified at Java.ccc:990:1
        // Code for ExpansionChoice specified at Java.ccc:991:3
        if (scan$Java_ccc$991$3()) {
            // Code for NonTerminal specified at Java.ccc:991:3
            pushOntoCallStack("AllocationExpression", "Java.ccc", 991, 3);
            try {
                PrimitiveArrayInitialization();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$993$3()) {
            // Code for NonTerminal specified at Java.ccc:993:3
            pushOntoCallStack("AllocationExpression", "Java.ccc", 993, 3);
            try {
                ObjectArrayInitialization();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$995$3()) {
            // Code for NonTerminal specified at Java.ccc:995:3
            pushOntoCallStack("AllocationExpression", "Java.ccc", 995, 3);
            try {
                ObjectInstantiation();
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("AllocationExpression", "Java.ccc", 991, 3);
            throw new ParseException(getToken(1), AllocationExpression_FIRST_SET, parsingStack);
        }
    }

    // Java.ccc:998:1
    final public void PrimitiveArrayInitialization() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "PrimitiveArrayInitialization";
        // Code for BNFProduction specified at Java.ccc:998:1
        PrimitiveArrayInitialization thisProduction = null;
        if (buildTree) {
            thisProduction = new PrimitiveArrayInitialization();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:999:4
            pushOntoCallStack("PrimitiveArrayInitialization", "Java.ccc", 999, 4);
            try {
                consumeToken(NEW);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:999:10
            pushOntoCallStack("PrimitiveArrayInitialization", "Java.ccc", 999, 10);
            try {
                PrimitiveType();
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:999:29
            pushOntoCallStack("PrimitiveArrayInitialization", "Java.ccc", 999, 29);
            try {
                ArrayDimsAndInits();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1002:1
    final public void ObjectArrayInitialization() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ObjectArrayInitialization";
        // Code for BNFProduction specified at Java.ccc:1002:1
        ObjectArrayInitialization thisProduction = null;
        if (buildTree) {
            thisProduction = new ObjectArrayInitialization();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1003:4
            pushOntoCallStack("ObjectArrayInitialization", "Java.ccc", 1003, 4);
            try {
                consumeToken(NEW);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:1003:10
            if (scan$Java_ccc$1003$11()) {
                // Code for NonTerminal specified at Java.ccc:1003:11
                pushOntoCallStack("ObjectArrayInitialization", "Java.ccc", 1003, 11);
                try {
                    TypeArguments();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at Java.ccc:1003:26
            pushOntoCallStack("ObjectArrayInitialization", "Java.ccc", 1003, 26);
            try {
                ObjectType();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:1003:37
            if (typeMatches(LT, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:1003:38
                pushOntoCallStack("ObjectArrayInitialization", "Java.ccc", 1003, 38);
                try {
                    PossiblyEmptyTypeArguments();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at Java.ccc:1005:4
            pushOntoCallStack("ObjectArrayInitialization", "Java.ccc", 1005, 4);
            try {
                ArrayDimsAndInits();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1008:1
    final public void ObjectInstantiation() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ObjectInstantiation";
        // Code for BNFProduction specified at Java.ccc:1008:1
        ObjectInstantiation thisProduction = null;
        if (buildTree) {
            thisProduction = new ObjectInstantiation();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1009:4
            pushOntoCallStack("ObjectInstantiation", "Java.ccc", 1009, 4);
            try {
                consumeToken(NEW);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:1009:10
            if (scan$Java_ccc$1009$11()) {
                // Code for NonTerminal specified at Java.ccc:1009:11
                pushOntoCallStack("ObjectInstantiation", "Java.ccc", 1009, 11);
                try {
                    TypeArguments();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at Java.ccc:1009:26
            pushOntoCallStack("ObjectInstantiation", "Java.ccc", 1009, 26);
            try {
                ObjectType();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:1009:37
            if (typeMatches(LT, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:1009:38
                pushOntoCallStack("ObjectInstantiation", "Java.ccc", 1009, 38);
                try {
                    PossiblyEmptyTypeArguments();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at Java.ccc:1011:4
            pushOntoCallStack("ObjectInstantiation", "Java.ccc", 1011, 4);
            try {
                InvocationArguments();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:1011:24
            if (typeMatches(LBRACE, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:1011:25
                pushOntoCallStack("ObjectInstantiation", "Java.ccc", 1011, 25);
                try {
                    ClassOrInterfaceBody();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> ArrayDimsAndInits_FIRST_SET = tokenTypeSet(LBRACKET, AT);

    // Java.ccc:1014:1
    final public void ArrayDimsAndInits() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ArrayDimsAndInits";
        // Code for BNFProduction specified at Java.ccc:1014:1
        ArrayDimsAndInits thisProduction = null;
        if (buildTree) {
            thisProduction = new ArrayDimsAndInits();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at Java.ccc:1015:3
            if (scan$Java_ccc$1015$3()) {
                // Code for OneOrMore specified at Java.ccc:1016:3
                while (true) {
                    // Code for Terminal specified at Java.ccc:1017:5
                    pushOntoCallStack("ArrayDimsAndInits", "Java.ccc", 1017, 5);
                    try {
                        consumeToken(LBRACKET);
                    } finally {
                        popCallStack();
                    }
                    // Code for NonTerminal specified at Java.ccc:1017:22
                    pushOntoCallStack("ArrayDimsAndInits", "Java.ccc", 1017, 22);
                    try {
                        Expression();
                    } finally {
                        popCallStack();
                    }
                    // Code for Terminal specified at Java.ccc:1017:33
                    pushOntoCallStack("ArrayDimsAndInits", "Java.ccc", 1017, 33);
                    try {
                        consumeToken(RBRACKET);
                    } finally {
                        popCallStack();
                    }
                    if (!(scan$Java_ccc$1017$5())) break;
                }
                // Code for ZeroOrMore specified at Java.ccc:1019:3
                while (true) {
                    if (!(scan$Java_ccc$1020$5())) break;
                    // Code for ZeroOrMore specified at Java.ccc:1020:5
                    while (true) {
                        if (!(scan$Java_ccc$1020$6())) break;
                        // Code for NonTerminal specified at Java.ccc:1020:6
                        pushOntoCallStack("ArrayDimsAndInits", "Java.ccc", 1020, 6);
                        try {
                            Annotation();
                        } finally {
                            popCallStack();
                        }
                    }
                    // Code for Terminal specified at Java.ccc:1020:19
                    pushOntoCallStack("ArrayDimsAndInits", "Java.ccc", 1020, 19);
                    try {
                        consumeToken(LBRACKET);
                    } finally {
                        popCallStack();
                    }
                    // Code for Terminal specified at Java.ccc:1020:29
                    pushOntoCallStack("ArrayDimsAndInits", "Java.ccc", 1020, 29);
                    try {
                        consumeToken(RBRACKET);
                    } finally {
                        popCallStack();
                    }
                }
            } else if (typeMatches(LBRACKET, getToken(1)) || typeMatches(AT, getToken(1))) {
                // Code for OneOrMore specified at Java.ccc:1023:3
                while (true) {
                    // Code for ZeroOrMore specified at Java.ccc:1024:5
                    while (true) {
                        if (!(scan$Java_ccc$1024$6())) break;
                        // Code for NonTerminal specified at Java.ccc:1024:6
                        pushOntoCallStack("ArrayDimsAndInits", "Java.ccc", 1024, 6);
                        try {
                            Annotation();
                        } finally {
                            popCallStack();
                        }
                    }
                    // Code for Terminal specified at Java.ccc:1024:19
                    pushOntoCallStack("ArrayDimsAndInits", "Java.ccc", 1024, 19);
                    try {
                        consumeToken(LBRACKET);
                    } finally {
                        popCallStack();
                    }
                    // Code for Terminal specified at Java.ccc:1024:29
                    pushOntoCallStack("ArrayDimsAndInits", "Java.ccc", 1024, 29);
                    try {
                        consumeToken(RBRACKET);
                    } finally {
                        popCallStack();
                    }
                    if (!(typeMatches(LBRACKET, getToken(1)) || typeMatches(AT, getToken(1)))) break;
                }
                // Code for NonTerminal specified at Java.ccc:1026:3
                pushOntoCallStack("ArrayDimsAndInits", "Java.ccc", 1026, 3);
                try {
                    ArrayInitializer();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("ArrayDimsAndInits", "Java.ccc", 1015, 3);
                throw new ParseException(getToken(1), ArrayDimsAndInits_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1029:1
    final public void Label() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Label";
        // Code for BNFProduction specified at Java.ccc:1029:1
        Label thisProduction = null;
        if (buildTree) {
            thisProduction = new Label();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1029:9
            pushOntoCallStack("Label", "Java.ccc", 1029, 9);
            try {
                consumeToken(IDENTIFIER);
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1029:21
            pushOntoCallStack("Label", "Java.ccc", 1029, 21);
            try {
                consumeToken(COLON);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1031:1
    final public void LabeledStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "LabeledStatement";
        // Code for BNFProduction specified at Java.ccc:1031:1
        LabeledStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new LabeledStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:1031:20
            pushOntoCallStack("LabeledStatement", "Java.ccc", 1031, 20);
            try {
                Label();
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1031:31
            pushOntoCallStack("LabeledStatement", "Java.ccc", 1031, 31);
            try {
                Statement();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> Statement_FIRST_SET = Statement_FIRST_SET_init();

    private static EnumSet<TokenType> Statement_FIRST_SET_init() {
        return tokenTypeSet(UNDERSCORE, _ASSERT, BOOLEAN, BREAK, BYTE, CHAR, CONTINUE, DO, DOUBLE, FALSE, FLOAT, FOR, IF, INT, LONG, NEW, NULL, RETURN, SHORT, SUPER, SWITCH, SYNCHRONIZED, THIS, THROW, TRUE, TRY, VOID, WHILE, LPAREN, LBRACE, SEMICOLON, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, YIELD, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    // Java.ccc:1033:1
    final public void Statement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Statement";
        // Code for BNFProduction specified at Java.ccc:1033:1
        // Code for ExpansionChoice specified at Java.ccc:1034:3
        if (scan$Java_ccc$1034$3()) {
            // Code for NonTerminal specified at Java.ccc:1034:3
            pushOntoCallStack("Statement", "Java.ccc", 1034, 3);
            try {
                LabeledStatement();
            } finally {
                popCallStack();
            }
        } else if (typeMatches(_ASSERT, getToken(1))) {
            // Code for NonTerminal specified at Java.ccc:1036:3
            pushOntoCallStack("Statement", "Java.ccc", 1036, 3);
            try {
                AssertStatement();
            } finally {
                popCallStack();
            }
        } else if (typeMatches(LBRACE, getToken(1))) {
            // Code for NonTerminal specified at Java.ccc:1038:3
            pushOntoCallStack("Statement", "Java.ccc", 1038, 3);
            try {
                Block();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$1040$3()) {
            // Code for NonTerminal specified at Java.ccc:1040:3
            pushOntoCallStack("Statement", "Java.ccc", 1040, 3);
            try {
                YieldStatement();
            } finally {
                popCallStack();
            }
        } else if (typeMatches(SEMICOLON, getToken(1))) {
            // Code for NonTerminal specified at Java.ccc:1042:3
            pushOntoCallStack("Statement", "Java.ccc", 1042, 3);
            try {
                EmptyStatement();
            } finally {
                popCallStack();
            }
        } else if (typeMatches(SWITCH, getToken(1))) {
            // Code for NonTerminal specified at Java.ccc:1044:3
            pushOntoCallStack("Statement", "Java.ccc", 1044, 3);
            try {
                SwitchStatement();
            } finally {
                popCallStack();
            }
        } else if (typeMatches(IF, getToken(1))) {
            // Code for NonTerminal specified at Java.ccc:1046:3
            pushOntoCallStack("Statement", "Java.ccc", 1046, 3);
            try {
                IfStatement();
            } finally {
                popCallStack();
            }
        } else if (typeMatches(WHILE, getToken(1))) {
            // Code for NonTerminal specified at Java.ccc:1048:3
            pushOntoCallStack("Statement", "Java.ccc", 1048, 3);
            try {
                WhileStatement();
            } finally {
                popCallStack();
            }
        } else if (typeMatches(DO, getToken(1))) {
            // Code for NonTerminal specified at Java.ccc:1050:3
            pushOntoCallStack("Statement", "Java.ccc", 1050, 3);
            try {
                DoStatement();
            } finally {
                popCallStack();
            }
        } else if (typeMatches(FOR, getToken(1))) {
            // Code for NonTerminal specified at Java.ccc:1052:3
            pushOntoCallStack("Statement", "Java.ccc", 1052, 3);
            try {
                ForStatement();
            } finally {
                popCallStack();
            }
        } else if (typeMatches(BREAK, getToken(1))) {
            // Code for NonTerminal specified at Java.ccc:1054:3
            pushOntoCallStack("Statement", "Java.ccc", 1054, 3);
            try {
                BreakStatement();
            } finally {
                popCallStack();
            }
        } else if (typeMatches(CONTINUE, getToken(1))) {
            // Code for NonTerminal specified at Java.ccc:1056:3
            pushOntoCallStack("Statement", "Java.ccc", 1056, 3);
            try {
                ContinueStatement();
            } finally {
                popCallStack();
            }
        } else if (typeMatches(RETURN, getToken(1))) {
            // Code for NonTerminal specified at Java.ccc:1058:3
            pushOntoCallStack("Statement", "Java.ccc", 1058, 3);
            try {
                ReturnStatement();
            } finally {
                popCallStack();
            }
        } else if (typeMatches(THROW, getToken(1))) {
            // Code for NonTerminal specified at Java.ccc:1060:3
            pushOntoCallStack("Statement", "Java.ccc", 1060, 3);
            try {
                ThrowStatement();
            } finally {
                popCallStack();
            }
        } else if (typeMatches(SYNCHRONIZED, getToken(1))) {
            // Code for NonTerminal specified at Java.ccc:1062:3
            pushOntoCallStack("Statement", "Java.ccc", 1062, 3);
            try {
                SynchronizedStatement();
            } finally {
                popCallStack();
            }
        } else if (typeMatches(TRY, getToken(1))) {
            // Code for NonTerminal specified at Java.ccc:1064:3
            pushOntoCallStack("Statement", "Java.ccc", 1064, 3);
            try {
                TryStatement();
            } finally {
                popCallStack();
            }
        } else if (hasMatch(first_set$Java_ccc$1066$3, getToken(1))) {
            // Code for NonTerminal specified at Java.ccc:1066:3
            pushOntoCallStack("Statement", "Java.ccc", 1066, 3);
            try {
                ExpressionStatement();
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("Statement", "Java.ccc", 1034, 3);
            throw new ParseException(getToken(1), Statement_FIRST_SET, parsingStack);
        }
    }

    // Java.ccc:1090:1
    final public void AssertStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "AssertStatement";
        // Code for BNFProduction specified at Java.ccc:1090:1
        AssertStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new AssertStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1090:19
            pushOntoCallStack("AssertStatement", "Java.ccc", 1090, 19);
            try {
                consumeToken(_ASSERT);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1090:29
            pushOntoCallStack("AssertStatement", "Java.ccc", 1090, 29);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:1090:40
            if (typeMatches(COLON, getToken(1))) {
                // Code for Terminal specified at Java.ccc:1090:42
                pushOntoCallStack("AssertStatement", "Java.ccc", 1090, 42);
                try {
                    consumeToken(COLON);
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Java.ccc:1090:50
                pushOntoCallStack("AssertStatement", "Java.ccc", 1090, 50);
                try {
                    Expression();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:1090:63
            pushOntoCallStack("AssertStatement", "Java.ccc", 1090, 63);
            try {
                consumeToken(SEMICOLON);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1092:1
    final public void Block() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Block";
        // Code for BNFProduction specified at Java.ccc:1092:1
        CodeBlock thisProduction = null;
        if (buildTree) {
            thisProduction = new CodeBlock();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1092:20
            pushOntoCallStack("Block", "Java.ccc", 1092, 20);
            try {
                consumeToken(LBRACE);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:1092:29
            while (true) {
                if (!(scan$Java_ccc$1092$30())) break;
                // Code for NonTerminal specified at Java.ccc:1092:50
                pushOntoCallStack("Block", "Java.ccc", 1092, 50);
                try {
                    BlockStatement();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:1092:68
            pushOntoCallStack("Block", "Java.ccc", 1092, 68);
            try {
                consumeToken(RBRACE);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1094:1
    final public void BlockStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "BlockStatement";
        // Code for BNFProduction specified at Java.ccc:1094:1
        // Code for Assertion specified at Java.ccc:1095:2
        if (assert$Java_ccc$1095$11()) {
            pushOntoCallStack("BlockStatement", "Java.ccc", 1095, 2);
            fail("Assertion at: Java.ccc:1095:2 failed. " + "Cannot declare anything to be public, private, protected, or static  in a local context", getToken(1));
        }
        if (scan$Java_ccc$1098$3()) {
            // Code for NonTerminal specified at Java.ccc:1098:3
            pushOntoCallStack("BlockStatement", "Java.ccc", 1098, 3);
            try {
                RecordDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$1100$3()) {
            // Code for NonTerminal specified at Java.ccc:1100:3
            pushOntoCallStack("BlockStatement", "Java.ccc", 1100, 3);
            try {
                ClassDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$1102$3()) {
            // Code for NonTerminal specified at Java.ccc:1102:3
            pushOntoCallStack("BlockStatement", "Java.ccc", 1102, 3);
            try {
                InterfaceDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$1104$3()) {
            // Code for NonTerminal specified at Java.ccc:1104:3
            pushOntoCallStack("BlockStatement", "Java.ccc", 1104, 3);
            try {
                EnumDeclaration();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$1106$3()) {
            // Code for NonTerminal specified at Java.ccc:1106:3
            pushOntoCallStack("BlockStatement", "Java.ccc", 1106, 3);
            try {
                LocalVariableDeclaration();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at Java.ccc:1106:28
            Node varDecl = peekNode();
            // Code for Terminal specified at Java.ccc:1107:3
            pushOntoCallStack("BlockStatement", "Java.ccc", 1107, 3);
            try {
                consumeToken(SEMICOLON);
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at Java.ccc:1107:15
            varDecl.add(popNode());
        } else if (hasMatch(first_set$Java_ccc$1109$3, getToken(1))) {
            // Code for NonTerminal specified at Java.ccc:1109:3
            pushOntoCallStack("BlockStatement", "Java.ccc", 1109, 3);
            try {
                Statement();
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("BlockStatement", "Java.ccc", 1098, 3);
            throw new ParseException(getToken(1), first_set$Java_ccc$1098$3, parsingStack);
        }
    }

    // Java.ccc:1113:1
    final public void LocalVariableDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "LocalVariableDeclaration";
        // Code for BNFProduction specified at Java.ccc:1113:1
        LocalVariableDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new LocalVariableDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for CodeBlock specified at Java.ccc:1124:4
            permissibleModifiers = EnumSet.of(FINAL);
            // Code for NonTerminal specified at Java.ccc:1125:4
            pushOntoCallStack("LocalVariableDeclaration", "Java.ccc", 1125, 4);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            if (typeMatches(VAR, getToken(1))) {
                // Code for Terminal specified at Java.ccc:1127:7
                pushOntoCallStack("LocalVariableDeclaration", "Java.ccc", 1127, 7);
                try {
                    consumeToken(VAR);
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Java.ccc:1127:13
                pushOntoCallStack("LocalVariableDeclaration", "Java.ccc", 1127, 13);
                try {
                    VariableDeclarator();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$1129$7()) {
                // Code for NonTerminal specified at Java.ccc:1129:7
                pushOntoCallStack("LocalVariableDeclaration", "Java.ccc", 1129, 7);
                try {
                    Type();
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Java.ccc:1129:12
                pushOntoCallStack("LocalVariableDeclaration", "Java.ccc", 1129, 12);
                try {
                    VariableDeclarator();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at Java.ccc:1129:31
                while (true) {
                    if (!(typeMatches(COMMA, getToken(1)))) break;
                    // Code for Terminal specified at Java.ccc:1129:33
                    pushOntoCallStack("LocalVariableDeclaration", "Java.ccc", 1129, 33);
                    try {
                        consumeToken(COMMA);
                    } finally {
                        popCallStack();
                    }
                    // Code for NonTerminal specified at Java.ccc:1129:41
                    pushOntoCallStack("LocalVariableDeclaration", "Java.ccc", 1129, 41);
                    try {
                        VariableDeclarator();
                    } finally {
                        popCallStack();
                    }
                }
            } else {
                pushOntoCallStack("LocalVariableDeclaration", "Java.ccc", 1127, 7);
                throw new ParseException(getToken(1), first_set$Java_ccc$1127$7, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1133:1
    final public void EmptyStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "EmptyStatement";
        // Code for BNFProduction specified at Java.ccc:1133:1
        EmptyStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new EmptyStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1133:19
            pushOntoCallStack("EmptyStatement", "Java.ccc", 1133, 19);
            try {
                consumeToken(SEMICOLON);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1135:1
    final public void StatementExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "StatementExpression";
        // Code for BNFProduction specified at Java.ccc:1135:1
        StatementExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new StatementExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:1136:5
            pushOntoCallStack("StatementExpression", "Java.ccc", 1136, 5);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at Java.ccc:1137:5
            Expression exp = (Expression) peekNode();
            // Code for Assertion specified at Java.ccc:1138:5
            if (!(exp instanceof AssignmentExpression || exp instanceof PostfixExpression || exp instanceof PreDecrementExpression || exp instanceof PreIncrementExpression || exp instanceof MethodCall || exp instanceof ObjectInstantiation)) {
                pushOntoCallStack("StatementExpression", "Java.ccc", 1138, 5);
                fail("Assertion at: Java.ccc:1138:5 failed. " + "Expression " + exp + " is not a valid statement.\n" + "Expecting a method invocation, an assignment, or an object instantiation, i.e. new Foobar(...)", exp);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1151:1
    final public void ExpressionStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ExpressionStatement";
        // Code for BNFProduction specified at Java.ccc:1151:1
        ExpressionStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new ExpressionStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:1151:23
            pushOntoCallStack("ExpressionStatement", "Java.ccc", 1151, 23);
            try {
                StatementExpression();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1151:43
            pushOntoCallStack("ExpressionStatement", "Java.ccc", 1151, 43);
            try {
                consumeToken(SEMICOLON);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> CasePattern_FIRST_SET = CasePattern_FIRST_SET_init();

    private static EnumSet<TokenType> CasePattern_FIRST_SET_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, _DEFAULT, DOUBLE, FINAL, FLOAT, INT, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VOLATILE, NON_SEALED, SEALED, AT, VAR, IDENTIFIER);
    }

    // Java.ccc:1153:1
    final public void CasePattern() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "CasePattern";
        // Code for BNFProduction specified at Java.ccc:1153:1
        CasePattern thisProduction = null;
        if (buildTree) {
            thisProduction = new CasePattern();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at Java.ccc:1154:5
            if (scan$Java_ccc$1154$5()) {
                // Code for NonTerminal specified at Java.ccc:1154:5
                pushOntoCallStack("CasePattern", "Java.ccc", 1154, 5);
                try {
                    RecordPattern();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$1156$5()) {
                // Code for NonTerminal specified at Java.ccc:1156:5
                pushOntoCallStack("CasePattern", "Java.ccc", 1156, 5);
                try {
                    TypePattern();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("CasePattern", "Java.ccc", 1154, 5);
                throw new ParseException(getToken(1), CasePattern_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1159:1
    final public void RecordPattern() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "RecordPattern";
        // Code for BNFProduction specified at Java.ccc:1159:1
        RecordPattern thisProduction = null;
        if (buildTree) {
            thisProduction = new RecordPattern();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:1160:5
            pushOntoCallStack("RecordPattern", "Java.ccc", 1160, 5);
            try {
                ReferenceType();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1161:5
            pushOntoCallStack("RecordPattern", "Java.ccc", 1161, 5);
            try {
                consumeToken(LPAREN);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:1162:5
            if (scan$Java_ccc$1163$7()) {
                if (typeMatches(UNDERSCORE, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:1165:9
                    pushOntoCallStack("RecordPattern", "Java.ccc", 1165, 9);
                    try {
                        consumeToken(UNDERSCORE);
                    } finally {
                        popCallStack();
                    }
                } else if (hasMatch(first_set$Java_ccc$1167$9, getToken(1))) {
                    // Code for NonTerminal specified at Java.ccc:1167:9
                    pushOntoCallStack("RecordPattern", "Java.ccc", 1167, 9);
                    try {
                        CasePattern();
                    } finally {
                        popCallStack();
                    }
                    // Code for ZeroOrMore specified at Java.ccc:1168:9
                    while (true) {
                        if (!(typeMatches(COMMA, getToken(1)))) break;
                        // Code for Terminal specified at Java.ccc:1169:11
                        pushOntoCallStack("RecordPattern", "Java.ccc", 1169, 11);
                        try {
                            consumeToken(COMMA);
                        } finally {
                            popCallStack();
                        }
                        if (typeMatches(UNDERSCORE, getToken(1))) {
                            // Code for Terminal specified at Java.ccc:1170:12
                            pushOntoCallStack("RecordPattern", "Java.ccc", 1170, 12);
                            try {
                                consumeToken(UNDERSCORE);
                            } finally {
                                popCallStack();
                            }
                        } else if (hasMatch(first_set$Java_ccc$1170$25, getToken(1))) {
                            // Code for NonTerminal specified at Java.ccc:1170:25
                            pushOntoCallStack("RecordPattern", "Java.ccc", 1170, 25);
                            try {
                                CasePattern();
                            } finally {
                                popCallStack();
                            }
                        } else {
                            pushOntoCallStack("RecordPattern", "Java.ccc", 1170, 12);
                            throw new ParseException(getToken(1), first_set$Java_ccc$1170$12, parsingStack);
                        }
                    }
                } else {
                    pushOntoCallStack("RecordPattern", "Java.ccc", 1165, 9);
                    throw new ParseException(getToken(1), first_set$Java_ccc$1165$9, parsingStack);
                }
            }
            // Code for Terminal specified at Java.ccc:1174:5
            pushOntoCallStack("RecordPattern", "Java.ccc", 1174, 5);
            try {
                consumeToken(RPAREN);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1178:1
    final public void TypePattern() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "TypePattern";
        // Code for BNFProduction specified at Java.ccc:1178:1
        TypePattern thisProduction = null;
        if (buildTree) {
            thisProduction = new TypePattern();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for CodeBlock specified at Java.ccc:1179:3
            permissibleModifiers = EnumSet.of(FINAL);
            // Code for NonTerminal specified at Java.ccc:1180:3
            pushOntoCallStack("TypePattern", "Java.ccc", 1180, 3);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            if (typeMatches(VAR, getToken(1))) {
                // Code for Terminal specified at Java.ccc:1182:5
                pushOntoCallStack("TypePattern", "Java.ccc", 1182, 5);
                try {
                    consumeToken(VAR);
                } finally {
                    popCallStack();
                }
                // Code for Terminal specified at Java.ccc:1182:11
                pushOntoCallStack("TypePattern", "Java.ccc", 1182, 11);
                try {
                    consumeToken(IDENTIFIER);
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$1184$5()) {
                // Code for NonTerminal specified at Java.ccc:1184:5
                pushOntoCallStack("TypePattern", "Java.ccc", 1184, 5);
                try {
                    Type();
                } finally {
                    popCallStack();
                }
                if (typeMatches(IDENTIFIER, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:1184:11
                    pushOntoCallStack("TypePattern", "Java.ccc", 1184, 11);
                    try {
                        consumeToken(IDENTIFIER);
                    } finally {
                        popCallStack();
                    }
                } else if (typeMatches(UNDERSCORE, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:1184:24
                    pushOntoCallStack("TypePattern", "Java.ccc", 1184, 24);
                    try {
                        consumeToken(UNDERSCORE);
                    } finally {
                        popCallStack();
                    }
                } else {
                    pushOntoCallStack("TypePattern", "Java.ccc", 1184, 11);
                    throw new ParseException(getToken(1), first_set$Java_ccc$1184$11, parsingStack);
                }
            } else {
                pushOntoCallStack("TypePattern", "Java.ccc", 1182, 5);
                throw new ParseException(getToken(1), first_set$Java_ccc$1182$5, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1188:1
    final public void WhenClause() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "WhenClause";
        // Code for BNFProduction specified at Java.ccc:1188:1
        WhenClause thisProduction = null;
        if (buildTree) {
            thisProduction = new WhenClause();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1189:4
            pushOntoCallStack("WhenClause", "Java.ccc", 1189, 4);
            try {
                consumeToken(WHEN);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1190:4
            pushOntoCallStack("WhenClause", "Java.ccc", 1190, 4);
            try {
                Expression();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1193:1
    final public void SwitchStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "SwitchStatement";
        // Code for BNFProduction specified at Java.ccc:1193:1
        SwitchStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new SwitchStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1194:3
            pushOntoCallStack("SwitchStatement", "Java.ccc", 1194, 3);
            try {
                consumeToken(SWITCH);
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1194:12
            pushOntoCallStack("SwitchStatement", "Java.ccc", 1194, 12);
            try {
                consumeToken(LPAREN);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1194:21
            pushOntoCallStack("SwitchStatement", "Java.ccc", 1194, 21);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1194:32
            pushOntoCallStack("SwitchStatement", "Java.ccc", 1194, 32);
            try {
                consumeToken(RPAREN);
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1195:3
            pushOntoCallStack("SwitchStatement", "Java.ccc", 1195, 3);
            try {
                consumeToken(LBRACE);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:1196:3
            // Code for ExpansionChoice specified at Java.ccc:1197:5
            if (scan$Java_ccc$1197$5()) {
                // Code for OneOrMore specified at Java.ccc:1198:5
                while (true) {
                    // Code for NonTerminal specified at Java.ccc:1198:6
                    pushOntoCallStack("SwitchStatement", "Java.ccc", 1198, 6);
                    try {
                        NewCaseStatement();
                    } finally {
                        popCallStack();
                    }
                    if (!(typeMatches(CASE, getToken(1)) || typeMatches(_DEFAULT, getToken(1)))) break;
                }
            } else if (scan$Java_ccc$1200$5()) {
                // Code for OneOrMore specified at Java.ccc:1201:5
                while (true) {
                    // Code for NonTerminal specified at Java.ccc:1201:6
                    pushOntoCallStack("SwitchStatement", "Java.ccc", 1201, 6);
                    try {
                        ClassicCaseStatement();
                    } finally {
                        popCallStack();
                    }
                    if (!(typeMatches(CASE, getToken(1)) || typeMatches(_DEFAULT, getToken(1)))) break;
                }
            }
            // Code for Terminal specified at Java.ccc:1203:3
            pushOntoCallStack("SwitchStatement", "Java.ccc", 1203, 3);
            try {
                consumeToken(RBRACE);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1221:1
    final public void ClassicCaseStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ClassicCaseStatement";
        // Code for BNFProduction specified at Java.ccc:1221:1
        ClassicCaseStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new ClassicCaseStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:1222:3
            pushOntoCallStack("ClassicCaseStatement", "Java.ccc", 1222, 3);
            try {
                ClassicSwitchLabel();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:1223:3
            while (true) {
                if (!(scan$Java_ccc$1223$4())) break;
                // Code for NonTerminal specified at Java.ccc:1223:42
                pushOntoCallStack("ClassicCaseStatement", "Java.ccc", 1223, 42);
                try {
                    BlockStatement();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, true);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1226:1
    final public void NewSwitchLabel() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "NewSwitchLabel";
        // Code for BNFProduction specified at Java.ccc:1226:1
        NewSwitchLabel thisProduction = null;
        if (buildTree) {
            thisProduction = new NewSwitchLabel();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:1227:3
            pushOntoCallStack("NewSwitchLabel", "Java.ccc", 1227, 3);
            try {
                CaseOrDefault();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1228:3
            pushOntoCallStack("NewSwitchLabel", "Java.ccc", 1228, 3);
            try {
                consumeToken(LAMBDA);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1231:1
    final public void ClassicSwitchLabel() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ClassicSwitchLabel";
        // Code for BNFProduction specified at Java.ccc:1231:1
        ClassicSwitchLabel thisProduction = null;
        if (buildTree) {
            thisProduction = new ClassicSwitchLabel();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:1232:3
            pushOntoCallStack("ClassicSwitchLabel", "Java.ccc", 1232, 3);
            try {
                CaseOrDefault();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1233:3
            pushOntoCallStack("ClassicSwitchLabel", "Java.ccc", 1233, 3);
            try {
                consumeToken(COLON);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> CaseOrDefault_FIRST_SET = tokenTypeSet(CASE, _DEFAULT);

    // Java.ccc:1237:1
    final public void CaseOrDefault() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "CaseOrDefault";
        // Code for BNFProduction specified at Java.ccc:1237:1
        // Code for ExpansionChoice specified at Java.ccc:1238:4
        if (scan$Java_ccc$1238$4()) {
            // Code for Terminal specified at Java.ccc:1238:4
            pushOntoCallStack("CaseOrDefault", "Java.ccc", 1238, 4);
            try {
                consumeToken(CASE);
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1238:11
            pushOntoCallStack("CaseOrDefault", "Java.ccc", 1238, 11);
            try {
                consumeToken(NULL);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:1238:23
            if (typeMatches(COMMA, getToken(1))) {
                // Code for Terminal specified at Java.ccc:1238:24
                pushOntoCallStack("CaseOrDefault", "Java.ccc", 1238, 24);
                try {
                    consumeToken(COMMA);
                } finally {
                    popCallStack();
                }
                // Code for Terminal specified at Java.ccc:1238:31
                pushOntoCallStack("CaseOrDefault", "Java.ccc", 1238, 31);
                try {
                    consumeToken(_DEFAULT);
                } finally {
                    popCallStack();
                }
            }
        } else if (scan$Java_ccc$1240$4()) {
            // Code for Terminal specified at Java.ccc:1240:4
            pushOntoCallStack("CaseOrDefault", "Java.ccc", 1240, 4);
            try {
                consumeToken(CASE);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1240:11
            pushOntoCallStack("CaseOrDefault", "Java.ccc", 1240, 11);
            try {
                CasePattern();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:1240:28
            while (true) {
                if (!(typeMatches(COMMA, getToken(1)))) break;
                // Code for Terminal specified at Java.ccc:1240:29
                pushOntoCallStack("CaseOrDefault", "Java.ccc", 1240, 29);
                try {
                    consumeToken(COMMA);
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Java.ccc:1240:37
                pushOntoCallStack("CaseOrDefault", "Java.ccc", 1240, 37);
                try {
                    CasePattern();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Java.ccc:1240:51
            if (typeMatches(WHEN, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:1240:52
                pushOntoCallStack("CaseOrDefault", "Java.ccc", 1240, 52);
                try {
                    WhenClause();
                } finally {
                    popCallStack();
                }
            }
        } else if (typeMatches(CASE, getToken(1))) {
            // Code for Terminal specified at Java.ccc:1242:4
            pushOntoCallStack("CaseOrDefault", "Java.ccc", 1242, 4);
            try {
                consumeToken(CASE);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1242:11
            pushOntoCallStack("CaseOrDefault", "Java.ccc", 1242, 11);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:1242:22
            while (true) {
                if (!(typeMatches(COMMA, getToken(1)))) break;
                // Code for Terminal specified at Java.ccc:1242:23
                pushOntoCallStack("CaseOrDefault", "Java.ccc", 1242, 23);
                try {
                    consumeToken(COMMA);
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Java.ccc:1242:31
                pushOntoCallStack("CaseOrDefault", "Java.ccc", 1242, 31);
                try {
                    Expression();
                } finally {
                    popCallStack();
                }
            }
        } else if (typeMatches(_DEFAULT, getToken(1))) {
            // Code for Terminal specified at Java.ccc:1244:4
            pushOntoCallStack("CaseOrDefault", "Java.ccc", 1244, 4);
            try {
                consumeToken(_DEFAULT);
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("CaseOrDefault", "Java.ccc", 1238, 4);
            throw new ParseException(getToken(1), CaseOrDefault_FIRST_SET, parsingStack);
        }
    }

    // Java.ccc:1247:1
    final public void NewCaseStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "NewCaseStatement";
        // Code for BNFProduction specified at Java.ccc:1247:1
        NewCaseStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new NewCaseStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:1248:4
            pushOntoCallStack("NewCaseStatement", "Java.ccc", 1248, 4);
            try {
                NewSwitchLabel();
            } finally {
                popCallStack();
            }
            if (typeMatches(LBRACE, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:1250:6
                pushOntoCallStack("NewCaseStatement", "Java.ccc", 1250, 6);
                try {
                    Block();
                } finally {
                    popCallStack();
                }
            } else if (typeMatches(THROW, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:1252:6
                pushOntoCallStack("NewCaseStatement", "Java.ccc", 1252, 6);
                try {
                    ThrowStatement();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$1254$6()) {
                // Code for NonTerminal specified at Java.ccc:1255:9
                pushOntoCallStack("NewCaseStatement", "Java.ccc", 1255, 9);
                try {
                    Expression();
                } finally {
                    popCallStack();
                }
                // Code for Terminal specified at Java.ccc:1255:20
                pushOntoCallStack("NewCaseStatement", "Java.ccc", 1255, 20);
                try {
                    consumeToken(SEMICOLON);
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$1257$6()) {
                // Code for NonTerminal specified at Java.ccc:1258:6
                pushOntoCallStack("NewCaseStatement", "Java.ccc", 1258, 6);
                try {
                    BlockStatement();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("NewCaseStatement", "Java.ccc", 1250, 6);
                throw new ParseException(getToken(1), first_set$Java_ccc$1250$6, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1262:1
    final public void IfStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "IfStatement";
        // Code for BNFProduction specified at Java.ccc:1262:1
        IfStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new IfStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1263:3
            pushOntoCallStack("IfStatement", "Java.ccc", 1263, 3);
            try {
                consumeToken(IF);
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1263:8
            pushOntoCallStack("IfStatement", "Java.ccc", 1263, 8);
            try {
                consumeToken(LPAREN);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1263:17
            pushOntoCallStack("IfStatement", "Java.ccc", 1263, 17);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1263:28
            pushOntoCallStack("IfStatement", "Java.ccc", 1263, 28);
            try {
                consumeToken(RPAREN);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1263:37
            pushOntoCallStack("IfStatement", "Java.ccc", 1263, 37);
            try {
                Statement();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:1263:47
            if (typeMatches(ELSE, getToken(1))) {
                // Code for Terminal specified at Java.ccc:1263:48
                pushOntoCallStack("IfStatement", "Java.ccc", 1263, 48);
                try {
                    consumeToken(ELSE);
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Java.ccc:1263:55
                pushOntoCallStack("IfStatement", "Java.ccc", 1263, 55);
                try {
                    Statement();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1276:1
    final public void WhileStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "WhileStatement";
        // Code for BNFProduction specified at Java.ccc:1276:1
        WhileStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new WhileStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1277:3
            pushOntoCallStack("WhileStatement", "Java.ccc", 1277, 3);
            try {
                consumeToken(WHILE);
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1277:11
            pushOntoCallStack("WhileStatement", "Java.ccc", 1277, 11);
            try {
                consumeToken(LPAREN);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1277:20
            pushOntoCallStack("WhileStatement", "Java.ccc", 1277, 20);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1277:31
            pushOntoCallStack("WhileStatement", "Java.ccc", 1277, 31);
            try {
                consumeToken(RPAREN);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1277:40
            pushOntoCallStack("WhileStatement", "Java.ccc", 1277, 40);
            try {
                Statement();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1280:1
    final public void DoStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "DoStatement";
        // Code for BNFProduction specified at Java.ccc:1280:1
        DoStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new DoStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1281:3
            pushOntoCallStack("DoStatement", "Java.ccc", 1281, 3);
            try {
                consumeToken(DO);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1281:8
            pushOntoCallStack("DoStatement", "Java.ccc", 1281, 8);
            try {
                Statement();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1281:18
            pushOntoCallStack("DoStatement", "Java.ccc", 1281, 18);
            try {
                consumeToken(WHILE);
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1281:26
            pushOntoCallStack("DoStatement", "Java.ccc", 1281, 26);
            try {
                consumeToken(LPAREN);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1281:35
            pushOntoCallStack("DoStatement", "Java.ccc", 1281, 35);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1281:46
            pushOntoCallStack("DoStatement", "Java.ccc", 1281, 46);
            try {
                consumeToken(RPAREN);
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1281:55
            pushOntoCallStack("DoStatement", "Java.ccc", 1281, 55);
            try {
                consumeToken(SEMICOLON);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> ForStatement_FIRST_SET = tokenTypeSet(FOR);

    // Java.ccc:1284:1
    final public void ForStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ForStatement";
        // Code for BNFProduction specified at Java.ccc:1284:1
        // Code for ExpansionChoice specified at Java.ccc:1285:4
        if (scan$Java_ccc$1285$4()) {
            // Code for NonTerminal specified at Java.ccc:1285:4
            pushOntoCallStack("ForStatement", "Java.ccc", 1285, 4);
            try {
                BasicForStatement();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$1287$4()) {
            // Code for NonTerminal specified at Java.ccc:1287:4
            pushOntoCallStack("ForStatement", "Java.ccc", 1287, 4);
            try {
                EnhancedForStatement();
            } finally {
                popCallStack();
            }
        } else if (typeMatches(FOR, getToken(1))) {
            // Code for Terminal specified at Java.ccc:1289:4
            pushOntoCallStack("ForStatement", "Java.ccc", 1289, 4);
            try {
                consumeToken(FOR);
            } finally {
                popCallStack();
            }
            // Code for Failure specified at Java.ccc:1289:10
            pushOntoCallStack("ForStatement", "Java.ccc", 1289, 10);
            fail("Failure", getToken(1));
        } else {
            pushOntoCallStack("ForStatement", "Java.ccc", 1285, 4);
            throw new ParseException(getToken(1), ForStatement_FIRST_SET, parsingStack);
        }
    }

    // Java.ccc:1292:1
    final public void BasicForStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "BasicForStatement";
        // Code for BNFProduction specified at Java.ccc:1292:1
        BasicForStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new BasicForStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1293:4
            pushOntoCallStack("BasicForStatement", "Java.ccc", 1293, 4);
            try {
                consumeToken(FOR);
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1293:10
            pushOntoCallStack("BasicForStatement", "Java.ccc", 1293, 10);
            try {
                consumeToken(LPAREN);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:1293:19
            if (scan$Java_ccc$1293$20()) {
                // Code for NonTerminal specified at Java.ccc:1293:20
                pushOntoCallStack("BasicForStatement", "Java.ccc", 1293, 20);
                try {
                    ForInit();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:1293:29
            pushOntoCallStack("BasicForStatement", "Java.ccc", 1293, 29);
            try {
                consumeToken(SEMICOLON);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:1293:46
            if (hasMatch(first_set$Java_ccc$1293$47, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:1293:47
                pushOntoCallStack("BasicForStatement", "Java.ccc", 1293, 47);
                try {
                    Expression();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:1293:59
            pushOntoCallStack("BasicForStatement", "Java.ccc", 1293, 59);
            try {
                consumeToken(SEMICOLON);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:1293:71
            if (hasMatch(first_set$Java_ccc$1293$72, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:1293:72
                pushOntoCallStack("BasicForStatement", "Java.ccc", 1293, 72);
                try {
                    StatementExpressionList();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:1293:97
            pushOntoCallStack("BasicForStatement", "Java.ccc", 1293, 97);
            try {
                consumeToken(RPAREN);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1293:106
            pushOntoCallStack("BasicForStatement", "Java.ccc", 1293, 106);
            try {
                Statement();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1296:1
    final public void EnhancedForStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "EnhancedForStatement";
        // Code for BNFProduction specified at Java.ccc:1296:1
        EnhancedForStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new EnhancedForStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1297:4
            pushOntoCallStack("EnhancedForStatement", "Java.ccc", 1297, 4);
            try {
                consumeToken(FOR);
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1297:10
            pushOntoCallStack("EnhancedForStatement", "Java.ccc", 1297, 10);
            try {
                consumeToken(LPAREN);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1297:19
            pushOntoCallStack("EnhancedForStatement", "Java.ccc", 1297, 19);
            try {
                LocalVariableDeclaration();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1297:44
            pushOntoCallStack("EnhancedForStatement", "Java.ccc", 1297, 44);
            try {
                consumeToken(COLON);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1297:57
            pushOntoCallStack("EnhancedForStatement", "Java.ccc", 1297, 57);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1297:68
            pushOntoCallStack("EnhancedForStatement", "Java.ccc", 1297, 68);
            try {
                consumeToken(RPAREN);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1297:77
            pushOntoCallStack("EnhancedForStatement", "Java.ccc", 1297, 77);
            try {
                Statement();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> ForInit_FIRST_SET = ForInit_FIRST_SET_init();

    private static EnumSet<TokenType> ForInit_FIRST_SET_init() {
        return tokenTypeSet(UNDERSCORE, ABSTRACT, BOOLEAN, BYTE, CHAR, _DEFAULT, DOUBLE, FALSE, FINAL, FLOAT, INT, LONG, NATIVE, NEW, NULL, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SUPER, SWITCH, SYNCHRONIZED, THIS, TRANSIENT, TRUE, VOID, VOLATILE, NON_SEALED, SEALED, LPAREN, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, VAR, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    // Java.ccc:1300:1
    final public void ForInit() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ForInit";
        // Code for BNFProduction specified at Java.ccc:1300:1
        // Code for ExpansionChoice specified at Java.ccc:1301:3
        if (scan$Java_ccc$1301$3()) {
            // Code for NonTerminal specified at Java.ccc:1301:3
            pushOntoCallStack("ForInit", "Java.ccc", 1301, 3);
            try {
                LocalVariableDeclaration();
            } finally {
                popCallStack();
            }
        } else if (hasMatch(first_set$Java_ccc$1303$3, getToken(1))) {
            // Code for NonTerminal specified at Java.ccc:1303:3
            pushOntoCallStack("ForInit", "Java.ccc", 1303, 3);
            try {
                StatementExpressionList();
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("ForInit", "Java.ccc", 1301, 3);
            throw new ParseException(getToken(1), ForInit_FIRST_SET, parsingStack);
        }
    }

    // Java.ccc:1306:1
    final public void StatementExpressionList() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "StatementExpressionList";
        // Code for BNFProduction specified at Java.ccc:1306:1
        // Code for NonTerminal specified at Java.ccc:1307:3
        pushOntoCallStack("StatementExpressionList", "Java.ccc", 1307, 3);
        try {
            StatementExpression();
        } finally {
            popCallStack();
        }
        // Code for ZeroOrMore specified at Java.ccc:1307:23
        while (true) {
            if (!(typeMatches(COMMA, getToken(1)))) break;
            // Code for Terminal specified at Java.ccc:1307:25
            pushOntoCallStack("StatementExpressionList", "Java.ccc", 1307, 25);
            try {
                consumeToken(COMMA);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1307:33
            pushOntoCallStack("StatementExpressionList", "Java.ccc", 1307, 33);
            try {
                StatementExpression();
            } finally {
                popCallStack();
            }
        }
    }

    // Java.ccc:1310:1
    final public void BreakStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "BreakStatement";
        // Code for BNFProduction specified at Java.ccc:1310:1
        BreakStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new BreakStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1311:3
            pushOntoCallStack("BreakStatement", "Java.ccc", 1311, 3);
            try {
                consumeToken(BREAK);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:1311:11
            if (typeMatches(IDENTIFIER, getToken(1))) {
                // Code for Terminal specified at Java.ccc:1311:13
                pushOntoCallStack("BreakStatement", "Java.ccc", 1311, 13);
                try {
                    consumeToken(IDENTIFIER);
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:1311:28
            pushOntoCallStack("BreakStatement", "Java.ccc", 1311, 28);
            try {
                consumeToken(SEMICOLON);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1314:1
    final public void YieldStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "YieldStatement";
        // Code for BNFProduction specified at Java.ccc:1314:1
        YieldStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new YieldStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1316:4
            pushOntoCallStack("YieldStatement", "Java.ccc", 1316, 4);
            try {
                consumeToken(YIELD);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1317:4
            pushOntoCallStack("YieldStatement", "Java.ccc", 1317, 4);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1318:4
            pushOntoCallStack("YieldStatement", "Java.ccc", 1318, 4);
            try {
                consumeToken(SEMICOLON);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1321:1
    final public void ContinueStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ContinueStatement";
        // Code for BNFProduction specified at Java.ccc:1321:1
        ContinueStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new ContinueStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1321:21
            pushOntoCallStack("ContinueStatement", "Java.ccc", 1321, 21);
            try {
                consumeToken(CONTINUE);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:1321:32
            if (typeMatches(IDENTIFIER, getToken(1))) {
                // Code for Terminal specified at Java.ccc:1321:34
                pushOntoCallStack("ContinueStatement", "Java.ccc", 1321, 34);
                try {
                    consumeToken(IDENTIFIER);
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:1321:49
            pushOntoCallStack("ContinueStatement", "Java.ccc", 1321, 49);
            try {
                consumeToken(SEMICOLON);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1323:1
    final public void ReturnStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ReturnStatement";
        // Code for BNFProduction specified at Java.ccc:1323:1
        ReturnStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new ReturnStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1323:19
            pushOntoCallStack("ReturnStatement", "Java.ccc", 1323, 19);
            try {
                consumeToken(RETURN);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:1323:28
            if (hasMatch(first_set$Java_ccc$1323$29, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:1323:29
                pushOntoCallStack("ReturnStatement", "Java.ccc", 1323, 29);
                try {
                    Expression();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:1323:42
            pushOntoCallStack("ReturnStatement", "Java.ccc", 1323, 42);
            try {
                consumeToken(SEMICOLON);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1325:1
    final public void ThrowStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ThrowStatement";
        // Code for BNFProduction specified at Java.ccc:1325:1
        ThrowStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new ThrowStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1326:5
            pushOntoCallStack("ThrowStatement", "Java.ccc", 1326, 5);
            try {
                consumeToken(THROW);
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at Java.ccc:1330:5
            Expression exp;
            // Code for NonTerminal specified at Java.ccc:1331:5
            pushOntoCallStack("ThrowStatement", "Java.ccc", 1331, 5);
            try {
                exp = Expression();
            } finally {
                popCallStack();
            }
            // Code for Assertion specified at Java.ccc:1332:5
            if (!(exp.canBeThrown())) {
                pushOntoCallStack("ThrowStatement", "Java.ccc", 1332, 5);
                fail("Assertion at: Java.ccc:1332:5 failed. " + "Expression " + exp + " is not throwable.", exp);
            }
            // Code for Terminal specified at Java.ccc:1338:5
            pushOntoCallStack("ThrowStatement", "Java.ccc", 1338, 5);
            try {
                consumeToken(SEMICOLON);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1341:1
    final public void SynchronizedStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "SynchronizedStatement";
        // Code for BNFProduction specified at Java.ccc:1341:1
        SynchronizedStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new SynchronizedStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1341:25
            pushOntoCallStack("SynchronizedStatement", "Java.ccc", 1341, 25);
            try {
                consumeToken(SYNCHRONIZED);
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1341:40
            pushOntoCallStack("SynchronizedStatement", "Java.ccc", 1341, 40);
            try {
                consumeToken(LPAREN);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1341:49
            pushOntoCallStack("SynchronizedStatement", "Java.ccc", 1341, 49);
            try {
                Expression();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1341:60
            pushOntoCallStack("SynchronizedStatement", "Java.ccc", 1341, 60);
            try {
                consumeToken(RPAREN);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1341:69
            pushOntoCallStack("SynchronizedStatement", "Java.ccc", 1341, 69);
            try {
                Block();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1343:1
    final public void TryStatement() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "TryStatement";
        // Code for BNFProduction specified at Java.ccc:1343:1
        TryStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new TryStatement();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for CodeBlock specified at Java.ccc:1344:3
            boolean isTryWithResources = false, seenCatch = false, seenFinally = false;
            // Code for Terminal specified at Java.ccc:1349:3
            pushOntoCallStack("TryStatement", "Java.ccc", 1349, 3);
            try {
                consumeToken(TRY);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:1350:3
            if (typeMatches(LPAREN, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:1350:4
                pushOntoCallStack("TryStatement", "Java.ccc", 1350, 4);
                try {
                    ResourcesInTryBlock();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at Java.ccc:1350:24
                isTryWithResources = true;
            }
            // Code for NonTerminal specified at Java.ccc:1351:3
            pushOntoCallStack("TryStatement", "Java.ccc", 1351, 3);
            try {
                Block();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:1352:3
            while (true) {
                if (!(typeMatches(CATCH, getToken(1)))) break;
                // Code for NonTerminal specified at Java.ccc:1352:4
                pushOntoCallStack("TryStatement", "Java.ccc", 1352, 4);
                try {
                    CatchBlock();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at Java.ccc:1352:15
                seenCatch = true;
            }
            // Code for ZeroOrOne specified at Java.ccc:1353:3
            if (typeMatches(FINALLY, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:1353:4
                pushOntoCallStack("TryStatement", "Java.ccc", 1353, 4);
                try {
                    FinallyBlock();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at Java.ccc:1353:16
                seenFinally = true;
            }
            // Code for Assertion specified at Java.ccc:1354:3
            if (!(seenCatch || seenFinally || isTryWithResources)) {
                pushOntoCallStack("TryStatement", "Java.ccc", 1354, 3);
                fail("Assertion at: Java.ccc:1354:3 failed. " + "A try-catch must have at least one catch or finally block if it is not a try-with-resources.", currentNodeScope.get(0));
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1361:1
    final public void ResourcesInTryBlock() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "ResourcesInTryBlock";
        // Code for BNFProduction specified at Java.ccc:1361:1
        ResourcesInTryBlock thisProduction = null;
        if (buildTree) {
            thisProduction = new ResourcesInTryBlock();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1362:5
            pushOntoCallStack("ResourcesInTryBlock", "Java.ccc", 1362, 5);
            try {
                consumeToken(LPAREN);
            } finally {
                popCallStack();
            }
            // Code for OneOrMore specified at Java.ccc:1363:5
            while (true) {
                // Code for Assertion specified at Java.ccc:1367:8
                // Code for Assertion specified at Java.ccc:1368:8
                if (scan$Java_ccc$1371$10()) {
                    // Code for NonTerminal specified at Java.ccc:1371:10
                    pushOntoCallStack("ResourcesInTryBlock", "Java.ccc", 1371, 10);
                    try {
                        LocalVariableDeclaration();
                    } finally {
                        popCallStack();
                    }
                } else if (typeMatches(IDENTIFIER, getToken(1))) {
                    // Code for NonTerminal specified at Java.ccc:1373:10
                    pushOntoCallStack("ResourcesInTryBlock", "Java.ccc", 1373, 10);
                    try {
                        Name();
                    } finally {
                        popCallStack();
                    }
                } else if (hasMatch(first_set$Java_ccc$1375$10, getToken(1))) {
                    // Code for NonTerminal specified at Java.ccc:1375:10
                    pushOntoCallStack("ResourcesInTryBlock", "Java.ccc", 1375, 10);
                    try {
                        PrimaryExpression();
                    } finally {
                        popCallStack();
                    }
                    // Code for Assertion specified at Java.ccc:1376:10
                    if (!(peekNode() instanceof DotName)) {
                        pushOntoCallStack("ResourcesInTryBlock", "Java.ccc", 1376, 10);
                        fail("Assertion at: Java.ccc:1376:10 failed. " + "Resource should be a field access here.", peekNode());
                    }
                } else {
                    pushOntoCallStack("ResourcesInTryBlock", "Java.ccc", 1371, 10);
                    throw new ParseException(getToken(1), first_set$Java_ccc$1371$10, parsingStack);
                }
                // Code for ZeroOrOne specified at Java.ccc:1378:8
                if (typeMatches(SEMICOLON, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:1378:9
                    pushOntoCallStack("ResourcesInTryBlock", "Java.ccc", 1378, 9);
                    try {
                        consumeToken(SEMICOLON);
                    } finally {
                        popCallStack();
                    }
                }
                if (!(scan$Java_ccc$1367$8())) break;
            }
            // Code for Terminal specified at Java.ccc:1380:5
            pushOntoCallStack("ResourcesInTryBlock", "Java.ccc", 1380, 5);
            try {
                consumeToken(RPAREN);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1383:1
    final public void CatchBlock() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "CatchBlock";
        // Code for BNFProduction specified at Java.ccc:1383:1
        CatchBlock thisProduction = null;
        if (buildTree) {
            thisProduction = new CatchBlock();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1384:5
            pushOntoCallStack("CatchBlock", "Java.ccc", 1384, 5);
            try {
                consumeToken(CATCH);
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1385:5
            pushOntoCallStack("CatchBlock", "Java.ccc", 1385, 5);
            try {
                consumeToken(LPAREN);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:1386:5
            if (typeMatches(FINAL, getToken(1))) {
                // Code for Terminal specified at Java.ccc:1386:6
                pushOntoCallStack("CatchBlock", "Java.ccc", 1386, 6);
                try {
                    consumeToken(FINAL);
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at Java.ccc:1387:5
            pushOntoCallStack("CatchBlock", "Java.ccc", 1387, 5);
            try {
                ObjectType();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:1387:16
            while (true) {
                if (!(typeMatches(BIT_OR, getToken(1)))) break;
                // Code for Terminal specified at Java.ccc:1387:17
                pushOntoCallStack("CatchBlock", "Java.ccc", 1387, 17);
                try {
                    consumeToken(BIT_OR);
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Java.ccc:1387:27
                pushOntoCallStack("CatchBlock", "Java.ccc", 1387, 27);
                try {
                    ObjectType();
                } finally {
                    popCallStack();
                }
            }
            // Code for NonTerminal specified at Java.ccc:1387:42
            pushOntoCallStack("CatchBlock", "Java.ccc", 1387, 42);
            try {
                VariableDeclaratorId();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1388:5
            pushOntoCallStack("CatchBlock", "Java.ccc", 1388, 5);
            try {
                consumeToken(RPAREN);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1389:5
            pushOntoCallStack("CatchBlock", "Java.ccc", 1389, 5);
            try {
                Block();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1399:1
    final public void FinallyBlock() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "FinallyBlock";
        // Code for BNFProduction specified at Java.ccc:1399:1
        FinallyBlock thisProduction = null;
        if (buildTree) {
            thisProduction = new FinallyBlock();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1399:16
            pushOntoCallStack("FinallyBlock", "Java.ccc", 1399, 16);
            try {
                consumeToken(FINALLY);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1399:26
            pushOntoCallStack("FinallyBlock", "Java.ccc", 1399, 26);
            try {
                Block();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1408:1
    final public void Annotation() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "Annotation";
        // Code for BNFProduction specified at Java.ccc:1408:1
        if (scan$Java_ccc$1411$4()) {
            // Code for NonTerminal specified at Java.ccc:1411:4
            pushOntoCallStack("Annotation", "Java.ccc", 1411, 4);
            try {
                NormalAnnotation();
            } finally {
                popCallStack();
            }
        } else if (scan$Java_ccc$1413$4()) {
            // Code for NonTerminal specified at Java.ccc:1413:4
            pushOntoCallStack("Annotation", "Java.ccc", 1413, 4);
            try {
                SingleMemberAnnotation();
            } finally {
                popCallStack();
            }
        } else if (typeMatches(AT, getToken(1))) {
            // Code for NonTerminal specified at Java.ccc:1415:4
            pushOntoCallStack("Annotation", "Java.ccc", 1415, 4);
            try {
                MarkerAnnotation();
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("Annotation", "Java.ccc", 1411, 4);
            throw new ParseException(getToken(1), first_set$Java_ccc$1411$4, parsingStack);
        }
    }

    // Java.ccc:1419:1
    final public void NormalAnnotation() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "NormalAnnotation";
        // Code for BNFProduction specified at Java.ccc:1419:1
        NormalAnnotation thisProduction = null;
        if (buildTree) {
            thisProduction = new NormalAnnotation();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1419:20
            pushOntoCallStack("NormalAnnotation", "Java.ccc", 1419, 20);
            try {
                consumeToken(AT);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1419:25
            pushOntoCallStack("NormalAnnotation", "Java.ccc", 1419, 25);
            try {
                Name();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1419:30
            pushOntoCallStack("NormalAnnotation", "Java.ccc", 1419, 30);
            try {
                consumeToken(LPAREN);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:1419:45
            if (typeMatches(IDENTIFIER, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:1419:47
                pushOntoCallStack("NormalAnnotation", "Java.ccc", 1419, 47);
                try {
                    MemberValuePairs();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:1419:66
            pushOntoCallStack("NormalAnnotation", "Java.ccc", 1419, 66);
            try {
                consumeToken(RPAREN);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1421:1
    final public void MarkerAnnotation() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "MarkerAnnotation";
        // Code for BNFProduction specified at Java.ccc:1421:1
        MarkerAnnotation thisProduction = null;
        if (buildTree) {
            thisProduction = new MarkerAnnotation();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1421:20
            pushOntoCallStack("MarkerAnnotation", "Java.ccc", 1421, 20);
            try {
                consumeToken(AT);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1421:25
            pushOntoCallStack("MarkerAnnotation", "Java.ccc", 1421, 25);
            try {
                Name();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1423:1
    final public void SingleMemberAnnotation() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "SingleMemberAnnotation";
        // Code for BNFProduction specified at Java.ccc:1423:1
        SingleMemberAnnotation thisProduction = null;
        if (buildTree) {
            thisProduction = new SingleMemberAnnotation();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1423:26
            pushOntoCallStack("SingleMemberAnnotation", "Java.ccc", 1423, 26);
            try {
                consumeToken(AT);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1423:31
            pushOntoCallStack("SingleMemberAnnotation", "Java.ccc", 1423, 31);
            try {
                Name();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1423:36
            pushOntoCallStack("SingleMemberAnnotation", "Java.ccc", 1423, 36);
            try {
                consumeToken(LPAREN);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1423:50
            pushOntoCallStack("SingleMemberAnnotation", "Java.ccc", 1423, 50);
            try {
                MemberValue();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1423:62
            pushOntoCallStack("SingleMemberAnnotation", "Java.ccc", 1423, 62);
            try {
                consumeToken(RPAREN);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1434:1
    final public void MemberValuePairs() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "MemberValuePairs";
        // Code for BNFProduction specified at Java.ccc:1434:1
        MemberValuePairs thisProduction = null;
        if (buildTree) {
            thisProduction = new MemberValuePairs();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at Java.ccc:1435:4
            pushOntoCallStack("MemberValuePairs", "Java.ccc", 1435, 4);
            try {
                MemberValuePair();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:1435:20
            while (true) {
                if (!(typeMatches(COMMA, getToken(1)))) break;
                // Code for Terminal specified at Java.ccc:1435:22
                pushOntoCallStack("MemberValuePairs", "Java.ccc", 1435, 22);
                try {
                    consumeToken(COMMA);
                } finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Java.ccc:1435:30
                pushOntoCallStack("MemberValuePairs", "Java.ccc", 1435, 30);
                try {
                    MemberValuePair();
                } finally {
                    popCallStack();
                }
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1438:1
    final public void MemberValuePair() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "MemberValuePair";
        // Code for BNFProduction specified at Java.ccc:1438:1
        MemberValuePair thisProduction = null;
        if (buildTree) {
            thisProduction = new MemberValuePair();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1438:20
            pushOntoCallStack("MemberValuePair", "Java.ccc", 1438, 20);
            try {
                consumeToken(IDENTIFIER);
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1438:33
            pushOntoCallStack("MemberValuePair", "Java.ccc", 1438, 33);
            try {
                consumeToken(ASSIGN);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1438:42
            pushOntoCallStack("MemberValuePair", "Java.ccc", 1438, 42);
            try {
                MemberValue();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> MemberValue_FIRST_SET = MemberValue_FIRST_SET_init();

    private static EnumSet<TokenType> MemberValue_FIRST_SET_init() {
        return tokenTypeSet(UNDERSCORE, BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, LBRACE, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    // Java.ccc:1440:1
    final public void MemberValue() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "MemberValue";
        // Code for BNFProduction specified at Java.ccc:1440:1
        MemberValue thisProduction = null;
        if (buildTree) {
            thisProduction = new MemberValue();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at Java.ccc:1441:4
            if (scan$Java_ccc$1441$4()) {
                // Code for NonTerminal specified at Java.ccc:1441:4
                pushOntoCallStack("MemberValue", "Java.ccc", 1441, 4);
                try {
                    Annotation();
                } finally {
                    popCallStack();
                }
            } else if (typeMatches(LBRACE, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:1443:4
                pushOntoCallStack("MemberValue", "Java.ccc", 1443, 4);
                try {
                    MemberValueArrayInitializer();
                } finally {
                    popCallStack();
                }
            } else if (hasMatch(first_set$Java_ccc$1445$4, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:1445:4
                pushOntoCallStack("MemberValue", "Java.ccc", 1445, 4);
                try {
                    ConditionalOrExpression();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("MemberValue", "Java.ccc", 1441, 4);
                throw new ParseException(getToken(1), MemberValue_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1448:1
    final public void MemberValueArrayInitializer() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "MemberValueArrayInitializer";
        // Code for BNFProduction specified at Java.ccc:1448:1
        MemberValueArrayInitializer thisProduction = null;
        if (buildTree) {
            thisProduction = new MemberValueArrayInitializer();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1449:3
            pushOntoCallStack("MemberValueArrayInitializer", "Java.ccc", 1449, 3);
            try {
                consumeToken(LBRACE);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:1450:3
            if (hasMatch(first_set$Java_ccc$1451$6, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:1451:6
                pushOntoCallStack("MemberValueArrayInitializer", "Java.ccc", 1451, 6);
                try {
                    MemberValue();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at Java.ccc:1451:18
                while (true) {
                    if (!(scan$Java_ccc$1451$20())) break;
                    // Code for Terminal specified at Java.ccc:1451:20
                    pushOntoCallStack("MemberValueArrayInitializer", "Java.ccc", 1451, 20);
                    try {
                        consumeToken(COMMA);
                    } finally {
                        popCallStack();
                    }
                    // Code for NonTerminal specified at Java.ccc:1451:34
                    pushOntoCallStack("MemberValueArrayInitializer", "Java.ccc", 1451, 34);
                    try {
                        MemberValue();
                    } finally {
                        popCallStack();
                    }
                }
                // Code for ZeroOrOne specified at Java.ccc:1451:49
                if (typeMatches(COMMA, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:1451:50
                    pushOntoCallStack("MemberValueArrayInitializer", "Java.ccc", 1451, 50);
                    try {
                        consumeToken(COMMA);
                    } finally {
                        popCallStack();
                    }
                }
            }
            // Code for Terminal specified at Java.ccc:1453:3
            pushOntoCallStack("MemberValueArrayInitializer", "Java.ccc", 1453, 3);
            try {
                consumeToken(RBRACE);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1457:1
    final public void AnnotationTypeDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "AnnotationTypeDeclaration";
        // Code for BNFProduction specified at Java.ccc:1457:1
        AnnotationTypeDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new AnnotationTypeDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for CodeBlock specified at Java.ccc:1458:3
            permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE, ABSTRACT, STATIC, STRICTFP);
            // Code for NonTerminal specified at Java.ccc:1461:3
            pushOntoCallStack("AnnotationTypeDeclaration", "Java.ccc", 1461, 3);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1462:3
            pushOntoCallStack("AnnotationTypeDeclaration", "Java.ccc", 1462, 3);
            try {
                consumeToken(AT);
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1462:8
            pushOntoCallStack("AnnotationTypeDeclaration", "Java.ccc", 1462, 8);
            try {
                consumeToken(INTERFACE);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1462:25
            pushOntoCallStack("AnnotationTypeDeclaration", "Java.ccc", 1462, 25);
            try {
                TypeIdentifier();
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1462:40
            pushOntoCallStack("AnnotationTypeDeclaration", "Java.ccc", 1462, 40);
            try {
                AnnotationTypeBody();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1465:1
    final public void AnnotationTypeBody() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "AnnotationTypeBody";
        // Code for BNFProduction specified at Java.ccc:1465:1
        AnnotationTypeBody thisProduction = null;
        if (buildTree) {
            thisProduction = new AnnotationTypeBody();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1466:3
            pushOntoCallStack("AnnotationTypeBody", "Java.ccc", 1466, 3);
            try {
                consumeToken(LBRACE);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Java.ccc:1466:12
            while (true) {
                if (!(hasMatch(first_set$Java_ccc$1466$14, getToken(1)))) break;
                // Code for NonTerminal specified at Java.ccc:1466:14
                pushOntoCallStack("AnnotationTypeBody", "Java.ccc", 1466, 14);
                try {
                    AnnotationTypeMemberDeclaration();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:1466:49
            pushOntoCallStack("AnnotationTypeBody", "Java.ccc", 1466, 49);
            try {
                consumeToken(RBRACE);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1469:1
    final public void AnnotationMethodDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "AnnotationMethodDeclaration";
        // Code for BNFProduction specified at Java.ccc:1469:1
        AnnotationMethodDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new AnnotationMethodDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for CodeBlock specified at Java.ccc:1470:4
            permissibleModifiers = EnumSet.of(PUBLIC, ABSTRACT);
            // Code for NonTerminal specified at Java.ccc:1471:4
            pushOntoCallStack("AnnotationMethodDeclaration", "Java.ccc", 1471, 4);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1472:4
            pushOntoCallStack("AnnotationMethodDeclaration", "Java.ccc", 1472, 4);
            try {
                Type();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1472:9
            pushOntoCallStack("AnnotationMethodDeclaration", "Java.ccc", 1472, 9);
            try {
                consumeToken(IDENTIFIER);
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1472:22
            pushOntoCallStack("AnnotationMethodDeclaration", "Java.ccc", 1472, 22);
            try {
                consumeToken(LPAREN);
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at Java.ccc:1472:36
            pushOntoCallStack("AnnotationMethodDeclaration", "Java.ccc", 1472, 36);
            try {
                consumeToken(RPAREN);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:1472:45
            if (typeMatches(_DEFAULT, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:1472:47
                pushOntoCallStack("AnnotationMethodDeclaration", "Java.ccc", 1472, 47);
                try {
                    DefaultValue();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at Java.ccc:1472:62
            pushOntoCallStack("AnnotationMethodDeclaration", "Java.ccc", 1472, 62);
            try {
                consumeToken(SEMICOLON);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> AnnotationTypeMemberDeclaration_FIRST_SET = AnnotationTypeMemberDeclaration_FIRST_SET_init();

    private static EnumSet<TokenType> AnnotationTypeMemberDeclaration_FIRST_SET_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, CLASS, _DEFAULT, DOUBLE, ENUM, FINAL, FLOAT, INT, INTERFACE, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VOLATILE, NON_SEALED, SEALED, SEMICOLON, AT, IDENTIFIER);
    }

    // Java.ccc:1475:1
    final public void AnnotationTypeMemberDeclaration() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "AnnotationTypeMemberDeclaration";
        // Code for BNFProduction specified at Java.ccc:1475:1
        AnnotationTypeMemberDeclaration thisProduction = null;
        if (buildTree) {
            thisProduction = new AnnotationTypeMemberDeclaration();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for ExpansionChoice specified at Java.ccc:1476:3
            if (typeMatches(SEMICOLON, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:1476:3
                pushOntoCallStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1476, 3);
                try {
                    EmptyDeclaration();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$1478$3()) {
                // Code for NonTerminal specified at Java.ccc:1478:3
                pushOntoCallStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1478, 3);
                try {
                    AnnotationTypeDeclaration();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$1480$3()) {
                // Code for NonTerminal specified at Java.ccc:1480:3
                pushOntoCallStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1480, 3);
                try {
                    ClassDeclaration();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$1482$3()) {
                // Code for NonTerminal specified at Java.ccc:1482:3
                pushOntoCallStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1482, 3);
                try {
                    InterfaceDeclaration();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$1484$3()) {
                // Code for NonTerminal specified at Java.ccc:1484:3
                pushOntoCallStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1484, 3);
                try {
                    EnumDeclaration();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$1486$3()) {
                // Code for NonTerminal specified at Java.ccc:1486:3
                pushOntoCallStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1486, 3);
                try {
                    AnnotationMethodDeclaration();
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$1488$3()) {
                // Code for NonTerminal specified at Java.ccc:1488:3
                pushOntoCallStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1488, 3);
                try {
                    FieldDeclaration();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1476, 3);
                throw new ParseException(getToken(1), AnnotationTypeMemberDeclaration_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1491:1
    final public void DefaultValue() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "DefaultValue";
        // Code for BNFProduction specified at Java.ccc:1491:1
        DefaultValue thisProduction = null;
        if (buildTree) {
            thisProduction = new DefaultValue();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1491:16
            pushOntoCallStack("DefaultValue", "Java.ccc", 1491, 16);
            try {
                consumeToken(_DEFAULT);
            } finally {
                popCallStack();
            }
            // Code for NonTerminal specified at Java.ccc:1491:27
            pushOntoCallStack("DefaultValue", "Java.ccc", 1491, 27);
            try {
                MemberValue();
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1493:1
    final public void LambdaExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "LambdaExpression";
        // Code for BNFProduction specified at Java.ccc:1493:1
        LambdaExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new LambdaExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Assertion specified at Java.ccc:1494:3
            // Code for NonTerminal specified at Java.ccc:1495:3
            pushOntoCallStack("LambdaExpression", "Java.ccc", 1495, 3);
            try {
                LambdaLHS();
            } finally {
                popCallStack();
            }
            if (typeMatches(LBRACE, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:1495:19
                pushOntoCallStack("LambdaExpression", "Java.ccc", 1495, 19);
                try {
                    Block();
                } finally {
                    popCallStack();
                }
            } else if (hasMatch(first_set$Java_ccc$1495$27, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:1495:27
                pushOntoCallStack("LambdaExpression", "Java.ccc", 1495, 27);
                try {
                    Expression();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("LambdaExpression", "Java.ccc", 1495, 19);
                throw new ParseException(getToken(1), first_set$Java_ccc$1495$19, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1498:1
    final public void LambdaLHS() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "LambdaLHS";
        // Code for BNFProduction specified at Java.ccc:1498:1
        LambdaLHS thisProduction = null;
        if (buildTree) {
            thisProduction = new LambdaLHS();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            if (typeMatches(IDENTIFIER, getToken(1))) {
                // Code for Terminal specified at Java.ccc:1498:14
                pushOntoCallStack("LambdaLHS", "Java.ccc", 1498, 14);
                try {
                    consumeToken(IDENTIFIER);
                } finally {
                    popCallStack();
                }
            } else if (typeMatches(UNDERSCORE, getToken(1))) {
                // Code for Terminal specified at Java.ccc:1498:29
                pushOntoCallStack("LambdaLHS", "Java.ccc", 1498, 29);
                try {
                    consumeToken(UNDERSCORE);
                } finally {
                    popCallStack();
                }
            } else if (scan$Java_ccc$1498$44()) {
                // Code for NonTerminal specified at Java.ccc:1498:44
                pushOntoCallStack("LambdaLHS", "Java.ccc", 1498, 44);
                try {
                    SimpleLambdaLHS();
                } finally {
                    popCallStack();
                }
            } else if (typeMatches(LPAREN, getToken(1))) {
                // Code for NonTerminal specified at Java.ccc:1498:62
                pushOntoCallStack("LambdaLHS", "Java.ccc", 1498, 62);
                try {
                    LambdaParameters();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("LambdaLHS", "Java.ccc", 1498, 14);
                throw new ParseException(getToken(1), first_set$Java_ccc$1498$14, parsingStack);
            }
            // Code for Terminal specified at Java.ccc:1498:80
            pushOntoCallStack("LambdaLHS", "Java.ccc", 1498, 80);
            try {
                consumeToken(LAMBDA);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1500:1
    final public void SimpleLambdaLHS() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "SimpleLambdaLHS";
        // Code for BNFProduction specified at Java.ccc:1500:1
        // Code for Terminal specified at Java.ccc:1502:4
        pushOntoCallStack("SimpleLambdaLHS", "Java.ccc", 1502, 4);
        try {
            consumeToken(LPAREN);
        } finally {
            popCallStack();
        }
        if (typeMatches(IDENTIFIER, getToken(1))) {
            // Code for Terminal specified at Java.ccc:1502:14
            pushOntoCallStack("SimpleLambdaLHS", "Java.ccc", 1502, 14);
            try {
                consumeToken(IDENTIFIER);
            } finally {
                popCallStack();
            }
        } else if (typeMatches(UNDERSCORE, getToken(1))) {
            // Code for Terminal specified at Java.ccc:1502:27
            pushOntoCallStack("SimpleLambdaLHS", "Java.ccc", 1502, 27);
            try {
                consumeToken(UNDERSCORE);
            } finally {
                popCallStack();
            }
        } else {
            pushOntoCallStack("SimpleLambdaLHS", "Java.ccc", 1502, 14);
            throw new ParseException(getToken(1), first_set$Java_ccc$1502$14, parsingStack);
        }
        // Code for ZeroOrMore specified at Java.ccc:1503:4
        while (true) {
            if (!(typeMatches(COMMA, getToken(1)))) break;
            // Code for Terminal specified at Java.ccc:1503:5
            pushOntoCallStack("SimpleLambdaLHS", "Java.ccc", 1503, 5);
            try {
                consumeToken(COMMA);
            } finally {
                popCallStack();
            }
            if (typeMatches(IDENTIFIER, getToken(1))) {
                // Code for Terminal specified at Java.ccc:1503:14
                pushOntoCallStack("SimpleLambdaLHS", "Java.ccc", 1503, 14);
                try {
                    consumeToken(IDENTIFIER);
                } finally {
                    popCallStack();
                }
            } else if (typeMatches(UNDERSCORE, getToken(1))) {
                // Code for Terminal specified at Java.ccc:1503:27
                pushOntoCallStack("SimpleLambdaLHS", "Java.ccc", 1503, 27);
                try {
                    consumeToken(UNDERSCORE);
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("SimpleLambdaLHS", "Java.ccc", 1503, 14);
                throw new ParseException(getToken(1), first_set$Java_ccc$1503$14, parsingStack);
            }
        }
        // Code for Terminal specified at Java.ccc:1504:4
        pushOntoCallStack("SimpleLambdaLHS", "Java.ccc", 1504, 4);
        try {
            consumeToken(RPAREN);
        } finally {
            popCallStack();
        }
    }

    // Java.ccc:1507:1
    final public void LambdaParameters() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "LambdaParameters";
        // Code for BNFProduction specified at Java.ccc:1507:1
        LambdaParameters thisProduction = null;
        if (buildTree) {
            thisProduction = new LambdaParameters();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at Java.ccc:1507:20
            pushOntoCallStack("LambdaParameters", "Java.ccc", 1507, 20);
            try {
                consumeToken(LPAREN);
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Java.ccc:1507:29
            if (scan$Java_ccc$1507$31()) {
                // Code for NonTerminal specified at Java.ccc:1507:31
                pushOntoCallStack("LambdaParameters", "Java.ccc", 1507, 31);
                try {
                    LambdaParameter();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at Java.ccc:1507:47
                while (true) {
                    if (!(typeMatches(COMMA, getToken(1)))) break;
                    // Code for Terminal specified at Java.ccc:1507:49
                    pushOntoCallStack("LambdaParameters", "Java.ccc", 1507, 49);
                    try {
                        consumeToken(COMMA);
                    } finally {
                        popCallStack();
                    }
                    // Code for NonTerminal specified at Java.ccc:1507:57
                    pushOntoCallStack("LambdaParameters", "Java.ccc", 1507, 57);
                    try {
                        LambdaParameter();
                    } finally {
                        popCallStack();
                    }
                }
            }
            // Code for Terminal specified at Java.ccc:1507:77
            pushOntoCallStack("LambdaParameters", "Java.ccc", 1507, 77);
            try {
                consumeToken(RPAREN);
            } finally {
                popCallStack();
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // Java.ccc:1509:1
    final public void LambdaParameter() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "LambdaParameter";
        // Code for BNFProduction specified at Java.ccc:1509:1
        LambdaParameter thisProduction = null;
        if (buildTree) {
            thisProduction = new LambdaParameter();
            openNodeScope(thisProduction);
        }
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for CodeBlock specified at Java.ccc:1510:5
            permissibleModifiers = EnumSet.of(FINAL);
            // Code for NonTerminal specified at Java.ccc:1511:5
            pushOntoCallStack("LambdaParameter", "Java.ccc", 1511, 5);
            try {
                Modifiers();
            } finally {
                popCallStack();
            }
            if (scan$Java_ccc$1513$7()) {
                // Code for NonTerminal specified at Java.ccc:1513:7
                pushOntoCallStack("LambdaParameter", "Java.ccc", 1513, 7);
                try {
                    Type();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at Java.ccc:1513:12
                while (true) {
                    if (!(scan$Java_ccc$1513$13())) break;
                    // Code for NonTerminal specified at Java.ccc:1513:13
                    pushOntoCallStack("LambdaParameter", "Java.ccc", 1513, 13);
                    try {
                        Annotation();
                    } finally {
                        popCallStack();
                    }
                }
                // Code for Terminal specified at Java.ccc:1513:26
                pushOntoCallStack("LambdaParameter", "Java.ccc", 1513, 26);
                try {
                    consumeToken(VAR_ARGS);
                } finally {
                    popCallStack();
                }
                // Code for Terminal specified at Java.ccc:1513:42
                pushOntoCallStack("LambdaParameter", "Java.ccc", 1513, 42);
                try {
                    consumeToken(IDENTIFIER);
                } finally {
                    popCallStack();
                }
                // Code for Assertion specified at Java.ccc:1514:7
                if (assert$Java_ccc$1514$16()) {
                    pushOntoCallStack("LambdaParameter", "Java.ccc", 1514, 7);
                    fail("Assertion at: Java.ccc:1514:7 failed. " + "The varargs (...) parameter must be the last one specified.", getToken(1));
                }
            } else if (hasMatch(first_set$Java_ccc$1516$7, getToken(1))) {
                if (typeMatches(VAR, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:1517:9
                    pushOntoCallStack("LambdaParameter", "Java.ccc", 1517, 9);
                    try {
                        consumeToken(VAR);
                    } finally {
                        popCallStack();
                    }
                } else if (scan$Java_ccc$1519$9()) {
                    // Code for NonTerminal specified at Java.ccc:1519:9
                    pushOntoCallStack("LambdaParameter", "Java.ccc", 1519, 9);
                    try {
                        Type();
                    } finally {
                        popCallStack();
                    }
                } else {
                    pushOntoCallStack("LambdaParameter", "Java.ccc", 1517, 9);
                    throw new ParseException(getToken(1), first_set$Java_ccc$1517$9, parsingStack);
                }
                if (typeMatches(IDENTIFIER, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:1522:9
                    pushOntoCallStack("LambdaParameter", "Java.ccc", 1522, 9);
                    try {
                        consumeToken(IDENTIFIER);
                    } finally {
                        popCallStack();
                    }
                    // Code for ZeroOrMore specified at Java.ccc:1522:21
                    while (true) {
                        if (!(typeMatches(LBRACKET, getToken(1)) || typeMatches(AT, getToken(1)))) break;
                        // Code for ZeroOrMore specified at Java.ccc:1522:22
                        while (true) {
                            if (!(scan$Java_ccc$1522$23())) break;
                            // Code for NonTerminal specified at Java.ccc:1522:23
                            pushOntoCallStack("LambdaParameter", "Java.ccc", 1522, 23);
                            try {
                                Annotation();
                            } finally {
                                popCallStack();
                            }
                        }
                        // Code for Terminal specified at Java.ccc:1522:36
                        pushOntoCallStack("LambdaParameter", "Java.ccc", 1522, 36);
                        try {
                            consumeToken(LBRACKET);
                        } finally {
                            popCallStack();
                        }
                        // Code for Terminal specified at Java.ccc:1522:46
                        pushOntoCallStack("LambdaParameter", "Java.ccc", 1522, 46);
                        try {
                            consumeToken(RBRACKET);
                        } finally {
                            popCallStack();
                        }
                    }
                } else if (typeMatches(UNDERSCORE, getToken(1))) {
                    // Code for Terminal specified at Java.ccc:1524:9
                    pushOntoCallStack("LambdaParameter", "Java.ccc", 1524, 9);
                    try {
                        consumeToken(UNDERSCORE);
                    } finally {
                        popCallStack();
                    }
                } else {
                    pushOntoCallStack("LambdaParameter", "Java.ccc", 1522, 9);
                    throw new ParseException(getToken(1), first_set$Java_ccc$1522$9, parsingStack);
                }
            } else {
                pushOntoCallStack("LambdaParameter", "Java.ccc", 1513, 7);
                throw new ParseException(getToken(1), first_set$Java_ccc$1513$7, parsingStack);
            }
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$146$3 = first_set$Java_ccc$146$3_init();

    private static EnumSet<TokenType> first_set$Java_ccc$146$3_init() {
        return tokenTypeSet(ABSTRACT, _DEFAULT, FINAL, NATIVE, PRIVATE, PROTECTED, PUBLIC, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VOLATILE, NON_SEALED, SEALED);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$147$4 = first_set$Java_ccc$147$4_init();

    private static EnumSet<TokenType> first_set$Java_ccc$147$4_init() {
        return tokenTypeSet(ABSTRACT, _DEFAULT, FINAL, NATIVE, PRIVATE, PROTECTED, PUBLIC, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VOLATILE, NON_SEALED, SEALED);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$218$5 = first_set$Java_ccc$218$5_init();

    private static EnumSet<TokenType> first_set$Java_ccc$218$5_init() {
        return tokenTypeSet(ABSTRACT, CLASS, _DEFAULT, ENUM, FINAL, INTERFACE, NATIVE, PRIVATE, PROTECTED, PUBLIC, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VOLATILE, NON_SEALED, SEALED, SEMICOLON, AT, RECORD);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$343$20 = first_set$Java_ccc$343$20_init();

    private static EnumSet<TokenType> first_set$Java_ccc$343$20_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, CLASS, _DEFAULT, DOUBLE, ENUM, FINAL, FLOAT, INT, INTERFACE, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VOID, VOLATILE, NON_SEALED, SEALED, LBRACE, SEMICOLON, AT, LT, RECORD, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$362$27 = first_set$Java_ccc$362$27_init();

    private static EnumSet<TokenType> first_set$Java_ccc$362$27_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$374$4 = first_set$Java_ccc$374$4_init();

    private static EnumSet<TokenType> first_set$Java_ccc$374$4_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, CLASS, _DEFAULT, DOUBLE, ENUM, FINAL, FLOAT, INT, INTERFACE, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VOID, VOLATILE, NON_SEALED, SEALED, LBRACE, SEMICOLON, AT, LT, RECORD, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$460$47 = first_set$Java_ccc$460$47_init();

    private static EnumSet<TokenType> first_set$Java_ccc$460$47_init() {
        return tokenTypeSet(UNDERSCORE, BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$463$15 = first_set$Java_ccc$463$15_init();

    private static EnumSet<TokenType> first_set$Java_ccc$463$15_init() {
        return tokenTypeSet(UNDERSCORE, BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, LBRACE, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$498$5 = tokenTypeSet(LBRACE, SEMICOLON);
    private static final EnumSet<TokenType> first_set$Java_ccc$527$20 = tokenTypeSet(SUPER, THIS);
    private static final EnumSet<TokenType> first_set$Java_ccc$531$4 = tokenTypeSet(LPAREN, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$541$4 = first_set$Java_ccc$541$4_init();

    private static EnumSet<TokenType> first_set$Java_ccc$541$4_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$543$4 = first_set$Java_ccc$543$4_init();

    private static EnumSet<TokenType> first_set$Java_ccc$543$4_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$591$3 = first_set$Java_ccc$591$3_init();

    private static EnumSet<TokenType> first_set$Java_ccc$591$3_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$594$19 = tokenTypeSet(EXTENDS, SUPER);
    private static final EnumSet<TokenType> first_set$Java_ccc$598$4 = first_set$Java_ccc$598$4_init();

    private static EnumSet<TokenType> first_set$Java_ccc$598$4_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$598$16 = tokenTypeSet(BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT);
    private static final EnumSet<TokenType> first_set$Java_ccc$711$7 = first_set$Java_ccc$711$7_init();

    private static EnumSet<TokenType> first_set$Java_ccc$711$7_init() {
        return tokenTypeSet(ASSIGN, PLUSASSIGN, MINUSASSIGN, STARASSIGN, SLASHASSIGN, ANDASSIGN, ORASSIGN, XORASSIGN, REMASSIGN, LSHIFTASSIGN, RSIGNEDSHIFTASSIGN, RUNSIGNEDSHIFTASSIGN);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$712$8$ = first_set$Java_ccc$712$8$_init();

    private static EnumSet<TokenType> first_set$Java_ccc$712$8$_init() {
        return tokenTypeSet(ASSIGN, PLUSASSIGN, MINUSASSIGN, STARASSIGN, SLASHASSIGN, ANDASSIGN, ORASSIGN, XORASSIGN, REMASSIGN, LSHIFTASSIGN, RSIGNEDSHIFTASSIGN, RUNSIGNEDSHIFTASSIGN);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$746$28 = tokenTypeSet(EQ, NE);
    private static final EnumSet<TokenType> first_set$Java_ccc$754$7 = first_set$Java_ccc$754$7_init();

    private static EnumSet<TokenType> first_set$Java_ccc$754$7_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, _DEFAULT, DOUBLE, FINAL, FLOAT, INT, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VOLATILE, NON_SEALED, SEALED, AT, VAR, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$758$7 = first_set$Java_ccc$758$7_init();

    private static EnumSet<TokenType> first_set$Java_ccc$758$7_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$766$7 = tokenTypeSet(GT, LT, LE, GE);
    private static final EnumSet<TokenType> first_set$Java_ccc$781$8 = tokenTypeSet(LSHIFT, RSIGNEDSHIFT, RUNSIGNEDSHIFT);
    private static final EnumSet<TokenType> first_set$Java_ccc$787$33 = tokenTypeSet(PLUS, MINUS);
    private static final EnumSet<TokenType> first_set$Java_ccc$791$24 = tokenTypeSet(STAR, SLASH, REM);
    private static final EnumSet<TokenType> first_set$Java_ccc$795$5 = tokenTypeSet(PLUS, MINUS);
    private static final EnumSet<TokenType> first_set$Java_ccc$801$3 = first_set$Java_ccc$801$3_init();

    private static EnumSet<TokenType> first_set$Java_ccc$801$3_init() {
        return tokenTypeSet(UNDERSCORE, BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, AT, BANG, TILDE, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$817$5 = tokenTypeSet(BANG, TILDE);
    private static final EnumSet<TokenType> first_set$Java_ccc$827$3 = first_set$Java_ccc$827$3_init();

    private static EnumSet<TokenType> first_set$Java_ccc$827$3_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, THIS, TRUE, VOID, LPAREN, AT, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$834$6 = tokenTypeSet(INCR, DECR);
    private static final EnumSet<TokenType> first_set$Java_ccc$877$3$ = first_set$Java_ccc$877$3$_init();

    private static EnumSet<TokenType> first_set$Java_ccc$877$3$_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, THIS, TRUE, VOID, LPAREN, AT, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$877$3 = first_set$Java_ccc$877$3_init();

    private static EnumSet<TokenType> first_set$Java_ccc$877$3_init() {
        return tokenTypeSet(FALSE, NULL, TRUE, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$898$5 = tokenTypeSet(LPAREN, LBRACKET, DOT, DOUBLE_COLON);
    private static final EnumSet<TokenType> first_set$Java_ccc$908$38 = tokenTypeSet(NEW, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$933$4 = first_set$Java_ccc$933$4_init();

    private static EnumSet<TokenType> first_set$Java_ccc$933$4_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, VOID, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$935$4 = first_set$Java_ccc$935$4_init();

    private static EnumSet<TokenType> first_set$Java_ccc$935$4_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$936$6 = first_set$Java_ccc$936$6_init();

    private static EnumSet<TokenType> first_set$Java_ccc$936$6_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$938$6 = tokenTypeSet(BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT);
    private static final EnumSet<TokenType> first_set$Java_ccc$950$6 = first_set$Java_ccc$950$6_init();

    private static EnumSet<TokenType> first_set$Java_ccc$950$6_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, SUPER, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$953$7 = tokenTypeSet(NEW, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$978$7 = first_set$Java_ccc$978$7_init();

    private static EnumSet<TokenType> first_set$Java_ccc$978$7_init() {
        return tokenTypeSet(UNDERSCORE, BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1066$3 = first_set$Java_ccc$1066$3_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1066$3_init() {
        return tokenTypeSet(UNDERSCORE, BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1098$3 = first_set$Java_ccc$1098$3_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1098$3_init() {
        return tokenTypeSet(UNDERSCORE, ABSTRACT, _ASSERT, BOOLEAN, BREAK, BYTE, CHAR, CLASS, CONTINUE, _DEFAULT, DO, DOUBLE, ENUM, FALSE, FINAL, FLOAT, FOR, IF, INT, INTERFACE, LONG, NATIVE, NEW, NULL, PRIVATE, PROTECTED, PUBLIC, RETURN, SHORT, STATIC, STRICTFP, SUPER, SWITCH, SYNCHRONIZED, THIS, THROW, TRANSIENT, TRUE, TRY, VOID, VOLATILE, WHILE, NON_SEALED, SEALED, LPAREN, LBRACE, SEMICOLON, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, RECORD, VAR, YIELD, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1109$3 = first_set$Java_ccc$1109$3_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1109$3_init() {
        return tokenTypeSet(UNDERSCORE, _ASSERT, BOOLEAN, BREAK, BYTE, CHAR, CONTINUE, DO, DOUBLE, FALSE, FLOAT, FOR, IF, INT, LONG, NEW, NULL, RETURN, SHORT, SUPER, SWITCH, SYNCHRONIZED, THIS, THROW, TRUE, TRY, VOID, WHILE, LPAREN, LBRACE, SEMICOLON, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, YIELD, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1127$7 = first_set$Java_ccc$1127$7_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1127$7_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, AT, VAR, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1165$9 = first_set$Java_ccc$1165$9_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1165$9_init() {
        return tokenTypeSet(UNDERSCORE, ABSTRACT, BOOLEAN, BYTE, CHAR, _DEFAULT, DOUBLE, FINAL, FLOAT, INT, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VOLATILE, NON_SEALED, SEALED, AT, VAR, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1167$9 = first_set$Java_ccc$1167$9_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1167$9_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, _DEFAULT, DOUBLE, FINAL, FLOAT, INT, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VOLATILE, NON_SEALED, SEALED, AT, VAR, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1170$12 = first_set$Java_ccc$1170$12_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1170$12_init() {
        return tokenTypeSet(UNDERSCORE, ABSTRACT, BOOLEAN, BYTE, CHAR, _DEFAULT, DOUBLE, FINAL, FLOAT, INT, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VOLATILE, NON_SEALED, SEALED, AT, VAR, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1170$25 = first_set$Java_ccc$1170$25_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1170$25_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, _DEFAULT, DOUBLE, FINAL, FLOAT, INT, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VOLATILE, NON_SEALED, SEALED, AT, VAR, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1182$5 = first_set$Java_ccc$1182$5_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1182$5_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, AT, VAR, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1184$11 = tokenTypeSet(UNDERSCORE, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$1250$6 = first_set$Java_ccc$1250$6_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1250$6_init() {
        return tokenTypeSet(UNDERSCORE, ABSTRACT, _ASSERT, BOOLEAN, BREAK, BYTE, CHAR, CLASS, CONTINUE, _DEFAULT, DO, DOUBLE, ENUM, FALSE, FINAL, FLOAT, FOR, IF, INT, INTERFACE, LONG, NATIVE, NEW, NULL, PRIVATE, PROTECTED, PUBLIC, RETURN, SHORT, STATIC, STRICTFP, SUPER, SWITCH, SYNCHRONIZED, THIS, THROW, TRANSIENT, TRUE, TRY, VOID, VOLATILE, WHILE, NON_SEALED, SEALED, LPAREN, LBRACE, SEMICOLON, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, RECORD, VAR, YIELD, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1293$47 = first_set$Java_ccc$1293$47_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1293$47_init() {
        return tokenTypeSet(UNDERSCORE, BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1293$72 = first_set$Java_ccc$1293$72_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1293$72_init() {
        return tokenTypeSet(UNDERSCORE, BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1303$3 = first_set$Java_ccc$1303$3_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1303$3_init() {
        return tokenTypeSet(UNDERSCORE, BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1323$29 = first_set$Java_ccc$1323$29_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1323$29_init() {
        return tokenTypeSet(UNDERSCORE, BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1371$10 = first_set$Java_ccc$1371$10_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1371$10_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, _DEFAULT, DOUBLE, FALSE, FINAL, FLOAT, INT, LONG, NATIVE, NEW, NULL, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SUPER, SYNCHRONIZED, THIS, TRANSIENT, TRUE, VOID, VOLATILE, NON_SEALED, SEALED, LPAREN, AT, VAR, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1375$10 = first_set$Java_ccc$1375$10_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1375$10_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, THIS, TRUE, VOID, LPAREN, AT, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1411$4 = tokenTypeSet(AT);
    private static final EnumSet<TokenType> first_set$Java_ccc$1445$4 = first_set$Java_ccc$1445$4_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1445$4_init() {
        return tokenTypeSet(UNDERSCORE, BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1451$6 = first_set$Java_ccc$1451$6_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1451$6_init() {
        return tokenTypeSet(UNDERSCORE, BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, LBRACE, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1466$14 = first_set$Java_ccc$1466$14_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1466$14_init() {
        return tokenTypeSet(ABSTRACT, BOOLEAN, BYTE, CHAR, CLASS, _DEFAULT, DOUBLE, ENUM, FINAL, FLOAT, INT, INTERFACE, LONG, NATIVE, PRIVATE, PROTECTED, PUBLIC, SHORT, STATIC, STRICTFP, SYNCHRONIZED, TRANSIENT, VOLATILE, NON_SEALED, SEALED, SEMICOLON, AT, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1495$19 = first_set$Java_ccc$1495$19_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1495$19_init() {
        return tokenTypeSet(UNDERSCORE, BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, LBRACE, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1495$27 = first_set$Java_ccc$1495$27_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1495$27_init() {
        return tokenTypeSet(UNDERSCORE, BOOLEAN, BYTE, CHAR, DOUBLE, FALSE, FLOAT, INT, LONG, NEW, NULL, SHORT, SUPER, SWITCH, THIS, TRUE, VOID, LPAREN, AT, BANG, TILDE, INCR, DECR, PLUS, MINUS, CHARACTER_LITERAL, STRING_LITERAL, TEXT_BLOCK_LITERAL, INTEGER_LITERAL, LONG_LITERAL, FLOATING_POINT_LITERAL, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1498$14 = tokenTypeSet(UNDERSCORE, LPAREN, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$1502$14 = tokenTypeSet(UNDERSCORE, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$1503$14 = tokenTypeSet(UNDERSCORE, IDENTIFIER);
    private static final EnumSet<TokenType> first_set$Java_ccc$1513$7 = first_set$Java_ccc$1513$7_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1513$7_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, AT, VAR, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1516$7 = first_set$Java_ccc$1516$7_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1516$7_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, AT, VAR, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1517$9 = first_set$Java_ccc$1517$9_init();

    private static EnumSet<TokenType> first_set$Java_ccc$1517$9_init() {
        return tokenTypeSet(BOOLEAN, BYTE, CHAR, DOUBLE, FLOAT, INT, LONG, SHORT, AT, VAR, IDENTIFIER);
    }

    private static final EnumSet<TokenType> first_set$Java_ccc$1522$9 = tokenTypeSet(UNDERSCORE, IDENTIFIER);

    private boolean scanToken(TokenType expectedType, TokenType...additionalTypes) {
        Token peekedToken = nextToken(currentLookaheadToken);
        if (!typeMatches(expectedType, peekedToken)) {
            boolean matched = false;
            for (TokenType tt : additionalTypes) {
                if (typeMatches(tt, peekedToken)) {
                    matched = true;
                    break;
                }
            }
            if (!matched) return false;
        }
        --remainingLookahead;
        currentLookaheadToken = peekedToken;
        return true;
    }

    private boolean scanToken(EnumSet<TokenType> types) {
        Token peekedToken = nextToken(currentLookaheadToken);
        if (!hasMatch(types, peekedToken)) return false;
        --remainingLookahead;
        currentLookaheadToken = peekedToken;
        return true;
    }

    private boolean typeMatches(TokenType type, Token tok) {
        if (tok.getType() == type) return true;
        if (type.isContextualKeyword()) {
            return type.isIgnoreCase() ? type.getLiteralString().equalsIgnoreCase(tok.toString()) : type.getLiteralString().contentEquals(tok);
        }
        return false;
    }

    private boolean hasMatch(EnumSet<TokenType> types, Token tok) {
        if (types.contains(tok.getType())) return true;
        for (TokenType tt : types) {
            if (tt.isContextualKeyword()) {
                if (typeMatches(tt, tok)) return true;
            }
        }
        return false;
    }

    // scanahead routine for expansion at:
    // Java.ccc:38:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$38$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:38:5
            // NonTerminal ImportDeclaration at Java.ccc:38:5
            pushOntoLookaheadStack("ModularCompilationUnit", "Java.ccc", 38, 5);
            currentLookaheadProduction = "ImportDeclaration";
            try {
                if (!check$ImportDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:39:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$39$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:39:5
            // NonTerminal Annotation at Java.ccc:39:5
            pushOntoLookaheadStack("ModularCompilationUnit", "Java.ccc", 39, 5);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:45:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$45$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$45$11(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:45:25
            // NonTerminal ModuleDirective at Java.ccc:45:25
            pushOntoLookaheadStack("ModularCompilationUnit", "Java.ccc", 45, 25);
            currentLookaheadProduction = "ModuleDirective";
            try {
                if (!check$ModuleDirective(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:51:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$51$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:51:4
            // NonTerminal RequiresDirective at Java.ccc:51:4
            pushOntoLookaheadStack("ModuleDirective", "Java.ccc", 51, 4);
            currentLookaheadProduction = "RequiresDirective";
            try {
                if (!check$RequiresDirective(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:53:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$53$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:53:4
            // NonTerminal ExportsDirective at Java.ccc:53:4
            pushOntoLookaheadStack("ModuleDirective", "Java.ccc", 53, 4);
            currentLookaheadProduction = "ExportsDirective";
            try {
                if (!check$ExportsDirective(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:55:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$55$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:55:4
            // NonTerminal OpensDirective at Java.ccc:55:4
            pushOntoLookaheadStack("ModuleDirective", "Java.ccc", 55, 4);
            currentLookaheadProduction = "OpensDirective";
            try {
                if (!check$OpensDirective(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:57:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$57$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:57:4
            // NonTerminal UsesDirective at Java.ccc:57:4
            pushOntoLookaheadStack("ModuleDirective", "Java.ccc", 57, 4);
            currentLookaheadProduction = "UsesDirective";
            try {
                if (!check$UsesDirective(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:59:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$59$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:59:4
            // NonTerminal ProvidesDirective at Java.ccc:59:4
            pushOntoLookaheadStack("ModuleDirective", "Java.ccc", 59, 4);
            currentLookaheadProduction = "ProvidesDirective";
            try {
                if (!check$ProvidesDirective(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:73:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$73$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:73:6
            if (!scanToken(TO)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:74:6
            // NonTerminal Name at Java.ccc:74:6
            pushOntoLookaheadStack("ExportsDirective", "Java.ccc", 74, 6);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:74:11
            boolean passedPredicate5 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token6 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$74$12(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token6;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:74:12
    // BuildScanRoutine macro
    private boolean check$Java_ccc$74$12(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:74:12
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:74:20
            // NonTerminal Name at Java.ccc:74:20
            pushOntoLookaheadStack("ExportsDirective", "Java.ccc", 74, 20);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:83:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$83$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:83:6
            if (!scanToken(TO)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:84:6
            // NonTerminal Name at Java.ccc:84:6
            pushOntoLookaheadStack("OpensDirective", "Java.ccc", 84, 6);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:84:11
            boolean passedPredicate5 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token6 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$84$12(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token6;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:84:12
    // BuildScanRoutine macro
    private boolean check$Java_ccc$84$12(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:84:12
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:84:20
            // NonTerminal Name at Java.ccc:84:20
            pushOntoLookaheadStack("OpensDirective", "Java.ccc", 84, 20);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:100:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$100$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:100:6
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:100:14
            // NonTerminal Name at Java.ccc:100:14
            pushOntoLookaheadStack("ProvidesDirective", "Java.ccc", 100, 14);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:126:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$126$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:126:6
            // NonTerminal Annotation at Java.ccc:126:6
            pushOntoLookaheadStack("PackageDeclaration", "Java.ccc", 126, 6);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:140:62
    // BuildScanRoutine macro
    private boolean check$Java_ccc$140$62(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:140:62
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:140:68
            if (!scanToken(STAR)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:144:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$144$3$(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:144:3
            Token token2 = currentLookaheadToken;
            int remainingLookahead2 = remainingLookahead;
            boolean hitFailure2 = hitFailure;
            boolean passedPredicate2 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$144$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!scanToken(first_set$Java_ccc$146$3)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$189$3(false)) {
                            currentLookaheadToken = token2;
                            remainingLookahead = remainingLookahead2;
                            hitFailure = hitFailure2;
                            return false;
                        }
                    }
                }
            } finally {
                passedPredicate = passedPredicate2;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:144:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$144$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:144:3
            // NonTerminal Annotation at Java.ccc:144:3
            pushOntoLookaheadStack("Modifiers", "Java.ccc", 144, 3);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:189:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$189$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:189:3
            if (!("non".equals(tokenImage(1)) && "-".equals(tokenImage(2)) && "sealed".equals(tokenImage(3)) && getToken(3).getBeginOffset() == getToken(1).getEndOffset() + 1)) {
                hitFailure = true;
                return false;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:193:4
            EnumSet<TokenType> previousActives4 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged5 = false;
            somethingChanged5 = activateTokenTypes(NON_SEALED);
            try {
                // skipping check
                if (!scanToken(NON_SEALED)) return false;
            } finally {
                token_source.activeTokenTypes = previousActives4;
                if (somethingChanged5) {
                    token_source.reset(currentLookaheadToken);
                    nextTokenType = null;
                }
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:195:4
            // No code generated since this assertion does not apply in lookahead
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:197:4
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:220:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$220$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:220:5
            // NonTerminal AnnotationTypeDeclaration at Java.ccc:220:5
            pushOntoLookaheadStack("TypeDeclaration", "Java.ccc", 220, 5);
            currentLookaheadProduction = "AnnotationTypeDeclaration";
            try {
                if (!check$AnnotationTypeDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:222:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$222$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:222:5
            // NonTerminal ClassDeclaration at Java.ccc:222:5
            pushOntoLookaheadStack("TypeDeclaration", "Java.ccc", 222, 5);
            currentLookaheadProduction = "ClassDeclaration";
            try {
                if (!check$ClassDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:224:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$224$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:224:5
            // NonTerminal InterfaceDeclaration at Java.ccc:224:5
            pushOntoLookaheadStack("TypeDeclaration", "Java.ccc", 224, 5);
            currentLookaheadProduction = "InterfaceDeclaration";
            try {
                if (!check$InterfaceDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:226:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$226$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:226:5
            // NonTerminal EnumDeclaration at Java.ccc:226:5
            pushOntoLookaheadStack("TypeDeclaration", "Java.ccc", 226, 5);
            currentLookaheadProduction = "EnumDeclaration";
            try {
                if (!check$EnumDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:228:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$228$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:228:5
            // NonTerminal RecordDeclaration at Java.ccc:228:5
            pushOntoLookaheadStack("TypeDeclaration", "Java.ccc", 228, 5);
            currentLookaheadProduction = "RecordDeclaration";
            try {
                if (!check$RecordDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:236:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$236$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:236:4
            // NonTerminal Modifiers at Java.ccc:236:4
            pushOntoLookaheadStack("TypeDeclarationLA", "Java.ccc", 236, 4);
            currentLookaheadProduction = "Modifiers";
            try {
                if (!check$Modifiers(true)) return false;
            } finally {
                popLookaheadStack();
            }
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:238:6
            Token token5 = currentLookaheadToken;
            int remainingLookahead5 = remainingLookahead;
            boolean hitFailure5 = hitFailure;
            boolean passedPredicate5 = passedPredicate;
            try {
                passedPredicate = false;
                if (!scanToken(CLASS)) {
                    currentLookaheadToken = token5;
                    remainingLookahead = remainingLookahead5;
                    hitFailure = hitFailure5;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!scanToken(INTERFACE)) {
                        currentLookaheadToken = token5;
                        remainingLookahead = remainingLookahead5;
                        hitFailure = hitFailure5;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!scanToken(ENUM)) {
                            currentLookaheadToken = token5;
                            remainingLookahead = remainingLookahead5;
                            hitFailure = hitFailure5;
                            if (passedPredicate) return false;
                            passedPredicate = false;
                            if (!check$Java_ccc$241$8(false)) {
                                currentLookaheadToken = token5;
                                remainingLookahead = remainingLookahead5;
                                hitFailure = hitFailure5;
                                if (passedPredicate) return false;
                                passedPredicate = false;
                                if (!check$Java_ccc$242$8(false)) {
                                    currentLookaheadToken = token5;
                                    remainingLookahead = remainingLookahead5;
                                    hitFailure = hitFailure5;
                                    return false;
                                }
                            }
                        }
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:241:8
    // BuildScanRoutine macro
    private boolean check$Java_ccc$241$8(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:241:8
            if (!scanToken(AT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:241:13
            if (!scanToken(INTERFACE)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:242:8
    // BuildScanRoutine macro
    private boolean check$Java_ccc$242$8(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:242:8
            if (!scanToken(RECORD)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:242:17
            if (!scanToken(IDENTIFIER)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:276:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$276$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:276:5
            // NonTerminal TypeParameters at Java.ccc:276:5
            pushOntoLookaheadStack("ClassDeclaration", "Java.ccc", 276, 5);
            currentLookaheadProduction = "TypeParameters";
            try {
                if (!check$TypeParameters(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:277:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$277$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:277:5
            // NonTerminal ExtendsList at Java.ccc:277:5
            pushOntoLookaheadStack("ClassDeclaration", "Java.ccc", 277, 5);
            currentLookaheadProduction = "ExtendsList";
            try {
                if (!check$ExtendsList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:278:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$278$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:278:5
            // NonTerminal ImplementsList at Java.ccc:278:5
            pushOntoLookaheadStack("ClassDeclaration", "Java.ccc", 278, 5);
            currentLookaheadProduction = "ImplementsList";
            try {
                if (!check$ImplementsList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:279:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$279$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:279:5
            // NonTerminal PermitsList at Java.ccc:279:5
            pushOntoLookaheadStack("ClassDeclaration", "Java.ccc", 279, 5);
            currentLookaheadProduction = "PermitsList";
            try {
                if (!check$PermitsList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:291:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$291$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:291:5
            // NonTerminal TypeParameters at Java.ccc:291:5
            pushOntoLookaheadStack("InterfaceDeclaration", "Java.ccc", 291, 5);
            currentLookaheadProduction = "TypeParameters";
            try {
                if (!check$TypeParameters(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:292:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$292$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:292:5
            // NonTerminal ExtendsList at Java.ccc:292:5
            pushOntoLookaheadStack("InterfaceDeclaration", "Java.ccc", 292, 5);
            currentLookaheadProduction = "ExtendsList";
            try {
                if (!check$ExtendsList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:293:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$293$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:293:5
            // NonTerminal PermitsList at Java.ccc:293:5
            pushOntoLookaheadStack("InterfaceDeclaration", "Java.ccc", 293, 5);
            currentLookaheadProduction = "PermitsList";
            try {
                if (!check$PermitsList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:300:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$300$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:300:5
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:300:13
            // NonTerminal Name at Java.ccc:300:13
            pushOntoLookaheadStack("PermitsList", "Java.ccc", 300, 13);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:307:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$307$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (!backscan$Java_ccc$307$11()) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:308:6
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:308:14
            // NonTerminal ObjectType at Java.ccc:308:14
            pushOntoLookaheadStack("ExtendsList", "Java.ccc", 308, 14);
            currentLookaheadProduction = "ObjectType";
            try {
                if (!check$ObjectType(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:323:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$323$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:323:6
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:323:14
            // NonTerminal ObjectType at Java.ccc:323:14
            pushOntoLookaheadStack("ImplementsList", "Java.ccc", 323, 14);
            currentLookaheadProduction = "ObjectType";
            try {
                if (!check$ObjectType(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:335:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$335$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:335:5
            // NonTerminal ImplementsList at Java.ccc:335:5
            pushOntoLookaheadStack("EnumDeclaration", "Java.ccc", 335, 5);
            currentLookaheadProduction = "ImplementsList";
            try {
                if (!check$ImplementsList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:341:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$341$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:341:6
            // NonTerminal EnumConstant at Java.ccc:341:6
            pushOntoLookaheadStack("EnumBody", "Java.ccc", 341, 6);
            currentLookaheadProduction = "EnumConstant";
            try {
                if (!check$EnumConstant(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:341:19
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$341$21(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:341:21
    // BuildScanRoutine macro
    private boolean check$Java_ccc$341$21(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:341:28
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:341:36
            // NonTerminal EnumConstant at Java.ccc:341:36
            pushOntoLookaheadStack("EnumBody", "Java.ccc", 341, 36);
            currentLookaheadProduction = "EnumConstant";
            try {
                if (!check$EnumConstant(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:343:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$343$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:343:6
            if (!scanToken(SEMICOLON)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:343:18
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$343$20(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:343:20
    // BuildScanRoutine macro
    private boolean check$Java_ccc$343$20(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:343:20
            // NonTerminal ClassOrInterfaceBodyDeclaration at Java.ccc:343:20
            pushOntoLookaheadStack("EnumBody", "Java.ccc", 343, 20);
            currentLookaheadProduction = "ClassOrInterfaceBodyDeclaration";
            try {
                if (!check$ClassOrInterfaceBodyDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:356:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$356$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:356:4
            // NonTerminal TypeParameters at Java.ccc:356:4
            pushOntoLookaheadStack("RecordDeclaration", "Java.ccc", 356, 4);
            currentLookaheadProduction = "TypeParameters";
            try {
                if (!check$TypeParameters(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:358:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$358$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:358:4
            // NonTerminal ImplementsList at Java.ccc:358:4
            pushOntoLookaheadStack("RecordDeclaration", "Java.ccc", 358, 4);
            currentLookaheadProduction = "ImplementsList";
            try {
                if (!check$ImplementsList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:362:27
    // BuildScanRoutine macro
    private boolean check$Java_ccc$362$27(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:362:27
            // NonTerminal RecordComponent at Java.ccc:362:27
            pushOntoLookaheadStack("RecordHeader", "Java.ccc", 362, 27);
            currentLookaheadProduction = "RecordComponent";
            try {
                if (!check$RecordComponent(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:362:43
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$362$45(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:362:45
    // BuildScanRoutine macro
    private boolean check$Java_ccc$362$45(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:362:45
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:362:53
            // NonTerminal RecordComponent at Java.ccc:362:53
            pushOntoLookaheadStack("RecordHeader", "Java.ccc", 362, 53);
            currentLookaheadProduction = "RecordComponent";
            try {
                if (!check$RecordComponent(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:365:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$365$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:365:5
            // NonTerminal Annotation at Java.ccc:365:5
            pushOntoLookaheadStack("RecordComponent", "Java.ccc", 365, 5);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:365:24
    // BuildScanRoutine macro
    private boolean check$Java_ccc$365$24(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:365:24
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$365$25(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:365:38
            if (!scanToken(VAR_ARGS)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:365:25
    // BuildScanRoutine macro
    private boolean check$Java_ccc$365$25(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:365:25
            // NonTerminal Annotation at Java.ccc:365:25
            pushOntoLookaheadStack("RecordComponent", "Java.ccc", 365, 25);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:372:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$372$4$(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:372:4
            Token token2 = currentLookaheadToken;
            int remainingLookahead2 = remainingLookahead;
            boolean hitFailure2 = hitFailure;
            boolean passedPredicate2 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$372$4(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$374$4(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate2;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:372:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$372$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:372:4
            // NonTerminal CompactConstructorDeclaration at Java.ccc:372:4
            pushOntoLookaheadStack("RecordBody", "Java.ccc", 372, 4);
            currentLookaheadProduction = "CompactConstructorDeclaration";
            try {
                if (!check$CompactConstructorDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:374:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$374$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:374:4
            // NonTerminal ClassOrInterfaceBodyDeclaration at Java.ccc:374:4
            pushOntoLookaheadStack("RecordBody", "Java.ccc", 374, 4);
            currentLookaheadProduction = "ClassOrInterfaceBodyDeclaration";
            try {
                if (!check$ClassOrInterfaceBodyDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:384:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$384$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$384$10(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:384:54
            // NonTerminal BlockStatement at Java.ccc:384:54
            pushOntoLookaheadStack("CompactConstructorDeclaration", "Java.ccc", 384, 54);
            currentLookaheadProduction = "BlockStatement";
            try {
                if (!check$BlockStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:384:20
    // BuildScanRoutine macro
    private boolean check$Java_ccc$384$20(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:384:20
            // NonTerminal ExplicitConstructorInvocation at Java.ccc:384:20
            pushOntoLookaheadStack("CompactConstructorDeclaration", "Java.ccc", 384, 20);
            currentLookaheadProduction = "ExplicitConstructorInvocation";
            try {
                if (!check$ExplicitConstructorInvocation(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:385:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$385$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:385:5
            // NonTerminal ExplicitConstructorInvocation at Java.ccc:385:5
            pushOntoLookaheadStack("CompactConstructorDeclaration", "Java.ccc", 385, 5);
            currentLookaheadProduction = "ExplicitConstructorInvocation";
            try {
                if (!check$ExplicitConstructorInvocation(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:386:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$386$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$386$11(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:386:25
            // NonTerminal BlockStatement at Java.ccc:386:25
            pushOntoLookaheadStack("CompactConstructorDeclaration", "Java.ccc", 386, 25);
            currentLookaheadProduction = "BlockStatement";
            try {
                if (!check$BlockStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:393:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$393$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:393:4
            // NonTerminal Annotation at Java.ccc:393:4
            pushOntoLookaheadStack("EnumConstant", "Java.ccc", 393, 4);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:393:32
    // BuildScanRoutine macro
    private boolean check$Java_ccc$393$32(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:393:32
            // NonTerminal InvocationArguments at Java.ccc:393:32
            pushOntoLookaheadStack("EnumConstant", "Java.ccc", 393, 32);
            currentLookaheadProduction = "InvocationArguments";
            try {
                if (!check$InvocationArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:393:56
    // BuildScanRoutine macro
    private boolean check$Java_ccc$393$56(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:393:56
            // NonTerminal ClassOrInterfaceBody at Java.ccc:393:56
            pushOntoLookaheadStack("EnumConstant", "Java.ccc", 393, 56);
            currentLookaheadProduction = "ClassOrInterfaceBody";
            try {
                if (!check$ClassOrInterfaceBody(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:398:20
    // BuildScanRoutine macro
    private boolean check$Java_ccc$398$20(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:398:20
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:398:28
            // NonTerminal TypeParameter at Java.ccc:398:28
            pushOntoLookaheadStack("TypeParameters", "Java.ccc", 398, 28);
            currentLookaheadProduction = "TypeParameter";
            try {
                if (!check$TypeParameter(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:410:17
    // BuildScanRoutine macro
    private boolean check$Java_ccc$410$17(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:410:17
            // NonTerminal Annotation at Java.ccc:410:17
            pushOntoLookaheadStack("TypeParameter", "Java.ccc", 410, 17);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:410:51
    // BuildScanRoutine macro
    private boolean check$Java_ccc$410$51(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:410:51
            // NonTerminal TypeBound at Java.ccc:410:51
            pushOntoLookaheadStack("TypeParameter", "Java.ccc", 410, 51);
            currentLookaheadProduction = "TypeBound";
            try {
                if (!check$TypeBound(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:413:27
    // BuildScanRoutine macro
    private boolean check$Java_ccc$413$27(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:413:27
            if (!scanToken(BIT_AND)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:413:37
            // NonTerminal ObjectType at Java.ccc:413:37
            pushOntoLookaheadStack("TypeBound", "Java.ccc", 413, 37);
            currentLookaheadProduction = "ObjectType";
            try {
                if (!check$ObjectType(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:416:34
    // BuildScanRoutine macro
    private boolean check$Java_ccc$416$34(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$416$40(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:416:54
            // NonTerminal ClassOrInterfaceBodyDeclaration at Java.ccc:416:54
            pushOntoLookaheadStack("ClassOrInterfaceBody", "Java.ccc", 416, 54);
            currentLookaheadProduction = "ClassOrInterfaceBodyDeclaration";
            try {
                if (!check$ClassOrInterfaceBodyDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:419:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$419$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:419:3
            // NonTerminal Initializer at Java.ccc:419:3
            pushOntoLookaheadStack("ClassOrInterfaceBodyDeclaration", "Java.ccc", 419, 3);
            currentLookaheadProduction = "Initializer";
            try {
                if (!check$Initializer(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:421:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$421$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$216$8(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:421:3
            // NonTerminal TypeDeclaration at Java.ccc:421:3
            pushOntoLookaheadStack("ClassOrInterfaceBodyDeclaration", "Java.ccc", 421, 3);
            currentLookaheadProduction = "TypeDeclaration";
            try {
                if (!check$TypeDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:423:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$423$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:423:3
            // NonTerminal ConstructorDeclaration at Java.ccc:423:3
            pushOntoLookaheadStack("ClassOrInterfaceBodyDeclaration", "Java.ccc", 423, 3);
            currentLookaheadProduction = "ConstructorDeclaration";
            try {
                if (!check$ConstructorDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:425:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$425$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:425:3
            // NonTerminal MethodDeclaration at Java.ccc:425:3
            pushOntoLookaheadStack("ClassOrInterfaceBodyDeclaration", "Java.ccc", 425, 3);
            currentLookaheadProduction = "MethodDeclaration";
            try {
                if (!check$MethodDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:427:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$427$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:427:3
            // NonTerminal FieldDeclaration at Java.ccc:427:3
            pushOntoLookaheadStack("ClassOrInterfaceBodyDeclaration", "Java.ccc", 427, 3);
            currentLookaheadProduction = "FieldDeclaration";
            try {
                if (!check$FieldDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:429:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$429$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 0;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (!backscan$Java_ccc$429$8()) return false;
            passedPredicate = true;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Failure specified at Java.ccc:430:3
            if (true) {
                hitFailure = true;
                return false;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:432:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$432$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 0;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            passedPredicate = true;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Failure specified at Java.ccc:432:3
            if (true) {
                hitFailure = true;
                return false;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:447:24
    // BuildScanRoutine macro
    private boolean check$Java_ccc$447$24(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:447:24
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:447:32
            // NonTerminal VariableDeclarator at Java.ccc:447:32
            pushOntoLookaheadStack("FieldDeclaration", "Java.ccc", 447, 32);
            currentLookaheadProduction = "VariableDeclarator";
            try {
                if (!check$VariableDeclarator(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:450:46
    // BuildScanRoutine macro
    private boolean check$Java_ccc$450$46(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:450:46
            if (!scanToken(ASSIGN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:450:55
            // NonTerminal VariableInitializer at Java.ccc:450:55
            pushOntoLookaheadStack("VariableDeclarator", "Java.ccc", 450, 55);
            currentLookaheadProduction = "VariableInitializer";
            try {
                if (!check$VariableInitializer(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:453:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$453$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:453:5
            if (!scanToken(IDENTIFIER)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:454:5
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$454$7(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:454:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$454$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:454:7
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$454$8(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:454:21
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:454:32
            if (!scanToken(RBRACKET)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:454:8
    // BuildScanRoutine macro
    private boolean check$Java_ccc$454$8(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:454:8
            // NonTerminal Annotation at Java.ccc:454:8
            pushOntoLookaheadStack("VariableDeclaratorId", "Java.ccc", 454, 8);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:456:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$456$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (backscan$Java_ccc$456$10()) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:457:5
            if (!scanToken(UNDERSCORE)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:460:28
    // BuildScanRoutine macro
    private boolean check$Java_ccc$460$28(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:460:28
            // NonTerminal ArrayInitializer at Java.ccc:460:28
            pushOntoLookaheadStack("VariableInitializer", "Java.ccc", 460, 28);
            currentLookaheadProduction = "ArrayInitializer";
            try {
                if (!check$ArrayInitializer(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:460:47
    // BuildScanRoutine macro
    private boolean check$Java_ccc$460$47(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:460:47
            // NonTerminal Expression at Java.ccc:460:47
            pushOntoLookaheadStack("VariableInitializer", "Java.ccc", 460, 47);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:463:15
    // BuildScanRoutine macro
    private boolean check$Java_ccc$463$15(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:463:15
            // NonTerminal VariableInitializer at Java.ccc:463:15
            pushOntoLookaheadStack("ArrayInitializer", "Java.ccc", 463, 15);
            currentLookaheadProduction = "VariableInitializer";
            try {
                if (!check$VariableInitializer(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:463:35
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$463$37(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:463:37
    // BuildScanRoutine macro
    private boolean check$Java_ccc$463$37(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:463:44
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:463:52
            // NonTerminal VariableInitializer at Java.ccc:463:52
            pushOntoLookaheadStack("ArrayInitializer", "Java.ccc", 463, 52);
            currentLookaheadProduction = "VariableInitializer";
            try {
                if (!check$VariableInitializer(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:468:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$468$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 0;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (!backscan$Java_ccc$468$10()) return false;
            passedPredicate = true;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:470:5
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:476:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$476$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 0;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (backscan$Java_ccc$476$10()) return false;
            passedPredicate = true;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:480:5
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:486:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$486$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 0;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            passedPredicate = true;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:486:5
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:493:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$493$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:493:5
            // NonTerminal TypeParameters at Java.ccc:493:5
            pushOntoLookaheadStack("MethodDeclaration", "Java.ccc", 493, 5);
            currentLookaheadProduction = "TypeParameters";
            try {
                if (!check$TypeParameters(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:496:28
    // BuildScanRoutine macro
    private boolean check$Java_ccc$496$28(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:496:28
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$496$29(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:496:42
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:496:52
            if (!scanToken(RBRACKET)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:496:29
    // BuildScanRoutine macro
    private boolean check$Java_ccc$496$29(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:496:29
            // NonTerminal Annotation at Java.ccc:496:29
            pushOntoLookaheadStack("MethodDeclaration", "Java.ccc", 496, 29);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:497:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$497$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:497:5
            // NonTerminal ThrowsList at Java.ccc:497:5
            pushOntoLookaheadStack("MethodDeclaration", "Java.ccc", 497, 5);
            currentLookaheadProduction = "ThrowsList";
            try {
                if (!check$ThrowsList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:498:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$498$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:498:5
            // NonTerminal Block at Java.ccc:498:5
            pushOntoLookaheadStack("MethodDeclaration", "Java.ccc", 498, 5);
            currentLookaheadProduction = "Block";
            try {
                if (!check$Block(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:502:31
    // BuildScanRoutine macro
    private boolean check$Java_ccc$502$31(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:502:31
            // NonTerminal FormalParameter at Java.ccc:502:31
            pushOntoLookaheadStack("FormalParameters", "Java.ccc", 502, 31);
            currentLookaheadProduction = "FormalParameter";
            try {
                if (!check$FormalParameter(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:502:47
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$502$49(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:502:49
    // BuildScanRoutine macro
    private boolean check$Java_ccc$502$49(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:502:49
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:502:57
            // NonTerminal FormalParameter at Java.ccc:502:57
            pushOntoLookaheadStack("FormalParameters", "Java.ccc", 502, 57);
            currentLookaheadProduction = "FormalParameter";
            try {
                if (!check$FormalParameter(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:508:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$508$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:508:6
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$508$7(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:508:20
            if (!scanToken(VAR_ARGS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:508:31
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:508:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$508$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:508:7
            // NonTerminal Annotation at Java.ccc:508:7
            pushOntoLookaheadStack("FormalParameter", "Java.ccc", 508, 7);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:516:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$516$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:516:5
            // NonTerminal TypeParameters at Java.ccc:516:5
            pushOntoLookaheadStack("ConstructorDeclaration", "Java.ccc", 516, 5);
            currentLookaheadProduction = "TypeParameters";
            try {
                if (!check$TypeParameters(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:518:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$518$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:518:5
            // NonTerminal ThrowsList at Java.ccc:518:5
            pushOntoLookaheadStack("ConstructorDeclaration", "Java.ccc", 518, 5);
            currentLookaheadProduction = "ThrowsList";
            try {
                if (!check$ThrowsList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:520:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$520$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$520$10(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:520:54
            // NonTerminal BlockStatement at Java.ccc:520:54
            pushOntoLookaheadStack("ConstructorDeclaration", "Java.ccc", 520, 54);
            currentLookaheadProduction = "BlockStatement";
            try {
                if (!check$BlockStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:520:20
    // BuildScanRoutine macro
    private boolean check$Java_ccc$520$20(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:520:20
            // NonTerminal ExplicitConstructorInvocation at Java.ccc:520:20
            pushOntoLookaheadStack("ConstructorDeclaration", "Java.ccc", 520, 20);
            currentLookaheadProduction = "ExplicitConstructorInvocation";
            try {
                if (!check$ExplicitConstructorInvocation(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:521:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$521$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:521:5
            // NonTerminal ExplicitConstructorInvocation at Java.ccc:521:5
            pushOntoLookaheadStack("ConstructorDeclaration", "Java.ccc", 521, 5);
            currentLookaheadProduction = "ExplicitConstructorInvocation";
            try {
                if (!check$ExplicitConstructorInvocation(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:522:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$522$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$522$11(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:522:25
            // NonTerminal BlockStatement at Java.ccc:522:25
            pushOntoLookaheadStack("ConstructorDeclaration", "Java.ccc", 522, 25);
            currentLookaheadProduction = "BlockStatement";
            try {
                if (!check$BlockStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:527:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$527$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:527:3
            Token token3 = currentLookaheadToken;
            boolean passedPredicate3 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$527$4(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token3;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:527:20
            if (!scanToken(SUPER, THIS)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:527:44
            // NonTerminal InvocationArguments at Java.ccc:527:44
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "Java.ccc", 527, 44);
            currentLookaheadProduction = "InvocationArguments";
            try {
                if (!check$InvocationArguments(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:527:64
            if (!scanToken(SEMICOLON)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:527:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$527$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:527:4
            // NonTerminal TypeArguments at Java.ccc:527:4
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "Java.ccc", 527, 4);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:531:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$531$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:531:4
            Token token4 = currentLookaheadToken;
            int remainingLookahead4 = remainingLookahead;
            boolean hitFailure4 = hitFailure;
            boolean passedPredicate4 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$531$4(false)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$531$30(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:532:3
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:532:9
            Token token7 = currentLookaheadToken;
            boolean passedPredicate7 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$532$10(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token7;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate7;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:532:25
            if (!scanToken(SUPER)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:532:39
            // NonTerminal InvocationArguments at Java.ccc:532:39
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "Java.ccc", 532, 39);
            currentLookaheadProduction = "InvocationArguments";
            try {
                if (!check$InvocationArguments(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:532:59
            if (!scanToken(SEMICOLON)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:531:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$531$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:531:4
            // NonTerminal Name at Java.ccc:531:4
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "Java.ccc", 531, 4);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:531:9
            Token token4 = currentLookaheadToken;
            boolean passedPredicate4 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$531$10(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token4;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:531:10
    // BuildScanRoutine macro
    private boolean check$Java_ccc$531$10(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:531:10
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:531:15
            if (!scanToken(THIS)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:531:30
    // BuildScanRoutine macro
    private boolean check$Java_ccc$531$30(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:531:30
            // NonTerminal Parentheses at Java.ccc:531:30
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "Java.ccc", 531, 30);
            currentLookaheadProduction = "Parentheses";
            try {
                if (!check$Parentheses(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:531:42
            Token token4 = currentLookaheadToken;
            boolean passedPredicate4 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$531$43(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token4;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:531:60
            Token token6 = currentLookaheadToken;
            boolean passedPredicate6 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$531$61(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token6;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate6;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:531:43
    // BuildScanRoutine macro
    private boolean check$Java_ccc$531$43(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:531:43
            if (!scanToken(DOT)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:531:55
            // NonTerminal Name at Java.ccc:531:55
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "Java.ccc", 531, 55);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:531:61
    // BuildScanRoutine macro
    private boolean check$Java_ccc$531$61(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:531:61
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:531:66
            if (!scanToken(THIS)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:532:10
    // BuildScanRoutine macro
    private boolean check$Java_ccc$532$10(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:532:10
            // NonTerminal TypeArguments at Java.ccc:532:10
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "Java.ccc", 532, 10);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:541:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$541$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:541:4
            // NonTerminal PrimitiveType at Java.ccc:541:4
            pushOntoLookaheadStack("Type", "Java.ccc", 541, 4);
            currentLookaheadProduction = "PrimitiveType";
            try {
                if (!check$PrimitiveType(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:541:18
            if (assert$Java_ccc$541$27()) {
                hitFailure = true;
                return false;
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:543:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$543$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:543:4
            // NonTerminal ReferenceType at Java.ccc:543:4
            pushOntoLookaheadStack("Type", "Java.ccc", 543, 4);
            currentLookaheadProduction = "ReferenceType";
            try {
                if (!check$ReferenceType(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:553:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$553$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:553:4
            // NonTerminal PrimitiveArrayType at Java.ccc:553:4
            pushOntoLookaheadStack("ReferenceType", "Java.ccc", 553, 4);
            currentLookaheadProduction = "PrimitiveArrayType";
            try {
                if (!check$PrimitiveArrayType(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:555:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$555$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:555:4
            // NonTerminal ObjectType at Java.ccc:555:4
            pushOntoLookaheadStack("ReferenceType", "Java.ccc", 555, 4);
            currentLookaheadProduction = "ObjectType";
            try {
                if (!check$ObjectType(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:555:15
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$555$16(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:555:16
    // BuildScanRoutine macro
    private boolean check$Java_ccc$555$16(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:555:16
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$555$17(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:555:30
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:555:40
            if (!scanToken(RBRACKET)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:555:17
    // BuildScanRoutine macro
    private boolean check$Java_ccc$555$17(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:555:17
            // NonTerminal Annotation at Java.ccc:555:17
            pushOntoLookaheadStack("ReferenceType", "Java.ccc", 555, 17);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:559:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$559$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:559:6
            // NonTerminal Annotation at Java.ccc:559:6
            pushOntoLookaheadStack("ObjectType", "Java.ccc", 559, 6);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:560:22
    // BuildScanRoutine macro
    private boolean check$Java_ccc$560$22(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:560:22
            // NonTerminal TypeArguments at Java.ccc:560:22
            pushOntoLookaheadStack("ObjectType", "Java.ccc", 560, 22);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:561:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$561$7(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:561:7
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:561:13
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$561$14(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:561:27
            if (!scanToken(IDENTIFIER)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:561:45
            Token token8 = currentLookaheadToken;
            boolean passedPredicate8 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$561$47(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token8;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate8;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:561:14
    // BuildScanRoutine macro
    private boolean check$Java_ccc$561$14(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:561:14
            // NonTerminal Annotation at Java.ccc:561:14
            pushOntoLookaheadStack("ObjectType", "Java.ccc", 561, 14);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:561:47
    // BuildScanRoutine macro
    private boolean check$Java_ccc$561$47(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:561:47
            // NonTerminal TypeArguments at Java.ccc:561:47
            pushOntoLookaheadStack("ObjectType", "Java.ccc", 561, 47);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:577:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$577$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:577:4
            // NonTerminal DiamondOperator at Java.ccc:577:4
            pushOntoLookaheadStack("PossiblyEmptyTypeArguments", "Java.ccc", 577, 4);
            currentLookaheadProduction = "DiamondOperator";
            try {
                if (!check$DiamondOperator(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:579:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$579$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:579:4
            // NonTerminal TypeArguments at Java.ccc:579:4
            pushOntoLookaheadStack("PossiblyEmptyTypeArguments", "Java.ccc", 579, 4);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:584:23
    // BuildScanRoutine macro
    private boolean check$Java_ccc$584$23(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:584:23
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:584:31
            // NonTerminal TypeArgument at Java.ccc:584:31
            pushOntoLookaheadStack("TypeArguments", "Java.ccc", 584, 31);
            currentLookaheadProduction = "TypeArgument";
            try {
                if (!check$TypeArgument(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:589:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$589$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:589:3
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$589$4(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:589:17
            if (!scanToken(HOOK)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:589:29
            Token token7 = currentLookaheadToken;
            boolean passedPredicate7 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$589$31(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token7;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate7;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:589:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$589$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:589:4
            // NonTerminal Annotation at Java.ccc:589:4
            pushOntoLookaheadStack("TypeArgument", "Java.ccc", 589, 4);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:589:31
    // BuildScanRoutine macro
    private boolean check$Java_ccc$589$31(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:589:31
            // NonTerminal WildcardBounds at Java.ccc:589:31
            pushOntoLookaheadStack("TypeArgument", "Java.ccc", 589, 31);
            currentLookaheadProduction = "WildcardBounds";
            try {
                if (!check$WildcardBounds(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:591:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$591$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:591:3
            // NonTerminal ReferenceType at Java.ccc:591:3
            pushOntoLookaheadStack("TypeArgument", "Java.ccc", 591, 3);
            currentLookaheadProduction = "ReferenceType";
            try {
                if (!check$ReferenceType(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:597:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$597$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:597:4
            // NonTerminal Annotation at Java.ccc:597:4
            pushOntoLookaheadStack("PrimitiveType", "Java.ccc", 597, 4);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:607:37
    // BuildScanRoutine macro
    private boolean check$Java_ccc$607$37(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:607:37
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$607$38(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:607:51
            if (!scanToken(LBRACKET)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:607:67
            if (!scanToken(RBRACKET)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:607:38
    // BuildScanRoutine macro
    private boolean check$Java_ccc$607$38(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:607:38
            // NonTerminal Annotation at Java.ccc:607:38
            pushOntoLookaheadStack("PrimitiveArrayType", "Java.ccc", 607, 38);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:609:24
    // BuildScanRoutine macro
    private boolean check$Java_ccc$609$24(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:609:24
            // NonTerminal Type at Java.ccc:609:24
            pushOntoLookaheadStack("ReturnType", "Java.ccc", 609, 24);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:611:23
    // BuildScanRoutine macro
    private boolean check$Java_ccc$611$23(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:611:23
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:611:29
            if (!scanToken(IDENTIFIER)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:613:39
    // BuildScanRoutine macro
    private boolean check$Java_ccc$613$39(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:613:39
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:613:47
            // NonTerminal ExceptionType at Java.ccc:613:47
            pushOntoLookaheadStack("ThrowsList", "Java.ccc", 613, 47);
            currentLookaheadProduction = "ExceptionType";
            try {
                if (!check$ExceptionType(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:616:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$616$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:616:6
            // NonTerminal Annotation at Java.ccc:616:6
            pushOntoLookaheadStack("ExceptionType", "Java.ccc", 616, 6);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:619:8
    // BuildScanRoutine macro
    private boolean check$Java_ccc$619$8(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:619:8
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:619:14
            if (!scanToken(IDENTIFIER)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:622:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$622$7(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:622:7
            if (!scanToken(DOT)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for OneOrMore specified at Java.ccc:623:7
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:623:8
            // NonTerminal Annotation at Java.ccc:623:8
            pushOntoLookaheadStack("ExceptionType", "Java.ccc", 623, 8);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            boolean passedPredicate6 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token7 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$623$8(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token7;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate6;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:624:7
            if (!scanToken(IDENTIFIER)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:623:8
    // BuildScanRoutine macro
    private boolean check$Java_ccc$623$8(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:623:8
            // NonTerminal Annotation at Java.ccc:623:8
            pushOntoLookaheadStack("ExceptionType", "Java.ccc", 623, 8);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:626:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$626$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:626:6
            // NonTerminal TypeArguments at Java.ccc:626:6
            pushOntoLookaheadStack("ExceptionType", "Java.ccc", 626, 6);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:709:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$709$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:709:7
            Token token2 = currentLookaheadToken;
            int remainingLookahead2 = remainingLookahead;
            boolean hitFailure2 = hitFailure;
            boolean passedPredicate2 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$709$7$(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$711$7(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate2;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:709:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$709$7$(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            // skipping check
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:709:8
            if (!scanToken(HOOK)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:709:15
            // NonTerminal Expression at Java.ccc:709:15
            pushOntoLookaheadStack("Expression", "Java.ccc", 709, 15);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:709:26
            if (!scanToken(COLON)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:709:34
            // NonTerminal Expression at Java.ccc:709:34
            pushOntoLookaheadStack("Expression", "Java.ccc", 709, 34);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:711:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$711$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:711:7
            // skipping check
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:712:8
            if (!scanToken(first_set$Java_ccc$712$8$)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:712:27
            // NonTerminal Expression at Java.ccc:712:27
            pushOntoLookaheadStack("Expression", "Java.ccc", 712, 27);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:713:7
            // No code generated since this assertion does not apply in lookahead
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:726:30
    // BuildScanRoutine macro
    private boolean check$Java_ccc$726$30(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:726:30
            if (!scanToken(SC_OR)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:726:38
            // NonTerminal ConditionalAndExpression at Java.ccc:726:38
            pushOntoLookaheadStack("ConditionalOrExpression", "Java.ccc", 726, 38);
            currentLookaheadProduction = "ConditionalAndExpression";
            try {
                if (!check$ConditionalAndExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:730:27
    // BuildScanRoutine macro
    private boolean check$Java_ccc$730$27(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:730:27
            if (!scanToken(SC_AND)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:730:36
            // NonTerminal InclusiveOrExpression at Java.ccc:730:36
            pushOntoLookaheadStack("ConditionalAndExpression", "Java.ccc", 730, 36);
            currentLookaheadProduction = "InclusiveOrExpression";
            try {
                if (!check$InclusiveOrExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:734:27
    // BuildScanRoutine macro
    private boolean check$Java_ccc$734$27(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:734:27
            if (!scanToken(BIT_OR)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:734:36
            // NonTerminal ExclusiveOrExpression at Java.ccc:734:36
            pushOntoLookaheadStack("InclusiveOrExpression", "Java.ccc", 734, 36);
            currentLookaheadProduction = "ExclusiveOrExpression";
            try {
                if (!check$ExclusiveOrExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:738:19
    // BuildScanRoutine macro
    private boolean check$Java_ccc$738$19(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:738:19
            if (!scanToken(XOR)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:738:25
            // NonTerminal AndExpression at Java.ccc:738:25
            pushOntoLookaheadStack("ExclusiveOrExpression", "Java.ccc", 738, 25);
            currentLookaheadProduction = "AndExpression";
            try {
                if (!check$AndExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:742:24
    // BuildScanRoutine macro
    private boolean check$Java_ccc$742$24(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:742:24
            if (!scanToken(BIT_AND)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:742:34
            // NonTerminal EqualityExpression at Java.ccc:742:34
            pushOntoLookaheadStack("AndExpression", "Java.ccc", 742, 34);
            currentLookaheadProduction = "EqualityExpression";
            try {
                if (!check$EqualityExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:746:26
    // BuildScanRoutine macro
    private boolean check$Java_ccc$746$26(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:746:28
            if (!scanToken(EQ, NE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:746:42
            // NonTerminal InstanceOfExpression at Java.ccc:746:42
            pushOntoLookaheadStack("EqualityExpression", "Java.ccc", 746, 42);
            currentLookaheadProduction = "InstanceOfExpression";
            try {
                if (!check$InstanceOfExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:752:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$752$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:752:5
            if (!scanToken(INSTANCEOF)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:753:5
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:754:7
            Token token5 = currentLookaheadToken;
            int remainingLookahead5 = remainingLookahead;
            boolean hitFailure5 = hitFailure;
            boolean passedPredicate5 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$754$7(false)) {
                    currentLookaheadToken = token5;
                    remainingLookahead = remainingLookahead5;
                    hitFailure = hitFailure5;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$756$7(false)) {
                        currentLookaheadToken = token5;
                        remainingLookahead = remainingLookahead5;
                        hitFailure = hitFailure5;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$758$7(false)) {
                            currentLookaheadToken = token5;
                            remainingLookahead = remainingLookahead5;
                            hitFailure = hitFailure5;
                            return false;
                        }
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:754:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$754$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1115$4(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:754:7
            // NonTerminal LocalVariableDeclaration at Java.ccc:754:7
            pushOntoLookaheadStack("InstanceOfExpression", "Java.ccc", 754, 7);
            currentLookaheadProduction = "LocalVariableDeclaration";
            try {
                if (!check$LocalVariableDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:756:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$756$7(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:756:7
            // NonTerminal RecordPattern at Java.ccc:756:7
            pushOntoLookaheadStack("InstanceOfExpression", "Java.ccc", 756, 7);
            currentLookaheadProduction = "RecordPattern";
            try {
                if (!check$RecordPattern(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:758:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$758$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:758:7
            // NonTerminal ReferenceType at Java.ccc:758:7
            pushOntoLookaheadStack("InstanceOfExpression", "Java.ccc", 758, 7);
            currentLookaheadProduction = "ReferenceType";
            try {
                if (!check$ReferenceType(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:766:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$766$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:766:7
            if (!scanToken(GT, LT, LE, GE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:767:5
            // NonTerminal ShiftExpression at Java.ccc:767:5
            pushOntoLookaheadStack("RelationalExpression", "Java.ccc", 767, 5);
            currentLookaheadProduction = "ShiftExpression";
            try {
                if (!check$ShiftExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:778:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$778$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$778$11(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for UncacheTokens specified at Java.ccc:778:41
            uncacheTokens();
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:781:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$781$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:781:8
            if (!scanToken(LSHIFT, RSIGNEDSHIFT, RUNSIGNEDSHIFT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:782:7
            // NonTerminal AdditiveExpression at Java.ccc:782:7
            pushOntoLookaheadStack("ShiftExpression", "Java.ccc", 782, 7);
            currentLookaheadProduction = "AdditiveExpression";
            try {
                if (!check$AdditiveExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:787:31
    // BuildScanRoutine macro
    private boolean check$Java_ccc$787$31(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:787:33
            if (!scanToken(PLUS, MINUS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:787:52
            // NonTerminal MultiplicativeExpression at Java.ccc:787:52
            pushOntoLookaheadStack("AdditiveExpression", "Java.ccc", 787, 52);
            currentLookaheadProduction = "MultiplicativeExpression";
            try {
                if (!check$MultiplicativeExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:791:22
    // BuildScanRoutine macro
    private boolean check$Java_ccc$791$22(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:791:24
            if (!scanToken(STAR, SLASH, REM)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:791:50
            // NonTerminal UnaryExpression at Java.ccc:791:50
            pushOntoLookaheadStack("MultiplicativeExpression", "Java.ccc", 791, 50);
            currentLookaheadProduction = "UnaryExpression";
            try {
                if (!check$UnaryExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:795:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$795$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:795:5
            if (!scanToken(PLUS, MINUS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:795:24
            // NonTerminal UnaryExpression at Java.ccc:795:24
            pushOntoLookaheadStack("UnaryExpression", "Java.ccc", 795, 24);
            currentLookaheadProduction = "UnaryExpression";
            try {
                if (!check$UnaryExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:797:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$797$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:797:3
            // NonTerminal PreIncrementExpression at Java.ccc:797:3
            pushOntoLookaheadStack("UnaryExpression", "Java.ccc", 797, 3);
            currentLookaheadProduction = "PreIncrementExpression";
            try {
                if (!check$PreIncrementExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:799:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$799$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:799:3
            // NonTerminal PreDecrementExpression at Java.ccc:799:3
            pushOntoLookaheadStack("UnaryExpression", "Java.ccc", 799, 3);
            currentLookaheadProduction = "PreDecrementExpression";
            try {
                if (!check$PreDecrementExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:801:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$801$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:801:3
            // NonTerminal UnaryExpressionNotPlusMinus at Java.ccc:801:3
            pushOntoLookaheadStack("UnaryExpression", "Java.ccc", 801, 3);
            currentLookaheadProduction = "UnaryExpressionNotPlusMinus";
            try {
                if (!check$UnaryExpressionNotPlusMinus(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:817:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$817$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:817:5
            if (!scanToken(BANG, TILDE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:817:24
            // NonTerminal UnaryExpression at Java.ccc:817:24
            pushOntoLookaheadStack("UnaryExpressionNotPlusMinus", "Java.ccc", 817, 24);
            currentLookaheadProduction = "UnaryExpression";
            try {
                if (!check$UnaryExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:819:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$819$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:819:3
            // NonTerminal LambdaExpression at Java.ccc:819:3
            pushOntoLookaheadStack("UnaryExpressionNotPlusMinus", "Java.ccc", 819, 3);
            currentLookaheadProduction = "LambdaExpression";
            try {
                if (!check$LambdaExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:821:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$821$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:821:3
            // NonTerminal SwitchExpression at Java.ccc:821:3
            pushOntoLookaheadStack("UnaryExpressionNotPlusMinus", "Java.ccc", 821, 3);
            currentLookaheadProduction = "SwitchExpression";
            try {
                if (!check$SwitchExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:823:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$823$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:823:3
            // NonTerminal PrimitiveCastExpression at Java.ccc:823:3
            pushOntoLookaheadStack("UnaryExpressionNotPlusMinus", "Java.ccc", 823, 3);
            currentLookaheadProduction = "PrimitiveCastExpression";
            try {
                if (!check$PrimitiveCastExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:825:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$825$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:825:3
            // NonTerminal ObjectCastExpression at Java.ccc:825:3
            pushOntoLookaheadStack("UnaryExpressionNotPlusMinus", "Java.ccc", 825, 3);
            currentLookaheadProduction = "ObjectCastExpression";
            try {
                if (!check$ObjectCastExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:827:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$827$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:827:3
            // NonTerminal PostfixExpression at Java.ccc:827:3
            pushOntoLookaheadStack("UnaryExpressionNotPlusMinus", "Java.ccc", 827, 3);
            currentLookaheadProduction = "PostfixExpression";
            try {
                if (!check$PostfixExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:869:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$869$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:869:5
            if (!scanToken(BIT_AND)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:869:15
            // NonTerminal ObjectType at Java.ccc:869:15
            pushOntoLookaheadStack("ObjectCastExpression", "Java.ccc", 869, 15);
            currentLookaheadProduction = "ObjectType";
            try {
                if (!check$ObjectType(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:883:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$883$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:883:3
            // NonTerminal Parentheses at Java.ccc:883:3
            pushOntoLookaheadStack("PrimaryExpression", "Java.ccc", 883, 3);
            currentLookaheadProduction = "Parentheses";
            try {
                if (!check$Parentheses(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:885:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$885$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:885:3
            // NonTerminal AllocationExpression at Java.ccc:885:3
            pushOntoLookaheadStack("PrimaryExpression", "Java.ccc", 885, 3);
            currentLookaheadProduction = "AllocationExpression";
            try {
                if (!check$AllocationExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:887:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$887$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:887:3
            // NonTerminal ClassLiteral at Java.ccc:887:3
            pushOntoLookaheadStack("PrimaryExpression", "Java.ccc", 887, 3);
            currentLookaheadProduction = "ClassLiteral";
            try {
                if (!check$ClassLiteral(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:889:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$889$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:889:3
            // NonTerminal MethodReference at Java.ccc:889:3
            pushOntoLookaheadStack("PrimaryExpression", "Java.ccc", 889, 3);
            currentLookaheadProduction = "MethodReference";
            try {
                if (!check$MethodReference(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:891:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$891$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:891:3
            // NonTerminal Name at Java.ccc:891:3
            pushOntoLookaheadStack("PrimaryExpression", "Java.ccc", 891, 3);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:894:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$894$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:894:4
            // No code generated since this assertion does not apply in lookahead
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:895:4
            // No code generated since this assertion does not apply in lookahead
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:896:4
            // No code generated since this assertion does not apply in lookahead
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:898:5
            Token token7 = currentLookaheadToken;
            int remainingLookahead7 = remainingLookahead;
            boolean hitFailure7 = hitFailure;
            boolean passedPredicate7 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$898$5(false)) {
                    currentLookaheadToken = token7;
                    remainingLookahead = remainingLookahead7;
                    hitFailure = hitFailure7;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$900$5(false)) {
                        currentLookaheadToken = token7;
                        remainingLookahead = remainingLookahead7;
                        hitFailure = hitFailure7;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$902$5(false)) {
                            currentLookaheadToken = token7;
                            remainingLookahead = remainingLookahead7;
                            hitFailure = hitFailure7;
                            if (passedPredicate) return false;
                            passedPredicate = false;
                            if (!check$Java_ccc$904$5(false)) {
                                currentLookaheadToken = token7;
                                remainingLookahead = remainingLookahead7;
                                hitFailure = hitFailure7;
                                if (passedPredicate) return false;
                                passedPredicate = false;
                                if (!check$Java_ccc$906$5(false)) {
                                    currentLookaheadToken = token7;
                                    remainingLookahead = remainingLookahead7;
                                    hitFailure = hitFailure7;
                                    if (passedPredicate) return false;
                                    passedPredicate = false;
                                    if (!check$Java_ccc$908$5(false)) {
                                        currentLookaheadToken = token7;
                                        remainingLookahead = remainingLookahead7;
                                        hitFailure = hitFailure7;
                                        if (passedPredicate) return false;
                                        passedPredicate = false;
                                        if (!check$Java_ccc$910$5(false)) {
                                            currentLookaheadToken = token7;
                                            remainingLookahead = remainingLookahead7;
                                            hitFailure = hitFailure7;
                                            return false;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } finally {
                passedPredicate = passedPredicate7;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:898:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$898$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            // skipping check
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:898:6
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:898:12
            if (!scanToken(THIS)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:900:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$900$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            // skipping check
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:900:6
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:900:12
            if (!scanToken(SUPER)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:902:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$902$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            // skipping check
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:902:6
            if (!scanToken(DOT)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:902:18
            // NonTerminal AllocationExpression at Java.ccc:902:18
            pushOntoLookaheadStack("PrimaryExpression", "Java.ccc", 902, 18);
            currentLookaheadProduction = "AllocationExpression";
            try {
                if (!check$AllocationExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:904:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$904$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            // skipping check
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:904:6
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:904:17
            // NonTerminal Expression at Java.ccc:904:17
            pushOntoLookaheadStack("PrimaryExpression", "Java.ccc", 904, 17);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:904:28
            if (!scanToken(RBRACKET)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:906:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$906$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            // skipping check
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:906:6
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:906:12
            Token token6 = currentLookaheadToken;
            boolean passedPredicate6 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$906$13(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token6;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate6;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:906:28
            if (!scanToken(IDENTIFIER)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:906:13
    // BuildScanRoutine macro
    private boolean check$Java_ccc$906$13(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:906:13
            // NonTerminal TypeArguments at Java.ccc:906:13
            pushOntoLookaheadStack("PrimaryExpression", "Java.ccc", 906, 13);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:908:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$908$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            // skipping check
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:908:6
            if (!scanToken(DOUBLE_COLON)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:908:21
            Token token6 = currentLookaheadToken;
            boolean passedPredicate6 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$908$22(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token6;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate6;
            }
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:908:38
            if (!scanToken(NEW, IDENTIFIER)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:908:22
    // BuildScanRoutine macro
    private boolean check$Java_ccc$908$22(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:908:22
            // NonTerminal TypeArguments at Java.ccc:908:22
            pushOntoLookaheadStack("PrimaryExpression", "Java.ccc", 908, 22);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:910:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$910$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:910:5
            if (!(getTokenType(0) == IDENTIFIER)) {
                hitFailure = true;
                return false;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:911:5
            // NonTerminal InvocationArguments at Java.ccc:911:5
            pushOntoLookaheadStack("PrimaryExpression", "Java.ccc", 911, 5);
            currentLookaheadProduction = "InvocationArguments";
            try {
                if (!check$InvocationArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:933:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$933$4$(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:933:4
            if (!scanToken(VOID)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:933:10
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:933:15
            if (!scanToken(CLASS)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:935:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$935$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:936:6
            Token token4 = currentLookaheadToken;
            int remainingLookahead4 = remainingLookahead;
            boolean hitFailure4 = hitFailure;
            boolean passedPredicate4 = passedPredicate;
            try {
                passedPredicate = false;
                if (!scanToken(BOOLEAN)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!scanToken(first_set$Java_ccc$938$6)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$940$6(false)) {
                            currentLookaheadToken = token4;
                            remainingLookahead = remainingLookahead4;
                            hitFailure = hitFailure4;
                            return false;
                        }
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:942:4
            boolean passedPredicate6 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token7 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$942$5(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token7;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate6;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:943:4
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:944:4
            if (!scanToken(CLASS)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:940:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$940$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:940:6
            // NonTerminal Name at Java.ccc:940:6
            pushOntoLookaheadStack("ClassLiteral", "Java.ccc", 940, 6);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:942:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$942$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:942:5
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:942:15
            if (!scanToken(RBRACKET)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:950:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$950$6(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:950:6
            // NonTerminal Type at Java.ccc:950:6
            pushOntoLookaheadStack("MethodReference", "Java.ccc", 950, 6);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:952:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$952$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:952:7
            // NonTerminal TypeArguments at Java.ccc:952:7
            pushOntoLookaheadStack("MethodReference", "Java.ccc", 952, 7);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:978:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$978$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:978:7
            // NonTerminal Expression at Java.ccc:978:7
            pushOntoLookaheadStack("InvocationArguments", "Java.ccc", 978, 7);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:978:18
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$978$19(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:978:19
    // BuildScanRoutine macro
    private boolean check$Java_ccc$978$19(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:978:19
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:978:27
            // NonTerminal Expression at Java.ccc:978:27
            pushOntoLookaheadStack("InvocationArguments", "Java.ccc", 978, 27);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:991:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$991$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:991:3
            // NonTerminal PrimitiveArrayInitialization at Java.ccc:991:3
            pushOntoLookaheadStack("AllocationExpression", "Java.ccc", 991, 3);
            currentLookaheadProduction = "PrimitiveArrayInitialization";
            try {
                if (!check$PrimitiveArrayInitialization(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:993:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$993$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:993:3
            // NonTerminal ObjectArrayInitialization at Java.ccc:993:3
            pushOntoLookaheadStack("AllocationExpression", "Java.ccc", 993, 3);
            currentLookaheadProduction = "ObjectArrayInitialization";
            try {
                if (!check$ObjectArrayInitialization(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:995:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$995$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:995:3
            // NonTerminal ObjectInstantiation at Java.ccc:995:3
            pushOntoLookaheadStack("AllocationExpression", "Java.ccc", 995, 3);
            currentLookaheadProduction = "ObjectInstantiation";
            try {
                if (!check$ObjectInstantiation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1003:11
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1003$11(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1003:11
            // NonTerminal TypeArguments at Java.ccc:1003:11
            pushOntoLookaheadStack("ObjectArrayInitialization", "Java.ccc", 1003, 11);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1003:38
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1003$38(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1003:38
            // NonTerminal PossiblyEmptyTypeArguments at Java.ccc:1003:38
            pushOntoLookaheadStack("ObjectArrayInitialization", "Java.ccc", 1003, 38);
            currentLookaheadProduction = "PossiblyEmptyTypeArguments";
            try {
                if (!check$PossiblyEmptyTypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1009:11
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1009$11(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1009:11
            // NonTerminal TypeArguments at Java.ccc:1009:11
            pushOntoLookaheadStack("ObjectInstantiation", "Java.ccc", 1009, 11);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1009:38
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1009$38(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1009:38
            // NonTerminal PossiblyEmptyTypeArguments at Java.ccc:1009:38
            pushOntoLookaheadStack("ObjectInstantiation", "Java.ccc", 1009, 38);
            currentLookaheadProduction = "PossiblyEmptyTypeArguments";
            try {
                if (!check$PossiblyEmptyTypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1011:25
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1011$25(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1011:25
            // NonTerminal ClassOrInterfaceBody at Java.ccc:1011:25
            pushOntoLookaheadStack("ObjectInstantiation", "Java.ccc", 1011, 25);
            currentLookaheadProduction = "ClassOrInterfaceBody";
            try {
                if (!check$ClassOrInterfaceBody(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1015:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1015$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for OneOrMore specified at Java.ccc:1016:3
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1017:5
            if (!scanToken(LBRACKET)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1017:22
            // NonTerminal Expression at Java.ccc:1017:22
            pushOntoLookaheadStack("ArrayDimsAndInits", "Java.ccc", 1017, 22);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1017:33
            if (!scanToken(RBRACKET)) return false;
            boolean passedPredicate7 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token8 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1017$5(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token8;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate7;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:1019:3
            boolean passedPredicate10 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token11 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1020$5(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token11;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate10;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1017:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1017$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1017:5
            if (!scanToken(LBRACKET)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1017:22
            // NonTerminal Expression at Java.ccc:1017:22
            pushOntoLookaheadStack("ArrayDimsAndInits", "Java.ccc", 1017, 22);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1017:33
            if (!scanToken(RBRACKET)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1020:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1020$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:1020:5
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1020$6(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1020:19
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1020:29
            if (!scanToken(RBRACKET)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1020:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1020$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1020:6
            // NonTerminal Annotation at Java.ccc:1020:6
            pushOntoLookaheadStack("ArrayDimsAndInits", "Java.ccc", 1020, 6);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1023:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1023$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for OneOrMore specified at Java.ccc:1023:3
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:1024:5
            boolean passedPredicate5 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token6 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1024$6(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token6;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1024:19
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1024:29
            if (!scanToken(RBRACKET)) return false;
            boolean passedPredicate9 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token10 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1024$5(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token10;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate9;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1026:3
            // NonTerminal ArrayInitializer at Java.ccc:1026:3
            pushOntoLookaheadStack("ArrayDimsAndInits", "Java.ccc", 1026, 3);
            currentLookaheadProduction = "ArrayInitializer";
            try {
                if (!check$ArrayInitializer(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1024:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1024$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:1024:5
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1024$6(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1024:19
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1024:29
            if (!scanToken(RBRACKET)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1024:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1024$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1024:6
            // NonTerminal Annotation at Java.ccc:1024:6
            pushOntoLookaheadStack("ArrayDimsAndInits", "Java.ccc", 1024, 6);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1034:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1034$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1034:3
            // NonTerminal LabeledStatement at Java.ccc:1034:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 1034, 3);
            currentLookaheadProduction = "LabeledStatement";
            try {
                if (!check$LabeledStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1036:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1036$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1036:3
            // NonTerminal AssertStatement at Java.ccc:1036:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 1036, 3);
            currentLookaheadProduction = "AssertStatement";
            try {
                if (!check$AssertStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1038:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1038$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1038:3
            // NonTerminal Block at Java.ccc:1038:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 1038, 3);
            currentLookaheadProduction = "Block";
            try {
                if (!check$Block(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1040:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1040$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 3;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1040:3
            // NonTerminal YieldStatement at Java.ccc:1040:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 1040, 3);
            currentLookaheadProduction = "YieldStatement";
            try {
                if (!check$YieldStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1044:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1044$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1044:3
            // NonTerminal SwitchStatement at Java.ccc:1044:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 1044, 3);
            currentLookaheadProduction = "SwitchStatement";
            try {
                if (!check$SwitchStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1046:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1046$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1046:3
            // NonTerminal IfStatement at Java.ccc:1046:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 1046, 3);
            currentLookaheadProduction = "IfStatement";
            try {
                if (!check$IfStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1048:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1048$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1048:3
            // NonTerminal WhileStatement at Java.ccc:1048:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 1048, 3);
            currentLookaheadProduction = "WhileStatement";
            try {
                if (!check$WhileStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1050:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1050$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1050:3
            // NonTerminal DoStatement at Java.ccc:1050:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 1050, 3);
            currentLookaheadProduction = "DoStatement";
            try {
                if (!check$DoStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1052:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1052$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1052:3
            // NonTerminal ForStatement at Java.ccc:1052:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 1052, 3);
            currentLookaheadProduction = "ForStatement";
            try {
                if (!check$ForStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1054:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1054$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1054:3
            // NonTerminal BreakStatement at Java.ccc:1054:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 1054, 3);
            currentLookaheadProduction = "BreakStatement";
            try {
                if (!check$BreakStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1056:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1056$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1056:3
            // NonTerminal ContinueStatement at Java.ccc:1056:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 1056, 3);
            currentLookaheadProduction = "ContinueStatement";
            try {
                if (!check$ContinueStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1058:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1058$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1058:3
            // NonTerminal ReturnStatement at Java.ccc:1058:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 1058, 3);
            currentLookaheadProduction = "ReturnStatement";
            try {
                if (!check$ReturnStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1060:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1060$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1060:3
            // NonTerminal ThrowStatement at Java.ccc:1060:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 1060, 3);
            currentLookaheadProduction = "ThrowStatement";
            try {
                if (!check$ThrowStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1062:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1062$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1062:3
            // NonTerminal SynchronizedStatement at Java.ccc:1062:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 1062, 3);
            currentLookaheadProduction = "SynchronizedStatement";
            try {
                if (!check$SynchronizedStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1064:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1064$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1064:3
            // NonTerminal TryStatement at Java.ccc:1064:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 1064, 3);
            currentLookaheadProduction = "TryStatement";
            try {
                if (!check$TryStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1066:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1066$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1066:3
            // NonTerminal ExpressionStatement at Java.ccc:1066:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 1066, 3);
            currentLookaheadProduction = "ExpressionStatement";
            try {
                if (!check$ExpressionStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1090:42
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1090$42(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1090:42
            if (!scanToken(COLON)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1090:50
            // NonTerminal Expression at Java.ccc:1090:50
            pushOntoLookaheadStack("AssertStatement", "Java.ccc", 1090, 50);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1092:30
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1092$30(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$1092$36(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1092:50
            // NonTerminal BlockStatement at Java.ccc:1092:50
            pushOntoLookaheadStack("Block", "Java.ccc", 1092, 50);
            currentLookaheadProduction = "BlockStatement";
            try {
                if (!check$BlockStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1095:12
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1095$12(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1095:12
            Token token2 = currentLookaheadToken;
            int remainingLookahead2 = remainingLookahead;
            boolean hitFailure2 = hitFailure;
            boolean passedPredicate2 = passedPredicate;
            try {
                passedPredicate = false;
                if (!scanToken(FINAL)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1095$20(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate2;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1095:20
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1095$20(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1095:20
            // NonTerminal Annotation at Java.ccc:1095:20
            pushOntoLookaheadStack("BlockStatement", "Java.ccc", 1095, 20);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1098:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1098$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1098:3
            // NonTerminal RecordDeclaration at Java.ccc:1098:3
            pushOntoLookaheadStack("BlockStatement", "Java.ccc", 1098, 3);
            currentLookaheadProduction = "RecordDeclaration";
            try {
                if (!check$RecordDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1100:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1100$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1100:3
            // NonTerminal ClassDeclaration at Java.ccc:1100:3
            pushOntoLookaheadStack("BlockStatement", "Java.ccc", 1100, 3);
            currentLookaheadProduction = "ClassDeclaration";
            try {
                if (!check$ClassDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1102:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1102$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1102:3
            // NonTerminal InterfaceDeclaration at Java.ccc:1102:3
            pushOntoLookaheadStack("BlockStatement", "Java.ccc", 1102, 3);
            currentLookaheadProduction = "InterfaceDeclaration";
            try {
                if (!check$InterfaceDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1104:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1104$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1104:3
            // NonTerminal EnumDeclaration at Java.ccc:1104:3
            pushOntoLookaheadStack("BlockStatement", "Java.ccc", 1104, 3);
            currentLookaheadProduction = "EnumDeclaration";
            try {
                if (!check$EnumDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1106:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1106$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1115$4(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1106:3
            // NonTerminal LocalVariableDeclaration at Java.ccc:1106:3
            pushOntoLookaheadStack("BlockStatement", "Java.ccc", 1106, 3);
            currentLookaheadProduction = "LocalVariableDeclaration";
            try {
                if (!check$LocalVariableDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:1106:28
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1107:3
            if (!scanToken(SEMICOLON)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:1107:15
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1109:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1109$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1109:3
            // NonTerminal Statement at Java.ccc:1109:3
            pushOntoLookaheadStack("BlockStatement", "Java.ccc", 1109, 3);
            currentLookaheadProduction = "Statement";
            try {
                if (!check$Statement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1118:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1118$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1118:7
            if (!scanToken(VAR)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1118:13
            if (!scanToken(IDENTIFIER)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1120:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1120$7(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1120:7
            // NonTerminal Type at Java.ccc:1120:7
            pushOntoLookaheadStack("LocalVariableDeclaration", "Java.ccc", 1120, 7);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(true)) return false;
            } finally {
                popLookaheadStack();
            }
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1120:13
            if (!scanToken(UNDERSCORE, IDENTIFIER)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1127:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1127$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1127:7
            if (!scanToken(VAR)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1127:13
            // NonTerminal VariableDeclarator at Java.ccc:1127:13
            pushOntoLookaheadStack("LocalVariableDeclaration", "Java.ccc", 1127, 13);
            currentLookaheadProduction = "VariableDeclarator";
            try {
                if (!check$VariableDeclarator(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1129:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1129$7(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1129:7
            // NonTerminal Type at Java.ccc:1129:7
            pushOntoLookaheadStack("LocalVariableDeclaration", "Java.ccc", 1129, 7);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1129:12
            // NonTerminal VariableDeclarator at Java.ccc:1129:12
            pushOntoLookaheadStack("LocalVariableDeclaration", "Java.ccc", 1129, 12);
            currentLookaheadProduction = "VariableDeclarator";
            try {
                if (!check$VariableDeclarator(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:1129:31
            boolean passedPredicate5 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token6 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1129$33(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token6;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1129:33
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1129$33(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1129:33
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1129:41
            // NonTerminal VariableDeclarator at Java.ccc:1129:41
            pushOntoLookaheadStack("LocalVariableDeclaration", "Java.ccc", 1129, 41);
            currentLookaheadProduction = "VariableDeclarator";
            try {
                if (!check$VariableDeclarator(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1154:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1154$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1154:5
            // NonTerminal RecordPattern at Java.ccc:1154:5
            pushOntoLookaheadStack("CasePattern", "Java.ccc", 1154, 5);
            currentLookaheadProduction = "RecordPattern";
            try {
                if (!check$RecordPattern(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1156:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1156$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1156:5
            // NonTerminal TypePattern at Java.ccc:1156:5
            pushOntoLookaheadStack("CasePattern", "Java.ccc", 1156, 5);
            currentLookaheadProduction = "TypePattern";
            try {
                if (!check$TypePattern(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1163:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1163$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$1163$13(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1165:9
            Token token4 = currentLookaheadToken;
            int remainingLookahead4 = remainingLookahead;
            boolean hitFailure4 = hitFailure;
            boolean passedPredicate4 = passedPredicate;
            try {
                passedPredicate = false;
                if (!scanToken(UNDERSCORE)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1167$9(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1167:9
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1167$9(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1167:9
            // NonTerminal CasePattern at Java.ccc:1167:9
            pushOntoLookaheadStack("RecordPattern", "Java.ccc", 1167, 9);
            currentLookaheadProduction = "CasePattern";
            try {
                if (!check$CasePattern(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:1168:9
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1169$11(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1169:11
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1169$11(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1169:11
            if (!scanToken(COMMA)) return false;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1170:12
            Token token5 = currentLookaheadToken;
            int remainingLookahead5 = remainingLookahead;
            boolean hitFailure5 = hitFailure;
            boolean passedPredicate5 = passedPredicate;
            try {
                passedPredicate = false;
                if (!scanToken(UNDERSCORE)) {
                    currentLookaheadToken = token5;
                    remainingLookahead = remainingLookahead5;
                    hitFailure = hitFailure5;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1170$25(false)) {
                        currentLookaheadToken = token5;
                        remainingLookahead = remainingLookahead5;
                        hitFailure = hitFailure5;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1170:25
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1170$25(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1170:25
            // NonTerminal CasePattern at Java.ccc:1170:25
            pushOntoLookaheadStack("RecordPattern", "Java.ccc", 1170, 25);
            currentLookaheadProduction = "CasePattern";
            try {
                if (!check$CasePattern(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1182:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1182$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1182:5
            if (!scanToken(VAR)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1182:11
            if (!scanToken(IDENTIFIER)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1184:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1184$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1184:5
            // NonTerminal Type at Java.ccc:1184:5
            pushOntoLookaheadStack("TypePattern", "Java.ccc", 1184, 5);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(false)) return false;
            } finally {
                popLookaheadStack();
            }
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1184:11
            if (!scanToken(UNDERSCORE, IDENTIFIER)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1197:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1197$5$(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1197:5
            Token token2 = currentLookaheadToken;
            int remainingLookahead2 = remainingLookahead;
            boolean hitFailure2 = hitFailure;
            boolean passedPredicate2 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$1197$5(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1200$5(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate2;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1197:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1197$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1197$10(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for OneOrMore specified at Java.ccc:1198:5
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1198:6
            // NonTerminal NewCaseStatement at Java.ccc:1198:6
            pushOntoLookaheadStack("SwitchStatement", "Java.ccc", 1198, 6);
            currentLookaheadProduction = "NewCaseStatement";
            try {
                if (!check$NewCaseStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
            boolean passedPredicate5 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token6 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1198$6(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token6;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1198:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1198$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1198:6
            // NonTerminal NewCaseStatement at Java.ccc:1198:6
            pushOntoLookaheadStack("SwitchStatement", "Java.ccc", 1198, 6);
            currentLookaheadProduction = "NewCaseStatement";
            try {
                if (!check$NewCaseStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1200:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1200$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1200$10(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for OneOrMore specified at Java.ccc:1201:5
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1201:6
            // NonTerminal ClassicCaseStatement at Java.ccc:1201:6
            pushOntoLookaheadStack("SwitchStatement", "Java.ccc", 1201, 6);
            currentLookaheadProduction = "ClassicCaseStatement";
            try {
                if (!check$ClassicCaseStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
            boolean passedPredicate5 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token6 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1201$6(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token6;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1201:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1201$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1201:6
            // NonTerminal ClassicCaseStatement at Java.ccc:1201:6
            pushOntoLookaheadStack("SwitchStatement", "Java.ccc", 1201, 6);
            currentLookaheadProduction = "ClassicCaseStatement";
            try {
                if (!check$ClassicCaseStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1223:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1223$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$1223$10(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1223:42
            // NonTerminal BlockStatement at Java.ccc:1223:42
            pushOntoLookaheadStack("ClassicCaseStatement", "Java.ccc", 1223, 42);
            currentLookaheadProduction = "BlockStatement";
            try {
                if (!check$BlockStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1238:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1238$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1238:4
            if (!scanToken(CASE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1238:11
            if (!scanToken(NULL)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:1238:23
            Token token5 = currentLookaheadToken;
            boolean passedPredicate5 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$1238$24(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1238:24
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1238$24(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1238:24
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1238:31
            if (!scanToken(_DEFAULT)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1240:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1240$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1240:4
            if (!scanToken(CASE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1240:11
            // NonTerminal CasePattern at Java.ccc:1240:11
            pushOntoLookaheadStack("CaseOrDefault", "Java.ccc", 1240, 11);
            currentLookaheadProduction = "CasePattern";
            try {
                if (!check$CasePattern(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:1240:28
            boolean passedPredicate5 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token6 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1240$29(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token6;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:1240:51
            Token token8 = currentLookaheadToken;
            boolean passedPredicate8 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$1240$52(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token8;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate8;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1240:29
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1240$29(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1240:29
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1240:37
            // NonTerminal CasePattern at Java.ccc:1240:37
            pushOntoLookaheadStack("CaseOrDefault", "Java.ccc", 1240, 37);
            currentLookaheadProduction = "CasePattern";
            try {
                if (!check$CasePattern(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1240:52
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1240$52(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1240:52
            // NonTerminal WhenClause at Java.ccc:1240:52
            pushOntoLookaheadStack("CaseOrDefault", "Java.ccc", 1240, 52);
            currentLookaheadProduction = "WhenClause";
            try {
                if (!check$WhenClause(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1242:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1242$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1242:4
            if (!scanToken(CASE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1242:11
            // NonTerminal Expression at Java.ccc:1242:11
            pushOntoLookaheadStack("CaseOrDefault", "Java.ccc", 1242, 11);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:1242:22
            boolean passedPredicate5 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token6 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1242$23(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token6;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1242:23
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1242$23(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1242:23
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1242:31
            // NonTerminal Expression at Java.ccc:1242:31
            pushOntoLookaheadStack("CaseOrDefault", "Java.ccc", 1242, 31);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1250:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1250$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1250:6
            // NonTerminal Block at Java.ccc:1250:6
            pushOntoLookaheadStack("NewCaseStatement", "Java.ccc", 1250, 6);
            currentLookaheadProduction = "Block";
            try {
                if (!check$Block(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1252:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1252$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1252:6
            // NonTerminal ThrowStatement at Java.ccc:1252:6
            pushOntoLookaheadStack("NewCaseStatement", "Java.ccc", 1252, 6);
            currentLookaheadProduction = "ThrowStatement";
            try {
                if (!check$ThrowStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1254:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1254$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 0;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (!backscan$Java_ccc$1254$13()) return false;
            passedPredicate = true;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1255:9
            // NonTerminal Expression at Java.ccc:1255:9
            pushOntoLookaheadStack("NewCaseStatement", "Java.ccc", 1255, 9);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1255:20
            if (!scanToken(SEMICOLON)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1257:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1257$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$1257$12(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1258:6
            // NonTerminal BlockStatement at Java.ccc:1258:6
            pushOntoLookaheadStack("NewCaseStatement", "Java.ccc", 1258, 6);
            currentLookaheadProduction = "BlockStatement";
            try {
                if (!check$BlockStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1263:48
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1263$48(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1263:48
            if (!scanToken(ELSE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1263:55
            // NonTerminal Statement at Java.ccc:1263:55
            pushOntoLookaheadStack("IfStatement", "Java.ccc", 1263, 55);
            currentLookaheadProduction = "Statement";
            try {
                if (!check$Statement(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1285:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1285$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1285:4
            // NonTerminal BasicForStatement at Java.ccc:1285:4
            pushOntoLookaheadStack("ForStatement", "Java.ccc", 1285, 4);
            currentLookaheadProduction = "BasicForStatement";
            try {
                if (!check$BasicForStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1287:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1287$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1287:4
            // NonTerminal EnhancedForStatement at Java.ccc:1287:4
            pushOntoLookaheadStack("ForStatement", "Java.ccc", 1287, 4);
            currentLookaheadProduction = "EnhancedForStatement";
            try {
                if (!check$EnhancedForStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1293:20
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1293$20(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1293:20
            // NonTerminal ForInit at Java.ccc:1293:20
            pushOntoLookaheadStack("BasicForStatement", "Java.ccc", 1293, 20);
            currentLookaheadProduction = "ForInit";
            try {
                if (!check$ForInit(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1293:47
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1293$47(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1293:47
            // NonTerminal Expression at Java.ccc:1293:47
            pushOntoLookaheadStack("BasicForStatement", "Java.ccc", 1293, 47);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1293:72
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1293$72(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1293:72
            // NonTerminal StatementExpressionList at Java.ccc:1293:72
            pushOntoLookaheadStack("BasicForStatement", "Java.ccc", 1293, 72);
            currentLookaheadProduction = "StatementExpressionList";
            try {
                if (!check$StatementExpressionList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1301:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1301$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1115$4(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1301:3
            // NonTerminal LocalVariableDeclaration at Java.ccc:1301:3
            pushOntoLookaheadStack("ForInit", "Java.ccc", 1301, 3);
            currentLookaheadProduction = "LocalVariableDeclaration";
            try {
                if (!check$LocalVariableDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1303:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1303$3(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1303:3
            // NonTerminal StatementExpressionList at Java.ccc:1303:3
            pushOntoLookaheadStack("ForInit", "Java.ccc", 1303, 3);
            currentLookaheadProduction = "StatementExpressionList";
            try {
                if (!check$StatementExpressionList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1307:25
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1307$25(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1307:25
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1307:33
            // NonTerminal StatementExpression at Java.ccc:1307:33
            pushOntoLookaheadStack("StatementExpressionList", "Java.ccc", 1307, 33);
            currentLookaheadProduction = "StatementExpression";
            try {
                if (!check$StatementExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1323:29
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1323$29(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1323:29
            // NonTerminal Expression at Java.ccc:1323:29
            pushOntoLookaheadStack("ReturnStatement", "Java.ccc", 1323, 29);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1350:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1350$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1350:4
            // NonTerminal ResourcesInTryBlock at Java.ccc:1350:4
            pushOntoLookaheadStack("TryStatement", "Java.ccc", 1350, 4);
            currentLookaheadProduction = "ResourcesInTryBlock";
            try {
                if (!check$ResourcesInTryBlock(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:1350:24
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1352:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1352$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1352:4
            // NonTerminal CatchBlock at Java.ccc:1352:4
            pushOntoLookaheadStack("TryStatement", "Java.ccc", 1352, 4);
            currentLookaheadProduction = "CatchBlock";
            try {
                if (!check$CatchBlock(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:1352:15
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1353:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1353$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1353:4
            // NonTerminal FinallyBlock at Java.ccc:1353:4
            pushOntoLookaheadStack("TryStatement", "Java.ccc", 1353, 4);
            currentLookaheadProduction = "FinallyBlock";
            try {
                if (!check$FinallyBlock(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:1353:16
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1367:8
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1367$8(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:1367:8
            if (!(getTokenType(0) == SEMICOLON)) {
                hitFailure = true;
                return false;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:1368:8
            if (!(getTokenType(1) != RPAREN)) {
                hitFailure = true;
                return false;
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:1370:8
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1371:10
            Token token6 = currentLookaheadToken;
            int remainingLookahead6 = remainingLookahead;
            boolean hitFailure6 = hitFailure;
            boolean passedPredicate6 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$1371$10(false)) {
                    currentLookaheadToken = token6;
                    remainingLookahead = remainingLookahead6;
                    hitFailure = hitFailure6;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1373$10(false)) {
                        currentLookaheadToken = token6;
                        remainingLookahead = remainingLookahead6;
                        hitFailure = hitFailure6;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$1375$10(false)) {
                            currentLookaheadToken = token6;
                            remainingLookahead = remainingLookahead6;
                            hitFailure = hitFailure6;
                            return false;
                        }
                    }
                }
            } finally {
                passedPredicate = passedPredicate6;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:1378:8
            Token token8 = currentLookaheadToken;
            boolean passedPredicate8 = passedPredicate;
            passedPredicate = false;
            try {
                if (!scanToken(SEMICOLON)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token8;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate8;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1371:10
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1371$10(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1115$4(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1371:10
            // NonTerminal LocalVariableDeclaration at Java.ccc:1371:10
            pushOntoLookaheadStack("ResourcesInTryBlock", "Java.ccc", 1371, 10);
            currentLookaheadProduction = "LocalVariableDeclaration";
            try {
                if (!check$LocalVariableDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1373:10
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1373$10(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1373:10
            // NonTerminal Name at Java.ccc:1373:10
            pushOntoLookaheadStack("ResourcesInTryBlock", "Java.ccc", 1373, 10);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1375:10
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1375$10(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1375:10
            // NonTerminal PrimaryExpression at Java.ccc:1375:10
            pushOntoLookaheadStack("ResourcesInTryBlock", "Java.ccc", 1375, 10);
            currentLookaheadProduction = "PrimaryExpression";
            try {
                if (!check$PrimaryExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:1376:10
            // No code generated since this assertion does not apply in lookahead
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1387:17
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1387$17(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1387:17
            if (!scanToken(BIT_OR)) return false;
            // skipping check
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1387:27
            // NonTerminal ObjectType at Java.ccc:1387:27
            pushOntoLookaheadStack("CatchBlock", "Java.ccc", 1387, 27);
            currentLookaheadProduction = "ObjectType";
            try {
                if (!check$ObjectType(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1411:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1411$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1411:4
            // NonTerminal NormalAnnotation at Java.ccc:1411:4
            pushOntoLookaheadStack("Annotation", "Java.ccc", 1411, 4);
            currentLookaheadProduction = "NormalAnnotation";
            try {
                if (!check$NormalAnnotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1413:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1413$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1413:4
            // NonTerminal SingleMemberAnnotation at Java.ccc:1413:4
            pushOntoLookaheadStack("Annotation", "Java.ccc", 1413, 4);
            currentLookaheadProduction = "SingleMemberAnnotation";
            try {
                if (!check$SingleMemberAnnotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1415:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1415$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1415:4
            // NonTerminal MarkerAnnotation at Java.ccc:1415:4
            pushOntoLookaheadStack("Annotation", "Java.ccc", 1415, 4);
            currentLookaheadProduction = "MarkerAnnotation";
            try {
                if (!check$MarkerAnnotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1419:47
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1419$47(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1419:47
            // NonTerminal MemberValuePairs at Java.ccc:1419:47
            pushOntoLookaheadStack("NormalAnnotation", "Java.ccc", 1419, 47);
            currentLookaheadProduction = "MemberValuePairs";
            try {
                if (!check$MemberValuePairs(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1435:22
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1435$22(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1435:22
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1435:30
            // NonTerminal MemberValuePair at Java.ccc:1435:30
            pushOntoLookaheadStack("MemberValuePairs", "Java.ccc", 1435, 30);
            currentLookaheadProduction = "MemberValuePair";
            try {
                if (!check$MemberValuePair(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1441:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1441$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1441:4
            // NonTerminal Annotation at Java.ccc:1441:4
            pushOntoLookaheadStack("MemberValue", "Java.ccc", 1441, 4);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1443:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1443$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1443:4
            // NonTerminal MemberValueArrayInitializer at Java.ccc:1443:4
            pushOntoLookaheadStack("MemberValue", "Java.ccc", 1443, 4);
            currentLookaheadProduction = "MemberValueArrayInitializer";
            try {
                if (!check$MemberValueArrayInitializer(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1445:4
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1445$4(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1445:4
            // NonTerminal ConditionalOrExpression at Java.ccc:1445:4
            pushOntoLookaheadStack("MemberValue", "Java.ccc", 1445, 4);
            currentLookaheadProduction = "ConditionalOrExpression";
            try {
                if (!check$ConditionalOrExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1451:6
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1451$6(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1451:6
            // NonTerminal MemberValue at Java.ccc:1451:6
            pushOntoLookaheadStack("MemberValueArrayInitializer", "Java.ccc", 1451, 6);
            currentLookaheadProduction = "MemberValue";
            try {
                if (!check$MemberValue(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:1451:18
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1451$20(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:1451:49
            Token token7 = currentLookaheadToken;
            boolean passedPredicate7 = passedPredicate;
            passedPredicate = false;
            try {
                if (!scanToken(COMMA)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token7;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate7;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1451:20
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1451$20(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1451:20
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1451:34
            // NonTerminal MemberValue at Java.ccc:1451:34
            pushOntoLookaheadStack("MemberValueArrayInitializer", "Java.ccc", 1451, 34);
            currentLookaheadProduction = "MemberValue";
            try {
                if (!check$MemberValue(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1466:14
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1466$14(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1466:14
            // NonTerminal AnnotationTypeMemberDeclaration at Java.ccc:1466:14
            pushOntoLookaheadStack("AnnotationTypeBody", "Java.ccc", 1466, 14);
            currentLookaheadProduction = "AnnotationTypeMemberDeclaration";
            try {
                if (!check$AnnotationTypeMemberDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1472:47
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1472$47(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1472:47
            // NonTerminal DefaultValue at Java.ccc:1472:47
            pushOntoLookaheadStack("AnnotationMethodDeclaration", "Java.ccc", 1472, 47);
            currentLookaheadProduction = "DefaultValue";
            try {
                if (!check$DefaultValue(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1478:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1478$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1478:3
            // NonTerminal AnnotationTypeDeclaration at Java.ccc:1478:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1478, 3);
            currentLookaheadProduction = "AnnotationTypeDeclaration";
            try {
                if (!check$AnnotationTypeDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1480:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1480$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1480:3
            // NonTerminal ClassDeclaration at Java.ccc:1480:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1480, 3);
            currentLookaheadProduction = "ClassDeclaration";
            try {
                if (!check$ClassDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1482:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1482$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1482:3
            // NonTerminal InterfaceDeclaration at Java.ccc:1482:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1482, 3);
            currentLookaheadProduction = "InterfaceDeclaration";
            try {
                if (!check$InterfaceDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1484:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1484$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1484:3
            // NonTerminal EnumDeclaration at Java.ccc:1484:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1484, 3);
            currentLookaheadProduction = "EnumDeclaration";
            try {
                if (!check$EnumDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1486:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1486$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1486:3
            // NonTerminal AnnotationMethodDeclaration at Java.ccc:1486:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1486, 3);
            currentLookaheadProduction = "AnnotationMethodDeclaration";
            try {
                if (!check$AnnotationMethodDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1488:3
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1488$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1488:3
            // NonTerminal FieldDeclaration at Java.ccc:1488:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1488, 3);
            currentLookaheadProduction = "FieldDeclaration";
            try {
                if (!check$FieldDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1495:19
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1495$19(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1495:19
            // NonTerminal Block at Java.ccc:1495:19
            pushOntoLookaheadStack("LambdaExpression", "Java.ccc", 1495, 19);
            currentLookaheadProduction = "Block";
            try {
                if (!check$Block(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1495:27
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1495$27(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1495:27
            // NonTerminal Expression at Java.ccc:1495:27
            pushOntoLookaheadStack("LambdaExpression", "Java.ccc", 1495, 27);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1498:44
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1498$44(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 3;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1498:44
            // NonTerminal SimpleLambdaLHS at Java.ccc:1498:44
            pushOntoLookaheadStack("LambdaLHS", "Java.ccc", 1498, 44);
            currentLookaheadProduction = "SimpleLambdaLHS";
            try {
                if (!check$SimpleLambdaLHS(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1498:62
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1498$62(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1498:62
            // NonTerminal LambdaParameters at Java.ccc:1498:62
            pushOntoLookaheadStack("LambdaLHS", "Java.ccc", 1498, 62);
            currentLookaheadProduction = "LambdaParameters";
            try {
                if (!check$LambdaParameters(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1503:5
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1503$5(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1503:5
            if (!scanToken(COMMA)) return false;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1503:14
            if (!scanToken(UNDERSCORE, IDENTIFIER)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1507:31
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1507$31(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1507:31
            // NonTerminal LambdaParameter at Java.ccc:1507:31
            pushOntoLookaheadStack("LambdaParameters", "Java.ccc", 1507, 31);
            currentLookaheadProduction = "LambdaParameter";
            try {
                if (!check$LambdaParameter(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:1507:47
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1507$49(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1507:49
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1507$49(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1507:49
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1507:57
            // NonTerminal LambdaParameter at Java.ccc:1507:57
            pushOntoLookaheadStack("LambdaParameters", "Java.ccc", 1507, 57);
            currentLookaheadProduction = "LambdaParameter";
            try {
                if (!check$LambdaParameter(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1513:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1513$7(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1513:7
            // NonTerminal Type at Java.ccc:1513:7
            pushOntoLookaheadStack("LambdaParameter", "Java.ccc", 1513, 7);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:1513:12
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1513$13(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1513:26
            if (!scanToken(VAR_ARGS)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1513:42
            if (!scanToken(IDENTIFIER)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:1514:7
            // No code generated since this assertion does not apply in lookahead
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1513:13
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1513$13(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1513:13
            // NonTerminal Annotation at Java.ccc:1513:13
            pushOntoLookaheadStack("LambdaParameter", "Java.ccc", 1513, 13);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1516:7
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1516$7(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1517:9
            Token token4 = currentLookaheadToken;
            int remainingLookahead4 = remainingLookahead;
            boolean hitFailure4 = hitFailure;
            boolean passedPredicate4 = passedPredicate;
            try {
                passedPredicate = false;
                if (!scanToken(VAR)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1519$9(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1522:9
            Token token7 = currentLookaheadToken;
            int remainingLookahead7 = remainingLookahead;
            boolean hitFailure7 = hitFailure;
            boolean passedPredicate7 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$1522$9(false)) {
                    currentLookaheadToken = token7;
                    remainingLookahead = remainingLookahead7;
                    hitFailure = hitFailure7;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!scanToken(UNDERSCORE)) {
                        currentLookaheadToken = token7;
                        remainingLookahead = remainingLookahead7;
                        hitFailure = hitFailure7;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate7;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1519:9
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1519$9(boolean scanToEnd) {
        int prevPassedPredicateThreshold = this.passedPredicateThreshold;
        this.passedPredicateThreshold = -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1519:9
            // NonTerminal Type at Java.ccc:1519:9
            pushOntoLookaheadStack("LambdaParameter", "Java.ccc", 1519, 9);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead <= this.passedPredicateThreshold) {
                passedPredicate = true;
                this.passedPredicateThreshold = prevPassedPredicateThreshold;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1522:9
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1522$9(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1522:9
            if (!scanToken(IDENTIFIER)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:1522:21
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1522$22(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1522:22
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1522$22(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:1522:22
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1522$23(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1522:36
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1522:46
            if (!scanToken(RBRACKET)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // Java.ccc:1522:23
    // BuildScanRoutine macro
    private boolean check$Java_ccc$1522$23(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1522:23
            // NonTerminal Annotation at Java.ccc:1522:23
            pushOntoLookaheadStack("LambdaParameter", "Java.ccc", 1522, 23);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for assertion at:
    // Java.ccc:541:18
    // BuildAssertionRoutine macro
    private boolean assert$Java_ccc$541$27() {
        final boolean scanToEnd = true;
        int remainingLookahead2 = remainingLookahead;
        remainingLookahead = UNLIMITED;
        Token currentLookahead1 = currentLookaheadToken;
        boolean prevHitFailure = hitFailure;
        if (currentLookaheadToken == null) {
            currentLookaheadToken = lastConsumedToken;
        }
        try {
            lookaheadRoutineNesting++;
            // skipping check
            if (!scanToken(LBRACKET)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = currentLookahead1;
            remainingLookahead = remainingLookahead2;
            hitFailure = prevHitFailure;
        }
    }

    // scanahead routine for assertion at:
    // Java.ccc:1095:2
    // BuildAssertionRoutine macro
    private boolean assert$Java_ccc$1095$11() {
        final boolean scanToEnd = true;
        int remainingLookahead2 = remainingLookahead;
        remainingLookahead = UNLIMITED;
        Token currentLookahead1 = currentLookaheadToken;
        boolean prevHitFailure = hitFailure;
        if (currentLookaheadToken == null) {
            currentLookaheadToken = lastConsumedToken;
        }
        try {
            lookaheadRoutineNesting++;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:1095:11
            boolean passedPredicate5 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token6 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1095$12(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token6;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
            hitFailure = false;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1095:34
            if (!scanToken(PRIVATE, PROTECTED, PUBLIC, STATIC)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = currentLookahead1;
            remainingLookahead = remainingLookahead2;
            hitFailure = prevHitFailure;
        }
    }

    // scanahead routine for assertion at:
    // Java.ccc:1514:7
    // BuildAssertionRoutine macro
    private boolean assert$Java_ccc$1514$16() {
        final boolean scanToEnd = true;
        int remainingLookahead2 = remainingLookahead;
        remainingLookahead = UNLIMITED;
        Token currentLookahead1 = currentLookaheadToken;
        boolean prevHitFailure = hitFailure;
        if (currentLookaheadToken == null) {
            currentLookaheadToken = lastConsumedToken;
        }
        try {
            lookaheadRoutineNesting++;
            // skipping check
            if (!scanToken(COMMA)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = currentLookahead1;
            remainingLookahead = remainingLookahead2;
            hitFailure = prevHitFailure;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:32:4
    private boolean scan$Java_ccc$32$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:32:4
            // NonTerminal ModularCompilationUnit at Java.ccc:32:4
            pushOntoLookaheadStack("Root", "Java.ccc", 32, 4);
            currentLookaheadProduction = "ModularCompilationUnit";
            try {
                if (!check$ModularCompilationUnit(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:32:27
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:39:5
    private boolean scan$Java_ccc$39$5() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:39:5
            // NonTerminal Annotation at Java.ccc:39:5
            pushOntoLookaheadStack("ModularCompilationUnit", "Java.ccc", 39, 5);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:45:5
    private boolean scan$Java_ccc$45$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$45$11(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:105:5
    private boolean scan$Java_ccc$105$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:105:5
            // NonTerminal PackageDeclaration at Java.ccc:105:5
            pushOntoLookaheadStack("CompilationUnit", "Java.ccc", 105, 5);
            currentLookaheadProduction = "PackageDeclaration";
            try {
                if (!check$PackageDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:107:5
    private boolean scan$Java_ccc$107$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$216$8(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:110:5
    private boolean scan$Java_ccc$110$5() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:110:5
            if (!(getTokenType(1) != RBRACE)) {
                hitFailure = true;
                return false;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:111:5
            if (!scanToken(EOF)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:126:6
    private boolean scan$Java_ccc$126$6() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:126:6
            // NonTerminal Annotation at Java.ccc:126:6
            pushOntoLookaheadStack("PackageDeclaration", "Java.ccc", 126, 6);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:144:3
    private boolean scan$Java_ccc$144$3() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:144:3
            // NonTerminal Annotation at Java.ccc:144:3
            pushOntoLookaheadStack("Modifiers", "Java.ccc", 144, 3);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:189:3
    private boolean scan$Java_ccc$189$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:189:3
            if (!("non".equals(tokenImage(1)) && "-".equals(tokenImage(2)) && "sealed".equals(tokenImage(3)) && getToken(3).getBeginOffset() == getToken(1).getEndOffset() + 1)) {
                hitFailure = true;
                return false;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:193:4
            EnumSet<TokenType> previousActives4 = EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged5 = false;
            somethingChanged5 = activateTokenTypes(NON_SEALED);
            try {
                // skipping check
                if (!scanToken(NON_SEALED)) return false;
            } finally {
                token_source.activeTokenTypes = previousActives4;
                if (somethingChanged5) {
                    token_source.reset(currentLookaheadToken);
                    nextTokenType = null;
                }
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:195:4
            // No code generated since this assertion does not apply in lookahead
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at Java.ccc:197:4
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:220:5
    private boolean scan$Java_ccc$220$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:220:5
            // NonTerminal AnnotationTypeDeclaration at Java.ccc:220:5
            pushOntoLookaheadStack("TypeDeclaration", "Java.ccc", 220, 5);
            currentLookaheadProduction = "AnnotationTypeDeclaration";
            try {
                if (!check$AnnotationTypeDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:222:5
    private boolean scan$Java_ccc$222$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:222:5
            // NonTerminal ClassDeclaration at Java.ccc:222:5
            pushOntoLookaheadStack("TypeDeclaration", "Java.ccc", 222, 5);
            currentLookaheadProduction = "ClassDeclaration";
            try {
                if (!check$ClassDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:224:5
    private boolean scan$Java_ccc$224$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:224:5
            // NonTerminal InterfaceDeclaration at Java.ccc:224:5
            pushOntoLookaheadStack("TypeDeclaration", "Java.ccc", 224, 5);
            currentLookaheadProduction = "InterfaceDeclaration";
            try {
                if (!check$InterfaceDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:226:5
    private boolean scan$Java_ccc$226$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:226:5
            // NonTerminal EnumDeclaration at Java.ccc:226:5
            pushOntoLookaheadStack("TypeDeclaration", "Java.ccc", 226, 5);
            currentLookaheadProduction = "EnumDeclaration";
            try {
                if (!check$EnumDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:228:5
    private boolean scan$Java_ccc$228$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:228:5
            // NonTerminal RecordDeclaration at Java.ccc:228:5
            pushOntoLookaheadStack("TypeDeclaration", "Java.ccc", 228, 5);
            currentLookaheadProduction = "RecordDeclaration";
            try {
                if (!check$RecordDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:307:6
    private boolean scan$Java_ccc$307$6() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (!backscan$Java_ccc$307$11()) return false;
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:308:6
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:308:14
            // NonTerminal ObjectType at Java.ccc:308:14
            pushOntoLookaheadStack("ExtendsList", "Java.ccc", 308, 14);
            currentLookaheadProduction = "ObjectType";
            try {
                if (!check$ObjectType(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:341:21
    private boolean scan$Java_ccc$341$21() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:341:28
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:341:36
            // NonTerminal EnumConstant at Java.ccc:341:36
            pushOntoLookaheadStack("EnumBody", "Java.ccc", 341, 36);
            currentLookaheadProduction = "EnumConstant";
            try {
                if (!check$EnumConstant(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:365:5
    private boolean scan$Java_ccc$365$5() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:365:5
            // NonTerminal Annotation at Java.ccc:365:5
            pushOntoLookaheadStack("RecordComponent", "Java.ccc", 365, 5);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:365:25
    private boolean scan$Java_ccc$365$25() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:365:25
            // NonTerminal Annotation at Java.ccc:365:25
            pushOntoLookaheadStack("RecordComponent", "Java.ccc", 365, 25);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:372:4
    private boolean scan$Java_ccc$372$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:372:4
            // NonTerminal CompactConstructorDeclaration at Java.ccc:372:4
            pushOntoLookaheadStack("RecordBody", "Java.ccc", 372, 4);
            currentLookaheadProduction = "CompactConstructorDeclaration";
            try {
                if (!check$CompactConstructorDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:384:4
    private boolean scan$Java_ccc$384$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$384$10(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:385:5
    private boolean scan$Java_ccc$385$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:385:5
            // NonTerminal ExplicitConstructorInvocation at Java.ccc:385:5
            pushOntoLookaheadStack("CompactConstructorDeclaration", "Java.ccc", 385, 5);
            currentLookaheadProduction = "ExplicitConstructorInvocation";
            try {
                if (!check$ExplicitConstructorInvocation(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:386:5
    private boolean scan$Java_ccc$386$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$386$11(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:393:4
    private boolean scan$Java_ccc$393$4() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:393:4
            // NonTerminal Annotation at Java.ccc:393:4
            pushOntoLookaheadStack("EnumConstant", "Java.ccc", 393, 4);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:410:17
    private boolean scan$Java_ccc$410$17() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:410:17
            // NonTerminal Annotation at Java.ccc:410:17
            pushOntoLookaheadStack("TypeParameter", "Java.ccc", 410, 17);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:416:34
    private boolean scan$Java_ccc$416$34() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$416$40(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:419:3
    private boolean scan$Java_ccc$419$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:419:3
            // NonTerminal Initializer at Java.ccc:419:3
            pushOntoLookaheadStack("ClassOrInterfaceBodyDeclaration", "Java.ccc", 419, 3);
            currentLookaheadProduction = "Initializer";
            try {
                if (!check$Initializer(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:421:3
    private boolean scan$Java_ccc$421$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$216$8(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:423:3
    private boolean scan$Java_ccc$423$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:423:3
            // NonTerminal ConstructorDeclaration at Java.ccc:423:3
            pushOntoLookaheadStack("ClassOrInterfaceBodyDeclaration", "Java.ccc", 423, 3);
            currentLookaheadProduction = "ConstructorDeclaration";
            try {
                if (!check$ConstructorDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:425:3
    private boolean scan$Java_ccc$425$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:425:3
            // NonTerminal MethodDeclaration at Java.ccc:425:3
            pushOntoLookaheadStack("ClassOrInterfaceBodyDeclaration", "Java.ccc", 425, 3);
            currentLookaheadProduction = "MethodDeclaration";
            try {
                if (!check$MethodDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:427:3
    private boolean scan$Java_ccc$427$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:427:3
            // NonTerminal FieldDeclaration at Java.ccc:427:3
            pushOntoLookaheadStack("ClassOrInterfaceBodyDeclaration", "Java.ccc", 427, 3);
            currentLookaheadProduction = "FieldDeclaration";
            try {
                if (!check$FieldDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:429:3
    private boolean scan$Java_ccc$429$3() {
        remainingLookahead = 0;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (!backscan$Java_ccc$429$8()) return false;
            passedPredicate = true;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:454:8
    private boolean scan$Java_ccc$454$8() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:454:8
            // NonTerminal Annotation at Java.ccc:454:8
            pushOntoLookaheadStack("VariableDeclaratorId", "Java.ccc", 454, 8);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:456:5
    private boolean scan$Java_ccc$456$5() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (backscan$Java_ccc$456$10()) return false;
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:457:5
            if (!scanToken(UNDERSCORE)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:463:37
    private boolean scan$Java_ccc$463$37() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:463:44
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:463:52
            // NonTerminal VariableInitializer at Java.ccc:463:52
            pushOntoLookaheadStack("ArrayInitializer", "Java.ccc", 463, 52);
            currentLookaheadProduction = "VariableInitializer";
            try {
                if (!check$VariableInitializer(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:468:5
    private boolean scan$Java_ccc$468$5() {
        remainingLookahead = 0;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (!backscan$Java_ccc$468$10()) return false;
            passedPredicate = true;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:476:5
    private boolean scan$Java_ccc$476$5() {
        remainingLookahead = 0;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (backscan$Java_ccc$476$10()) return false;
            passedPredicate = true;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:496:29
    private boolean scan$Java_ccc$496$29() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:496:29
            // NonTerminal Annotation at Java.ccc:496:29
            pushOntoLookaheadStack("MethodDeclaration", "Java.ccc", 496, 29);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:502:31
    private boolean scan$Java_ccc$502$31() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:502:31
            // NonTerminal FormalParameter at Java.ccc:502:31
            pushOntoLookaheadStack("FormalParameters", "Java.ccc", 502, 31);
            currentLookaheadProduction = "FormalParameter";
            try {
                if (!check$FormalParameter(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:502:47
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$502$49(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:508:7
    private boolean scan$Java_ccc$508$7() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:508:7
            // NonTerminal Annotation at Java.ccc:508:7
            pushOntoLookaheadStack("FormalParameter", "Java.ccc", 508, 7);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:520:4
    private boolean scan$Java_ccc$520$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$520$10(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:521:5
    private boolean scan$Java_ccc$521$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:521:5
            // NonTerminal ExplicitConstructorInvocation at Java.ccc:521:5
            pushOntoLookaheadStack("ConstructorDeclaration", "Java.ccc", 521, 5);
            currentLookaheadProduction = "ExplicitConstructorInvocation";
            try {
                if (!check$ExplicitConstructorInvocation(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:522:5
    private boolean scan$Java_ccc$522$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$522$11(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:527:3
    private boolean scan$Java_ccc$527$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:527:3
            Token token3 = currentLookaheadToken;
            boolean passedPredicate3 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$527$4(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token3;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:527:20
            if (!scanToken(SUPER, THIS)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:527:44
            // NonTerminal InvocationArguments at Java.ccc:527:44
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "Java.ccc", 527, 44);
            currentLookaheadProduction = "InvocationArguments";
            try {
                if (!check$InvocationArguments(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:527:64
            if (!scanToken(SEMICOLON)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:527:4
    private boolean scan$Java_ccc$527$4() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:527:4
            // NonTerminal TypeArguments at Java.ccc:527:4
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "Java.ccc", 527, 4);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:531:3
    private boolean scan$Java_ccc$531$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:531:4
            Token token4 = currentLookaheadToken;
            int remainingLookahead4 = remainingLookahead;
            boolean hitFailure4 = hitFailure;
            boolean passedPredicate4 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$531$4(false)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$531$30(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:532:3
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:532:9
            Token token7 = currentLookaheadToken;
            boolean passedPredicate7 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$532$10(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token7;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate7;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:532:25
            if (!scanToken(SUPER)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:532:39
            // NonTerminal InvocationArguments at Java.ccc:532:39
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "Java.ccc", 532, 39);
            currentLookaheadProduction = "InvocationArguments";
            try {
                if (!check$InvocationArguments(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:532:59
            if (!scanToken(SEMICOLON)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:531:10
    private boolean scan$Java_ccc$531$10() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:531:10
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:531:15
            if (!scanToken(THIS)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:531:43
    private boolean scan$Java_ccc$531$43() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:531:43
            if (!scanToken(DOT)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:531:55
            // NonTerminal Name at Java.ccc:531:55
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "Java.ccc", 531, 55);
            currentLookaheadProduction = "Name";
            try {
                if (!check$Name(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:531:61
    private boolean scan$Java_ccc$531$61() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:531:61
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:531:66
            if (!scanToken(THIS)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:532:10
    private boolean scan$Java_ccc$532$10() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:532:10
            // NonTerminal TypeArguments at Java.ccc:532:10
            pushOntoLookaheadStack("ExplicitConstructorInvocation", "Java.ccc", 532, 10);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:541:4
    private boolean scan$Java_ccc$541$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:541:4
            // NonTerminal PrimitiveType at Java.ccc:541:4
            pushOntoLookaheadStack("Type", "Java.ccc", 541, 4);
            currentLookaheadProduction = "PrimitiveType";
            try {
                if (!check$PrimitiveType(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:541:18
            if (assert$Java_ccc$541$27()) {
                hitFailure = true;
                return false;
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:553:4
    private boolean scan$Java_ccc$553$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:553:4
            // NonTerminal PrimitiveArrayType at Java.ccc:553:4
            pushOntoLookaheadStack("ReferenceType", "Java.ccc", 553, 4);
            currentLookaheadProduction = "PrimitiveArrayType";
            try {
                if (!check$PrimitiveArrayType(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:555:16
    private boolean scan$Java_ccc$555$16() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:555:16
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$555$17(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:555:30
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:555:40
            if (!scanToken(RBRACKET)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:555:17
    private boolean scan$Java_ccc$555$17() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:555:17
            // NonTerminal Annotation at Java.ccc:555:17
            pushOntoLookaheadStack("ReferenceType", "Java.ccc", 555, 17);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:559:6
    private boolean scan$Java_ccc$559$6() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:559:6
            // NonTerminal Annotation at Java.ccc:559:6
            pushOntoLookaheadStack("ObjectType", "Java.ccc", 559, 6);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:560:22
    private boolean scan$Java_ccc$560$22() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:560:22
            // NonTerminal TypeArguments at Java.ccc:560:22
            pushOntoLookaheadStack("ObjectType", "Java.ccc", 560, 22);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:561:7
    private boolean scan$Java_ccc$561$7() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:561:7
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:561:13
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$561$14(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:561:27
            if (!scanToken(IDENTIFIER)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:561:45
            Token token8 = currentLookaheadToken;
            boolean passedPredicate8 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$561$47(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token8;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate8;
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:561:14
    private boolean scan$Java_ccc$561$14() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:561:14
            // NonTerminal Annotation at Java.ccc:561:14
            pushOntoLookaheadStack("ObjectType", "Java.ccc", 561, 14);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:561:47
    private boolean scan$Java_ccc$561$47() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:561:47
            // NonTerminal TypeArguments at Java.ccc:561:47
            pushOntoLookaheadStack("ObjectType", "Java.ccc", 561, 47);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:577:4
    private boolean scan$Java_ccc$577$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:577:4
            // NonTerminal DiamondOperator at Java.ccc:577:4
            pushOntoLookaheadStack("PossiblyEmptyTypeArguments", "Java.ccc", 577, 4);
            currentLookaheadProduction = "DiamondOperator";
            try {
                if (!check$DiamondOperator(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:579:4
    private boolean scan$Java_ccc$579$4() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:579:4
            // NonTerminal TypeArguments at Java.ccc:579:4
            pushOntoLookaheadStack("PossiblyEmptyTypeArguments", "Java.ccc", 579, 4);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:589:3
    private boolean scan$Java_ccc$589$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:589:3
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$589$4(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:589:17
            if (!scanToken(HOOK)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:589:29
            Token token7 = currentLookaheadToken;
            boolean passedPredicate7 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$589$31(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token7;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate7;
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:589:4
    private boolean scan$Java_ccc$589$4() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:589:4
            // NonTerminal Annotation at Java.ccc:589:4
            pushOntoLookaheadStack("TypeArgument", "Java.ccc", 589, 4);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:597:4
    private boolean scan$Java_ccc$597$4() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:597:4
            // NonTerminal Annotation at Java.ccc:597:4
            pushOntoLookaheadStack("PrimitiveType", "Java.ccc", 597, 4);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:607:37
    private boolean scan$Java_ccc$607$37() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:607:37
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$607$38(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:607:51
            if (!scanToken(LBRACKET)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:607:67
            if (!scanToken(RBRACKET)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:607:38
    private boolean scan$Java_ccc$607$38() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:607:38
            // NonTerminal Annotation at Java.ccc:607:38
            pushOntoLookaheadStack("PrimitiveArrayType", "Java.ccc", 607, 38);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:609:24
    private boolean scan$Java_ccc$609$24() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:609:24
            // NonTerminal Type at Java.ccc:609:24
            pushOntoLookaheadStack("ReturnType", "Java.ccc", 609, 24);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:611:23
    private boolean scan$Java_ccc$611$23() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:611:23
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:611:29
            if (!scanToken(IDENTIFIER)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:616:6
    private boolean scan$Java_ccc$616$6() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:616:6
            // NonTerminal Annotation at Java.ccc:616:6
            pushOntoLookaheadStack("ExceptionType", "Java.ccc", 616, 6);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:619:8
    private boolean scan$Java_ccc$619$8() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:619:8
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:619:14
            if (!scanToken(IDENTIFIER)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:622:7
    private boolean scan$Java_ccc$622$7() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:622:7
            if (!scanToken(DOT)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for OneOrMore specified at Java.ccc:623:7
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:623:8
            // NonTerminal Annotation at Java.ccc:623:8
            pushOntoLookaheadStack("ExceptionType", "Java.ccc", 623, 8);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            boolean passedPredicate6 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token7 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$623$8(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token7;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate6;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:624:7
            if (!scanToken(IDENTIFIER)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:623:8
    private boolean scan$Java_ccc$623$8() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:623:8
            // NonTerminal Annotation at Java.ccc:623:8
            pushOntoLookaheadStack("ExceptionType", "Java.ccc", 623, 8);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:626:6
    private boolean scan$Java_ccc$626$6() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:626:6
            // NonTerminal TypeArguments at Java.ccc:626:6
            pushOntoLookaheadStack("ExceptionType", "Java.ccc", 626, 6);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:754:7
    private boolean scan$Java_ccc$754$7() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1115$4(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:756:7
    private boolean scan$Java_ccc$756$7() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:756:7
            // NonTerminal RecordPattern at Java.ccc:756:7
            pushOntoLookaheadStack("InstanceOfExpression", "Java.ccc", 756, 7);
            currentLookaheadProduction = "RecordPattern";
            try {
                if (!check$RecordPattern(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:778:6
    private boolean scan$Java_ccc$778$6() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$778$11(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:819:3
    private boolean scan$Java_ccc$819$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:819:3
            // NonTerminal LambdaExpression at Java.ccc:819:3
            pushOntoLookaheadStack("UnaryExpressionNotPlusMinus", "Java.ccc", 819, 3);
            currentLookaheadProduction = "LambdaExpression";
            try {
                if (!check$LambdaExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:823:3
    private boolean scan$Java_ccc$823$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:823:3
            // NonTerminal PrimitiveCastExpression at Java.ccc:823:3
            pushOntoLookaheadStack("UnaryExpressionNotPlusMinus", "Java.ccc", 823, 3);
            currentLookaheadProduction = "PrimitiveCastExpression";
            try {
                if (!check$PrimitiveCastExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:825:3
    private boolean scan$Java_ccc$825$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:825:3
            // NonTerminal ObjectCastExpression at Java.ccc:825:3
            pushOntoLookaheadStack("UnaryExpressionNotPlusMinus", "Java.ccc", 825, 3);
            currentLookaheadProduction = "ObjectCastExpression";
            try {
                if (!check$ObjectCastExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:856:4
    private boolean scan$Java_ccc$856$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:856:4
            // NonTerminal PrimitiveCastExpression at Java.ccc:856:4
            pushOntoLookaheadStack("CastExpression", "Java.ccc", 856, 4);
            currentLookaheadProduction = "PrimitiveCastExpression";
            try {
                if (!check$PrimitiveCastExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:858:4
    private boolean scan$Java_ccc$858$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:858:4
            // NonTerminal ObjectCastExpression at Java.ccc:858:4
            pushOntoLookaheadStack("CastExpression", "Java.ccc", 858, 4);
            currentLookaheadProduction = "ObjectCastExpression";
            try {
                if (!check$ObjectCastExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:887:3
    private boolean scan$Java_ccc$887$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:887:3
            // NonTerminal ClassLiteral at Java.ccc:887:3
            pushOntoLookaheadStack("PrimaryExpression", "Java.ccc", 887, 3);
            currentLookaheadProduction = "ClassLiteral";
            try {
                if (!check$ClassLiteral(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:889:3
    private boolean scan$Java_ccc$889$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:889:3
            // NonTerminal MethodReference at Java.ccc:889:3
            pushOntoLookaheadStack("PrimaryExpression", "Java.ccc", 889, 3);
            currentLookaheadProduction = "MethodReference";
            try {
                if (!check$MethodReference(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:898:5
    private boolean scan$Java_ccc$898$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            // skipping check
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:898:6
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:898:12
            if (!scanToken(THIS)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:900:5
    private boolean scan$Java_ccc$900$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            // skipping check
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:900:6
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:900:12
            if (!scanToken(SUPER)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:902:5
    private boolean scan$Java_ccc$902$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            // skipping check
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:902:6
            if (!scanToken(DOT)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:902:18
            // NonTerminal AllocationExpression at Java.ccc:902:18
            pushOntoLookaheadStack("PrimaryExpression", "Java.ccc", 902, 18);
            currentLookaheadProduction = "AllocationExpression";
            try {
                if (!check$AllocationExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:906:13
    private boolean scan$Java_ccc$906$13() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:906:13
            // NonTerminal TypeArguments at Java.ccc:906:13
            pushOntoLookaheadStack("PrimaryExpression", "Java.ccc", 906, 13);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:908:22
    private boolean scan$Java_ccc$908$22() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:908:22
            // NonTerminal TypeArguments at Java.ccc:908:22
            pushOntoLookaheadStack("PrimaryExpression", "Java.ccc", 908, 22);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:910:5
    private boolean scan$Java_ccc$910$5() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:910:5
            if (!(getTokenType(0) == IDENTIFIER)) {
                hitFailure = true;
                return false;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:911:5
            // NonTerminal InvocationArguments at Java.ccc:911:5
            pushOntoLookaheadStack("PrimaryExpression", "Java.ccc", 911, 5);
            currentLookaheadProduction = "InvocationArguments";
            try {
                if (!check$InvocationArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:950:6
    private boolean scan$Java_ccc$950$6() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:950:6
            // NonTerminal Type at Java.ccc:950:6
            pushOntoLookaheadStack("MethodReference", "Java.ccc", 950, 6);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:952:7
    private boolean scan$Java_ccc$952$7() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:952:7
            // NonTerminal TypeArguments at Java.ccc:952:7
            pushOntoLookaheadStack("MethodReference", "Java.ccc", 952, 7);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:991:3
    private boolean scan$Java_ccc$991$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:991:3
            // NonTerminal PrimitiveArrayInitialization at Java.ccc:991:3
            pushOntoLookaheadStack("AllocationExpression", "Java.ccc", 991, 3);
            currentLookaheadProduction = "PrimitiveArrayInitialization";
            try {
                if (!check$PrimitiveArrayInitialization(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:993:3
    private boolean scan$Java_ccc$993$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:993:3
            // NonTerminal ObjectArrayInitialization at Java.ccc:993:3
            pushOntoLookaheadStack("AllocationExpression", "Java.ccc", 993, 3);
            currentLookaheadProduction = "ObjectArrayInitialization";
            try {
                if (!check$ObjectArrayInitialization(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:995:3
    private boolean scan$Java_ccc$995$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:995:3
            // NonTerminal ObjectInstantiation at Java.ccc:995:3
            pushOntoLookaheadStack("AllocationExpression", "Java.ccc", 995, 3);
            currentLookaheadProduction = "ObjectInstantiation";
            try {
                if (!check$ObjectInstantiation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1003:11
    private boolean scan$Java_ccc$1003$11() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1003:11
            // NonTerminal TypeArguments at Java.ccc:1003:11
            pushOntoLookaheadStack("ObjectArrayInitialization", "Java.ccc", 1003, 11);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1009:11
    private boolean scan$Java_ccc$1009$11() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1009:11
            // NonTerminal TypeArguments at Java.ccc:1009:11
            pushOntoLookaheadStack("ObjectInstantiation", "Java.ccc", 1009, 11);
            currentLookaheadProduction = "TypeArguments";
            try {
                if (!check$TypeArguments(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1015:3
    private boolean scan$Java_ccc$1015$3() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for OneOrMore specified at Java.ccc:1016:3
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1017:5
            if (!scanToken(LBRACKET)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1017:22
            // NonTerminal Expression at Java.ccc:1017:22
            pushOntoLookaheadStack("ArrayDimsAndInits", "Java.ccc", 1017, 22);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1017:33
            if (!scanToken(RBRACKET)) return false;
            boolean passedPredicate7 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token8 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1017$5(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token8;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate7;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:1019:3
            boolean passedPredicate10 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token11 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1020$5(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token11;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate10;
            }
            hitFailure = false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1017:5
    private boolean scan$Java_ccc$1017$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1017:5
            if (!scanToken(LBRACKET)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1017:22
            // NonTerminal Expression at Java.ccc:1017:22
            pushOntoLookaheadStack("ArrayDimsAndInits", "Java.ccc", 1017, 22);
            currentLookaheadProduction = "Expression";
            try {
                if (!check$Expression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1017:33
            if (!scanToken(RBRACKET)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1020:5
    private boolean scan$Java_ccc$1020$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:1020:5
            boolean passedPredicate3 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token4 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1020$6(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token4;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate3;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1020:19
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1020:29
            if (!scanToken(RBRACKET)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1020:6
    private boolean scan$Java_ccc$1020$6() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1020:6
            // NonTerminal Annotation at Java.ccc:1020:6
            pushOntoLookaheadStack("ArrayDimsAndInits", "Java.ccc", 1020, 6);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1024:6
    private boolean scan$Java_ccc$1024$6() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1024:6
            // NonTerminal Annotation at Java.ccc:1024:6
            pushOntoLookaheadStack("ArrayDimsAndInits", "Java.ccc", 1024, 6);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1034:3
    private boolean scan$Java_ccc$1034$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1034:3
            // NonTerminal LabeledStatement at Java.ccc:1034:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 1034, 3);
            currentLookaheadProduction = "LabeledStatement";
            try {
                if (!check$LabeledStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1040:3
    private boolean scan$Java_ccc$1040$3() {
        remainingLookahead = 3;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1040:3
            // NonTerminal YieldStatement at Java.ccc:1040:3
            pushOntoLookaheadStack("Statement", "Java.ccc", 1040, 3);
            currentLookaheadProduction = "YieldStatement";
            try {
                if (!check$YieldStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1092:30
    private boolean scan$Java_ccc$1092$30() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$1092$36(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1098:3
    private boolean scan$Java_ccc$1098$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1098:3
            // NonTerminal RecordDeclaration at Java.ccc:1098:3
            pushOntoLookaheadStack("BlockStatement", "Java.ccc", 1098, 3);
            currentLookaheadProduction = "RecordDeclaration";
            try {
                if (!check$RecordDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1100:3
    private boolean scan$Java_ccc$1100$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1100:3
            // NonTerminal ClassDeclaration at Java.ccc:1100:3
            pushOntoLookaheadStack("BlockStatement", "Java.ccc", 1100, 3);
            currentLookaheadProduction = "ClassDeclaration";
            try {
                if (!check$ClassDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1102:3
    private boolean scan$Java_ccc$1102$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1102:3
            // NonTerminal InterfaceDeclaration at Java.ccc:1102:3
            pushOntoLookaheadStack("BlockStatement", "Java.ccc", 1102, 3);
            currentLookaheadProduction = "InterfaceDeclaration";
            try {
                if (!check$InterfaceDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1104:3
    private boolean scan$Java_ccc$1104$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1104:3
            // NonTerminal EnumDeclaration at Java.ccc:1104:3
            pushOntoLookaheadStack("BlockStatement", "Java.ccc", 1104, 3);
            currentLookaheadProduction = "EnumDeclaration";
            try {
                if (!check$EnumDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1106:3
    private boolean scan$Java_ccc$1106$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1115$4(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1129:7
    private boolean scan$Java_ccc$1129$7() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1129:7
            // NonTerminal Type at Java.ccc:1129:7
            pushOntoLookaheadStack("LocalVariableDeclaration", "Java.ccc", 1129, 7);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1129:12
            // NonTerminal VariableDeclarator at Java.ccc:1129:12
            pushOntoLookaheadStack("LocalVariableDeclaration", "Java.ccc", 1129, 12);
            currentLookaheadProduction = "VariableDeclarator";
            try {
                if (!check$VariableDeclarator(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:1129:31
            boolean passedPredicate5 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token6 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1129$33(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token6;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
            hitFailure = false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1154:5
    private boolean scan$Java_ccc$1154$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1154:5
            // NonTerminal RecordPattern at Java.ccc:1154:5
            pushOntoLookaheadStack("CasePattern", "Java.ccc", 1154, 5);
            currentLookaheadProduction = "RecordPattern";
            try {
                if (!check$RecordPattern(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1156:5
    private boolean scan$Java_ccc$1156$5() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1156:5
            // NonTerminal TypePattern at Java.ccc:1156:5
            pushOntoLookaheadStack("CasePattern", "Java.ccc", 1156, 5);
            currentLookaheadProduction = "TypePattern";
            try {
                if (!check$TypePattern(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1163:7
    private boolean scan$Java_ccc$1163$7() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$1163$13(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1184:5
    private boolean scan$Java_ccc$1184$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1184:5
            // NonTerminal Type at Java.ccc:1184:5
            pushOntoLookaheadStack("TypePattern", "Java.ccc", 1184, 5);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(false)) return false;
            } finally {
                popLookaheadStack();
            }
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1184:11
            if (!scanToken(UNDERSCORE, IDENTIFIER)) return false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1197:5
    private boolean scan$Java_ccc$1197$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1197$10(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1200:5
    private boolean scan$Java_ccc$1200$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1200$10(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1223:4
    private boolean scan$Java_ccc$1223$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$1223$10(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1238:4
    private boolean scan$Java_ccc$1238$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1238:4
            if (!scanToken(CASE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1238:11
            if (!scanToken(NULL)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:1238:23
            Token token5 = currentLookaheadToken;
            boolean passedPredicate5 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$1238$24(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1240:4
    private boolean scan$Java_ccc$1240$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1240:4
            if (!scanToken(CASE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1240:11
            // NonTerminal CasePattern at Java.ccc:1240:11
            pushOntoLookaheadStack("CaseOrDefault", "Java.ccc", 1240, 11);
            currentLookaheadProduction = "CasePattern";
            try {
                if (!check$CasePattern(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:1240:28
            boolean passedPredicate5 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token6 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1240$29(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token6;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate5;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:1240:51
            Token token8 = currentLookaheadToken;
            boolean passedPredicate8 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$Java_ccc$1240$52(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token8;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate8;
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1254:6
    private boolean scan$Java_ccc$1254$6() {
        remainingLookahead = 0;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (!backscan$Java_ccc$1254$13()) return false;
            passedPredicate = true;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1257:6
    private boolean scan$Java_ccc$1257$6() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (check$Java_ccc$1257$12(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1285:4
    private boolean scan$Java_ccc$1285$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1285:4
            // NonTerminal BasicForStatement at Java.ccc:1285:4
            pushOntoLookaheadStack("ForStatement", "Java.ccc", 1285, 4);
            currentLookaheadProduction = "BasicForStatement";
            try {
                if (!check$BasicForStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1287:4
    private boolean scan$Java_ccc$1287$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1287:4
            // NonTerminal EnhancedForStatement at Java.ccc:1287:4
            pushOntoLookaheadStack("ForStatement", "Java.ccc", 1287, 4);
            currentLookaheadProduction = "EnhancedForStatement";
            try {
                if (!check$EnhancedForStatement(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1293:20
    private boolean scan$Java_ccc$1293$20() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1293:20
            // NonTerminal ForInit at Java.ccc:1293:20
            pushOntoLookaheadStack("BasicForStatement", "Java.ccc", 1293, 20);
            currentLookaheadProduction = "ForInit";
            try {
                if (!check$ForInit(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1301:3
    private boolean scan$Java_ccc$1301$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1115$4(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1367:8
    private boolean scan$Java_ccc$1367$8() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:1367:8
            if (!(getTokenType(0) == SEMICOLON)) {
                hitFailure = true;
                return false;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:1368:8
            if (!(getTokenType(1) != RPAREN)) {
                hitFailure = true;
                return false;
            }
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:1370:8
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1371:10
            Token token6 = currentLookaheadToken;
            int remainingLookahead6 = remainingLookahead;
            boolean hitFailure6 = hitFailure;
            boolean passedPredicate6 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$1371$10(false)) {
                    currentLookaheadToken = token6;
                    remainingLookahead = remainingLookahead6;
                    hitFailure = hitFailure6;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1373$10(false)) {
                        currentLookaheadToken = token6;
                        remainingLookahead = remainingLookahead6;
                        hitFailure = hitFailure6;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$1375$10(false)) {
                            currentLookaheadToken = token6;
                            remainingLookahead = remainingLookahead6;
                            hitFailure = hitFailure6;
                            return false;
                        }
                    }
                }
            } finally {
                passedPredicate = passedPredicate6;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at Java.ccc:1378:8
            Token token8 = currentLookaheadToken;
            boolean passedPredicate8 = passedPredicate;
            passedPredicate = false;
            try {
                if (!scanToken(SEMICOLON)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token8;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate8;
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1371:10
    private boolean scan$Java_ccc$1371$10() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Java_ccc$1115$4(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1411:4
    private boolean scan$Java_ccc$1411$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1411:4
            // NonTerminal NormalAnnotation at Java.ccc:1411:4
            pushOntoLookaheadStack("Annotation", "Java.ccc", 1411, 4);
            currentLookaheadProduction = "NormalAnnotation";
            try {
                if (!check$NormalAnnotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1413:4
    private boolean scan$Java_ccc$1413$4() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1413:4
            // NonTerminal SingleMemberAnnotation at Java.ccc:1413:4
            pushOntoLookaheadStack("Annotation", "Java.ccc", 1413, 4);
            currentLookaheadProduction = "SingleMemberAnnotation";
            try {
                if (!check$SingleMemberAnnotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1441:4
    private boolean scan$Java_ccc$1441$4() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1441:4
            // NonTerminal Annotation at Java.ccc:1441:4
            pushOntoLookaheadStack("MemberValue", "Java.ccc", 1441, 4);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1451:20
    private boolean scan$Java_ccc$1451$20() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1451:20
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 1;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead - 1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1451:34
            // NonTerminal MemberValue at Java.ccc:1451:34
            pushOntoLookaheadStack("MemberValueArrayInitializer", "Java.ccc", 1451, 34);
            currentLookaheadProduction = "MemberValue";
            try {
                if (!check$MemberValue(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1478:3
    private boolean scan$Java_ccc$1478$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1478:3
            // NonTerminal AnnotationTypeDeclaration at Java.ccc:1478:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1478, 3);
            currentLookaheadProduction = "AnnotationTypeDeclaration";
            try {
                if (!check$AnnotationTypeDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1480:3
    private boolean scan$Java_ccc$1480$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1480:3
            // NonTerminal ClassDeclaration at Java.ccc:1480:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1480, 3);
            currentLookaheadProduction = "ClassDeclaration";
            try {
                if (!check$ClassDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1482:3
    private boolean scan$Java_ccc$1482$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1482:3
            // NonTerminal InterfaceDeclaration at Java.ccc:1482:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1482, 3);
            currentLookaheadProduction = "InterfaceDeclaration";
            try {
                if (!check$InterfaceDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1484:3
    private boolean scan$Java_ccc$1484$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1484:3
            // NonTerminal EnumDeclaration at Java.ccc:1484:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1484, 3);
            currentLookaheadProduction = "EnumDeclaration";
            try {
                if (!check$EnumDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1486:3
    private boolean scan$Java_ccc$1486$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1486:3
            // NonTerminal AnnotationMethodDeclaration at Java.ccc:1486:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1486, 3);
            currentLookaheadProduction = "AnnotationMethodDeclaration";
            try {
                if (!check$AnnotationMethodDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1488:3
    private boolean scan$Java_ccc$1488$3() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1488:3
            // NonTerminal FieldDeclaration at Java.ccc:1488:3
            pushOntoLookaheadStack("AnnotationTypeMemberDeclaration", "Java.ccc", 1488, 3);
            currentLookaheadProduction = "FieldDeclaration";
            try {
                if (!check$FieldDeclaration(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1498:44
    private boolean scan$Java_ccc$1498$44() {
        remainingLookahead = 3;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1498:44
            // NonTerminal SimpleLambdaLHS at Java.ccc:1498:44
            pushOntoLookaheadStack("LambdaLHS", "Java.ccc", 1498, 44);
            currentLookaheadProduction = "SimpleLambdaLHS";
            try {
                if (!check$SimpleLambdaLHS(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1507:31
    private boolean scan$Java_ccc$1507$31() {
        remainingLookahead = 1;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1507:31
            // NonTerminal LambdaParameter at Java.ccc:1507:31
            pushOntoLookaheadStack("LambdaParameters", "Java.ccc", 1507, 31);
            currentLookaheadProduction = "LambdaParameter";
            try {
                if (!check$LambdaParameter(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:1507:47
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1507$49(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1513:7
    private boolean scan$Java_ccc$1513$7() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1513:7
            // NonTerminal Type at Java.ccc:1513:7
            pushOntoLookaheadStack("LambdaParameter", "Java.ccc", 1513, 7);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at Java.ccc:1513:12
            boolean passedPredicate4 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token5 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Java_ccc$1513$13(false)) {
                        if (passedPredicate) return false;
                        currentLookaheadToken = token5;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1513:26
            if (!scanToken(VAR_ARGS)) return false;
            if (!scanToEnd && lookaheadStack.size() <= 1) {
                if (lookaheadRoutineNesting == 0) {
                    remainingLookahead = 0;
                } else if (lookaheadStack.size() == 1) {
                    passedPredicateThreshold = remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:1513:42
            if (!scanToken(IDENTIFIER)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Assertion specified at Java.ccc:1514:7
            // No code generated since this assertion does not apply in lookahead
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1513:13
    private boolean scan$Java_ccc$1513$13() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1513:13
            // NonTerminal Annotation at Java.ccc:1513:13
            pushOntoLookaheadStack("LambdaParameter", "Java.ccc", 1513, 13);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1519:9
    private boolean scan$Java_ccc$1519$9() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1519:9
            // NonTerminal Type at Java.ccc:1519:9
            pushOntoLookaheadStack("LambdaParameter", "Java.ccc", 1519, 9);
            currentLookaheadProduction = "Type";
            try {
                if (!check$Type(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: ExpansionSequence at Java.ccc:1522:23
    private boolean scan$Java_ccc$1522$23() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1522:23
            // NonTerminal Annotation at Java.ccc:1522:23
            pushOntoLookaheadStack("LambdaParameter", "Java.ccc", 1522, 23);
            currentLookaheadProduction = "Annotation";
            try {
                if (!check$Annotation(false)) return false;
            } finally {
                popLookaheadStack();
            }
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // lookahead routine for lookahead at:
    // Java.ccc:45:5
    private boolean check$Java_ccc$45$11(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            // skipping check
            if (!scanToken(RBRACE)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // Java.ccc:216:3
    private boolean check$Java_ccc$216$8(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:216:8
            // NonTerminal TypeDeclarationLA at Java.ccc:216:8
            pushOntoLookaheadStack("TypeDeclaration", "Java.ccc", 216, 8);
            currentLookaheadProduction = "TypeDeclarationLA";
            try {
                if (!check$TypeDeclarationLA(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // Java.ccc:384:4
    private boolean check$Java_ccc$384$10(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            // skipping check
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:384:11
            Token token4 = currentLookaheadToken;
            int remainingLookahead4 = remainingLookahead;
            boolean hitFailure4 = hitFailure;
            boolean passedPredicate4 = passedPredicate;
            try {
                passedPredicate = false;
                if (!scanToken(RBRACE)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$384$20(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // Java.ccc:386:5
    private boolean check$Java_ccc$386$11(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            // skipping check
            if (!scanToken(RBRACE)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // Java.ccc:416:34
    private boolean check$Java_ccc$416$40(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            // skipping check
            if (!scanToken(RBRACE)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // Java.ccc:520:4
    private boolean check$Java_ccc$520$10(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            // skipping check
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:520:11
            Token token4 = currentLookaheadToken;
            int remainingLookahead4 = remainingLookahead;
            boolean hitFailure4 = hitFailure;
            boolean passedPredicate4 = passedPredicate;
            try {
                passedPredicate = false;
                if (!scanToken(RBRACE)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$520$20(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // Java.ccc:522:5
    private boolean check$Java_ccc$522$11(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            // skipping check
            if (!scanToken(RBRACE)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // Java.ccc:778:6
    private boolean check$Java_ccc$778$11(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at Java.ccc:778:11
            if (!scanToken(GT)) return false;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:778:17
            if (!scanToken(GT, RSIGNEDSHIFT)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // Java.ccc:1092:30
    private boolean check$Java_ccc$1092$36(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            // skipping check
            if (!scanToken(RBRACE)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // Java.ccc:1114:4
    private boolean check$Java_ccc$1115$4(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:1115:4
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1116:5
            // NonTerminal Modifiers at Java.ccc:1116:5
            pushOntoLookaheadStack("LocalVariableDeclaration", "Java.ccc", 1116, 5);
            currentLookaheadProduction = "Modifiers";
            try {
                if (!check$Modifiers(true)) return false;
            } finally {
                popLookaheadStack();
            }
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at Java.ccc:1118:7
            Token token7 = currentLookaheadToken;
            int remainingLookahead7 = remainingLookahead;
            boolean hitFailure7 = hitFailure;
            boolean passedPredicate7 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Java_ccc$1118$7(false)) {
                    currentLookaheadToken = token7;
                    remainingLookahead = remainingLookahead7;
                    hitFailure = hitFailure7;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1120$7(false)) {
                        currentLookaheadToken = token7;
                        remainingLookahead = remainingLookahead7;
                        hitFailure = hitFailure7;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate7;
            }
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // Java.ccc:1163:7
    private boolean check$Java_ccc$1163$13(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            // skipping check
            if (!scanToken(RPAREN)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // Java.ccc:1197:5
    private boolean check$Java_ccc$1197$10(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1197:10
            // NonTerminal NewSwitchLabel at Java.ccc:1197:10
            pushOntoLookaheadStack("SwitchStatement", "Java.ccc", 1197, 10);
            currentLookaheadProduction = "NewSwitchLabel";
            try {
                if (!check$NewSwitchLabel(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // Java.ccc:1200:5
    private boolean check$Java_ccc$1200$10(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            // skipping check
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at Java.ccc:1200:10
            // NonTerminal ClassicSwitchLabel at Java.ccc:1200:10
            pushOntoLookaheadStack("SwitchStatement", "Java.ccc", 1200, 10);
            currentLookaheadProduction = "ClassicSwitchLabel";
            try {
                if (!check$ClassicSwitchLabel(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // Java.ccc:1223:4
    private boolean check$Java_ccc$1223$10(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            // skipping check
            if (!scanToken(CASE, _DEFAULT, RBRACE)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // Java.ccc:1257:6
    private boolean check$Java_ccc$1257$12(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            // skipping check
            if (!scanToken(RBRACE)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    private boolean backscan$Java_ccc$307$11() {
        ListIterator<NonTerminalCall> stackIterator = stackIteratorBackward();
        NonTerminalCall ntc = null;
        if (!stackIterator.hasNext()) return false;
        ntc = stackIterator.next();
        if (ntc.productionName != "InterfaceDeclaration") return false;
        return true;
    }

    private boolean backscan$Java_ccc$429$8() {
        ListIterator<NonTerminalCall> stackIterator = stackIteratorBackward();
        NonTerminalCall ntc = null;
        if (!stackIterator.hasNext()) {
            return false;
        }
        stackIterator.next();
        if (!stackIterator.hasNext()) return false;
        ntc = stackIterator.next();
        if (ntc.productionName != "InterfaceDeclaration") return false;
        return true;
    }

    private boolean backscan$Java_ccc$456$10() {
        ListIterator<NonTerminalCall> stackIterator = stackIteratorBackward();
        NonTerminalCall ntc = null;
        if (!stackIterator.hasNext()) {
            return false;
        }
        stackIterator.next();
        if (!stackIterator.hasNext()) return false;
        ntc = stackIterator.next();
        if (ntc.productionName != "FieldDeclaration") return false;
        return true;
    }

    private boolean backscan$Java_ccc$468$10() {
        ListIterator<NonTerminalCall> stackIterator = stackIteratorBackward();
        NonTerminalCall ntc = null;
        if (!stackIterator.hasNext()) {
            return false;
        }
        stackIterator.next();
        if (!stackIterator.hasNext()) {
            return false;
        }
        stackIterator.next();
        if (!stackIterator.hasNext()) return false;
        ntc = stackIterator.next();
        if (ntc.productionName != "InterfaceDeclaration") return false;
        return true;
    }

    private boolean backscan$Java_ccc$476$10() {
        ListIterator<NonTerminalCall> stackIterator = stackIteratorBackward();
        NonTerminalCall ntc = null;
        while (stackIterator.hasNext()) {
            ntc = stackIterator.next();
            if (ntc.productionName == "TypeDeclaration") {
                stackIterator.previous();
                break;
            }
            if (!stackIterator.hasNext()) return false;
        }
        if (!stackIterator.hasNext()) return false;
        ntc = stackIterator.next();
        if (ntc.productionName != "TypeDeclaration") return false;
        return true;
    }

    private boolean backscan$Java_ccc$1254$13() {
        ListIterator<NonTerminalCall> stackIterator = stackIteratorBackward();
        NonTerminalCall ntc = null;
        if (!stackIterator.hasNext()) return false;
        ntc = stackIterator.next();
        if (ntc.productionName != "SwitchStatement") return false;
        if (!stackIterator.hasNext()) return false;
        ntc = stackIterator.next();
        if (ntc.productionName != "SwitchExpression") return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ModularCompilationUnit(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:38:4
        boolean passedPredicate3 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token4 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$38$5(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token4;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate3;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:39:4
        boolean passedPredicate6 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token7 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$39$5(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token7;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:40:4
        Token token9 = currentLookaheadToken;
        boolean passedPredicate9 = passedPredicate;
        passedPredicate = false;
        try {
            if (!scanToken(OPEN)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token9;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate9;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:41:4
        if (!scanToken(MODULE)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:43:4
        // NonTerminal Name at Java.ccc:43:4
        pushOntoLookaheadStack("ModularCompilationUnit", "Java.ccc", 43, 4);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:44:4
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:45:4
        boolean passedPredicate14 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token15 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$45$5(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token15;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate14;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:46:4
        if (!scanToken(RBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:47:4
        if (!scanToken(EOF)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ModuleDirective(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:51:4
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$51$4(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$53$4(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$55$4(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$57$4(false)) {
                            currentLookaheadToken = token2;
                            remainingLookahead = remainingLookahead2;
                            hitFailure = hitFailure2;
                            if (passedPredicate) return false;
                            passedPredicate = false;
                            if (!check$Java_ccc$59$4(false)) {
                                currentLookaheadToken = token2;
                                remainingLookahead = remainingLookahead2;
                                hitFailure = hitFailure2;
                                return false;
                            }
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$RequiresDirective(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:63:4
        if (!scanToken(REQUIRES)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:64:4
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!scanToken(STATIC, TRANSITIVE)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:65:4
        // NonTerminal Name at Java.ccc:65:4
        pushOntoLookaheadStack("RequiresDirective", "Java.ccc", 65, 4);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:66:4
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ExportsDirective(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:70:4
        if (!scanToken(EXPORTS)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:71:4
        // NonTerminal Name at Java.ccc:71:4
        pushOntoLookaheadStack("ExportsDirective", "Java.ccc", 71, 4);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:72:4
        Token token5 = currentLookaheadToken;
        boolean passedPredicate5 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$73$6(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token5;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:76:4
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$OpensDirective(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:80:4
        if (!scanToken(OPENS)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:81:4
        // NonTerminal Name at Java.ccc:81:4
        pushOntoLookaheadStack("OpensDirective", "Java.ccc", 81, 4);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:82:4
        Token token5 = currentLookaheadToken;
        boolean passedPredicate5 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$83$6(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token5;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:86:4
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$UsesDirective(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:90:5
        if (!scanToken(USES)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:91:5
        // NonTerminal Name at Java.ccc:91:5
        pushOntoLookaheadStack("UsesDirective", "Java.ccc", 91, 5);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:92:5
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ProvidesDirective(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:96:5
        if (!scanToken(PROVIDES)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:97:5
        // NonTerminal Name at Java.ccc:97:5
        pushOntoLookaheadStack("ProvidesDirective", "Java.ccc", 97, 5);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:98:5
        if (!scanToken(WITH)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:99:5
        // NonTerminal Name at Java.ccc:99:5
        pushOntoLookaheadStack("ProvidesDirective", "Java.ccc", 99, 5);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:100:5
        boolean passedPredicate7 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token8 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$100$6(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token8;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:101:5
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$PackageDeclaration(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:126:5
        boolean passedPredicate3 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token4 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$126$6(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token4;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate3;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:127:5
        if (!scanToken(PACKAGE)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:129:5
        // NonTerminal Name at Java.ccc:129:5
        pushOntoLookaheadStack("PackageDeclaration", "Java.ccc", 129, 5);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:130:5
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ImportDeclaration(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:140:21
        if (!scanToken(_IMPORT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:140:31
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!scanToken(STATIC, MODULE)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:140:55
        // NonTerminal Name at Java.ccc:140:55
        pushOntoLookaheadStack("ImportDeclaration", "Java.ccc", 140, 55);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:140:60
        Token token7 = currentLookaheadToken;
        boolean passedPredicate7 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$140$62(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token7;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:140:77
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$Modifiers(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:143:2
        boolean passedPredicate3 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token4 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$144$3$(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token4;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate3;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:204:2
        permissibleModifiers = null;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$TypeDeclaration(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:217:3
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:218:5
        Token token4 = currentLookaheadToken;
        int remainingLookahead4 = remainingLookahead;
        boolean hitFailure4 = hitFailure;
        boolean passedPredicate4 = passedPredicate;
        try {
            passedPredicate = false;
            if (!scanToken(SEMICOLON)) {
                currentLookaheadToken = token4;
                remainingLookahead = remainingLookahead4;
                hitFailure = hitFailure4;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$220$5(false)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$222$5(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$224$5(false)) {
                            currentLookaheadToken = token4;
                            remainingLookahead = remainingLookahead4;
                            hitFailure = hitFailure4;
                            if (passedPredicate) return false;
                            passedPredicate = false;
                            if (!check$Java_ccc$226$5(false)) {
                                currentLookaheadToken = token4;
                                remainingLookahead = remainingLookahead4;
                                hitFailure = hitFailure4;
                                if (passedPredicate) return false;
                                passedPredicate = false;
                                if (!check$Java_ccc$228$5(false)) {
                                    currentLookaheadToken = token4;
                                    remainingLookahead = remainingLookahead4;
                                    hitFailure = hitFailure4;
                                    return false;
                                }
                            }
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$TypeDeclarationLA(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:234:4
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!scanToken(SEMICOLON)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$236$4(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$TypeIdentifier(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:256:4
        if (!scanToken(IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:257:4
        String temp = tokenImage(0);
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Assertion specified at Java.ccc:258:4
        if (!(!temp.equals("record") && !temp.equals("var") && !temp.equals("permits") && !temp.equals("sealed") && !temp.equals("yield"))) {
            hitFailure = true;
            return false;
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ClassDeclaration(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:269:3
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:273:3
        // NonTerminal Modifiers at Java.ccc:273:3
        pushOntoLookaheadStack("ClassDeclaration", "Java.ccc", 273, 3);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:274:3
        if (!scanToken(CLASS)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:275:3
        // NonTerminal TypeIdentifier at Java.ccc:275:3
        pushOntoLookaheadStack("ClassDeclaration", "Java.ccc", 275, 3);
        currentLookaheadProduction = "TypeIdentifier";
        try {
            if (!check$TypeIdentifier(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:276:3
        Token token7 = currentLookaheadToken;
        boolean passedPredicate7 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$276$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token7;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:277:3
        Token token9 = currentLookaheadToken;
        boolean passedPredicate9 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$277$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token9;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate9;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:278:3
        Token token11 = currentLookaheadToken;
        boolean passedPredicate11 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$278$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token11;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate11;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:279:3
        Token token13 = currentLookaheadToken;
        boolean passedPredicate13 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$279$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token13;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate13;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:280:3
        // NonTerminal ClassOrInterfaceBody at Java.ccc:280:3
        pushOntoLookaheadStack("ClassDeclaration", "Java.ccc", 280, 3);
        currentLookaheadProduction = "ClassOrInterfaceBody";
        try {
            if (!check$ClassOrInterfaceBody(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$InterfaceDeclaration(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:284:3
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:288:3
        // NonTerminal Modifiers at Java.ccc:288:3
        pushOntoLookaheadStack("InterfaceDeclaration", "Java.ccc", 288, 3);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:289:3
        if (!scanToken(INTERFACE)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:290:3
        // NonTerminal TypeIdentifier at Java.ccc:290:3
        pushOntoLookaheadStack("InterfaceDeclaration", "Java.ccc", 290, 3);
        currentLookaheadProduction = "TypeIdentifier";
        try {
            if (!check$TypeIdentifier(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:291:3
        Token token7 = currentLookaheadToken;
        boolean passedPredicate7 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$291$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token7;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:292:3
        Token token9 = currentLookaheadToken;
        boolean passedPredicate9 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$292$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token9;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate9;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:293:3
        Token token11 = currentLookaheadToken;
        boolean passedPredicate11 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$293$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token11;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate11;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:294:3
        // NonTerminal ClassOrInterfaceBody at Java.ccc:294:3
        pushOntoLookaheadStack("InterfaceDeclaration", "Java.ccc", 294, 3);
        currentLookaheadProduction = "ClassOrInterfaceBody";
        try {
            if (!check$ClassOrInterfaceBody(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$PermitsList(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:298:4
        if (!scanToken(PERMITS)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:299:4
        // NonTerminal Name at Java.ccc:299:4
        pushOntoLookaheadStack("PermitsList", "Java.ccc", 299, 4);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:300:4
        boolean passedPredicate5 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token6 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$300$5(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token6;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ExtendsList(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:304:4
        if (!scanToken(EXTENDS)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:305:4
        // NonTerminal ObjectType at Java.ccc:305:4
        pushOntoLookaheadStack("ExtendsList", "Java.ccc", 305, 4);
        currentLookaheadProduction = "ObjectType";
        try {
            if (!check$ObjectType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:306:4
        boolean passedPredicate5 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token6 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$307$6(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token6;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ImplementsList(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:321:4
        if (!scanToken(IMPLEMENTS)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:321:17
        // NonTerminal ObjectType at Java.ccc:321:17
        pushOntoLookaheadStack("ImplementsList", "Java.ccc", 321, 17);
        currentLookaheadProduction = "ObjectType";
        try {
            if (!check$ObjectType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:322:4
        boolean passedPredicate5 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token6 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$323$6(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token6;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$EnumDeclaration(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:329:4
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:332:4
        // NonTerminal Modifiers at Java.ccc:332:4
        pushOntoLookaheadStack("EnumDeclaration", "Java.ccc", 332, 4);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:333:4
        if (!scanToken(ENUM)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:334:4
        // NonTerminal TypeIdentifier at Java.ccc:334:4
        pushOntoLookaheadStack("EnumDeclaration", "Java.ccc", 334, 4);
        currentLookaheadProduction = "TypeIdentifier";
        try {
            if (!check$TypeIdentifier(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:335:4
        Token token7 = currentLookaheadToken;
        boolean passedPredicate7 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$335$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token7;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:336:4
        // NonTerminal EnumBody at Java.ccc:336:4
        pushOntoLookaheadStack("EnumDeclaration", "Java.ccc", 336, 4);
        currentLookaheadProduction = "EnumBody";
        try {
            if (!check$EnumBody(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$EnumBody(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:340:4
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:341:4
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$341$6(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:342:4
        Token token6 = currentLookaheadToken;
        boolean passedPredicate6 = passedPredicate;
        passedPredicate = false;
        try {
            if (!scanToken(COMMA)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token6;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:343:4
        Token token8 = currentLookaheadToken;
        boolean passedPredicate8 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$343$6(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token8;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate8;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:344:4
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$RecordDeclaration(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:348:3
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:352:3
        // NonTerminal Modifiers at Java.ccc:352:3
        pushOntoLookaheadStack("RecordDeclaration", "Java.ccc", 352, 3);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:353:3
        if (!scanToken(RECORD)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:354:3
        // NonTerminal TypeIdentifier at Java.ccc:354:3
        pushOntoLookaheadStack("RecordDeclaration", "Java.ccc", 354, 3);
        currentLookaheadProduction = "TypeIdentifier";
        try {
            if (!check$TypeIdentifier(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:356:3
        Token token7 = currentLookaheadToken;
        boolean passedPredicate7 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$356$4(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token7;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:357:3
        // NonTerminal RecordHeader at Java.ccc:357:3
        pushOntoLookaheadStack("RecordDeclaration", "Java.ccc", 357, 3);
        currentLookaheadProduction = "RecordHeader";
        try {
            if (!check$RecordHeader(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:358:3
        Token token10 = currentLookaheadToken;
        boolean passedPredicate10 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$358$4(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token10;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate10;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:359:3
        // NonTerminal RecordBody at Java.ccc:359:3
        pushOntoLookaheadStack("RecordDeclaration", "Java.ccc", 359, 3);
        currentLookaheadProduction = "RecordBody";
        try {
            if (!check$RecordBody(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$RecordHeader(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:362:16
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:362:25
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$362$27(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:362:73
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$RecordComponent(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:365:4
        boolean passedPredicate3 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token4 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$365$5(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token4;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate3;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:365:18
        // NonTerminal Type at Java.ccc:365:18
        pushOntoLookaheadStack("RecordComponent", "Java.ccc", 365, 18);
        currentLookaheadProduction = "Type";
        try {
            if (!check$Type(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:365:23
        Token token7 = currentLookaheadToken;
        boolean passedPredicate7 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$365$24(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token7;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:365:51
        if (!scanToken(IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Assertion specified at Java.ccc:366:4
        // No code generated since this assertion does not apply in lookahead
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$RecordBody(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:370:3
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:371:3
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$372$4$(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:376:3
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$CompactConstructorDeclaration(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:380:3
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:381:3
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:381:4
        // NonTerminal Modifiers at Java.ccc:381:4
        pushOntoLookaheadStack("CompactConstructorDeclaration", "Java.ccc", 381, 4);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:382:3
        // NonTerminal TypeIdentifier at Java.ccc:382:3
        pushOntoLookaheadStack("CompactConstructorDeclaration", "Java.ccc", 382, 3);
        currentLookaheadProduction = "TypeIdentifier";
        try {
            if (!check$TypeIdentifier(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:383:3
        if (!scanToken(LBRACE)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:384:3
        boolean passedPredicate9 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token10 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$384$4(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token10;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate9;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:385:3
        Token token12 = currentLookaheadToken;
        boolean passedPredicate12 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$385$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token12;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate12;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:386:3
        boolean passedPredicate14 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token15 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$386$5(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token15;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate14;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:387:3
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$EnumConstant(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:393:3
        boolean passedPredicate3 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token4 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$393$4(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token4;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate3;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:393:17
        if (!scanToken(IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:393:30
        Token token7 = currentLookaheadToken;
        boolean passedPredicate7 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$393$32(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token7;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:393:54
        Token token9 = currentLookaheadToken;
        boolean passedPredicate9 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$393$56(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token9;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate9;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$TypeParameters(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:397:4
        if (!scanToken(LT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:398:4
        // NonTerminal TypeParameter at Java.ccc:398:4
        pushOntoLookaheadStack("TypeParameters", "Java.ccc", 398, 4);
        currentLookaheadProduction = "TypeParameter";
        try {
            if (!check$TypeParameter(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:398:18
        boolean passedPredicate5 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token6 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$398$20(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token6;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:399:4
        if (!scanToken(GT)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$TypeParameter(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:410:16
        boolean passedPredicate3 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token4 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$410$17(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token4;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate3;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:410:30
        // NonTerminal TypeIdentifier at Java.ccc:410:30
        pushOntoLookaheadStack("TypeParameter", "Java.ccc", 410, 30);
        currentLookaheadProduction = "TypeIdentifier";
        try {
            if (!check$TypeIdentifier(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:410:50
        Token token7 = currentLookaheadToken;
        boolean passedPredicate7 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$410$51(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token7;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$TypeBound(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:413:4
        if (!scanToken(EXTENDS)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:413:14
        // NonTerminal ObjectType at Java.ccc:413:14
        pushOntoLookaheadStack("TypeBound", "Java.ccc", 413, 14);
        currentLookaheadProduction = "ObjectType";
        try {
            if (!check$ObjectType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:413:25
        boolean passedPredicate5 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token6 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$413$27(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token6;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ClassOrInterfaceBody(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:416:24
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:416:33
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$416$34(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:416:90
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ClassOrInterfaceBodyDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:419:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$419$3(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$421$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$423$3(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$425$3(false)) {
                            currentLookaheadToken = token2;
                            remainingLookahead = remainingLookahead2;
                            hitFailure = hitFailure2;
                            if (passedPredicate) return false;
                            passedPredicate = false;
                            if (!check$Java_ccc$427$3(false)) {
                                currentLookaheadToken = token2;
                                remainingLookahead = remainingLookahead2;
                                hitFailure = hitFailure2;
                                if (passedPredicate) return false;
                                passedPredicate = false;
                                if (!check$Java_ccc$429$3(false)) {
                                    currentLookaheadToken = token2;
                                    remainingLookahead = remainingLookahead2;
                                    hitFailure = hitFailure2;
                                    if (passedPredicate) return false;
                                    passedPredicate = false;
                                    if (!check$Java_ccc$432$3(false)) {
                                        currentLookaheadToken = token2;
                                        remainingLookahead = remainingLookahead2;
                                        hitFailure = hitFailure2;
                                        return false;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$FieldDeclaration(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:442:3
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:445:3
        // NonTerminal Modifiers at Java.ccc:445:3
        pushOntoLookaheadStack("FieldDeclaration", "Java.ccc", 445, 3);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:446:3
        // NonTerminal Type at Java.ccc:446:3
        pushOntoLookaheadStack("FieldDeclaration", "Java.ccc", 446, 3);
        currentLookaheadProduction = "Type";
        try {
            if (!check$Type(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 1;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead - 1;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:447:3
        // NonTerminal VariableDeclarator at Java.ccc:447:3
        pushOntoLookaheadStack("FieldDeclaration", "Java.ccc", 447, 3);
        currentLookaheadProduction = "VariableDeclarator";
        try {
            if (!check$VariableDeclarator(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:447:22
        boolean passedPredicate7 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token8 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$447$24(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token8;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:447:54
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$VariableDeclarator(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:450:23
        // NonTerminal VariableDeclaratorId at Java.ccc:450:23
        pushOntoLookaheadStack("VariableDeclarator", "Java.ccc", 450, 23);
        currentLookaheadProduction = "VariableDeclaratorId";
        try {
            if (!check$VariableDeclaratorId(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:450:44
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$450$46(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$VariableDeclaratorId(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:453:5
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$453$5(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$456$5(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$VariableInitializer(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:460:28
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$460$28(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$460$47(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ArrayInitializer(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:463:4
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:463:13
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$463$15(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:463:77
        Token token6 = currentLookaheadToken;
        boolean passedPredicate6 = passedPredicate;
        passedPredicate = false;
        try {
            if (!scanToken(COMMA)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token6;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:463:89
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$MethodDeclaration(boolean scanToEnd) {
        // skipping check
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:468:5
        Token token4 = currentLookaheadToken;
        int remainingLookahead4 = remainingLookahead;
        boolean hitFailure4 = hitFailure;
        boolean passedPredicate4 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$468$5(false)) {
                currentLookaheadToken = token4;
                remainingLookahead = remainingLookahead4;
                hitFailure = hitFailure4;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$476$5(false)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$486$5(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        return false;
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:492:3
        // NonTerminal Modifiers at Java.ccc:492:3
        pushOntoLookaheadStack("MethodDeclaration", "Java.ccc", 492, 3);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:493:3
        Token token7 = currentLookaheadToken;
        boolean passedPredicate7 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$493$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token7;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:494:3
        // NonTerminal ReturnType at Java.ccc:494:3
        pushOntoLookaheadStack("MethodDeclaration", "Java.ccc", 494, 3);
        currentLookaheadProduction = "ReturnType";
        try {
            if (!check$ReturnType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:495:3
        if (!scanToken(IDENTIFIER)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 1;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead - 1;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:496:9
        // NonTerminal FormalParameters at Java.ccc:496:9
        pushOntoLookaheadStack("MethodDeclaration", "Java.ccc", 496, 9);
        currentLookaheadProduction = "FormalParameters";
        try {
            if (!check$FormalParameters(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:496:26
        boolean passedPredicate12 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token13 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$496$28(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token13;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate12;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:497:3
        Token token15 = currentLookaheadToken;
        boolean passedPredicate15 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$497$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token15;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate15;
        }
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:498:5
        Token token18 = currentLookaheadToken;
        int remainingLookahead18 = remainingLookahead;
        boolean hitFailure18 = hitFailure;
        boolean passedPredicate18 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$498$5(false)) {
                currentLookaheadToken = token18;
                remainingLookahead = remainingLookahead18;
                hitFailure = hitFailure18;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!scanToken(SEMICOLON)) {
                    currentLookaheadToken = token18;
                    remainingLookahead = remainingLookahead18;
                    hitFailure = hitFailure18;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate18;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:499:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$FormalParameters(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:502:20
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:502:29
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$502$31(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:502:77
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$FormalParameter(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:505:4
        permissibleModifiers = EnumSet.of(FINAL);
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:506:4
        // NonTerminal Modifiers at Java.ccc:506:4
        pushOntoLookaheadStack("FormalParameter", "Java.ccc", 506, 4);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:506:14
        // NonTerminal Type at Java.ccc:506:14
        pushOntoLookaheadStack("FormalParameter", "Java.ccc", 506, 14);
        currentLookaheadProduction = "Type";
        try {
            if (!check$Type(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:507:4
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:508:4
        Token token7 = currentLookaheadToken;
        boolean passedPredicate7 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$508$6(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token7;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:509:4
        // NonTerminal VariableDeclaratorId at Java.ccc:509:4
        pushOntoLookaheadStack("FormalParameter", "Java.ccc", 509, 4);
        currentLookaheadProduction = "VariableDeclaratorId";
        try {
            if (!check$VariableDeclaratorId(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Assertion specified at Java.ccc:510:4
        // No code generated since this assertion does not apply in lookahead
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ConstructorDeclaration(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:514:3
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:515:3
        // NonTerminal Modifiers at Java.ccc:515:3
        pushOntoLookaheadStack("ConstructorDeclaration", "Java.ccc", 515, 3);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:516:3
        Token token5 = currentLookaheadToken;
        boolean passedPredicate5 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$516$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token5;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:517:3
        // NonTerminal TypeIdentifier at Java.ccc:517:3
        pushOntoLookaheadStack("ConstructorDeclaration", "Java.ccc", 517, 3);
        currentLookaheadProduction = "TypeIdentifier";
        try {
            if (!check$TypeIdentifier(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 1;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead - 1;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:517:24
        // NonTerminal FormalParameters at Java.ccc:517:24
        pushOntoLookaheadStack("ConstructorDeclaration", "Java.ccc", 517, 24);
        currentLookaheadProduction = "FormalParameters";
        try {
            if (!check$FormalParameters(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:518:3
        Token token9 = currentLookaheadToken;
        boolean passedPredicate9 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$518$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token9;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate9;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:519:3
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:520:3
        boolean passedPredicate12 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token13 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$520$4(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token13;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate12;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:521:3
        Token token15 = currentLookaheadToken;
        boolean passedPredicate15 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$521$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token15;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate15;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:522:3
        boolean passedPredicate17 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token18 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$522$5(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token18;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate17;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:523:3
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ExplicitConstructorInvocation(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:527:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$527$3(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$531$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$Initializer(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:536:3
        Token token3 = currentLookaheadToken;
        boolean passedPredicate3 = passedPredicate;
        passedPredicate = false;
        try {
            if (!scanToken(STATIC)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token3;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate3;
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 1;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead - 1;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:536:22
        // NonTerminal Block at Java.ccc:536:22
        pushOntoLookaheadStack("Initializer", "Java.ccc", 536, 22);
        currentLookaheadProduction = "Block";
        try {
            if (!check$Block(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$Type(boolean scanToEnd) {
        // skipping check
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:541:4
        Token token4 = currentLookaheadToken;
        int remainingLookahead4 = remainingLookahead;
        boolean hitFailure4 = hitFailure;
        boolean passedPredicate4 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$541$4(false)) {
                currentLookaheadToken = token4;
                remainingLookahead = remainingLookahead4;
                hitFailure = hitFailure4;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$543$4(false)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ReferenceType(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:553:4
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$553$4(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$555$4(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ObjectType(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:559:5
        boolean passedPredicate3 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token4 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$559$6(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token4;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate3;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:560:5
        // NonTerminal TypeIdentifier at Java.ccc:560:5
        pushOntoLookaheadStack("ObjectType", "Java.ccc", 560, 5);
        currentLookaheadProduction = "TypeIdentifier";
        try {
            if (!check$TypeIdentifier(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:560:20
        Token token7 = currentLookaheadToken;
        boolean passedPredicate7 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$560$22(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token7;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:561:5
        boolean passedPredicate9 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token10 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$561$7(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token10;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate9;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$DiamondOperator(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:574:20
        if (!scanToken(LT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:574:24
        if (!scanToken(GT)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$PossiblyEmptyTypeArguments(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:577:4
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$577$4(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$579$4(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$TypeArguments(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:584:3
        if (!scanToken(LT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:584:8
        // NonTerminal TypeArgument at Java.ccc:584:8
        pushOntoLookaheadStack("TypeArguments", "Java.ccc", 584, 8);
        currentLookaheadProduction = "TypeArgument";
        try {
            if (!check$TypeArgument(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:584:21
        boolean passedPredicate5 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token6 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$584$23(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token6;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:585:4
        EnumSet<TokenType> previousActives8 = EnumSet.copyOf(token_source.activeTokenTypes);
        boolean somethingChanged9 = false;
        somethingChanged9 = somethingChanged9 |= deactivateTokenTypes(RSIGNEDSHIFT, RUNSIGNEDSHIFT);
        try {
            // skipping check
            if (!scanToken(GT)) return false;
        } finally {
            token_source.activeTokenTypes = previousActives8;
            if (somethingChanged9) {
                token_source.reset(currentLookaheadToken);
                nextTokenType = null;
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$TypeArgument(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:589:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$589$3(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$591$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$WildcardBounds(boolean scanToEnd) {
        // skipping check
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:594:19
        if (!scanToken(EXTENDS, SUPER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:594:40
        // NonTerminal ReferenceType at Java.ccc:594:40
        pushOntoLookaheadStack("WildcardBounds", "Java.ccc", 594, 40);
        currentLookaheadProduction = "ReferenceType";
        try {
            if (!check$ReferenceType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$PrimitiveType(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:597:3
        boolean passedPredicate3 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token4 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$597$4(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token4;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate3;
        }
        hitFailure = false;
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:598:4
        if (!scanToken(first_set$Java_ccc$598$4)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$PrimitiveArrayType(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:607:22
        // NonTerminal PrimitiveType at Java.ccc:607:22
        pushOntoLookaheadStack("PrimitiveArrayType", "Java.ccc", 607, 22);
        currentLookaheadProduction = "PrimitiveType";
        try {
            if (!check$PrimitiveType(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for OneOrMore specified at Java.ccc:607:36
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:607:37
        boolean passedPredicate6 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token7 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$607$38(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token7;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:607:51
        if (!scanToken(LBRACKET)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:607:67
        if (!scanToken(RBRACKET)) return false;
        boolean passedPredicate10 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token11 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$607$37(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token11;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate10;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ReturnType(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:609:15
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!scanToken(VOID)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$609$24(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$Name(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:611:9
        if (!scanToken(IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:611:22
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$611$23(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ThrowsList(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:613:14
        if (!scanToken(THROWS)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:613:23
        // NonTerminal ExceptionType at Java.ccc:613:23
        pushOntoLookaheadStack("ThrowsList", "Java.ccc", 613, 23);
        currentLookaheadProduction = "ExceptionType";
        try {
            if (!check$ExceptionType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:613:37
        boolean passedPredicate5 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token6 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$613$39(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token6;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ExceptionType(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:616:5
        boolean passedPredicate3 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token4 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$616$6(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token4;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate3;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:617:5
        if (!scanToken(IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:618:5
        boolean passedPredicate7 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token8 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$619$8(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token8;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:621:5
        Token token10 = currentLookaheadToken;
        boolean passedPredicate10 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$622$7(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token10;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate10;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:626:5
        Token token12 = currentLookaheadToken;
        boolean passedPredicate12 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$626$6(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token12;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate12;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$Expression(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:707:5
        // NonTerminal ConditionalOrExpression at Java.ccc:707:5
        pushOntoLookaheadStack("Expression", "Java.ccc", 707, 5);
        currentLookaheadProduction = "ConditionalOrExpression";
        try {
            if (!check$ConditionalOrExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:708:5
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$709$7(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:716:5
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ConditionalOrExpression(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:726:3
        // NonTerminal ConditionalAndExpression at Java.ccc:726:3
        pushOntoLookaheadStack("ConditionalOrExpression", "Java.ccc", 726, 3);
        currentLookaheadProduction = "ConditionalAndExpression";
        try {
            if (!check$ConditionalAndExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:726:28
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$726$30(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ConditionalAndExpression(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:730:3
        // NonTerminal InclusiveOrExpression at Java.ccc:730:3
        pushOntoLookaheadStack("ConditionalAndExpression", "Java.ccc", 730, 3);
        currentLookaheadProduction = "InclusiveOrExpression";
        try {
            if (!check$InclusiveOrExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:730:25
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$730$27(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$InclusiveOrExpression(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:734:3
        // NonTerminal ExclusiveOrExpression at Java.ccc:734:3
        pushOntoLookaheadStack("InclusiveOrExpression", "Java.ccc", 734, 3);
        currentLookaheadProduction = "ExclusiveOrExpression";
        try {
            if (!check$ExclusiveOrExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:734:25
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$734$27(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ExclusiveOrExpression(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:738:3
        // NonTerminal AndExpression at Java.ccc:738:3
        pushOntoLookaheadStack("ExclusiveOrExpression", "Java.ccc", 738, 3);
        currentLookaheadProduction = "AndExpression";
        try {
            if (!check$AndExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:738:17
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$738$19(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$AndExpression(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:742:3
        // NonTerminal EqualityExpression at Java.ccc:742:3
        pushOntoLookaheadStack("AndExpression", "Java.ccc", 742, 3);
        currentLookaheadProduction = "EqualityExpression";
        try {
            if (!check$EqualityExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:742:22
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$742$24(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$EqualityExpression(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:746:3
        // NonTerminal InstanceOfExpression at Java.ccc:746:3
        pushOntoLookaheadStack("EqualityExpression", "Java.ccc", 746, 3);
        currentLookaheadProduction = "InstanceOfExpression";
        try {
            if (!check$InstanceOfExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:746:24
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$746$26(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$InstanceOfExpression(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:750:3
        // NonTerminal RelationalExpression at Java.ccc:750:3
        pushOntoLookaheadStack("InstanceOfExpression", "Java.ccc", 750, 3);
        currentLookaheadProduction = "RelationalExpression";
        try {
            if (!check$RelationalExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:751:3
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$752$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$RelationalExpression(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:764:3
        // NonTerminal ShiftExpression at Java.ccc:764:3
        pushOntoLookaheadStack("RelationalExpression", "Java.ccc", 764, 3);
        currentLookaheadProduction = "ShiftExpression";
        try {
            if (!check$ShiftExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:765:3
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$766$5(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ShiftExpression(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:773:4
        // NonTerminal AdditiveExpression at Java.ccc:773:4
        pushOntoLookaheadStack("ShiftExpression", "Java.ccc", 773, 4);
        currentLookaheadProduction = "AdditiveExpression";
        try {
            if (!check$AdditiveExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:774:4
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$778$6(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:780:4
        boolean passedPredicate6 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token7 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$781$7(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token7;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$AdditiveExpression(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:787:3
        // NonTerminal MultiplicativeExpression at Java.ccc:787:3
        pushOntoLookaheadStack("AdditiveExpression", "Java.ccc", 787, 3);
        currentLookaheadProduction = "MultiplicativeExpression";
        try {
            if (!check$MultiplicativeExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:787:28
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$787$31(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$MultiplicativeExpression(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:791:3
        // NonTerminal UnaryExpression at Java.ccc:791:3
        pushOntoLookaheadStack("MultiplicativeExpression", "Java.ccc", 791, 3);
        currentLookaheadProduction = "UnaryExpression";
        try {
            if (!check$UnaryExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:791:19
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$791$22(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$UnaryExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:795:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$795$3(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$797$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$799$3(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$801$3(false)) {
                            currentLookaheadToken = token2;
                            remainingLookahead = remainingLookahead2;
                            hitFailure = hitFailure2;
                            return false;
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$PreIncrementExpression(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:805:3
        if (!scanToken(INCR)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:805:10
        // NonTerminal UnaryExpression at Java.ccc:805:10
        pushOntoLookaheadStack("PreIncrementExpression", "Java.ccc", 805, 10);
        currentLookaheadProduction = "UnaryExpression";
        try {
            if (!check$UnaryExpression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Assertion specified at Java.ccc:806:3
        // No code generated since this assertion does not apply in lookahead
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$PreDecrementExpression(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:811:3
        if (!scanToken(DECR)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:811:10
        // NonTerminal UnaryExpression at Java.ccc:811:10
        pushOntoLookaheadStack("PreDecrementExpression", "Java.ccc", 811, 10);
        currentLookaheadProduction = "UnaryExpression";
        try {
            if (!check$UnaryExpression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Assertion specified at Java.ccc:812:3
        // No code generated since this assertion does not apply in lookahead
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$UnaryExpressionNotPlusMinus(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:817:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$817$3(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$819$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$821$3(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$823$3(false)) {
                            currentLookaheadToken = token2;
                            remainingLookahead = remainingLookahead2;
                            hitFailure = hitFailure2;
                            if (passedPredicate) return false;
                            passedPredicate = false;
                            if (!check$Java_ccc$825$3(false)) {
                                currentLookaheadToken = token2;
                                remainingLookahead = remainingLookahead2;
                                hitFailure = hitFailure2;
                                if (passedPredicate) return false;
                                passedPredicate = false;
                                if (!check$Java_ccc$827$3(false)) {
                                    currentLookaheadToken = token2;
                                    remainingLookahead = remainingLookahead2;
                                    hitFailure = hitFailure2;
                                    return false;
                                }
                            }
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$PostfixExpression(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:831:3
        // NonTerminal PrimaryExpression at Java.ccc:831:3
        pushOntoLookaheadStack("PostfixExpression", "Java.ccc", 831, 3);
        currentLookaheadProduction = "PrimaryExpression";
        try {
            if (!check$PrimaryExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:832:3
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:833:3
        Token token5 = currentLookaheadToken;
        boolean passedPredicate5 = passedPredicate;
        passedPredicate = false;
        try {
            if (!scanToken(INCR, DECR)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token5;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$SwitchExpression(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:840:4
        // NonTerminal SwitchStatement at Java.ccc:840:4
        pushOntoLookaheadStack("SwitchExpression", "Java.ccc", 840, 4);
        currentLookaheadProduction = "SwitchStatement";
        try {
            if (!check$SwitchStatement(false)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$PrimitiveCastExpression(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:862:4
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:862:13
        // NonTerminal PrimitiveType at Java.ccc:862:13
        pushOntoLookaheadStack("PrimitiveCastExpression", "Java.ccc", 862, 13);
        currentLookaheadProduction = "PrimitiveType";
        try {
            if (!check$PrimitiveType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:862:27
        if (!scanToken(RPAREN)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:862:41
        // NonTerminal UnaryExpression at Java.ccc:862:41
        pushOntoLookaheadStack("PrimitiveCastExpression", "Java.ccc", 862, 41);
        currentLookaheadProduction = "UnaryExpression";
        try {
            if (!check$UnaryExpression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ObjectCastExpression(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:867:4
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:868:4
        // NonTerminal ReferenceType at Java.ccc:868:4
        pushOntoLookaheadStack("ObjectCastExpression", "Java.ccc", 868, 4);
        currentLookaheadProduction = "ReferenceType";
        try {
            if (!check$ReferenceType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:869:4
        boolean passedPredicate5 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token6 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$869$5(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token6;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:870:4
        if (!scanToken(RPAREN)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 1;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead - 1;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:872:4
        // NonTerminal UnaryExpressionNotPlusMinus at Java.ccc:872:4
        pushOntoLookaheadStack("ObjectCastExpression", "Java.ccc", 872, 4);
        currentLookaheadProduction = "UnaryExpressionNotPlusMinus";
        try {
            if (!check$UnaryExpressionNotPlusMinus(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$PrimaryExpression(boolean scanToEnd) {
        // skipping check
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:877:3
        Token token4 = currentLookaheadToken;
        int remainingLookahead4 = remainingLookahead;
        boolean hitFailure4 = hitFailure;
        boolean passedPredicate4 = passedPredicate;
        try {
            passedPredicate = false;
            if (!scanToken(first_set$Java_ccc$877$3)) {
                currentLookaheadToken = token4;
                remainingLookahead = remainingLookahead4;
                hitFailure = hitFailure4;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!scanToken(THIS)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!scanToken(SUPER)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$883$3(false)) {
                            currentLookaheadToken = token4;
                            remainingLookahead = remainingLookahead4;
                            hitFailure = hitFailure4;
                            if (passedPredicate) return false;
                            passedPredicate = false;
                            if (!check$Java_ccc$885$3(false)) {
                                currentLookaheadToken = token4;
                                remainingLookahead = remainingLookahead4;
                                hitFailure = hitFailure4;
                                if (passedPredicate) return false;
                                passedPredicate = false;
                                if (!check$Java_ccc$887$3(false)) {
                                    currentLookaheadToken = token4;
                                    remainingLookahead = remainingLookahead4;
                                    hitFailure = hitFailure4;
                                    if (passedPredicate) return false;
                                    passedPredicate = false;
                                    if (!check$Java_ccc$889$3(false)) {
                                        currentLookaheadToken = token4;
                                        remainingLookahead = remainingLookahead4;
                                        hitFailure = hitFailure4;
                                        if (passedPredicate) return false;
                                        passedPredicate = false;
                                        if (!check$Java_ccc$891$3(false)) {
                                            currentLookaheadToken = token4;
                                            remainingLookahead = remainingLookahead4;
                                            hitFailure = hitFailure4;
                                            return false;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:893:2
        boolean passedPredicate6 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token7 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$894$4(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token7;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Assertion specified at Java.ccc:914:2
        // No code generated since this assertion does not apply in lookahead
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$Parentheses(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:920:5
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:921:5
        // NonTerminal Expression at Java.ccc:921:5
        pushOntoLookaheadStack("Parentheses", "Java.ccc", 921, 5);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:921:16
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:922:5
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ClassLiteral(boolean scanToEnd) {
        // skipping check
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:933:4
        Token token4 = currentLookaheadToken;
        int remainingLookahead4 = remainingLookahead;
        boolean hitFailure4 = hitFailure;
        boolean passedPredicate4 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$933$4$(false)) {
                currentLookaheadToken = token4;
                remainingLookahead = remainingLookahead4;
                hitFailure = hitFailure4;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$935$4(false)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$MethodReference(boolean scanToEnd) {
        // skipping check
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:950:6
        Token token4 = currentLookaheadToken;
        int remainingLookahead4 = remainingLookahead;
        boolean hitFailure4 = hitFailure;
        boolean passedPredicate4 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$950$6(false)) {
                currentLookaheadToken = token4;
                remainingLookahead = remainingLookahead4;
                hitFailure = hitFailure4;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!scanToken(SUPER)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:951:6
        if (!scanToken(DOUBLE_COLON)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:952:6
        Token token7 = currentLookaheadToken;
        boolean passedPredicate7 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$952$7(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token7;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:953:7
        if (!scanToken(NEW, IDENTIFIER)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$InvocationArguments(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:977:5
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:978:5
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$978$7(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:979:5
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$AllocationExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:991:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$991$3(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$993$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$995$3(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        return false;
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$PrimitiveArrayInitialization(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:999:4
        if (!scanToken(NEW)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:999:10
        // NonTerminal PrimitiveType at Java.ccc:999:10
        pushOntoLookaheadStack("PrimitiveArrayInitialization", "Java.ccc", 999, 10);
        currentLookaheadProduction = "PrimitiveType";
        try {
            if (!check$PrimitiveType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:999:29
        // NonTerminal ArrayDimsAndInits at Java.ccc:999:29
        pushOntoLookaheadStack("PrimitiveArrayInitialization", "Java.ccc", 999, 29);
        currentLookaheadProduction = "ArrayDimsAndInits";
        try {
            if (!check$ArrayDimsAndInits(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ObjectArrayInitialization(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1003:4
        if (!scanToken(NEW)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1003:10
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1003$11(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1003:26
        // NonTerminal ObjectType at Java.ccc:1003:26
        pushOntoLookaheadStack("ObjectArrayInitialization", "Java.ccc", 1003, 26);
        currentLookaheadProduction = "ObjectType";
        try {
            if (!check$ObjectType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1003:37
        Token token7 = currentLookaheadToken;
        boolean passedPredicate7 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1003$38(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token7;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 1;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead - 1;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1005:4
        // NonTerminal ArrayDimsAndInits at Java.ccc:1005:4
        pushOntoLookaheadStack("ObjectArrayInitialization", "Java.ccc", 1005, 4);
        currentLookaheadProduction = "ArrayDimsAndInits";
        try {
            if (!check$ArrayDimsAndInits(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ObjectInstantiation(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1009:4
        if (!scanToken(NEW)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1009:10
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1009$11(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1009:26
        // NonTerminal ObjectType at Java.ccc:1009:26
        pushOntoLookaheadStack("ObjectInstantiation", "Java.ccc", 1009, 26);
        currentLookaheadProduction = "ObjectType";
        try {
            if (!check$ObjectType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1009:37
        Token token7 = currentLookaheadToken;
        boolean passedPredicate7 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1009$38(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token7;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate7;
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 1;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead - 1;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1011:4
        // NonTerminal InvocationArguments at Java.ccc:1011:4
        pushOntoLookaheadStack("ObjectInstantiation", "Java.ccc", 1011, 4);
        currentLookaheadProduction = "InvocationArguments";
        try {
            if (!check$InvocationArguments(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1011:24
        Token token10 = currentLookaheadToken;
        boolean passedPredicate10 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1011$25(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token10;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate10;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ArrayDimsAndInits(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1015:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1015$3(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1023$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$Label(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1029:9
        if (!scanToken(IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1029:21
        if (!scanToken(COLON)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$LabeledStatement(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1031:20
        // NonTerminal Label at Java.ccc:1031:20
        pushOntoLookaheadStack("LabeledStatement", "Java.ccc", 1031, 20);
        currentLookaheadProduction = "Label";
        try {
            if (!check$Label(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1031:31
        // NonTerminal Statement at Java.ccc:1031:31
        pushOntoLookaheadStack("LabeledStatement", "Java.ccc", 1031, 31);
        currentLookaheadProduction = "Statement";
        try {
            if (!check$Statement(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$Statement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1034:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1034$3(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1036$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1038$3(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$1040$3(false)) {
                            currentLookaheadToken = token2;
                            remainingLookahead = remainingLookahead2;
                            hitFailure = hitFailure2;
                            if (passedPredicate) return false;
                            passedPredicate = false;
                            if (!scanToken(SEMICOLON)) {
                                currentLookaheadToken = token2;
                                remainingLookahead = remainingLookahead2;
                                hitFailure = hitFailure2;
                                if (passedPredicate) return false;
                                passedPredicate = false;
                                if (!check$Java_ccc$1044$3(false)) {
                                    currentLookaheadToken = token2;
                                    remainingLookahead = remainingLookahead2;
                                    hitFailure = hitFailure2;
                                    if (passedPredicate) return false;
                                    passedPredicate = false;
                                    if (!check$Java_ccc$1046$3(false)) {
                                        currentLookaheadToken = token2;
                                        remainingLookahead = remainingLookahead2;
                                        hitFailure = hitFailure2;
                                        if (passedPredicate) return false;
                                        passedPredicate = false;
                                        if (!check$Java_ccc$1048$3(false)) {
                                            currentLookaheadToken = token2;
                                            remainingLookahead = remainingLookahead2;
                                            hitFailure = hitFailure2;
                                            if (passedPredicate) return false;
                                            passedPredicate = false;
                                            if (!check$Java_ccc$1050$3(false)) {
                                                currentLookaheadToken = token2;
                                                remainingLookahead = remainingLookahead2;
                                                hitFailure = hitFailure2;
                                                if (passedPredicate) return false;
                                                passedPredicate = false;
                                                if (!check$Java_ccc$1052$3(false)) {
                                                    currentLookaheadToken = token2;
                                                    remainingLookahead = remainingLookahead2;
                                                    hitFailure = hitFailure2;
                                                    if (passedPredicate) return false;
                                                    passedPredicate = false;
                                                    if (!check$Java_ccc$1054$3(false)) {
                                                        currentLookaheadToken = token2;
                                                        remainingLookahead = remainingLookahead2;
                                                        hitFailure = hitFailure2;
                                                        if (passedPredicate) return false;
                                                        passedPredicate = false;
                                                        if (!check$Java_ccc$1056$3(false)) {
                                                            currentLookaheadToken = token2;
                                                            remainingLookahead = remainingLookahead2;
                                                            hitFailure = hitFailure2;
                                                            if (passedPredicate) return false;
                                                            passedPredicate = false;
                                                            if (!check$Java_ccc$1058$3(false)) {
                                                                currentLookaheadToken = token2;
                                                                remainingLookahead = remainingLookahead2;
                                                                hitFailure = hitFailure2;
                                                                if (passedPredicate) return false;
                                                                passedPredicate = false;
                                                                if (!check$Java_ccc$1060$3(false)) {
                                                                    currentLookaheadToken = token2;
                                                                    remainingLookahead = remainingLookahead2;
                                                                    hitFailure = hitFailure2;
                                                                    if (passedPredicate) return false;
                                                                    passedPredicate = false;
                                                                    if (!check$Java_ccc$1062$3(false)) {
                                                                        currentLookaheadToken = token2;
                                                                        remainingLookahead = remainingLookahead2;
                                                                        hitFailure = hitFailure2;
                                                                        if (passedPredicate) return false;
                                                                        passedPredicate = false;
                                                                        if (!check$Java_ccc$1064$3(false)) {
                                                                            currentLookaheadToken = token2;
                                                                            remainingLookahead = remainingLookahead2;
                                                                            hitFailure = hitFailure2;
                                                                            if (passedPredicate) return false;
                                                                            passedPredicate = false;
                                                                            if (!check$Java_ccc$1066$3(false)) {
                                                                                currentLookaheadToken = token2;
                                                                                remainingLookahead = remainingLookahead2;
                                                                                hitFailure = hitFailure2;
                                                                                return false;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$AssertStatement(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1090:19
        if (!scanToken(_ASSERT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1090:29
        // NonTerminal Expression at Java.ccc:1090:29
        pushOntoLookaheadStack("AssertStatement", "Java.ccc", 1090, 29);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1090:40
        Token token5 = currentLookaheadToken;
        boolean passedPredicate5 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1090$42(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token5;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1090:63
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$Block(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1092:20
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:1092:29
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$1092$30(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1092:68
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$BlockStatement(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Assertion specified at Java.ccc:1095:2
        // No code generated since this assertion does not apply in lookahead
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:1097:2
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1098:3
        Token token5 = currentLookaheadToken;
        int remainingLookahead5 = remainingLookahead;
        boolean hitFailure5 = hitFailure;
        boolean passedPredicate5 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1098$3(false)) {
                currentLookaheadToken = token5;
                remainingLookahead = remainingLookahead5;
                hitFailure = hitFailure5;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1100$3(false)) {
                    currentLookaheadToken = token5;
                    remainingLookahead = remainingLookahead5;
                    hitFailure = hitFailure5;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1102$3(false)) {
                        currentLookaheadToken = token5;
                        remainingLookahead = remainingLookahead5;
                        hitFailure = hitFailure5;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$1104$3(false)) {
                            currentLookaheadToken = token5;
                            remainingLookahead = remainingLookahead5;
                            hitFailure = hitFailure5;
                            if (passedPredicate) return false;
                            passedPredicate = false;
                            if (!check$Java_ccc$1106$3(false)) {
                                currentLookaheadToken = token5;
                                remainingLookahead = remainingLookahead5;
                                hitFailure = hitFailure5;
                                if (passedPredicate) return false;
                                passedPredicate = false;
                                if (!check$Java_ccc$1109$3(false)) {
                                    currentLookaheadToken = token5;
                                    remainingLookahead = remainingLookahead5;
                                    hitFailure = hitFailure5;
                                    return false;
                                }
                            }
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$LocalVariableDeclaration(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:1124:4
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1125:4
        // NonTerminal Modifiers at Java.ccc:1125:4
        pushOntoLookaheadStack("LocalVariableDeclaration", "Java.ccc", 1125, 4);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1127:7
        Token token6 = currentLookaheadToken;
        int remainingLookahead6 = remainingLookahead;
        boolean hitFailure6 = hitFailure;
        boolean passedPredicate6 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1127$7(false)) {
                currentLookaheadToken = token6;
                remainingLookahead = remainingLookahead6;
                hitFailure = hitFailure6;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1129$7(false)) {
                    currentLookaheadToken = token6;
                    remainingLookahead = remainingLookahead6;
                    hitFailure = hitFailure6;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$StatementExpression(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1136:5
        // NonTerminal Expression at Java.ccc:1136:5
        pushOntoLookaheadStack("StatementExpression", "Java.ccc", 1136, 5);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:1137:5
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Assertion specified at Java.ccc:1138:5
        // No code generated since this assertion does not apply in lookahead
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ExpressionStatement(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1151:23
        // NonTerminal StatementExpression at Java.ccc:1151:23
        pushOntoLookaheadStack("ExpressionStatement", "Java.ccc", 1151, 23);
        currentLookaheadProduction = "StatementExpression";
        try {
            if (!check$StatementExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1151:43
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$CasePattern(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1154:5
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1154$5(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1156$5(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$RecordPattern(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1160:5
        // NonTerminal ReferenceType at Java.ccc:1160:5
        pushOntoLookaheadStack("RecordPattern", "Java.ccc", 1160, 5);
        currentLookaheadProduction = "ReferenceType";
        try {
            if (!check$ReferenceType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1161:5
        if (!scanToken(LPAREN)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1162:5
        Token token5 = currentLookaheadToken;
        boolean passedPredicate5 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1163$7(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token5;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1174:5
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$TypePattern(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:1179:3
        permissibleModifiers = EnumSet.of(FINAL);
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1180:3
        // NonTerminal Modifiers at Java.ccc:1180:3
        pushOntoLookaheadStack("TypePattern", "Java.ccc", 1180, 3);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1182:5
        Token token6 = currentLookaheadToken;
        int remainingLookahead6 = remainingLookahead;
        boolean hitFailure6 = hitFailure;
        boolean passedPredicate6 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1182$5(false)) {
                currentLookaheadToken = token6;
                remainingLookahead = remainingLookahead6;
                hitFailure = hitFailure6;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1184$5(false)) {
                    currentLookaheadToken = token6;
                    remainingLookahead = remainingLookahead6;
                    hitFailure = hitFailure6;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$WhenClause(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1189:4
        if (!scanToken(WHEN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1190:4
        // NonTerminal Expression at Java.ccc:1190:4
        pushOntoLookaheadStack("WhenClause", "Java.ccc", 1190, 4);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$SwitchStatement(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1194:3
        if (!scanToken(SWITCH)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1194:12
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1194:21
        // NonTerminal Expression at Java.ccc:1194:21
        pushOntoLookaheadStack("SwitchStatement", "Java.ccc", 1194, 21);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1194:32
        if (!scanToken(RPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1195:3
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1196:3
        Token token8 = currentLookaheadToken;
        boolean passedPredicate8 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1197$5$(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token8;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate8;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1203:3
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ClassicCaseStatement(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1222:3
        // NonTerminal ClassicSwitchLabel at Java.ccc:1222:3
        pushOntoLookaheadStack("ClassicCaseStatement", "Java.ccc", 1222, 3);
        currentLookaheadProduction = "ClassicSwitchLabel";
        try {
            if (!check$ClassicSwitchLabel(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:1223:3
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$1223$4(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$NewSwitchLabel(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1227:3
        // NonTerminal CaseOrDefault at Java.ccc:1227:3
        pushOntoLookaheadStack("NewSwitchLabel", "Java.ccc", 1227, 3);
        currentLookaheadProduction = "CaseOrDefault";
        try {
            if (!check$CaseOrDefault(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1228:3
        if (!scanToken(LAMBDA)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ClassicSwitchLabel(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1232:3
        // NonTerminal CaseOrDefault at Java.ccc:1232:3
        pushOntoLookaheadStack("ClassicSwitchLabel", "Java.ccc", 1232, 3);
        currentLookaheadProduction = "CaseOrDefault";
        try {
            if (!check$CaseOrDefault(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1233:3
        if (!scanToken(COLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$CaseOrDefault(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1238:4
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1238$4(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1240$4(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1242$4(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!scanToken(_DEFAULT)) {
                            currentLookaheadToken = token2;
                            remainingLookahead = remainingLookahead2;
                            hitFailure = hitFailure2;
                            return false;
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$NewCaseStatement(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1248:4
        // NonTerminal NewSwitchLabel at Java.ccc:1248:4
        pushOntoLookaheadStack("NewCaseStatement", "Java.ccc", 1248, 4);
        currentLookaheadProduction = "NewSwitchLabel";
        try {
            if (!check$NewSwitchLabel(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:1249:4
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1250:6
        Token token5 = currentLookaheadToken;
        int remainingLookahead5 = remainingLookahead;
        boolean hitFailure5 = hitFailure;
        boolean passedPredicate5 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1250$6(false)) {
                currentLookaheadToken = token5;
                remainingLookahead = remainingLookahead5;
                hitFailure = hitFailure5;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1252$6(false)) {
                    currentLookaheadToken = token5;
                    remainingLookahead = remainingLookahead5;
                    hitFailure = hitFailure5;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1254$6(false)) {
                        currentLookaheadToken = token5;
                        remainingLookahead = remainingLookahead5;
                        hitFailure = hitFailure5;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$1257$6(false)) {
                            currentLookaheadToken = token5;
                            remainingLookahead = remainingLookahead5;
                            hitFailure = hitFailure5;
                            return false;
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$IfStatement(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1263:3
        if (!scanToken(IF)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1263:8
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1263:17
        // NonTerminal Expression at Java.ccc:1263:17
        pushOntoLookaheadStack("IfStatement", "Java.ccc", 1263, 17);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1263:28
        if (!scanToken(RPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1263:37
        // NonTerminal Statement at Java.ccc:1263:37
        pushOntoLookaheadStack("IfStatement", "Java.ccc", 1263, 37);
        currentLookaheadProduction = "Statement";
        try {
            if (!check$Statement(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1263:47
        Token token8 = currentLookaheadToken;
        boolean passedPredicate8 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1263$48(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token8;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate8;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$WhileStatement(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1277:3
        if (!scanToken(WHILE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1277:11
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1277:20
        // NonTerminal Expression at Java.ccc:1277:20
        pushOntoLookaheadStack("WhileStatement", "Java.ccc", 1277, 20);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1277:31
        if (!scanToken(RPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1277:40
        // NonTerminal Statement at Java.ccc:1277:40
        pushOntoLookaheadStack("WhileStatement", "Java.ccc", 1277, 40);
        currentLookaheadProduction = "Statement";
        try {
            if (!check$Statement(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$DoStatement(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1281:3
        if (!scanToken(DO)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1281:8
        // NonTerminal Statement at Java.ccc:1281:8
        pushOntoLookaheadStack("DoStatement", "Java.ccc", 1281, 8);
        currentLookaheadProduction = "Statement";
        try {
            if (!check$Statement(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1281:18
        if (!scanToken(WHILE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1281:26
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1281:35
        // NonTerminal Expression at Java.ccc:1281:35
        pushOntoLookaheadStack("DoStatement", "Java.ccc", 1281, 35);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1281:46
        if (!scanToken(RPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1281:55
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ForStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1285:4
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1285$4(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1287$4(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!scanToken(FOR)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        return false;
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$BasicForStatement(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1293:4
        if (!scanToken(FOR)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1293:10
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1293:19
        Token token5 = currentLookaheadToken;
        boolean passedPredicate5 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1293$20(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token5;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1293:29
        if (!scanToken(SEMICOLON)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1293:46
        Token token8 = currentLookaheadToken;
        boolean passedPredicate8 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1293$47(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token8;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate8;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1293:59
        if (!scanToken(SEMICOLON)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1293:71
        Token token11 = currentLookaheadToken;
        boolean passedPredicate11 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1293$72(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token11;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate11;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1293:97
        if (!scanToken(RPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1293:106
        // NonTerminal Statement at Java.ccc:1293:106
        pushOntoLookaheadStack("BasicForStatement", "Java.ccc", 1293, 106);
        currentLookaheadProduction = "Statement";
        try {
            if (!check$Statement(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$EnhancedForStatement(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1297:4
        if (!scanToken(FOR)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1297:10
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1297:19
        // NonTerminal LocalVariableDeclaration at Java.ccc:1297:19
        pushOntoLookaheadStack("EnhancedForStatement", "Java.ccc", 1297, 19);
        currentLookaheadProduction = "LocalVariableDeclaration";
        try {
            if (!check$LocalVariableDeclaration(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1297:44
        if (!scanToken(COLON)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1297:57
        // NonTerminal Expression at Java.ccc:1297:57
        pushOntoLookaheadStack("EnhancedForStatement", "Java.ccc", 1297, 57);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1297:68
        if (!scanToken(RPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1297:77
        // NonTerminal Statement at Java.ccc:1297:77
        pushOntoLookaheadStack("EnhancedForStatement", "Java.ccc", 1297, 77);
        currentLookaheadProduction = "Statement";
        try {
            if (!check$Statement(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ForInit(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1301:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1301$3(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1303$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$StatementExpressionList(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1307:3
        // NonTerminal StatementExpression at Java.ccc:1307:3
        pushOntoLookaheadStack("StatementExpressionList", "Java.ccc", 1307, 3);
        currentLookaheadProduction = "StatementExpression";
        try {
            if (!check$StatementExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:1307:23
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$1307$25(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$BreakStatement(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1311:3
        if (!scanToken(BREAK)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1311:11
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!scanToken(IDENTIFIER)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1311:28
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$YieldStatement(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1316:4
        if (!scanToken(YIELD)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1317:4
        // NonTerminal Expression at Java.ccc:1317:4
        pushOntoLookaheadStack("YieldStatement", "Java.ccc", 1317, 4);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1318:4
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ContinueStatement(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1321:21
        if (!scanToken(CONTINUE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1321:32
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!scanToken(IDENTIFIER)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1321:49
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ReturnStatement(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1323:19
        if (!scanToken(RETURN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1323:28
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1323$29(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1323:42
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ThrowStatement(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1326:5
        if (!scanToken(THROW)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:1330:5
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1331:5
        // NonTerminal Expression at Java.ccc:1331:5
        pushOntoLookaheadStack("ThrowStatement", "Java.ccc", 1331, 5);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Assertion specified at Java.ccc:1332:5
        // No code generated since this assertion does not apply in lookahead
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1338:5
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$SynchronizedStatement(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1341:25
        if (!scanToken(SYNCHRONIZED)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1341:40
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1341:49
        // NonTerminal Expression at Java.ccc:1341:49
        pushOntoLookaheadStack("SynchronizedStatement", "Java.ccc", 1341, 49);
        currentLookaheadProduction = "Expression";
        try {
            if (!check$Expression(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1341:60
        if (!scanToken(RPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1341:69
        // NonTerminal Block at Java.ccc:1341:69
        pushOntoLookaheadStack("SynchronizedStatement", "Java.ccc", 1341, 69);
        currentLookaheadProduction = "Block";
        try {
            if (!check$Block(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$TryStatement(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:1344:3
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1349:3
        if (!scanToken(TRY)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1350:3
        Token token5 = currentLookaheadToken;
        boolean passedPredicate5 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1350$4(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token5;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1351:3
        // NonTerminal Block at Java.ccc:1351:3
        pushOntoLookaheadStack("TryStatement", "Java.ccc", 1351, 3);
        currentLookaheadProduction = "Block";
        try {
            if (!check$Block(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:1352:3
        boolean passedPredicate8 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token9 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$1352$4(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token9;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate8;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1353:3
        Token token11 = currentLookaheadToken;
        boolean passedPredicate11 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1353$4(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token11;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate11;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Assertion specified at Java.ccc:1354:3
        // No code generated since this assertion does not apply in lookahead
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$ResourcesInTryBlock(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1362:5
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for OneOrMore specified at Java.ccc:1363:5
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Assertion specified at Java.ccc:1367:8
        if (!(getTokenType(0) == SEMICOLON)) {
            hitFailure = true;
            return false;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Assertion specified at Java.ccc:1368:8
        if (!(getTokenType(1) != RPAREN)) {
            hitFailure = true;
            return false;
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionWithParentheses specified at Java.ccc:1370:8
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1371:10
        Token token9 = currentLookaheadToken;
        int remainingLookahead9 = remainingLookahead;
        boolean hitFailure9 = hitFailure;
        boolean passedPredicate9 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1371$10(false)) {
                currentLookaheadToken = token9;
                remainingLookahead = remainingLookahead9;
                hitFailure = hitFailure9;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1373$10(false)) {
                    currentLookaheadToken = token9;
                    remainingLookahead = remainingLookahead9;
                    hitFailure = hitFailure9;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1375$10(false)) {
                        currentLookaheadToken = token9;
                        remainingLookahead = remainingLookahead9;
                        hitFailure = hitFailure9;
                        return false;
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate9;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1378:8
        Token token11 = currentLookaheadToken;
        boolean passedPredicate11 = passedPredicate;
        passedPredicate = false;
        try {
            if (!scanToken(SEMICOLON)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token11;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate11;
        }
        boolean passedPredicate12 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token13 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$1367$8(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token13;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate12;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1380:5
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$CatchBlock(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1384:5
        if (!scanToken(CATCH)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1385:5
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1386:5
        Token token5 = currentLookaheadToken;
        boolean passedPredicate5 = passedPredicate;
        passedPredicate = false;
        try {
            if (!scanToken(FINAL)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token5;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate5;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1387:5
        // NonTerminal ObjectType at Java.ccc:1387:5
        pushOntoLookaheadStack("CatchBlock", "Java.ccc", 1387, 5);
        currentLookaheadProduction = "ObjectType";
        try {
            if (!check$ObjectType(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:1387:16
        boolean passedPredicate8 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token9 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$1387$17(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token9;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate8;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1387:42
        // NonTerminal VariableDeclaratorId at Java.ccc:1387:42
        pushOntoLookaheadStack("CatchBlock", "Java.ccc", 1387, 42);
        currentLookaheadProduction = "VariableDeclaratorId";
        try {
            if (!check$VariableDeclaratorId(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1388:5
        if (!scanToken(RPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1389:5
        // NonTerminal Block at Java.ccc:1389:5
        pushOntoLookaheadStack("CatchBlock", "Java.ccc", 1389, 5);
        currentLookaheadProduction = "Block";
        try {
            if (!check$Block(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$FinallyBlock(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1399:16
        if (!scanToken(FINALLY)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1399:26
        // NonTerminal Block at Java.ccc:1399:26
        pushOntoLookaheadStack("FinallyBlock", "Java.ccc", 1399, 26);
        currentLookaheadProduction = "Block";
        try {
            if (!check$Block(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$Annotation(boolean scanToEnd) {
        // skipping check
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1411:4
        Token token4 = currentLookaheadToken;
        int remainingLookahead4 = remainingLookahead;
        boolean hitFailure4 = hitFailure;
        boolean passedPredicate4 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1411$4(false)) {
                currentLookaheadToken = token4;
                remainingLookahead = remainingLookahead4;
                hitFailure = hitFailure4;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1413$4(false)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1415$4(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        return false;
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$NormalAnnotation(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1419:20
        if (!scanToken(AT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1419:25
        // NonTerminal Name at Java.ccc:1419:25
        pushOntoLookaheadStack("NormalAnnotation", "Java.ccc", 1419, 25);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1419:30
        if (!scanToken(LPAREN)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 2;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead - 2;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1419:45
        Token token6 = currentLookaheadToken;
        boolean passedPredicate6 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1419$47(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token6;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1419:66
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$MarkerAnnotation(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1421:20
        if (!scanToken(AT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1421:25
        // NonTerminal Name at Java.ccc:1421:25
        pushOntoLookaheadStack("MarkerAnnotation", "Java.ccc", 1421, 25);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$SingleMemberAnnotation(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1423:26
        if (!scanToken(AT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1423:31
        // NonTerminal Name at Java.ccc:1423:31
        pushOntoLookaheadStack("SingleMemberAnnotation", "Java.ccc", 1423, 31);
        currentLookaheadProduction = "Name";
        try {
            if (!check$Name(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1423:36
        if (!scanToken(LPAREN)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1423:50
        // NonTerminal MemberValue at Java.ccc:1423:50
        pushOntoLookaheadStack("SingleMemberAnnotation", "Java.ccc", 1423, 50);
        currentLookaheadProduction = "MemberValue";
        try {
            if (!check$MemberValue(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1423:62
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$MemberValuePairs(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1435:4
        // NonTerminal MemberValuePair at Java.ccc:1435:4
        pushOntoLookaheadStack("MemberValuePairs", "Java.ccc", 1435, 4);
        currentLookaheadProduction = "MemberValuePair";
        try {
            if (!check$MemberValuePair(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:1435:20
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$1435$22(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$MemberValuePair(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1438:20
        if (!scanToken(IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1438:33
        if (!scanToken(ASSIGN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1438:42
        // NonTerminal MemberValue at Java.ccc:1438:42
        pushOntoLookaheadStack("MemberValuePair", "Java.ccc", 1438, 42);
        currentLookaheadProduction = "MemberValue";
        try {
            if (!check$MemberValue(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$MemberValue(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1441:4
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1441$4(false)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1443$4(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1445$4(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        return false;
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$MemberValueArrayInitializer(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1449:3
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1450:3
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1451$6(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1453:3
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$AnnotationTypeDeclaration(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:1458:3
        permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE, ABSTRACT, STATIC, STRICTFP);
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1461:3
        // NonTerminal Modifiers at Java.ccc:1461:3
        pushOntoLookaheadStack("AnnotationTypeDeclaration", "Java.ccc", 1461, 3);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1462:3
        if (!scanToken(AT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1462:8
        if (!scanToken(INTERFACE)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1462:25
        // NonTerminal TypeIdentifier at Java.ccc:1462:25
        pushOntoLookaheadStack("AnnotationTypeDeclaration", "Java.ccc", 1462, 25);
        currentLookaheadProduction = "TypeIdentifier";
        try {
            if (!check$TypeIdentifier(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1462:40
        // NonTerminal AnnotationTypeBody at Java.ccc:1462:40
        pushOntoLookaheadStack("AnnotationTypeDeclaration", "Java.ccc", 1462, 40);
        currentLookaheadProduction = "AnnotationTypeBody";
        try {
            if (!check$AnnotationTypeBody(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$AnnotationTypeBody(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1466:3
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:1466:12
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$1466$14(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1466:49
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$AnnotationMethodDeclaration(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:1470:4
        permissibleModifiers = EnumSet.of(PUBLIC, ABSTRACT);
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1471:4
        // NonTerminal Modifiers at Java.ccc:1471:4
        pushOntoLookaheadStack("AnnotationMethodDeclaration", "Java.ccc", 1471, 4);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1472:4
        // NonTerminal Type at Java.ccc:1472:4
        pushOntoLookaheadStack("AnnotationMethodDeclaration", "Java.ccc", 1472, 4);
        currentLookaheadProduction = "Type";
        try {
            if (!check$Type(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1472:9
        if (!scanToken(IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1472:22
        if (!scanToken(LPAREN)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1472:36
        if (!scanToken(RPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1472:45
        Token token9 = currentLookaheadToken;
        boolean passedPredicate9 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1472$47(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token9;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate9;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1472:62
        if (!scanToken(SEMICOLON)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$AnnotationTypeMemberDeclaration(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1476:3
        Token token2 = currentLookaheadToken;
        int remainingLookahead2 = remainingLookahead;
        boolean hitFailure2 = hitFailure;
        boolean passedPredicate2 = passedPredicate;
        try {
            passedPredicate = false;
            if (!scanToken(SEMICOLON)) {
                currentLookaheadToken = token2;
                remainingLookahead = remainingLookahead2;
                hitFailure = hitFailure2;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1478$3(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1480$3(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$1482$3(false)) {
                            currentLookaheadToken = token2;
                            remainingLookahead = remainingLookahead2;
                            hitFailure = hitFailure2;
                            if (passedPredicate) return false;
                            passedPredicate = false;
                            if (!check$Java_ccc$1484$3(false)) {
                                currentLookaheadToken = token2;
                                remainingLookahead = remainingLookahead2;
                                hitFailure = hitFailure2;
                                if (passedPredicate) return false;
                                passedPredicate = false;
                                if (!check$Java_ccc$1486$3(false)) {
                                    currentLookaheadToken = token2;
                                    remainingLookahead = remainingLookahead2;
                                    hitFailure = hitFailure2;
                                    if (passedPredicate) return false;
                                    passedPredicate = false;
                                    if (!check$Java_ccc$1488$3(false)) {
                                        currentLookaheadToken = token2;
                                        remainingLookahead = remainingLookahead2;
                                        hitFailure = hitFailure2;
                                        return false;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$DefaultValue(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1491:16
        if (!scanToken(_DEFAULT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1491:27
        // NonTerminal MemberValue at Java.ccc:1491:27
        pushOntoLookaheadStack("DefaultValue", "Java.ccc", 1491, 27);
        currentLookaheadProduction = "MemberValue";
        try {
            if (!check$MemberValue(true)) return false;
        } finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$LambdaExpression(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Assertion specified at Java.ccc:1494:3
        if (!(!isInProduction("NewSwitchLabel"))) {
            hitFailure = true;
            return false;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1495:3
        // NonTerminal LambdaLHS at Java.ccc:1495:3
        pushOntoLookaheadStack("LambdaExpression", "Java.ccc", 1495, 3);
        currentLookaheadProduction = "LambdaLHS";
        try {
            if (!check$LambdaLHS(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1495:19
        Token token6 = currentLookaheadToken;
        int remainingLookahead6 = remainingLookahead;
        boolean hitFailure6 = hitFailure;
        boolean passedPredicate6 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1495$19(false)) {
                currentLookaheadToken = token6;
                remainingLookahead = remainingLookahead6;
                hitFailure = hitFailure6;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1495$27(false)) {
                    currentLookaheadToken = token6;
                    remainingLookahead = remainingLookahead6;
                    hitFailure = hitFailure6;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$LambdaLHS(boolean scanToEnd) {
        // skipping check
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1498:14
        Token token4 = currentLookaheadToken;
        int remainingLookahead4 = remainingLookahead;
        boolean hitFailure4 = hitFailure;
        boolean passedPredicate4 = passedPredicate;
        try {
            passedPredicate = false;
            if (!scanToken(IDENTIFIER)) {
                currentLookaheadToken = token4;
                remainingLookahead = remainingLookahead4;
                hitFailure = hitFailure4;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!scanToken(UNDERSCORE)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate) return false;
                    passedPredicate = false;
                    if (!check$Java_ccc$1498$44(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        if (passedPredicate) return false;
                        passedPredicate = false;
                        if (!check$Java_ccc$1498$62(false)) {
                            currentLookaheadToken = token4;
                            remainingLookahead = remainingLookahead4;
                            hitFailure = hitFailure4;
                            return false;
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1498:80
        if (!scanToken(LAMBDA)) return false;
        if (!scanToEnd && lookaheadStack.size() <= 1) {
            if (lookaheadRoutineNesting == 0) {
                remainingLookahead = 0;
            } else if (lookaheadStack.size() == 1) {
                passedPredicateThreshold = remainingLookahead;
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$SimpleLambdaLHS(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1502:4
        if (!scanToken(LPAREN)) return false;
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1502:14
        if (!scanToken(UNDERSCORE, IDENTIFIER)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at Java.ccc:1503:4
        boolean passedPredicate6 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token7 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Java_ccc$1503$5(false)) {
                    if (passedPredicate) return false;
                    currentLookaheadToken = token7;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1504:4
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$LambdaParameters(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1507:20
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrOne specified at Java.ccc:1507:29
        Token token4 = currentLookaheadToken;
        boolean passedPredicate4 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Java_ccc$1507$31(false)) {
                if (passedPredicate) return false;
                currentLookaheadToken = token4;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for Terminal specified at Java.ccc:1507:77
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$LambdaParameter(boolean scanToEnd) {
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at Java.ccc:1510:5
        permissibleModifiers = EnumSet.of(FINAL);
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at Java.ccc:1511:5
        // NonTerminal Modifiers at Java.ccc:1511:5
        pushOntoLookaheadStack("LambdaParameter", "Java.ccc", 1511, 5);
        currentLookaheadProduction = "Modifiers";
        try {
            if (!check$Modifiers(true)) return false;
        } finally {
            popLookaheadStack();
        }
        // skipping check
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at Java.ccc:1513:7
        Token token6 = currentLookaheadToken;
        int remainingLookahead6 = remainingLookahead;
        boolean hitFailure6 = hitFailure;
        boolean passedPredicate6 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Java_ccc$1513$7(false)) {
                currentLookaheadToken = token6;
                remainingLookahead = remainingLookahead6;
                hitFailure = hitFailure6;
                if (passedPredicate) return false;
                passedPredicate = false;
                if (!check$Java_ccc$1516$7(false)) {
                    currentLookaheadToken = token6;
                    remainingLookahead = remainingLookahead6;
                    hitFailure = hitFailure6;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        return true;
    }

    private ArrayList<NonTerminalCall> parsingStack = new ArrayList<>();
    private final ArrayList<NonTerminalCall> lookaheadStack = new ArrayList<>();

    private void pushOntoCallStack(String methodName, String fileName, int line, int column) {
        parsingStack.add(new NonTerminalCall("JavaParser", getToken(1), fileName, methodName, line, column));
    }

    private void popCallStack() {
        NonTerminalCall ntc = parsingStack.remove(parsingStack.size() - 1);
        this.currentlyParsedProduction = ntc.productionName;
    }

    private void restoreCallStack(int prevSize) {
        while (parsingStack.size() > prevSize) {
            popCallStack();
        }
    }

    private ListIterator<NonTerminalCall> stackIteratorBackward() {
        final ListIterator<NonTerminalCall> parseStackIterator = parsingStack.listIterator(parsingStack.size());
        final ListIterator<NonTerminalCall> lookaheadStackIterator = lookaheadStack.listIterator(lookaheadStack.size());
        return new ListIterator<NonTerminalCall>() {

            public boolean hasNext() {
                return lookaheadStackIterator.hasPrevious() || parseStackIterator.hasPrevious();
            }

            public NonTerminalCall next() {
                return lookaheadStackIterator.hasPrevious() ? lookaheadStackIterator.previous() : parseStackIterator.previous();
            }

            public NonTerminalCall previous() {
                return parseStackIterator.hasNext() ? parseStackIterator.next() : lookaheadStackIterator.next();
            }

            public boolean hasPrevious() {
                return parseStackIterator.hasNext() || lookaheadStackIterator.hasNext();
            }

            public void add(NonTerminalCall ntc) {
                throw new UnsupportedOperationException();
            }

            public void set(NonTerminalCall ntc) {
                throw new UnsupportedOperationException();
            }

            public void remove() {
                throw new UnsupportedOperationException();
            }

            public int previousIndex() {
                throw new UnsupportedOperationException();
            }

            public int nextIndex() {
                throw new UnsupportedOperationException();
            }

        };
    }

    private void pushOntoLookaheadStack(String methodName, String fileName, int line, int column) {
        lookaheadStack.add(new NonTerminalCall("JavaParser", getToken(1), fileName, methodName, line, column));
    }

    private void popLookaheadStack() {
        NonTerminalCall ntc = lookaheadStack.remove(lookaheadStack.size() - 1);
        this.currentLookaheadProduction = ntc.productionName;
    }

    void dumpLookaheadStack(PrintStream ps) {
        ListIterator<NonTerminalCall> it = lookaheadStack.listIterator(lookaheadStack.size());
        while (it.hasPrevious()) {
            ps.print(it.previous());
        }
    }

    void dumpCallStack(PrintStream ps) {
        ListIterator<NonTerminalCall> it = parsingStack.listIterator(parsingStack.size());
        while (it.hasPrevious()) {
            ps.print(it.previous());
        }
    }

    void dumpLookaheadCallStack(PrintStream ps) {
        ps.println("Current Parser Production is: " + currentlyParsedProduction);
        ps.println("Current Lookahead Production is: " + currentLookaheadProduction);
        ps.println("---Lookahead Stack---");
        dumpLookaheadStack(ps);
        ps.println("---Call Stack---");
        dumpCallStack(ps);
    }

    public boolean isParserTolerant() {
        return false;
    }

    public void setParserTolerant(boolean tolerantParsing) {
        if (tolerantParsing) {
            throw new UnsupportedOperationException("This parser was not built with that feature!");
        }
    }

    private Token consumeToken(TokenType expectedType) {
        Token nextToken = nextToken(lastConsumedToken);
        if (nextToken.getType() != expectedType) {
            if (typeMatches(expectedType, nextToken)) {
                nextToken = nextToken.replaceType(expectedType);
            } else nextToken = handleUnexpectedTokenType(expectedType, nextToken);
        }
        this.lastConsumedToken = nextToken;
        this.nextTokenType = null;
        if (buildTree && tokensAreNodes) {
            lastConsumedToken.open();
            pushNode(lastConsumedToken);
            lastConsumedToken.close();
        }
        return lastConsumedToken;
    }

    private Token handleUnexpectedTokenType(TokenType expectedType, Token nextToken) {
        throw new ParseException(nextToken, EnumSet.of(expectedType), parsingStack);
    }

    private boolean buildTree = true;
    private boolean tokensAreNodes = true;
    private boolean unparsedTokensAreNodes = false;

    public boolean isTreeBuildingEnabled() {
        return buildTree;
    }

    public void setUnparsedTokensAreNodes(boolean unparsedTokensAreNodes) {
        this.unparsedTokensAreNodes = unparsedTokensAreNodes;
    }

    public void setTokensAreNodes(boolean tokensAreNodes) {
        this.tokensAreNodes = tokensAreNodes;
    }

    NodeScope currentNodeScope = new NodeScope();

    /**
    * @return the root node of the AST. It only makes sense to call
    * this after a successful parse.
    */
    public Node rootNode() {
        return currentNodeScope.rootNode();
    }

    /**
    * push a node onto the top of the node stack
    * @param n the node to push
    */
    public void pushNode(Node n) {
        currentNodeScope.add(n);
    }

    /**
    * @return the node on the top of the stack, and remove it from the
    * stack.
    */
    public Node popNode() {
        return currentNodeScope.pop();
    }

    /**
    * @return the node currently on the top of the tree-building stack.
    */
    public Node peekNode() {
        return currentNodeScope.peek();
    }

    /**
    * Puts the node on the top of the stack. However, unlike pushNode()
    * it replaces the node that is currently on the top of the stack.
    * This is effectively equivalent to popNode() followed by pushNode(n)
    * @param n the node to poke
    */
    public void pokeNode(Node n) {
        currentNodeScope.poke(n);
    }

    /**
    * Replace the type of the last consumed token and poke it onto the
    * stack.
    */
    protected void replaceTokenType(TokenType tt) {
        lastConsumedToken = lastConsumedToken.replaceType(tt);
        pokeNode(lastConsumedToken);
    }

    /**
    * @return the number of Nodes on the tree-building stack in the current node
    * scope.
    */
    public int nodeArity() {
        return currentNodeScope.size();
    }

    private void clearNodeScope() {
        currentNodeScope.clear();
    }

    private void openNodeScope(Node n) {
        new NodeScope();
        if (n != null) {
            n.setTokenSource(lastConsumedToken.getTokenSource());
            // We set the begin/end offsets based on the ending location
            // of the last consumed token. So, we start with a Node
            // of length zero. Typically this is overridden in the
            // closeNodeScope() method, unless this node has no children
            n.setBeginOffset(lastConsumedToken.getEndOffset());
            n.setEndOffset(n.getBeginOffset());
            n.setTokenSource(this.token_source);
            n.open();
        }
    }

    /* A definite node is constructed from a specified number of
    * children.  That number of nodes are popped from the stack and
    * made the children of the definite node.  Then the definite node
    * is pushed on to the stack.
    * @param n is the node whose scope is being closed
    * @param num is the number of child nodes to pop as children
    * @return @{code true}
    */
    private boolean closeNodeScope(Node n, int num) {
        n.setBeginOffset(lastConsumedToken.getEndOffset());
        n.setEndOffset(lastConsumedToken.getEndOffset());
        currentNodeScope.close();
        ArrayList<Node> nodes = new ArrayList<>();
        for (int i = 0; i < num; i++) {
            nodes.add(popNode());
        }
        Collections.reverse(nodes);
        for (Node child : nodes) {
            if (child.getInputSource() == n.getInputSource()) {
                n.setBeginOffset(child.getBeginOffset());
                break;
            }
        }
        for (Node child : nodes) {
            if (unparsedTokensAreNodes && child instanceof Token) {
                Token tok = (Token) child;
                while (tok.previousCachedToken() != null && tok.previousCachedToken().isUnparsed()) {
                    tok = tok.previousCachedToken();
                }
                boolean locationSet = false;
                while (tok.isUnparsed()) {
                    n.add(tok);
                    if (!locationSet && tok.getInputSource() == n.getInputSource() && tok.getBeginOffset() < n.getBeginOffset()) {
                        n.setBeginOffset(tok.getBeginOffset());
                        locationSet = true;
                    }
                    tok = tok.nextCachedToken();
                }
            }
            if (child.getInputSource() == n.getInputSource()) {
                n.setEndOffset(child.getEndOffset());
            }
            n.add(child);
        }
        n.close();
        pushNode(n);
        return true;
    }

    /**
    * A conditional node is constructed if the condition is true.  All
    * the nodes that have been pushed since the node was opened are
    * made children of the conditional node, which is then pushed
    * on to the stack.  If the condition is false the node is not
    * constructed and they are left on the stack.
    */
    private boolean closeNodeScope(Node n, boolean condition) {
        if (n == null || !condition) {
            currentNodeScope.close();
            return false;
        }
        return closeNodeScope(n, nodeArity());
    }

    public boolean getBuildTree() {
        return buildTree;
    }

    public void setBuildTree(boolean buildTree) {
        this.buildTree = buildTree;
    }


    @SuppressWarnings("serial")
    class NodeScope extends ArrayList<Node> {
        NodeScope parentScope;

        NodeScope() {
            this.parentScope = JavaParser.this.currentNodeScope;
            JavaParser.this.currentNodeScope = this;
        }

        boolean isRootScope() {
            return parentScope == null;
        }

        Node rootNode() {
            NodeScope ns = this;
            while (ns.parentScope != null) {
                ns = ns.parentScope;
            }
            return ns.isEmpty() ? null : ns.get(0);
        }

        Node peek() {
            if (isEmpty()) {
                return parentScope == null ? null : parentScope.peek();
            }
            return get(size() - 1);
        }

        Node pop() {
            return isEmpty() ? parentScope.pop() : remove(size() - 1);
        }

        void poke(Node n) {
            if (isEmpty()) {
                parentScope.poke(n);
            } else {
                set(size() - 1, n);
            }
        }

        void close() {
            parentScope.addAll(this);
            JavaParser.this.currentNodeScope = parentScope;
        }

        int nestingLevel() {
            int result = 0;
            NodeScope parent = this;
            while (parent.parentScope != null) {
                result++;
                parent = parent.parentScope;
            }
            return result;
        }

        public NodeScope clone() {
            NodeScope clone = (NodeScope) super.clone();
            if (parentScope != null) {
                clone.parentScope = parentScope.clone();
            }
            return clone;
        }

    }

}


